
ATSAMG_mcu_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fd04  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040fd04  0040fd04  0001fd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d28  20000000  0040fd0c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00021550  20000d28  00410a34  00020d28  2**2
                  ALLOC
  4 .stack        00003000  20022278  00431f84  00020d28  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020d28  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020d56  2**0
                  CONTENTS, READONLY
  7 .debug_info   00035852  00000000  00000000  00020daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000070c7  00000000  00000000  00056601  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000012c8  00000000  00000000  0005d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001e7be  00000000  00000000  0005e990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001d744  00000000  00000000  0007d14e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0005d642  00000000  00000000  0009a892  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000f6cb  00000000  00000000  000f7ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012a0  00000000  00000000  0010759f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004860  00000000  00000000  00108840  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	78 52 02 20 6d 4b 40 00 6b 4b 40 00 6b 4b 40 00     xR. mK@.kK@.kK@.
  400010:	6b 4b 40 00 6b 4b 40 00 6b 4b 40 00 00 00 00 00     kK@.kK@.kK@.....
	...
  40002c:	65 08 40 00 6b 4b 40 00 00 00 00 00 21 09 40 00     e.@.kK@.....!.@.
  40003c:	79 09 40 00 6b 4b 40 00 6b 4b 40 00 6b 4b 40 00     y.@.kK@.kK@.kK@.
  40004c:	6b 4b 40 00 6b 4b 40 00 6b 4b 40 00 6b 4b 40 00     kK@.kK@.kK@.kK@.
  40005c:	6b 4b 40 00 b5 44 40 00 6b 4b 40 00 00 00 00 00     kK@..D@.kK@.....
  40006c:	29 04 40 00 3d 04 40 00 6b 4b 40 00 6b 4b 40 00     ).@.=.@.kK@.kK@.
  40007c:	6b 4b 40 00 6b 4b 40 00 6b 4b 40 00 6b 4b 40 00     kK@.kK@.kK@.kK@.
  40008c:	6b 4b 40 00 6b 4b 40 00 6b 4b 40 00 6b 4b 40 00     kK@.kK@.kK@.kK@.
  40009c:	6b 4b 40 00 6b 4b 40 00 6b 4b 40 00 6b 4b 40 00     kK@.kK@.kK@.kK@.
  4000ac:	6b 4b 40 00 6b 4b 40 00 6b 4b 40 00 6b 4b 40 00     kK@.kK@.kK@.kK@.
	...
  4000fc:	6b 4b 40 00 6b 4b 40 00 6b 4b 40 00 00 00 00 00     kK@.kK@.kK@.....
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	20000d28 	.word	0x20000d28
  400164:	00000000 	.word	0x00000000
  400168:	0040fd0c 	.word	0x0040fd0c

0040016c <frame_dummy>:
  40016c:	4b0c      	ldr	r3, [pc, #48]	; (4001a0 <frame_dummy+0x34>)
  40016e:	b143      	cbz	r3, 400182 <frame_dummy+0x16>
  400170:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x38>)
  400172:	490d      	ldr	r1, [pc, #52]	; (4001a8 <frame_dummy+0x3c>)
  400174:	b510      	push	{r4, lr}
  400176:	f3af 8000 	nop.w
  40017a:	480c      	ldr	r0, [pc, #48]	; (4001ac <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b923      	cbnz	r3, 40018a <frame_dummy+0x1e>
  400180:	bd10      	pop	{r4, pc}
  400182:	480a      	ldr	r0, [pc, #40]	; (4001ac <frame_dummy+0x40>)
  400184:	6803      	ldr	r3, [r0, #0]
  400186:	b933      	cbnz	r3, 400196 <frame_dummy+0x2a>
  400188:	4770      	bx	lr
  40018a:	4b09      	ldr	r3, [pc, #36]	; (4001b0 <frame_dummy+0x44>)
  40018c:	2b00      	cmp	r3, #0
  40018e:	d0f7      	beq.n	400180 <frame_dummy+0x14>
  400190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400194:	4718      	bx	r3
  400196:	4b06      	ldr	r3, [pc, #24]	; (4001b0 <frame_dummy+0x44>)
  400198:	2b00      	cmp	r3, #0
  40019a:	d0f5      	beq.n	400188 <frame_dummy+0x1c>
  40019c:	4718      	bx	r3
  40019e:	bf00      	nop
  4001a0:	00000000 	.word	0x00000000
  4001a4:	0040fd0c 	.word	0x0040fd0c
  4001a8:	20000d2c 	.word	0x20000d2c
  4001ac:	0040fd0c 	.word	0x0040fd0c
  4001b0:	00000000 	.word	0x00000000

004001b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001b8:	b980      	cbnz	r0, 4001dc <_read+0x28>
  4001ba:	460c      	mov	r4, r1
  4001bc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001be:	2a00      	cmp	r2, #0
  4001c0:	dd0f      	ble.n	4001e2 <_read+0x2e>
  4001c2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001c4:	4e08      	ldr	r6, [pc, #32]	; (4001e8 <_read+0x34>)
  4001c6:	4d09      	ldr	r5, [pc, #36]	; (4001ec <_read+0x38>)
  4001c8:	6830      	ldr	r0, [r6, #0]
  4001ca:	4621      	mov	r1, r4
  4001cc:	682b      	ldr	r3, [r5, #0]
  4001ce:	4798      	blx	r3
		ptr++;
  4001d0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001d2:	42bc      	cmp	r4, r7
  4001d4:	d1f8      	bne.n	4001c8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001d6:	4640      	mov	r0, r8
  4001d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001dc:	f04f 38ff 	mov.w	r8, #4294967295
  4001e0:	e7f9      	b.n	4001d6 <_read+0x22>
	for (; len > 0; --len) {
  4001e2:	4680      	mov	r8, r0
  4001e4:	e7f7      	b.n	4001d6 <_read+0x22>
  4001e6:	bf00      	nop
  4001e8:	2001a1e0 	.word	0x2001a1e0
  4001ec:	2001a16c 	.word	0x2001a16c

004001f0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4001f0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4001f2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4001f6:	d01f      	beq.n	400238 <pio_set_peripheral+0x48>
  4001f8:	d814      	bhi.n	400224 <pio_set_peripheral+0x34>
  4001fa:	b191      	cbz	r1, 400222 <pio_set_peripheral+0x32>
  4001fc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400200:	d123      	bne.n	40024a <pio_set_peripheral+0x5a>
{
  400202:	b410      	push	{r4}
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400204:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400206:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400208:	43d3      	mvns	r3, r2
  40020a:	4021      	ands	r1, r4
  40020c:	461c      	mov	r4, r3
  40020e:	4019      	ands	r1, r3
  400210:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400212:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400214:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400216:	400b      	ands	r3, r1
  400218:	4023      	ands	r3, r4
  40021a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40021c:	6042      	str	r2, [r0, #4]
}
  40021e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400222:	4770      	bx	lr
	switch (ul_type) {
  400224:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400228:	d0fb      	beq.n	400222 <pio_set_peripheral+0x32>
  40022a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40022e:	d0f8      	beq.n	400222 <pio_set_peripheral+0x32>
  400230:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400234:	d109      	bne.n	40024a <pio_set_peripheral+0x5a>
  400236:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400238:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40023a:	4313      	orrs	r3, r2
  40023c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40023e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400240:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400242:	400b      	ands	r3, r1
  400244:	ea23 0302 	bic.w	r3, r3, r2
  400248:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40024a:	6042      	str	r2, [r0, #4]
  40024c:	4770      	bx	lr

0040024e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40024e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400250:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400254:	bf14      	ite	ne
  400256:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400258:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40025a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40025e:	bf14      	ite	ne
  400260:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  400262:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  400264:	f012 0f02 	tst.w	r2, #2
  400268:	d107      	bne.n	40027a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40026a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40026e:	bf18      	it	ne
  400270:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  400274:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400276:	6001      	str	r1, [r0, #0]
  400278:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  40027a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40027e:	e7f9      	b.n	400274 <pio_set_input+0x26>

00400280 <pio_set_output>:
{
  400280:	b410      	push	{r4}
  400282:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400284:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400286:	b94c      	cbnz	r4, 40029c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400288:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40028a:	b14b      	cbz	r3, 4002a0 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40028c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40028e:	b94a      	cbnz	r2, 4002a4 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400290:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400292:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400294:	6001      	str	r1, [r0, #0]
}
  400296:	f85d 4b04 	ldr.w	r4, [sp], #4
  40029a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40029c:	6641      	str	r1, [r0, #100]	; 0x64
  40029e:	e7f4      	b.n	40028a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4002a0:	6541      	str	r1, [r0, #84]	; 0x54
  4002a2:	e7f4      	b.n	40028e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4002a4:	6301      	str	r1, [r0, #48]	; 0x30
  4002a6:	e7f4      	b.n	400292 <pio_set_output+0x12>

004002a8 <pio_configure>:
{
  4002a8:	b570      	push	{r4, r5, r6, lr}
  4002aa:	b082      	sub	sp, #8
  4002ac:	4605      	mov	r5, r0
  4002ae:	4616      	mov	r6, r2
  4002b0:	461c      	mov	r4, r3
	switch (ul_type) {
  4002b2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4002b6:	d02a      	beq.n	40030e <pio_configure+0x66>
  4002b8:	d807      	bhi.n	4002ca <pio_configure+0x22>
  4002ba:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4002be:	d01a      	beq.n	4002f6 <pio_configure+0x4e>
  4002c0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4002c4:	d017      	beq.n	4002f6 <pio_configure+0x4e>
		return 0;
  4002c6:	2000      	movs	r0, #0
  4002c8:	e01f      	b.n	40030a <pio_configure+0x62>
	switch (ul_type) {
  4002ca:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4002ce:	d002      	beq.n	4002d6 <pio_configure+0x2e>
  4002d0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4002d4:	d1f7      	bne.n	4002c6 <pio_configure+0x1e>
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4002d6:	f004 0301 	and.w	r3, r4, #1
  4002da:	9300      	str	r3, [sp, #0]
  4002dc:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4002e0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4002e4:	bf14      	ite	ne
  4002e6:	2200      	movne	r2, #0
  4002e8:	2201      	moveq	r2, #1
  4002ea:	4631      	mov	r1, r6
  4002ec:	4628      	mov	r0, r5
  4002ee:	4c0b      	ldr	r4, [pc, #44]	; (40031c <pio_configure+0x74>)
  4002f0:	47a0      	blx	r4
	return 1;
  4002f2:	2001      	movs	r0, #1
		break;
  4002f4:	e009      	b.n	40030a <pio_configure+0x62>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4002f6:	4632      	mov	r2, r6
  4002f8:	4628      	mov	r0, r5
  4002fa:	4b09      	ldr	r3, [pc, #36]	; (400320 <pio_configure+0x78>)
  4002fc:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4002fe:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400302:	bf14      	ite	ne
  400304:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400306:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400308:	2001      	movs	r0, #1
}
  40030a:	b002      	add	sp, #8
  40030c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_attribute);
  40030e:	461a      	mov	r2, r3
  400310:	4631      	mov	r1, r6
  400312:	4b04      	ldr	r3, [pc, #16]	; (400324 <pio_configure+0x7c>)
  400314:	4798      	blx	r3
	return 1;
  400316:	2001      	movs	r0, #1
		break;
  400318:	e7f7      	b.n	40030a <pio_configure+0x62>
  40031a:	bf00      	nop
  40031c:	00400281 	.word	0x00400281
  400320:	004001f1 	.word	0x004001f1
  400324:	0040024f 	.word	0x0040024f

00400328 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400328:	f012 0f10 	tst.w	r2, #16
  40032c:	d010      	beq.n	400350 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
  40032e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400332:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
  400336:	bf14      	ite	ne
  400338:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
  40033c:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
  400340:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
  400344:	bf14      	ite	ne
  400346:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
  40034a:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  40034e:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400350:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400354:	4770      	bx	lr

00400356 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400356:	6401      	str	r1, [r0, #64]	; 0x40
  400358:	4770      	bx	lr

0040035a <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  40035a:	6441      	str	r1, [r0, #68]	; 0x44
  40035c:	4770      	bx	lr

0040035e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40035e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400360:	4770      	bx	lr

00400362 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400362:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400364:	4770      	bx	lr
	...

00400368 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40036c:	4604      	mov	r4, r0
  40036e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;
	
	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400370:	4b0e      	ldr	r3, [pc, #56]	; (4003ac <pio_handler_process+0x44>)
  400372:	4798      	blx	r3
  400374:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400376:	4620      	mov	r0, r4
  400378:	4b0d      	ldr	r3, [pc, #52]	; (4003b0 <pio_handler_process+0x48>)
  40037a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40037c:	4005      	ands	r5, r0
  40037e:	d013      	beq.n	4003a8 <pio_handler_process+0x40>
  400380:	4c0c      	ldr	r4, [pc, #48]	; (4003b4 <pio_handler_process+0x4c>)
  400382:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400386:	e003      	b.n	400390 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400388:	42b4      	cmp	r4, r6
  40038a:	d00d      	beq.n	4003a8 <pio_handler_process+0x40>
  40038c:	3410      	adds	r4, #16
		while (status != 0) {
  40038e:	b15d      	cbz	r5, 4003a8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400390:	6820      	ldr	r0, [r4, #0]
  400392:	4540      	cmp	r0, r8
  400394:	d1f8      	bne.n	400388 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400396:	6861      	ldr	r1, [r4, #4]
  400398:	4229      	tst	r1, r5
  40039a:	d0f5      	beq.n	400388 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40039c:	68e3      	ldr	r3, [r4, #12]
  40039e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4003a0:	6863      	ldr	r3, [r4, #4]
  4003a2:	ea25 0503 	bic.w	r5, r5, r3
  4003a6:	e7ef      	b.n	400388 <pio_handler_process+0x20>
  4003a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4003ac:	0040035f 	.word	0x0040035f
  4003b0:	00400363 	.word	0x00400363
  4003b4:	20000d44 	.word	0x20000d44

004003b8 <pio_handler_set>:
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
//uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
//		uint32_t ul_attr, void (*p_handler) (void*, int))
{
  4003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4003ba:	4c18      	ldr	r4, [pc, #96]	; (40041c <pio_handler_set+0x64>)
  4003bc:	6826      	ldr	r6, [r4, #0]
  4003be:	2e06      	cmp	r6, #6
  4003c0:	d829      	bhi.n	400416 <pio_handler_set+0x5e>
  4003c2:	f04f 0c00 	mov.w	ip, #0
  4003c6:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4003c8:	4f15      	ldr	r7, [pc, #84]	; (400420 <pio_handler_set+0x68>)
  4003ca:	e004      	b.n	4003d6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4003cc:	3401      	adds	r4, #1
  4003ce:	b2e4      	uxtb	r4, r4
  4003d0:	46a4      	mov	ip, r4
  4003d2:	42a6      	cmp	r6, r4
  4003d4:	d309      	bcc.n	4003ea <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4003d6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4003d8:	0125      	lsls	r5, r4, #4
  4003da:	597d      	ldr	r5, [r7, r5]
  4003dc:	428d      	cmp	r5, r1
  4003de:	d1f5      	bne.n	4003cc <pio_handler_set+0x14>
  4003e0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4003e4:	686d      	ldr	r5, [r5, #4]
  4003e6:	4295      	cmp	r5, r2
  4003e8:	d1f0      	bne.n	4003cc <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4003ea:	4d0d      	ldr	r5, [pc, #52]	; (400420 <pio_handler_set+0x68>)
  4003ec:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4003f0:	eb05 040e 	add.w	r4, r5, lr
  4003f4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4003f8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4003fa:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4003fc:	9906      	ldr	r1, [sp, #24]
  4003fe:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400400:	3601      	adds	r6, #1
  400402:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  400404:	bf04      	itt	eq
  400406:	4905      	ldreq	r1, [pc, #20]	; (40041c <pio_handler_set+0x64>)
  400408:	600e      	streq	r6, [r1, #0]
  40040a:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40040c:	461a      	mov	r2, r3
  40040e:	4b05      	ldr	r3, [pc, #20]	; (400424 <pio_handler_set+0x6c>)
  400410:	4798      	blx	r3

	return 0;
  400412:	2000      	movs	r0, #0
  400414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  400416:	2001      	movs	r0, #1
}
  400418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40041a:	bf00      	nop
  40041c:	20000db4 	.word	0x20000db4
  400420:	20000d44 	.word	0x20000d44
  400424:	00400329 	.word	0x00400329

00400428 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400428:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40042a:	210b      	movs	r1, #11
  40042c:	4801      	ldr	r0, [pc, #4]	; (400434 <PIOA_Handler+0xc>)
  40042e:	4b02      	ldr	r3, [pc, #8]	; (400438 <PIOA_Handler+0x10>)
  400430:	4798      	blx	r3
  400432:	bd08      	pop	{r3, pc}
  400434:	400e0e00 	.word	0x400e0e00
  400438:	00400369 	.word	0x00400369

0040043c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40043c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40043e:	210c      	movs	r1, #12
  400440:	4801      	ldr	r0, [pc, #4]	; (400448 <PIOB_Handler+0xc>)
  400442:	4b02      	ldr	r3, [pc, #8]	; (40044c <PIOB_Handler+0x10>)
  400444:	4798      	blx	r3
  400446:	bd08      	pop	{r3, pc}
  400448:	400e1000 	.word	0x400e1000
  40044c:	00400369 	.word	0x00400369

00400450 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  400450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400452:	4605      	mov	r5, r0
  400454:	460c      	mov	r4, r1
  400456:	4617      	mov	r7, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  400458:	4b18      	ldr	r3, [pc, #96]	; (4004bc <pio_handler_set_priority+0x6c>)
  40045a:	4798      	blx	r3
  40045c:	4606      	mov	r6, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40045e:	f04f 31ff 	mov.w	r1, #4294967295
  400462:	4628      	mov	r0, r5
  400464:	4b16      	ldr	r3, [pc, #88]	; (4004c0 <pio_handler_set_priority+0x70>)
  400466:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  400468:	4628      	mov	r0, r5
  40046a:	4b16      	ldr	r3, [pc, #88]	; (4004c4 <pio_handler_set_priority+0x74>)
  40046c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40046e:	b2e2      	uxtb	r2, r4
  400470:	f002 031f 	and.w	r3, r2, #31
  400474:	2101      	movs	r1, #1
  400476:	4099      	lsls	r1, r3
  400478:	0963      	lsrs	r3, r4, #5
  40047a:	009b      	lsls	r3, r3, #2
  40047c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  400480:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  400484:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400488:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  40048c:	2c00      	cmp	r4, #0
  40048e:	db0d      	blt.n	4004ac <pio_handler_set_priority+0x5c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400490:	013f      	lsls	r7, r7, #4
  400492:	b2ff      	uxtb	r7, r7
  400494:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  400498:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  40049c:	f884 7300 	strb.w	r7, [r4, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4004a0:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4004a2:	4631      	mov	r1, r6
  4004a4:	4628      	mov	r0, r5
  4004a6:	4b08      	ldr	r3, [pc, #32]	; (4004c8 <pio_handler_set_priority+0x78>)
  4004a8:	4798      	blx	r3
  4004aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4004ac:	f002 020f 	and.w	r2, r2, #15
  4004b0:	013f      	lsls	r7, r7, #4
  4004b2:	b2ff      	uxtb	r7, r7
  4004b4:	4805      	ldr	r0, [pc, #20]	; (4004cc <pio_handler_set_priority+0x7c>)
  4004b6:	5487      	strb	r7, [r0, r2]
  4004b8:	e7f2      	b.n	4004a0 <pio_handler_set_priority+0x50>
  4004ba:	bf00      	nop
  4004bc:	00400363 	.word	0x00400363
  4004c0:	0040035b 	.word	0x0040035b
  4004c4:	0040035f 	.word	0x0040035f
  4004c8:	00400357 	.word	0x00400357
  4004cc:	e000ed14 	.word	0xe000ed14

004004d0 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4004d0:	6843      	ldr	r3, [r0, #4]
  4004d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
  4004d6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4004d8:	6843      	ldr	r3, [r0, #4]
  4004da:	0409      	lsls	r1, r1, #16
  4004dc:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  4004e0:	4319      	orrs	r1, r3
  4004e2:	6041      	str	r1, [r0, #4]
  4004e4:	4770      	bx	lr

004004e6 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4004e6:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4004e8:	f643 2399 	movw	r3, #15001	; 0x3a99
  4004ec:	6904      	ldr	r4, [r0, #16]
  4004ee:	f014 0f01 	tst.w	r4, #1
  4004f2:	d103      	bne.n	4004fc <spi_read+0x16>
		if (!timeout--) {
  4004f4:	3b01      	subs	r3, #1
  4004f6:	d1f9      	bne.n	4004ec <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  4004f8:	2001      	movs	r0, #1
  4004fa:	e009      	b.n	400510 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  4004fc:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4004fe:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  400500:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  400504:	bf1c      	itt	ne
  400506:	f3c3 4003 	ubfxne	r0, r3, #16, #4
  40050a:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  40050c:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  40050e:	2000      	movs	r0, #0
}
  400510:	f85d 4b04 	ldr.w	r4, [sp], #4
  400514:	4770      	bx	lr

00400516 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400516:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400518:	f643 2499 	movw	r4, #15001	; 0x3a99
  40051c:	6905      	ldr	r5, [r0, #16]
  40051e:	f015 0f02 	tst.w	r5, #2
  400522:	d103      	bne.n	40052c <spi_write+0x16>
		if (!timeout--) {
  400524:	3c01      	subs	r4, #1
  400526:	d1f9      	bne.n	40051c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400528:	2001      	movs	r0, #1
  40052a:	e00c      	b.n	400546 <spi_write+0x30>
  40052c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40052e:	f014 0f02 	tst.w	r4, #2
  400532:	d006      	beq.n	400542 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400534:	0412      	lsls	r2, r2, #16
  400536:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40053a:	4311      	orrs	r1, r2
		if (uc_last) {
  40053c:	b10b      	cbz	r3, 400542 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40053e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400542:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400544:	2000      	movs	r0, #0
}
  400546:	bc30      	pop	{r4, r5}
  400548:	4770      	bx	lr

0040054a <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40054a:	b932      	cbnz	r2, 40055a <spi_set_clock_polarity+0x10>
  40054c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400550:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400552:	f023 0301 	bic.w	r3, r3, #1
  400556:	6303      	str	r3, [r0, #48]	; 0x30
  400558:	4770      	bx	lr
  40055a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40055e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400560:	f043 0301 	orr.w	r3, r3, #1
  400564:	6303      	str	r3, [r0, #48]	; 0x30
  400566:	4770      	bx	lr

00400568 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400568:	b932      	cbnz	r2, 400578 <spi_set_clock_phase+0x10>
  40056a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40056e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400570:	f023 0302 	bic.w	r3, r3, #2
  400574:	6303      	str	r3, [r0, #48]	; 0x30
  400576:	4770      	bx	lr
  400578:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40057c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40057e:	f043 0302 	orr.w	r3, r3, #2
  400582:	6303      	str	r3, [r0, #48]	; 0x30
  400584:	4770      	bx	lr

00400586 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400586:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40058a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40058c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400590:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400592:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400594:	431a      	orrs	r2, r3
  400596:	630a      	str	r2, [r1, #48]	; 0x30
  400598:	4770      	bx	lr

0040059a <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  40059a:	b17a      	cbz	r2, 4005bc <spi_set_baudrate_div+0x22>
{
  40059c:	b410      	push	{r4}
  40059e:	4614      	mov	r4, r2
  4005a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4005a4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4005a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4005aa:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4005ac:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4005ae:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4005b2:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4005b4:	2000      	movs	r0, #0
}
  4005b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005ba:	4770      	bx	lr
        return -1;
  4005bc:	f04f 30ff 	mov.w	r0, #4294967295
  4005c0:	4770      	bx	lr

004005c2 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4005c2:	b410      	push	{r4}
  4005c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4005c8:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4005ca:	b280      	uxth	r0, r0
  4005cc:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4005ce:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4005d0:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4005d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4005d8:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4005da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005de:	4770      	bx	lr

004005e0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4005e0:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4005e2:	010b      	lsls	r3, r1, #4
  4005e4:	4293      	cmp	r3, r2
  4005e6:	d914      	bls.n	400612 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4005e8:	00c9      	lsls	r1, r1, #3
  4005ea:	084b      	lsrs	r3, r1, #1
  4005ec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4005f0:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4005f4:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4005f6:	1e5c      	subs	r4, r3, #1
  4005f8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4005fc:	428c      	cmp	r4, r1
  4005fe:	d901      	bls.n	400604 <usart_set_async_baudrate+0x24>
		return 1;
  400600:	2001      	movs	r0, #1
  400602:	e017      	b.n	400634 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400604:	6841      	ldr	r1, [r0, #4]
  400606:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40060a:	6041      	str	r1, [r0, #4]
  40060c:	e00c      	b.n	400628 <usart_set_async_baudrate+0x48>
		return 1;
  40060e:	2001      	movs	r0, #1
  400610:	e010      	b.n	400634 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400612:	0859      	lsrs	r1, r3, #1
  400614:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400618:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40061c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40061e:	1e5c      	subs	r4, r3, #1
  400620:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400624:	428c      	cmp	r4, r1
  400626:	d8f2      	bhi.n	40060e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400628:	0412      	lsls	r2, r2, #16
  40062a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40062e:	431a      	orrs	r2, r3
  400630:	6202      	str	r2, [r0, #32]

	return 0;
  400632:	2000      	movs	r0, #0
}
  400634:	f85d 4b04 	ldr.w	r4, [sp], #4
  400638:	4770      	bx	lr
	...

0040063c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40063c:	4b08      	ldr	r3, [pc, #32]	; (400660 <usart_reset+0x24>)
  40063e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400642:	2300      	movs	r3, #0
  400644:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400646:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400648:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40064a:	2388      	movs	r3, #136	; 0x88
  40064c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40064e:	2324      	movs	r3, #36	; 0x24
  400650:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400652:	f44f 7380 	mov.w	r3, #256	; 0x100
  400656:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400658:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40065c:	6003      	str	r3, [r0, #0]
  40065e:	4770      	bx	lr
  400660:	55534100 	.word	0x55534100

00400664 <usart_init_rs232>:
{
  400664:	b570      	push	{r4, r5, r6, lr}
  400666:	4605      	mov	r5, r0
  400668:	460c      	mov	r4, r1
  40066a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40066c:	4b0f      	ldr	r3, [pc, #60]	; (4006ac <usart_init_rs232+0x48>)
  40066e:	4798      	blx	r3
	ul_reg_val = 0;
  400670:	2200      	movs	r2, #0
  400672:	4b0f      	ldr	r3, [pc, #60]	; (4006b0 <usart_init_rs232+0x4c>)
  400674:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400676:	b1a4      	cbz	r4, 4006a2 <usart_init_rs232+0x3e>
  400678:	4632      	mov	r2, r6
  40067a:	6821      	ldr	r1, [r4, #0]
  40067c:	4628      	mov	r0, r5
  40067e:	4b0d      	ldr	r3, [pc, #52]	; (4006b4 <usart_init_rs232+0x50>)
  400680:	4798      	blx	r3
  400682:	4602      	mov	r2, r0
  400684:	b978      	cbnz	r0, 4006a6 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400686:	6863      	ldr	r3, [r4, #4]
  400688:	68a1      	ldr	r1, [r4, #8]
  40068a:	430b      	orrs	r3, r1
  40068c:	6921      	ldr	r1, [r4, #16]
  40068e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400690:	68e1      	ldr	r1, [r4, #12]
  400692:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400694:	4906      	ldr	r1, [pc, #24]	; (4006b0 <usart_init_rs232+0x4c>)
  400696:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400698:	6869      	ldr	r1, [r5, #4]
  40069a:	430b      	orrs	r3, r1
  40069c:	606b      	str	r3, [r5, #4]
}
  40069e:	4610      	mov	r0, r2
  4006a0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4006a2:	2201      	movs	r2, #1
  4006a4:	e7fb      	b.n	40069e <usart_init_rs232+0x3a>
  4006a6:	2201      	movs	r2, #1
  4006a8:	e7f9      	b.n	40069e <usart_init_rs232+0x3a>
  4006aa:	bf00      	nop
  4006ac:	0040063d 	.word	0x0040063d
  4006b0:	20000db8 	.word	0x20000db8
  4006b4:	004005e1 	.word	0x004005e1

004006b8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4006b8:	2340      	movs	r3, #64	; 0x40
  4006ba:	6003      	str	r3, [r0, #0]
  4006bc:	4770      	bx	lr

004006be <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4006be:	2310      	movs	r3, #16
  4006c0:	6003      	str	r3, [r0, #0]
  4006c2:	4770      	bx	lr

004006c4 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  4006c4:	6081      	str	r1, [r0, #8]
  4006c6:	4770      	bx	lr

004006c8 <usart_get_status>:
	return p_usart->US_CSR;
  4006c8:	6940      	ldr	r0, [r0, #20]
}
  4006ca:	4770      	bx	lr

004006cc <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4006cc:	6943      	ldr	r3, [r0, #20]
  4006ce:	f013 0f02 	tst.w	r3, #2
   	p_usart->US_THR = US_THR_TXCHR(c);
  4006d2:	bf1d      	ittte	ne
  4006d4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4006d8:	61c1      	strne	r1, [r0, #28]
	return 0;
  4006da:	2000      	movne	r0, #0
		return 1;
  4006dc:	2001      	moveq	r0, #1
}
  4006de:	4770      	bx	lr

004006e0 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4006e0:	6943      	ldr	r3, [r0, #20]
  4006e2:	f013 0f01 	tst.w	r3, #1
  4006e6:	d005      	beq.n	4006f4 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4006e8:	6983      	ldr	r3, [r0, #24]
  4006ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4006ee:	600b      	str	r3, [r1, #0]
	return 0;
  4006f0:	2000      	movs	r0, #0
  4006f2:	4770      	bx	lr
		return 1;
  4006f4:	2001      	movs	r0, #1
}
  4006f6:	4770      	bx	lr

004006f8 <usart_get_pdc_base>:
	if (p_usart == USART0) {
  4006f8:	4b18      	ldr	r3, [pc, #96]	; (40075c <usart_get_pdc_base+0x64>)
  4006fa:	4298      	cmp	r0, r3
  4006fc:	d01f      	beq.n	40073e <usart_get_pdc_base+0x46>
	else if (p_usart == USART1) {
  4006fe:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
  400702:	4298      	cmp	r0, r3
  400704:	d01d      	beq.n	400742 <usart_get_pdc_base+0x4a>
	else if (p_usart == USART2) {
  400706:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  40070a:	4298      	cmp	r0, r3
  40070c:	d01b      	beq.n	400746 <usart_get_pdc_base+0x4e>
	else if (p_usart == USART3) {
  40070e:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
  400712:	4298      	cmp	r0, r3
  400714:	d019      	beq.n	40074a <usart_get_pdc_base+0x52>
	else if (p_usart == USART4) {
  400716:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  40071a:	4298      	cmp	r0, r3
  40071c:	d017      	beq.n	40074e <usart_get_pdc_base+0x56>
	else if (p_usart == USART5) {
  40071e:	f5a3 33a0 	sub.w	r3, r3, #81920	; 0x14000
  400722:	4298      	cmp	r0, r3
  400724:	d015      	beq.n	400752 <usart_get_pdc_base+0x5a>
	else if (p_usart == USART6) {
  400726:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
  40072a:	4298      	cmp	r0, r3
  40072c:	d013      	beq.n	400756 <usart_get_pdc_base+0x5e>
	return p_pdc_base;
  40072e:	f5a3 433f 	sub.w	r3, r3, #48896	; 0xbf00
  400732:	4a0b      	ldr	r2, [pc, #44]	; (400760 <usart_get_pdc_base+0x68>)
  400734:	4290      	cmp	r0, r2
  400736:	bf0c      	ite	eq
  400738:	4618      	moveq	r0, r3
  40073a:	2000      	movne	r0, #0
  40073c:	4770      	bx	lr
		return p_pdc_base;
  40073e:	4809      	ldr	r0, [pc, #36]	; (400764 <usart_get_pdc_base+0x6c>)
  400740:	4770      	bx	lr
		return p_pdc_base;
  400742:	4809      	ldr	r0, [pc, #36]	; (400768 <usart_get_pdc_base+0x70>)
  400744:	4770      	bx	lr
		return p_pdc_base;
  400746:	4809      	ldr	r0, [pc, #36]	; (40076c <usart_get_pdc_base+0x74>)
  400748:	4770      	bx	lr
		return p_pdc_base;
  40074a:	4809      	ldr	r0, [pc, #36]	; (400770 <usart_get_pdc_base+0x78>)
  40074c:	4770      	bx	lr
		return p_pdc_base;
  40074e:	4809      	ldr	r0, [pc, #36]	; (400774 <usart_get_pdc_base+0x7c>)
  400750:	4770      	bx	lr
		return p_pdc_base;
  400752:	4809      	ldr	r0, [pc, #36]	; (400778 <usart_get_pdc_base+0x80>)
  400754:	4770      	bx	lr
		return p_pdc_base;
  400756:	4809      	ldr	r0, [pc, #36]	; (40077c <usart_get_pdc_base+0x84>)
}
  400758:	4770      	bx	lr
  40075a:	bf00      	nop
  40075c:	4000c200 	.word	0x4000c200
  400760:	40034200 	.word	0x40034200
  400764:	4000c300 	.word	0x4000c300
  400768:	40020300 	.word	0x40020300
  40076c:	40024300 	.word	0x40024300
  400770:	40018300 	.word	0x40018300
  400774:	4001c300 	.word	0x4001c300
  400778:	40008300 	.word	0x40008300
  40077c:	40040300 	.word	0x40040300

00400780 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400780:	f100 0308 	add.w	r3, r0, #8
  400784:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400786:	f04f 32ff 	mov.w	r2, #4294967295
  40078a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40078c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40078e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400790:	2300      	movs	r3, #0
  400792:	6003      	str	r3, [r0, #0]
  400794:	4770      	bx	lr

00400796 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400796:	2300      	movs	r3, #0
  400798:	6103      	str	r3, [r0, #16]
  40079a:	4770      	bx	lr

0040079c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40079c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40079e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4007a0:	689a      	ldr	r2, [r3, #8]
  4007a2:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4007a4:	689a      	ldr	r2, [r3, #8]
  4007a6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4007a8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4007aa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4007ac:	6803      	ldr	r3, [r0, #0]
  4007ae:	3301      	adds	r3, #1
  4007b0:	6003      	str	r3, [r0, #0]
  4007b2:	4770      	bx	lr

004007b4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4007b4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4007b6:	680d      	ldr	r5, [r1, #0]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4007b8:	f1b5 3fff 	cmp.w	r5, #4294967295
  4007bc:	d002      	beq.n	4007c4 <vListInsert+0x10>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4007be:	f100 0208 	add.w	r2, r0, #8
  4007c2:	e002      	b.n	4007ca <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4007c4:	6902      	ldr	r2, [r0, #16]
  4007c6:	e004      	b.n	4007d2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4007c8:	461a      	mov	r2, r3
  4007ca:	6853      	ldr	r3, [r2, #4]
  4007cc:	681c      	ldr	r4, [r3, #0]
  4007ce:	42a5      	cmp	r5, r4
  4007d0:	d2fa      	bcs.n	4007c8 <vListInsert+0x14>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4007d2:	6853      	ldr	r3, [r2, #4]
  4007d4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4007d6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4007d8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4007da:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4007dc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4007de:	6803      	ldr	r3, [r0, #0]
  4007e0:	3301      	adds	r3, #1
  4007e2:	6003      	str	r3, [r0, #0]
}
  4007e4:	bc30      	pop	{r4, r5}
  4007e6:	4770      	bx	lr

004007e8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4007e8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4007ea:	6842      	ldr	r2, [r0, #4]
  4007ec:	6881      	ldr	r1, [r0, #8]
  4007ee:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4007f0:	6882      	ldr	r2, [r0, #8]
  4007f2:	6841      	ldr	r1, [r0, #4]
  4007f4:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4007f6:	685a      	ldr	r2, [r3, #4]
  4007f8:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4007fa:	bf04      	itt	eq
  4007fc:	6882      	ldreq	r2, [r0, #8]
  4007fe:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400800:	2200      	movs	r2, #0
  400802:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400804:	6818      	ldr	r0, [r3, #0]
  400806:	3801      	subs	r0, #1
  400808:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40080a:	4770      	bx	lr

0040080c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  40080c:	4805      	ldr	r0, [pc, #20]	; (400824 <prvPortStartFirstTask+0x18>)
  40080e:	6800      	ldr	r0, [r0, #0]
  400810:	6800      	ldr	r0, [r0, #0]
  400812:	f380 8808 	msr	MSP, r0
  400816:	b662      	cpsie	i
  400818:	f3bf 8f4f 	dsb	sy
  40081c:	f3bf 8f6f 	isb	sy
  400820:	df00      	svc	0
  400822:	bf00      	nop
  400824:	e000ed08 	.word	0xe000ed08

00400828 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400828:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400838 <vPortEnableVFP+0x10>
  40082c:	6801      	ldr	r1, [r0, #0]
  40082e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400832:	6001      	str	r1, [r0, #0]
  400834:	4770      	bx	lr
  400836:	0000      	.short	0x0000
  400838:	e000ed88 	.word	0xe000ed88

0040083c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  40083c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400840:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400844:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400848:	4b05      	ldr	r3, [pc, #20]	; (400860 <pxPortInitialiseStack+0x24>)
  40084a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40084e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400852:	f06f 0302 	mvn.w	r3, #2
  400856:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40085a:	3844      	subs	r0, #68	; 0x44
  40085c:	4770      	bx	lr
  40085e:	bf00      	nop
  400860:	004008ad 	.word	0x004008ad

00400864 <SVC_Handler>:
	__asm volatile (
  400864:	4b06      	ldr	r3, [pc, #24]	; (400880 <pxCurrentTCBConst2>)
  400866:	6819      	ldr	r1, [r3, #0]
  400868:	6808      	ldr	r0, [r1, #0]
  40086a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40086e:	f380 8809 	msr	PSP, r0
  400872:	f3bf 8f6f 	isb	sy
  400876:	f04f 0000 	mov.w	r0, #0
  40087a:	f380 8811 	msr	BASEPRI, r0
  40087e:	4770      	bx	lr

00400880 <pxCurrentTCBConst2>:
  400880:	200139d8 	.word	0x200139d8

00400884 <vPortYield>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400888:	4b03      	ldr	r3, [pc, #12]	; (400898 <vPortYield+0x14>)
  40088a:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
  40088c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
  400890:	f3bf 8f6f 	isb	sy
  400894:	4770      	bx	lr
  400896:	bf00      	nop
  400898:	e000ed04 	.word	0xe000ed04

0040089c <ulPortSetInterruptMask>:
	__asm volatile														\
  40089c:	f3ef 8011 	mrs	r0, BASEPRI
  4008a0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  4008a4:	f381 8811 	msr	BASEPRI, r1
  4008a8:	4770      	bx	lr
}
  4008aa:	2000      	movs	r0, #0

004008ac <prvTaskExitError>:
{
  4008ac:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting == ~0UL );
  4008ae:	4b05      	ldr	r3, [pc, #20]	; (4008c4 <prvTaskExitError+0x18>)
  4008b0:	681b      	ldr	r3, [r3, #0]
  4008b2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4008b6:	d002      	beq.n	4008be <prvTaskExitError+0x12>
  4008b8:	4b03      	ldr	r3, [pc, #12]	; (4008c8 <prvTaskExitError+0x1c>)
  4008ba:	4798      	blx	r3
  4008bc:	e7fe      	b.n	4008bc <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
  4008be:	4b02      	ldr	r3, [pc, #8]	; (4008c8 <prvTaskExitError+0x1c>)
  4008c0:	4798      	blx	r3
  4008c2:	e7fe      	b.n	4008c2 <prvTaskExitError+0x16>
  4008c4:	20000094 	.word	0x20000094
  4008c8:	0040089d 	.word	0x0040089d

004008cc <vPortEnterCritical>:
{
  4008cc:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
  4008ce:	4b05      	ldr	r3, [pc, #20]	; (4008e4 <vPortEnterCritical+0x18>)
  4008d0:	4798      	blx	r3
	uxCriticalNesting++;
  4008d2:	4a05      	ldr	r2, [pc, #20]	; (4008e8 <vPortEnterCritical+0x1c>)
  4008d4:	6813      	ldr	r3, [r2, #0]
  4008d6:	3301      	adds	r3, #1
  4008d8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
  4008da:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
  4008de:	f3bf 8f6f 	isb	sy
  4008e2:	bd08      	pop	{r3, pc}
  4008e4:	0040089d 	.word	0x0040089d
  4008e8:	20000094 	.word	0x20000094

004008ec <vPortClearInterruptMask>:
	__asm volatile													\
  4008ec:	f380 8811 	msr	BASEPRI, r0
  4008f0:	4770      	bx	lr
	...

004008f4 <vPortExitCritical>:
{
  4008f4:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
  4008f6:	4b07      	ldr	r3, [pc, #28]	; (400914 <vPortExitCritical+0x20>)
  4008f8:	681b      	ldr	r3, [r3, #0]
  4008fa:	b13b      	cbz	r3, 40090c <vPortExitCritical+0x18>
	uxCriticalNesting--;
  4008fc:	3b01      	subs	r3, #1
  4008fe:	4a05      	ldr	r2, [pc, #20]	; (400914 <vPortExitCritical+0x20>)
  400900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400902:	b913      	cbnz	r3, 40090a <vPortExitCritical+0x16>
		portENABLE_INTERRUPTS();
  400904:	2000      	movs	r0, #0
  400906:	4b04      	ldr	r3, [pc, #16]	; (400918 <vPortExitCritical+0x24>)
  400908:	4798      	blx	r3
  40090a:	bd08      	pop	{r3, pc}
	configASSERT( uxCriticalNesting );
  40090c:	4b03      	ldr	r3, [pc, #12]	; (40091c <vPortExitCritical+0x28>)
  40090e:	4798      	blx	r3
  400910:	e7fe      	b.n	400910 <vPortExitCritical+0x1c>
  400912:	bf00      	nop
  400914:	20000094 	.word	0x20000094
  400918:	004008ed 	.word	0x004008ed
  40091c:	0040089d 	.word	0x0040089d

00400920 <PendSV_Handler>:
	__asm volatile
  400920:	f3ef 8009 	mrs	r0, PSP
  400924:	f3bf 8f6f 	isb	sy
  400928:	4b12      	ldr	r3, [pc, #72]	; (400974 <pxCurrentTCBConst>)
  40092a:	681a      	ldr	r2, [r3, #0]
  40092c:	f01e 0f10 	tst.w	lr, #16
  400930:	bf08      	it	eq
  400932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40093a:	6010      	str	r0, [r2, #0]
  40093c:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400940:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  400944:	f380 8811 	msr	BASEPRI, r0
  400948:	f000 ff66 	bl	401818 <vTaskSwitchContext>
  40094c:	f04f 0000 	mov.w	r0, #0
  400950:	f380 8811 	msr	BASEPRI, r0
  400954:	bc08      	pop	{r3}
  400956:	6819      	ldr	r1, [r3, #0]
  400958:	6808      	ldr	r0, [r1, #0]
  40095a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40095e:	f01e 0f10 	tst.w	lr, #16
  400962:	bf08      	it	eq
  400964:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400968:	f380 8809 	msr	PSP, r0
  40096c:	f3bf 8f6f 	isb	sy
  400970:	4770      	bx	lr
  400972:	bf00      	nop

00400974 <pxCurrentTCBConst>:
  400974:	200139d8 	.word	0x200139d8

00400978 <SysTick_Handler>:
{
  400978:	b508      	push	{r3, lr}
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  40097a:	4b06      	ldr	r3, [pc, #24]	; (400994 <SysTick_Handler+0x1c>)
  40097c:	4798      	blx	r3
		if( xTaskIncrementTick() != pdFALSE )
  40097e:	4b06      	ldr	r3, [pc, #24]	; (400998 <SysTick_Handler+0x20>)
  400980:	4798      	blx	r3
  400982:	b118      	cbz	r0, 40098c <SysTick_Handler+0x14>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400988:	4b04      	ldr	r3, [pc, #16]	; (40099c <SysTick_Handler+0x24>)
  40098a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  40098c:	2000      	movs	r0, #0
  40098e:	4b04      	ldr	r3, [pc, #16]	; (4009a0 <SysTick_Handler+0x28>)
  400990:	4798      	blx	r3
  400992:	bd08      	pop	{r3, pc}
  400994:	0040089d 	.word	0x0040089d
  400998:	00401561 	.word	0x00401561
  40099c:	e000ed04 	.word	0xe000ed04
  4009a0:	004008ed 	.word	0x004008ed

004009a4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4009a4:	f641 723f 	movw	r2, #7999	; 0x1f3f
  4009a8:	4b02      	ldr	r3, [pc, #8]	; (4009b4 <vPortSetupTimerInterrupt+0x10>)
  4009aa:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4009ac:	2207      	movs	r2, #7
  4009ae:	3b04      	subs	r3, #4
  4009b0:	601a      	str	r2, [r3, #0]
  4009b2:	4770      	bx	lr
  4009b4:	e000e014 	.word	0xe000e014

004009b8 <xPortStartScheduler>:
{
  4009b8:	b500      	push	{lr}
  4009ba:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4009bc:	4b25      	ldr	r3, [pc, #148]	; (400a54 <xPortStartScheduler+0x9c>)
  4009be:	781a      	ldrb	r2, [r3, #0]
  4009c0:	b2d2      	uxtb	r2, r2
  4009c2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4009c4:	22ff      	movs	r2, #255	; 0xff
  4009c6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4009c8:	781b      	ldrb	r3, [r3, #0]
  4009ca:	b2db      	uxtb	r3, r3
  4009cc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4009d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4009d4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
  4009d8:	4a1f      	ldr	r2, [pc, #124]	; (400a58 <xPortStartScheduler+0xa0>)
  4009da:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4009dc:	2207      	movs	r2, #7
  4009de:	4b1f      	ldr	r3, [pc, #124]	; (400a5c <xPortStartScheduler+0xa4>)
  4009e0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4009e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4009e6:	f013 0f80 	tst.w	r3, #128	; 0x80
  4009ea:	d010      	beq.n	400a0e <xPortStartScheduler+0x56>
  4009ec:	2206      	movs	r2, #6
  4009ee:	e000      	b.n	4009f2 <xPortStartScheduler+0x3a>
  4009f0:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4009f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4009f6:	005b      	lsls	r3, r3, #1
  4009f8:	b2db      	uxtb	r3, r3
  4009fa:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4009fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400a02:	1e51      	subs	r1, r2, #1
  400a04:	f013 0f80 	tst.w	r3, #128	; 0x80
  400a08:	d1f2      	bne.n	4009f0 <xPortStartScheduler+0x38>
  400a0a:	4b14      	ldr	r3, [pc, #80]	; (400a5c <xPortStartScheduler+0xa4>)
  400a0c:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400a0e:	4a13      	ldr	r2, [pc, #76]	; (400a5c <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400a10:	6813      	ldr	r3, [r2, #0]
  400a12:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400a14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400a18:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400a1a:	9b01      	ldr	r3, [sp, #4]
  400a1c:	b2db      	uxtb	r3, r3
  400a1e:	4a0d      	ldr	r2, [pc, #52]	; (400a54 <xPortStartScheduler+0x9c>)
  400a20:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400a22:	4b0f      	ldr	r3, [pc, #60]	; (400a60 <xPortStartScheduler+0xa8>)
  400a24:	681a      	ldr	r2, [r3, #0]
  400a26:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  400a2a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400a2c:	681a      	ldr	r2, [r3, #0]
  400a2e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  400a32:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400a34:	4b0b      	ldr	r3, [pc, #44]	; (400a64 <xPortStartScheduler+0xac>)
  400a36:	4798      	blx	r3
	uxCriticalNesting = 0;
  400a38:	2200      	movs	r2, #0
  400a3a:	4b0b      	ldr	r3, [pc, #44]	; (400a68 <xPortStartScheduler+0xb0>)
  400a3c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  400a3e:	4b0b      	ldr	r3, [pc, #44]	; (400a6c <xPortStartScheduler+0xb4>)
  400a40:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400a42:	4a0b      	ldr	r2, [pc, #44]	; (400a70 <xPortStartScheduler+0xb8>)
  400a44:	6813      	ldr	r3, [r2, #0]
  400a46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400a4a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  400a4c:	4b09      	ldr	r3, [pc, #36]	; (400a74 <xPortStartScheduler+0xbc>)
  400a4e:	4798      	blx	r3
	prvTaskExitError();
  400a50:	4b09      	ldr	r3, [pc, #36]	; (400a78 <xPortStartScheduler+0xc0>)
  400a52:	4798      	blx	r3
  400a54:	e000e400 	.word	0xe000e400
  400a58:	20000dbc 	.word	0x20000dbc
  400a5c:	20000dc0 	.word	0x20000dc0
  400a60:	e000ed20 	.word	0xe000ed20
  400a64:	004009a5 	.word	0x004009a5
  400a68:	20000094 	.word	0x20000094
  400a6c:	00400829 	.word	0x00400829
  400a70:	e000ef34 	.word	0xe000ef34
  400a74:	0040080d 	.word	0x0040080d
  400a78:	004008ad 	.word	0x004008ad

00400a7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
  400a7c:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400a7e:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400a82:	2b0f      	cmp	r3, #15
  400a84:	d909      	bls.n	400a9a <vPortValidateInterruptPriority+0x1e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400a86:	4a0b      	ldr	r2, [pc, #44]	; (400ab4 <vPortValidateInterruptPriority+0x38>)
  400a88:	5c9b      	ldrb	r3, [r3, r2]
  400a8a:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400a8c:	4a0a      	ldr	r2, [pc, #40]	; (400ab8 <vPortValidateInterruptPriority+0x3c>)
  400a8e:	7812      	ldrb	r2, [r2, #0]
  400a90:	429a      	cmp	r2, r3
  400a92:	d902      	bls.n	400a9a <vPortValidateInterruptPriority+0x1e>
  400a94:	4b09      	ldr	r3, [pc, #36]	; (400abc <vPortValidateInterruptPriority+0x40>)
  400a96:	4798      	blx	r3
  400a98:	e7fe      	b.n	400a98 <vPortValidateInterruptPriority+0x1c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400a9a:	4b09      	ldr	r3, [pc, #36]	; (400ac0 <vPortValidateInterruptPriority+0x44>)
  400a9c:	681b      	ldr	r3, [r3, #0]
  400a9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400aa2:	4a08      	ldr	r2, [pc, #32]	; (400ac4 <vPortValidateInterruptPriority+0x48>)
  400aa4:	6812      	ldr	r2, [r2, #0]
  400aa6:	4293      	cmp	r3, r2
  400aa8:	d800      	bhi.n	400aac <vPortValidateInterruptPriority+0x30>
  400aaa:	bd08      	pop	{r3, pc}
  400aac:	4b03      	ldr	r3, [pc, #12]	; (400abc <vPortValidateInterruptPriority+0x40>)
  400aae:	4798      	blx	r3
  400ab0:	e7fe      	b.n	400ab0 <vPortValidateInterruptPriority+0x34>
  400ab2:	bf00      	nop
  400ab4:	e000e3f0 	.word	0xe000e3f0
  400ab8:	20000dbc 	.word	0x20000dbc
  400abc:	0040089d 	.word	0x0040089d
  400ac0:	e000ed0c 	.word	0xe000ed0c
  400ac4:	20000dc0 	.word	0x20000dc0

00400ac8 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400ac8:	b570      	push	{r4, r5, r6, lr}
  400aca:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
  400acc:	4b2a      	ldr	r3, [pc, #168]	; (400b78 <pvPortMalloc+0xb0>)
  400ace:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
  400ad0:	4b2a      	ldr	r3, [pc, #168]	; (400b7c <pvPortMalloc+0xb4>)
  400ad2:	681b      	ldr	r3, [r3, #0]
  400ad4:	b183      	cbz	r3, 400af8 <pvPortMalloc+0x30>
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  400ad6:	2c00      	cmp	r4, #0
  400ad8:	d048      	beq.n	400b6c <pvPortMalloc+0xa4>
		{
			xWantedSize += heapSTRUCT_SIZE;
  400ada:	f104 0108 	add.w	r1, r4, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
  400ade:	f011 0f07 	tst.w	r1, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400ae2:	bf1c      	itt	ne
  400ae4:	f021 0107 	bicne.w	r1, r1, #7
  400ae8:	3108      	addne	r1, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
  400aea:	1e4a      	subs	r2, r1, #1
  400aec:	4b24      	ldr	r3, [pc, #144]	; (400b80 <pvPortMalloc+0xb8>)
  400aee:	429a      	cmp	r2, r3
  400af0:	d83e      	bhi.n	400b70 <pvPortMalloc+0xa8>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
  400af2:	4c24      	ldr	r4, [pc, #144]	; (400b84 <pvPortMalloc+0xbc>)
  400af4:	6823      	ldr	r3, [r4, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400af6:	e012      	b.n	400b1e <pvPortMalloc+0x56>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
  400af8:	4b23      	ldr	r3, [pc, #140]	; (400b88 <pvPortMalloc+0xc0>)
  400afa:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  400afe:	4a21      	ldr	r2, [pc, #132]	; (400b84 <pvPortMalloc+0xbc>)
  400b00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
  400b02:	2000      	movs	r0, #0
  400b04:	6050      	str	r0, [r2, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
  400b06:	4a21      	ldr	r2, [pc, #132]	; (400b8c <pvPortMalloc+0xc4>)
  400b08:	4921      	ldr	r1, [pc, #132]	; (400b90 <pvPortMalloc+0xc8>)
  400b0a:	6051      	str	r1, [r2, #4]
	xEnd.pxNextFreeBlock = NULL;
  400b0c:	6010      	str	r0, [r2, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
  400b0e:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
  400b10:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
  400b12:	2201      	movs	r2, #1
  400b14:	4b19      	ldr	r3, [pc, #100]	; (400b7c <pvPortMalloc+0xb4>)
  400b16:	601a      	str	r2, [r3, #0]
  400b18:	e7dd      	b.n	400ad6 <pvPortMalloc+0xe>
  400b1a:	461c      	mov	r4, r3
				pxBlock = pxBlock->pxNextFreeBlock;
  400b1c:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400b1e:	685a      	ldr	r2, [r3, #4]
  400b20:	4291      	cmp	r1, r2
  400b22:	d902      	bls.n	400b2a <pvPortMalloc+0x62>
  400b24:	681a      	ldr	r2, [r3, #0]
  400b26:	2a00      	cmp	r2, #0
  400b28:	d1f7      	bne.n	400b1a <pvPortMalloc+0x52>
			if( pxBlock != &xEnd )
  400b2a:	4a18      	ldr	r2, [pc, #96]	; (400b8c <pvPortMalloc+0xc4>)
  400b2c:	4293      	cmp	r3, r2
  400b2e:	d021      	beq.n	400b74 <pvPortMalloc+0xac>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  400b30:	6825      	ldr	r5, [r4, #0]
  400b32:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400b34:	681a      	ldr	r2, [r3, #0]
  400b36:	6022      	str	r2, [r4, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400b38:	685a      	ldr	r2, [r3, #4]
  400b3a:	1a52      	subs	r2, r2, r1
  400b3c:	2a10      	cmp	r2, #16
  400b3e:	d90c      	bls.n	400b5a <pvPortMalloc+0x92>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  400b40:	185e      	adds	r6, r3, r1
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  400b42:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
  400b44:	6059      	str	r1, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  400b46:	6874      	ldr	r4, [r6, #4]
  400b48:	490e      	ldr	r1, [pc, #56]	; (400b84 <pvPortMalloc+0xbc>)
  400b4a:	e000      	b.n	400b4e <pvPortMalloc+0x86>
  400b4c:	4611      	mov	r1, r2
  400b4e:	680a      	ldr	r2, [r1, #0]
  400b50:	6850      	ldr	r0, [r2, #4]
  400b52:	4284      	cmp	r4, r0
  400b54:	d8fa      	bhi.n	400b4c <pvPortMalloc+0x84>
  400b56:	6032      	str	r2, [r6, #0]
  400b58:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
  400b5a:	490e      	ldr	r1, [pc, #56]	; (400b94 <pvPortMalloc+0xcc>)
  400b5c:	680a      	ldr	r2, [r1, #0]
  400b5e:	685b      	ldr	r3, [r3, #4]
  400b60:	1ad2      	subs	r2, r2, r3
  400b62:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
  400b64:	4b0c      	ldr	r3, [pc, #48]	; (400b98 <pvPortMalloc+0xd0>)
  400b66:	4798      	blx	r3
}
  400b68:	4628      	mov	r0, r5
  400b6a:	bd70      	pop	{r4, r5, r6, pc}
void *pvReturn = NULL;
  400b6c:	2500      	movs	r5, #0
  400b6e:	e7f9      	b.n	400b64 <pvPortMalloc+0x9c>
  400b70:	2500      	movs	r5, #0
  400b72:	e7f7      	b.n	400b64 <pvPortMalloc+0x9c>
  400b74:	2500      	movs	r5, #0
  400b76:	e7f5      	b.n	400b64 <pvPortMalloc+0x9c>
  400b78:	00401531 	.word	0x00401531
  400b7c:	200139cc 	.word	0x200139cc
  400b80:	00012bf6 	.word	0x00012bf6
  400b84:	200139d0 	.word	0x200139d0
  400b88:	20000dcc 	.word	0x20000dcc
  400b8c:	200139c4 	.word	0x200139c4
  400b90:	00012bf8 	.word	0x00012bf8
  400b94:	20000098 	.word	0x20000098
  400b98:	0040168d 	.word	0x0040168d

00400b9c <vPortFree>:
	if( pv != NULL )
  400b9c:	b1d0      	cbz	r0, 400bd4 <vPortFree+0x38>
{
  400b9e:	b570      	push	{r4, r5, r6, lr}
  400ba0:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
  400ba2:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
  400ba6:	4b0c      	ldr	r3, [pc, #48]	; (400bd8 <vPortFree+0x3c>)
  400ba8:	4798      	blx	r3
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  400baa:	f855 4c04 	ldr.w	r4, [r5, #-4]
  400bae:	4a0b      	ldr	r2, [pc, #44]	; (400bdc <vPortFree+0x40>)
  400bb0:	e000      	b.n	400bb4 <vPortFree+0x18>
  400bb2:	461a      	mov	r2, r3
  400bb4:	6813      	ldr	r3, [r2, #0]
  400bb6:	6859      	ldr	r1, [r3, #4]
  400bb8:	428c      	cmp	r4, r1
  400bba:	d8fa      	bhi.n	400bb2 <vPortFree+0x16>
  400bbc:	f845 3c08 	str.w	r3, [r5, #-8]
  400bc0:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
  400bc2:	4a07      	ldr	r2, [pc, #28]	; (400be0 <vPortFree+0x44>)
  400bc4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  400bc8:	6811      	ldr	r1, [r2, #0]
  400bca:	440b      	add	r3, r1
  400bcc:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
  400bce:	4b05      	ldr	r3, [pc, #20]	; (400be4 <vPortFree+0x48>)
  400bd0:	4798      	blx	r3
  400bd2:	bd70      	pop	{r4, r5, r6, pc}
  400bd4:	4770      	bx	lr
  400bd6:	bf00      	nop
  400bd8:	00401531 	.word	0x00401531
  400bdc:	200139d0 	.word	0x200139d0
  400be0:	20000098 	.word	0x20000098
  400be4:	0040168d 	.word	0x0040168d

00400be8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400be8:	b538      	push	{r3, r4, r5, lr}
  400bea:	4604      	mov	r4, r0
  400bec:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400bee:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400bf0:	b95a      	cbnz	r2, 400c0a <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400bf2:	6803      	ldr	r3, [r0, #0]
  400bf4:	b11b      	cbz	r3, 400bfe <prvCopyDataToQueue+0x16>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400bf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400bf8:	3301      	adds	r3, #1
  400bfa:	63a3      	str	r3, [r4, #56]	; 0x38
  400bfc:	bd38      	pop	{r3, r4, r5, pc}
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400bfe:	6840      	ldr	r0, [r0, #4]
  400c00:	4b14      	ldr	r3, [pc, #80]	; (400c54 <prvCopyDataToQueue+0x6c>)
  400c02:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400c04:	2300      	movs	r3, #0
  400c06:	6063      	str	r3, [r4, #4]
  400c08:	e7f5      	b.n	400bf6 <prvCopyDataToQueue+0xe>
	else if( xPosition == queueSEND_TO_BACK )
  400c0a:	b965      	cbnz	r5, 400c26 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400c0c:	6880      	ldr	r0, [r0, #8]
  400c0e:	4b12      	ldr	r3, [pc, #72]	; (400c58 <prvCopyDataToQueue+0x70>)
  400c10:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400c12:	68a3      	ldr	r3, [r4, #8]
  400c14:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400c16:	4413      	add	r3, r2
  400c18:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400c1a:	6862      	ldr	r2, [r4, #4]
  400c1c:	4293      	cmp	r3, r2
  400c1e:	d3ea      	bcc.n	400bf6 <prvCopyDataToQueue+0xe>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400c20:	6823      	ldr	r3, [r4, #0]
  400c22:	60a3      	str	r3, [r4, #8]
  400c24:	e7e7      	b.n	400bf6 <prvCopyDataToQueue+0xe>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400c26:	68c0      	ldr	r0, [r0, #12]
  400c28:	4b0b      	ldr	r3, [pc, #44]	; (400c58 <prvCopyDataToQueue+0x70>)
  400c2a:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400c2c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400c2e:	4252      	negs	r2, r2
  400c30:	68e3      	ldr	r3, [r4, #12]
  400c32:	4413      	add	r3, r2
  400c34:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400c36:	6821      	ldr	r1, [r4, #0]
  400c38:	428b      	cmp	r3, r1
  400c3a:	d202      	bcs.n	400c42 <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400c3c:	6863      	ldr	r3, [r4, #4]
  400c3e:	441a      	add	r2, r3
  400c40:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
  400c42:	2d02      	cmp	r5, #2
  400c44:	d1d7      	bne.n	400bf6 <prvCopyDataToQueue+0xe>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400c46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400c48:	2b00      	cmp	r3, #0
  400c4a:	d0d4      	beq.n	400bf6 <prvCopyDataToQueue+0xe>
				--( pxQueue->uxMessagesWaiting );
  400c4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400c4e:	3b01      	subs	r3, #1
  400c50:	63a3      	str	r3, [r4, #56]	; 0x38
  400c52:	e7d0      	b.n	400bf6 <prvCopyDataToQueue+0xe>
  400c54:	00401b41 	.word	0x00401b41
  400c58:	00407b5d 	.word	0x00407b5d

00400c5c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400c5c:	b510      	push	{r4, lr}
  400c5e:	b082      	sub	sp, #8
  400c60:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400c62:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400c64:	b17c      	cbz	r4, 400c86 <prvNotifyQueueSetContainer+0x2a>
  400c66:	460a      	mov	r2, r1
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400c68:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  400c6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400c6c:	4299      	cmp	r1, r3
  400c6e:	d20d      	bcs.n	400c8c <prvNotifyQueueSetContainer+0x30>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400c70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  400c72:	428b      	cmp	r3, r1
  400c74:	d915      	bls.n	400ca2 <prvNotifyQueueSetContainer+0x46>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400c76:	a901      	add	r1, sp, #4
  400c78:	4620      	mov	r0, r4
  400c7a:	4b0b      	ldr	r3, [pc, #44]	; (400ca8 <prvNotifyQueueSetContainer+0x4c>)
  400c7c:	4798      	blx	r3
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400c80:	b93b      	cbnz	r3, 400c92 <prvNotifyQueueSetContainer+0x36>
	BaseType_t xReturn = pdFALSE;
  400c82:	2000      	movs	r0, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
  400c84:	e00e      	b.n	400ca4 <prvNotifyQueueSetContainer+0x48>
		configASSERT( pxQueueSetContainer );
  400c86:	4b09      	ldr	r3, [pc, #36]	; (400cac <prvNotifyQueueSetContainer+0x50>)
  400c88:	4798      	blx	r3
  400c8a:	e7fe      	b.n	400c8a <prvNotifyQueueSetContainer+0x2e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400c8c:	4b07      	ldr	r3, [pc, #28]	; (400cac <prvNotifyQueueSetContainer+0x50>)
  400c8e:	4798      	blx	r3
  400c90:	e7fe      	b.n	400c90 <prvNotifyQueueSetContainer+0x34>
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400c92:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c96:	4b06      	ldr	r3, [pc, #24]	; (400cb0 <prvNotifyQueueSetContainer+0x54>)
  400c98:	4798      	blx	r3
  400c9a:	3000      	adds	r0, #0
  400c9c:	bf18      	it	ne
  400c9e:	2001      	movne	r0, #1
  400ca0:	e000      	b.n	400ca4 <prvNotifyQueueSetContainer+0x48>
	BaseType_t xReturn = pdFALSE;
  400ca2:	2000      	movs	r0, #0
	}
  400ca4:	b002      	add	sp, #8
  400ca6:	bd10      	pop	{r4, pc}
  400ca8:	00400be9 	.word	0x00400be9
  400cac:	0040089d 	.word	0x0040089d
  400cb0:	0040195d 	.word	0x0040195d

00400cb4 <prvCopyDataFromQueue>:
{
  400cb4:	b538      	push	{r3, r4, r5, lr}
  400cb6:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  400cb8:	6800      	ldr	r0, [r0, #0]
  400cba:	b158      	cbz	r0, 400cd4 <prvCopyDataFromQueue+0x20>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  400cbe:	68dc      	ldr	r4, [r3, #12]
  400cc0:	4414      	add	r4, r2
  400cc2:	60dc      	str	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400cc4:	685d      	ldr	r5, [r3, #4]
  400cc6:	42ac      	cmp	r4, r5
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400cc8:	bf28      	it	cs
  400cca:	60d8      	strcs	r0, [r3, #12]
  400ccc:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400cce:	68d9      	ldr	r1, [r3, #12]
  400cd0:	4b01      	ldr	r3, [pc, #4]	; (400cd8 <prvCopyDataFromQueue+0x24>)
  400cd2:	4798      	blx	r3
  400cd4:	bd38      	pop	{r3, r4, r5, pc}
  400cd6:	bf00      	nop
  400cd8:	00407b5d 	.word	0x00407b5d

00400cdc <prvUnlockQueue>:
{
  400cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400cde:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  400ce0:	4b22      	ldr	r3, [pc, #136]	; (400d6c <prvUnlockQueue+0x90>)
  400ce2:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400ce4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ce6:	2b00      	cmp	r3, #0
  400ce8:	dd1b      	ble.n	400d22 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400cea:	4d21      	ldr	r5, [pc, #132]	; (400d70 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  400cec:	4f21      	ldr	r7, [pc, #132]	; (400d74 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400cee:	4e22      	ldr	r6, [pc, #136]	; (400d78 <prvUnlockQueue+0x9c>)
  400cf0:	e00b      	b.n	400d0a <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400cf4:	b1ab      	cbz	r3, 400d22 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400cf6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400cfa:	47b0      	blx	r6
  400cfc:	b978      	cbnz	r0, 400d1e <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  400cfe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d00:	3b01      	subs	r3, #1
  400d02:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400d04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d06:	2b00      	cmp	r3, #0
  400d08:	dd0b      	ble.n	400d22 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  400d0a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  400d0c:	2b00      	cmp	r3, #0
  400d0e:	d0f0      	beq.n	400cf2 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400d10:	2100      	movs	r1, #0
  400d12:	4620      	mov	r0, r4
  400d14:	47a8      	blx	r5
  400d16:	2801      	cmp	r0, #1
  400d18:	d1f1      	bne.n	400cfe <prvUnlockQueue+0x22>
						vTaskMissedYield();
  400d1a:	47b8      	blx	r7
  400d1c:	e7ef      	b.n	400cfe <prvUnlockQueue+0x22>
							vTaskMissedYield();
  400d1e:	47b8      	blx	r7
  400d20:	e7ed      	b.n	400cfe <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  400d22:	f04f 33ff 	mov.w	r3, #4294967295
  400d26:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  400d28:	4b14      	ldr	r3, [pc, #80]	; (400d7c <prvUnlockQueue+0xa0>)
  400d2a:	4798      	blx	r3
	taskENTER_CRITICAL();
  400d2c:	4b0f      	ldr	r3, [pc, #60]	; (400d6c <prvUnlockQueue+0x90>)
  400d2e:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400d30:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d32:	2b00      	cmp	r3, #0
  400d34:	dd14      	ble.n	400d60 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d36:	6923      	ldr	r3, [r4, #16]
  400d38:	b193      	cbz	r3, 400d60 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400d3a:	f104 0610 	add.w	r6, r4, #16
  400d3e:	4d0e      	ldr	r5, [pc, #56]	; (400d78 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  400d40:	4f0c      	ldr	r7, [pc, #48]	; (400d74 <prvUnlockQueue+0x98>)
  400d42:	e007      	b.n	400d54 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  400d44:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d46:	3b01      	subs	r3, #1
  400d48:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400d4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d4c:	2b00      	cmp	r3, #0
  400d4e:	dd07      	ble.n	400d60 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d50:	6923      	ldr	r3, [r4, #16]
  400d52:	b12b      	cbz	r3, 400d60 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400d54:	4630      	mov	r0, r6
  400d56:	47a8      	blx	r5
  400d58:	2800      	cmp	r0, #0
  400d5a:	d0f3      	beq.n	400d44 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  400d5c:	47b8      	blx	r7
  400d5e:	e7f1      	b.n	400d44 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  400d60:	f04f 33ff 	mov.w	r3, #4294967295
  400d64:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  400d66:	4b05      	ldr	r3, [pc, #20]	; (400d7c <prvUnlockQueue+0xa0>)
  400d68:	4798      	blx	r3
  400d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d6c:	004008cd 	.word	0x004008cd
  400d70:	00400c5d 	.word	0x00400c5d
  400d74:	00401a85 	.word	0x00401a85
  400d78:	0040195d 	.word	0x0040195d
  400d7c:	004008f5 	.word	0x004008f5

00400d80 <xQueueGenericReset>:
{
  400d80:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  400d82:	b308      	cbz	r0, 400dc8 <xQueueGenericReset+0x48>
  400d84:	460d      	mov	r5, r1
  400d86:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  400d88:	4b16      	ldr	r3, [pc, #88]	; (400de4 <xQueueGenericReset+0x64>)
  400d8a:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400d8c:	6822      	ldr	r2, [r4, #0]
  400d8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400d90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d92:	fb03 f301 	mul.w	r3, r3, r1
  400d96:	18d0      	adds	r0, r2, r3
  400d98:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400d9a:	2000      	movs	r0, #0
  400d9c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400d9e:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400da0:	1a5b      	subs	r3, r3, r1
  400da2:	4413      	add	r3, r2
  400da4:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400da6:	f04f 33ff 	mov.w	r3, #4294967295
  400daa:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400dac:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  400dae:	b98d      	cbnz	r5, 400dd4 <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400db0:	6923      	ldr	r3, [r4, #16]
  400db2:	b12b      	cbz	r3, 400dc0 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400db4:	f104 0010 	add.w	r0, r4, #16
  400db8:	4b0b      	ldr	r3, [pc, #44]	; (400de8 <xQueueGenericReset+0x68>)
  400dba:	4798      	blx	r3
  400dbc:	2801      	cmp	r0, #1
  400dbe:	d006      	beq.n	400dce <xQueueGenericReset+0x4e>
	taskEXIT_CRITICAL();
  400dc0:	4b0a      	ldr	r3, [pc, #40]	; (400dec <xQueueGenericReset+0x6c>)
  400dc2:	4798      	blx	r3
}
  400dc4:	2001      	movs	r0, #1
  400dc6:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
  400dc8:	4b09      	ldr	r3, [pc, #36]	; (400df0 <xQueueGenericReset+0x70>)
  400dca:	4798      	blx	r3
  400dcc:	e7fe      	b.n	400dcc <xQueueGenericReset+0x4c>
					queueYIELD_IF_USING_PREEMPTION();
  400dce:	4b09      	ldr	r3, [pc, #36]	; (400df4 <xQueueGenericReset+0x74>)
  400dd0:	4798      	blx	r3
  400dd2:	e7f5      	b.n	400dc0 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400dd4:	f104 0010 	add.w	r0, r4, #16
  400dd8:	4d07      	ldr	r5, [pc, #28]	; (400df8 <xQueueGenericReset+0x78>)
  400dda:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400ddc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400de0:	47a8      	blx	r5
  400de2:	e7ed      	b.n	400dc0 <xQueueGenericReset+0x40>
  400de4:	004008cd 	.word	0x004008cd
  400de8:	0040195d 	.word	0x0040195d
  400dec:	004008f5 	.word	0x004008f5
  400df0:	0040089d 	.word	0x0040089d
  400df4:	00400885 	.word	0x00400885
  400df8:	00400781 	.word	0x00400781

00400dfc <xQueueGenericCreate>:
{
  400dfc:	b570      	push	{r4, r5, r6, lr}
	if( uxQueueLength > ( UBaseType_t ) 0 )
  400dfe:	b1d0      	cbz	r0, 400e36 <xQueueGenericCreate+0x3a>
  400e00:	460d      	mov	r5, r1
  400e02:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
  400e04:	2050      	movs	r0, #80	; 0x50
  400e06:	4b0d      	ldr	r3, [pc, #52]	; (400e3c <xQueueGenericCreate+0x40>)
  400e08:	4798      	blx	r3
		if( pxNewQueue != NULL )
  400e0a:	4604      	mov	r4, r0
  400e0c:	b198      	cbz	r0, 400e36 <xQueueGenericCreate+0x3a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400e0e:	fb05 f006 	mul.w	r0, r5, r6
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
  400e12:	3001      	adds	r0, #1
  400e14:	4b09      	ldr	r3, [pc, #36]	; (400e3c <xQueueGenericCreate+0x40>)
  400e16:	4798      	blx	r3
  400e18:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
  400e1a:	b148      	cbz	r0, 400e30 <xQueueGenericCreate+0x34>
				pxNewQueue->uxLength = uxQueueLength;
  400e1c:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  400e1e:	6425      	str	r5, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400e20:	2101      	movs	r1, #1
  400e22:	4620      	mov	r0, r4
  400e24:	4b06      	ldr	r3, [pc, #24]	; (400e40 <xQueueGenericCreate+0x44>)
  400e26:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
  400e28:	2300      	movs	r3, #0
  400e2a:	64e3      	str	r3, [r4, #76]	; 0x4c
}
  400e2c:	4620      	mov	r0, r4
  400e2e:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxNewQueue );
  400e30:	4620      	mov	r0, r4
  400e32:	4b04      	ldr	r3, [pc, #16]	; (400e44 <xQueueGenericCreate+0x48>)
  400e34:	4798      	blx	r3
	configASSERT( xReturn );
  400e36:	4b04      	ldr	r3, [pc, #16]	; (400e48 <xQueueGenericCreate+0x4c>)
  400e38:	4798      	blx	r3
  400e3a:	e7fe      	b.n	400e3a <xQueueGenericCreate+0x3e>
  400e3c:	00400ac9 	.word	0x00400ac9
  400e40:	00400d81 	.word	0x00400d81
  400e44:	00400b9d 	.word	0x00400b9d
  400e48:	0040089d 	.word	0x0040089d

00400e4c <xQueueGenericSend>:
{
  400e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e50:	b085      	sub	sp, #20
  400e52:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  400e54:	b158      	cbz	r0, 400e6e <xQueueGenericSend+0x22>
  400e56:	4689      	mov	r9, r1
  400e58:	461d      	mov	r5, r3
  400e5a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e5c:	b151      	cbz	r1, 400e74 <xQueueGenericSend+0x28>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400e5e:	2d02      	cmp	r5, #2
  400e60:	d10e      	bne.n	400e80 <xQueueGenericSend+0x34>
  400e62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400e64:	2b01      	cmp	r3, #1
  400e66:	d00b      	beq.n	400e80 <xQueueGenericSend+0x34>
  400e68:	4b46      	ldr	r3, [pc, #280]	; (400f84 <xQueueGenericSend+0x138>)
  400e6a:	4798      	blx	r3
  400e6c:	e7fe      	b.n	400e6c <xQueueGenericSend+0x20>
	configASSERT( pxQueue );
  400e6e:	4b45      	ldr	r3, [pc, #276]	; (400f84 <xQueueGenericSend+0x138>)
  400e70:	4798      	blx	r3
  400e72:	e7fe      	b.n	400e72 <xQueueGenericSend+0x26>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e74:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400e76:	2b00      	cmp	r3, #0
  400e78:	d0f1      	beq.n	400e5e <xQueueGenericSend+0x12>
  400e7a:	4b42      	ldr	r3, [pc, #264]	; (400f84 <xQueueGenericSend+0x138>)
  400e7c:	4798      	blx	r3
  400e7e:	e7fe      	b.n	400e7e <xQueueGenericSend+0x32>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400e80:	4b41      	ldr	r3, [pc, #260]	; (400f88 <xQueueGenericSend+0x13c>)
  400e82:	4798      	blx	r3
  400e84:	b920      	cbnz	r0, 400e90 <xQueueGenericSend+0x44>
  400e86:	9b01      	ldr	r3, [sp, #4]
  400e88:	b14b      	cbz	r3, 400e9e <xQueueGenericSend+0x52>
  400e8a:	4b3e      	ldr	r3, [pc, #248]	; (400f84 <xQueueGenericSend+0x138>)
  400e8c:	4798      	blx	r3
  400e8e:	e7fe      	b.n	400e8e <xQueueGenericSend+0x42>
  400e90:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
  400e94:	4f3d      	ldr	r7, [pc, #244]	; (400f8c <xQueueGenericSend+0x140>)
					vTaskSetTimeOutState( &xTimeOut );
  400e96:	f8df a120 	ldr.w	sl, [pc, #288]	; 400fb8 <xQueueGenericSend+0x16c>
		taskEXIT_CRITICAL();
  400e9a:	4e3d      	ldr	r6, [pc, #244]	; (400f90 <xQueueGenericSend+0x144>)
  400e9c:	e031      	b.n	400f02 <xQueueGenericSend+0xb6>
  400e9e:	f04f 0800 	mov.w	r8, #0
  400ea2:	e7f7      	b.n	400e94 <xQueueGenericSend+0x48>
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400ea4:	462a      	mov	r2, r5
  400ea6:	4649      	mov	r1, r9
  400ea8:	4620      	mov	r0, r4
  400eaa:	4b3a      	ldr	r3, [pc, #232]	; (400f94 <xQueueGenericSend+0x148>)
  400eac:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400eae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  400eb0:	b16b      	cbz	r3, 400ece <xQueueGenericSend+0x82>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400eb2:	4629      	mov	r1, r5
  400eb4:	4620      	mov	r0, r4
  400eb6:	4b38      	ldr	r3, [pc, #224]	; (400f98 <xQueueGenericSend+0x14c>)
  400eb8:	4798      	blx	r3
  400eba:	2801      	cmp	r0, #1
  400ebc:	d101      	bne.n	400ec2 <xQueueGenericSend+0x76>
							queueYIELD_IF_USING_PREEMPTION();
  400ebe:	4b37      	ldr	r3, [pc, #220]	; (400f9c <xQueueGenericSend+0x150>)
  400ec0:	4798      	blx	r3
				taskEXIT_CRITICAL();
  400ec2:	4b33      	ldr	r3, [pc, #204]	; (400f90 <xQueueGenericSend+0x144>)
  400ec4:	4798      	blx	r3
				return pdPASS;
  400ec6:	2001      	movs	r0, #1
}
  400ec8:	b005      	add	sp, #20
  400eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400ed0:	2b00      	cmp	r3, #0
  400ed2:	d0f6      	beq.n	400ec2 <xQueueGenericSend+0x76>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400ed4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ed8:	4b31      	ldr	r3, [pc, #196]	; (400fa0 <xQueueGenericSend+0x154>)
  400eda:	4798      	blx	r3
  400edc:	2801      	cmp	r0, #1
  400ede:	d1f0      	bne.n	400ec2 <xQueueGenericSend+0x76>
								queueYIELD_IF_USING_PREEMPTION();
  400ee0:	4b2e      	ldr	r3, [pc, #184]	; (400f9c <xQueueGenericSend+0x150>)
  400ee2:	4798      	blx	r3
  400ee4:	e7ed      	b.n	400ec2 <xQueueGenericSend+0x76>
					taskEXIT_CRITICAL();
  400ee6:	4b2a      	ldr	r3, [pc, #168]	; (400f90 <xQueueGenericSend+0x144>)
  400ee8:	4798      	blx	r3
					return errQUEUE_FULL;
  400eea:	2000      	movs	r0, #0
  400eec:	e7ec      	b.n	400ec8 <xQueueGenericSend+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
  400eee:	a802      	add	r0, sp, #8
  400ef0:	47d0      	blx	sl
  400ef2:	e013      	b.n	400f1c <xQueueGenericSend+0xd0>
				prvUnlockQueue( pxQueue );
  400ef4:	4620      	mov	r0, r4
  400ef6:	4b2b      	ldr	r3, [pc, #172]	; (400fa4 <xQueueGenericSend+0x158>)
  400ef8:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400efa:	4b2b      	ldr	r3, [pc, #172]	; (400fa8 <xQueueGenericSend+0x15c>)
  400efc:	4798      	blx	r3
  400efe:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
  400f02:	47b8      	blx	r7
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400f04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f08:	429a      	cmp	r2, r3
  400f0a:	d3cb      	bcc.n	400ea4 <xQueueGenericSend+0x58>
  400f0c:	2d02      	cmp	r5, #2
  400f0e:	d0c9      	beq.n	400ea4 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
  400f10:	9b01      	ldr	r3, [sp, #4]
  400f12:	2b00      	cmp	r3, #0
  400f14:	d0e7      	beq.n	400ee6 <xQueueGenericSend+0x9a>
				else if( xEntryTimeSet == pdFALSE )
  400f16:	f1b8 0f00 	cmp.w	r8, #0
  400f1a:	d0e8      	beq.n	400eee <xQueueGenericSend+0xa2>
		taskEXIT_CRITICAL();
  400f1c:	47b0      	blx	r6
		vTaskSuspendAll();
  400f1e:	4b23      	ldr	r3, [pc, #140]	; (400fac <xQueueGenericSend+0x160>)
  400f20:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400f22:	47b8      	blx	r7
  400f24:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400f26:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f2a:	bf04      	itt	eq
  400f2c:	2300      	moveq	r3, #0
  400f2e:	6463      	streq	r3, [r4, #68]	; 0x44
  400f30:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f32:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f36:	bf04      	itt	eq
  400f38:	2300      	moveq	r3, #0
  400f3a:	64a3      	streq	r3, [r4, #72]	; 0x48
  400f3c:	47b0      	blx	r6
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400f3e:	a901      	add	r1, sp, #4
  400f40:	a802      	add	r0, sp, #8
  400f42:	4b1b      	ldr	r3, [pc, #108]	; (400fb0 <xQueueGenericSend+0x164>)
  400f44:	4798      	blx	r3
  400f46:	b9b0      	cbnz	r0, 400f76 <xQueueGenericSend+0x12a>
	taskENTER_CRITICAL();
  400f48:	47b8      	blx	r7
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400f4a:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400f4e:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  400f52:	47b0      	blx	r6
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400f54:	45c3      	cmp	fp, r8
  400f56:	d1cd      	bne.n	400ef4 <xQueueGenericSend+0xa8>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400f58:	9901      	ldr	r1, [sp, #4]
  400f5a:	f104 0010 	add.w	r0, r4, #16
  400f5e:	4b15      	ldr	r3, [pc, #84]	; (400fb4 <xQueueGenericSend+0x168>)
  400f60:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400f62:	4620      	mov	r0, r4
  400f64:	4b0f      	ldr	r3, [pc, #60]	; (400fa4 <xQueueGenericSend+0x158>)
  400f66:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400f68:	4b0f      	ldr	r3, [pc, #60]	; (400fa8 <xQueueGenericSend+0x15c>)
  400f6a:	4798      	blx	r3
  400f6c:	2800      	cmp	r0, #0
  400f6e:	d1c6      	bne.n	400efe <xQueueGenericSend+0xb2>
					portYIELD_WITHIN_API();
  400f70:	4b0a      	ldr	r3, [pc, #40]	; (400f9c <xQueueGenericSend+0x150>)
  400f72:	4798      	blx	r3
  400f74:	e7c3      	b.n	400efe <xQueueGenericSend+0xb2>
			prvUnlockQueue( pxQueue );
  400f76:	4620      	mov	r0, r4
  400f78:	4b0a      	ldr	r3, [pc, #40]	; (400fa4 <xQueueGenericSend+0x158>)
  400f7a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400f7c:	4b0a      	ldr	r3, [pc, #40]	; (400fa8 <xQueueGenericSend+0x15c>)
  400f7e:	4798      	blx	r3
			return errQUEUE_FULL;
  400f80:	2000      	movs	r0, #0
  400f82:	e7a1      	b.n	400ec8 <xQueueGenericSend+0x7c>
  400f84:	0040089d 	.word	0x0040089d
  400f88:	00401a9d 	.word	0x00401a9d
  400f8c:	004008cd 	.word	0x004008cd
  400f90:	004008f5 	.word	0x004008f5
  400f94:	00400be9 	.word	0x00400be9
  400f98:	00400c5d 	.word	0x00400c5d
  400f9c:	00400885 	.word	0x00400885
  400fa0:	0040195d 	.word	0x0040195d
  400fa4:	00400cdd 	.word	0x00400cdd
  400fa8:	0040168d 	.word	0x0040168d
  400fac:	00401531 	.word	0x00401531
  400fb0:	00401a0d 	.word	0x00401a0d
  400fb4:	004018bd 	.word	0x004018bd
  400fb8:	004019e9 	.word	0x004019e9

00400fbc <xQueueGenericSendFromISR>:
{
  400fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxQueue );
  400fc0:	b160      	cbz	r0, 400fdc <xQueueGenericSendFromISR+0x20>
  400fc2:	4688      	mov	r8, r1
  400fc4:	4615      	mov	r5, r2
  400fc6:	461e      	mov	r6, r3
  400fc8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400fca:	b151      	cbz	r1, 400fe2 <xQueueGenericSendFromISR+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400fcc:	2e02      	cmp	r6, #2
  400fce:	d143      	bne.n	401058 <xQueueGenericSendFromISR+0x9c>
  400fd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400fd2:	2b01      	cmp	r3, #1
  400fd4:	d02c      	beq.n	401030 <xQueueGenericSendFromISR+0x74>
  400fd6:	4b28      	ldr	r3, [pc, #160]	; (401078 <xQueueGenericSendFromISR+0xbc>)
  400fd8:	4798      	blx	r3
  400fda:	e7fe      	b.n	400fda <xQueueGenericSendFromISR+0x1e>
	configASSERT( pxQueue );
  400fdc:	4b26      	ldr	r3, [pc, #152]	; (401078 <xQueueGenericSendFromISR+0xbc>)
  400fde:	4798      	blx	r3
  400fe0:	e7fe      	b.n	400fe0 <xQueueGenericSendFromISR+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400fe2:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400fe4:	2b00      	cmp	r3, #0
  400fe6:	d0f1      	beq.n	400fcc <xQueueGenericSendFromISR+0x10>
  400fe8:	4b23      	ldr	r3, [pc, #140]	; (401078 <xQueueGenericSendFromISR+0xbc>)
  400fea:	4798      	blx	r3
  400fec:	e7fe      	b.n	400fec <xQueueGenericSendFromISR+0x30>
					if( pxQueue->pxQueueSetContainer != NULL )
  400fee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  400ff0:	b14b      	cbz	r3, 401006 <xQueueGenericSendFromISR+0x4a>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400ff2:	4631      	mov	r1, r6
  400ff4:	4620      	mov	r0, r4
  400ff6:	4b21      	ldr	r3, [pc, #132]	; (40107c <xQueueGenericSendFromISR+0xc0>)
  400ff8:	4798      	blx	r3
  400ffa:	2801      	cmp	r0, #1
  400ffc:	d10e      	bne.n	40101c <xQueueGenericSendFromISR+0x60>
							if( pxHigherPriorityTaskWoken != NULL )
  400ffe:	b17d      	cbz	r5, 401020 <xQueueGenericSendFromISR+0x64>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401000:	2401      	movs	r4, #1
  401002:	602c      	str	r4, [r5, #0]
  401004:	e032      	b.n	40106c <xQueueGenericSendFromISR+0xb0>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401006:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401008:	b163      	cbz	r3, 401024 <xQueueGenericSendFromISR+0x68>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40100a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40100e:	4b1c      	ldr	r3, [pc, #112]	; (401080 <xQueueGenericSendFromISR+0xc4>)
  401010:	4798      	blx	r3
  401012:	b148      	cbz	r0, 401028 <xQueueGenericSendFromISR+0x6c>
								if( pxHigherPriorityTaskWoken != NULL )
  401014:	b155      	cbz	r5, 40102c <xQueueGenericSendFromISR+0x70>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401016:	2401      	movs	r4, #1
  401018:	602c      	str	r4, [r5, #0]
  40101a:	e027      	b.n	40106c <xQueueGenericSendFromISR+0xb0>
			xReturn = pdPASS;
  40101c:	2401      	movs	r4, #1
  40101e:	e025      	b.n	40106c <xQueueGenericSendFromISR+0xb0>
  401020:	2401      	movs	r4, #1
  401022:	e023      	b.n	40106c <xQueueGenericSendFromISR+0xb0>
  401024:	2401      	movs	r4, #1
  401026:	e021      	b.n	40106c <xQueueGenericSendFromISR+0xb0>
  401028:	2401      	movs	r4, #1
  40102a:	e01f      	b.n	40106c <xQueueGenericSendFromISR+0xb0>
  40102c:	2401      	movs	r4, #1
  40102e:	e01d      	b.n	40106c <xQueueGenericSendFromISR+0xb0>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401030:	4b14      	ldr	r3, [pc, #80]	; (401084 <xQueueGenericSendFromISR+0xc8>)
  401032:	4798      	blx	r3
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  401034:	4b10      	ldr	r3, [pc, #64]	; (401078 <xQueueGenericSendFromISR+0xbc>)
  401036:	4798      	blx	r3
  401038:	4607      	mov	r7, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40103a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40103c:	4632      	mov	r2, r6
  40103e:	4641      	mov	r1, r8
  401040:	4620      	mov	r0, r4
  401042:	4b11      	ldr	r3, [pc, #68]	; (401088 <xQueueGenericSendFromISR+0xcc>)
  401044:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401046:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401048:	f1b3 3fff 	cmp.w	r3, #4294967295
  40104c:	d0cf      	beq.n	400fee <xQueueGenericSendFromISR+0x32>
				++( pxQueue->xTxLock );
  40104e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401050:	3301      	adds	r3, #1
  401052:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401054:	2401      	movs	r4, #1
  401056:	e009      	b.n	40106c <xQueueGenericSendFromISR+0xb0>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401058:	4b0a      	ldr	r3, [pc, #40]	; (401084 <xQueueGenericSendFromISR+0xc8>)
  40105a:	4798      	blx	r3
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  40105c:	4b06      	ldr	r3, [pc, #24]	; (401078 <xQueueGenericSendFromISR+0xbc>)
  40105e:	4798      	blx	r3
  401060:	4607      	mov	r7, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401062:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401064:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401066:	429a      	cmp	r2, r3
  401068:	d8e8      	bhi.n	40103c <xQueueGenericSendFromISR+0x80>
			xReturn = errQUEUE_FULL;
  40106a:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  40106c:	4638      	mov	r0, r7
  40106e:	4b07      	ldr	r3, [pc, #28]	; (40108c <xQueueGenericSendFromISR+0xd0>)
  401070:	4798      	blx	r3
}
  401072:	4620      	mov	r0, r4
  401074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401078:	0040089d 	.word	0x0040089d
  40107c:	00400c5d 	.word	0x00400c5d
  401080:	0040195d 	.word	0x0040195d
  401084:	00400a7d 	.word	0x00400a7d
  401088:	00400be9 	.word	0x00400be9
  40108c:	004008ed 	.word	0x004008ed

00401090 <xQueueGenericReceive>:
{
  401090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401094:	b084      	sub	sp, #16
  401096:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401098:	b158      	cbz	r0, 4010b2 <xQueueGenericReceive+0x22>
  40109a:	4688      	mov	r8, r1
  40109c:	4699      	mov	r9, r3
  40109e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4010a0:	b151      	cbz	r1, 4010b8 <xQueueGenericReceive+0x28>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4010a2:	4b4b      	ldr	r3, [pc, #300]	; (4011d0 <xQueueGenericReceive+0x140>)
  4010a4:	4798      	blx	r3
  4010a6:	b968      	cbnz	r0, 4010c4 <xQueueGenericReceive+0x34>
  4010a8:	9b01      	ldr	r3, [sp, #4]
  4010aa:	b18b      	cbz	r3, 4010d0 <xQueueGenericReceive+0x40>
  4010ac:	4b49      	ldr	r3, [pc, #292]	; (4011d4 <xQueueGenericReceive+0x144>)
  4010ae:	4798      	blx	r3
  4010b0:	e7fe      	b.n	4010b0 <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
  4010b2:	4b48      	ldr	r3, [pc, #288]	; (4011d4 <xQueueGenericReceive+0x144>)
  4010b4:	4798      	blx	r3
  4010b6:	e7fe      	b.n	4010b6 <xQueueGenericReceive+0x26>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4010b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4010ba:	2b00      	cmp	r3, #0
  4010bc:	d0f1      	beq.n	4010a2 <xQueueGenericReceive+0x12>
  4010be:	4b45      	ldr	r3, [pc, #276]	; (4011d4 <xQueueGenericReceive+0x144>)
  4010c0:	4798      	blx	r3
  4010c2:	e7fe      	b.n	4010c2 <xQueueGenericReceive+0x32>
  4010c4:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4010c6:	4e44      	ldr	r6, [pc, #272]	; (4011d8 <xQueueGenericReceive+0x148>)
					vTaskSetTimeOutState( &xTimeOut );
  4010c8:	f8df a13c 	ldr.w	sl, [pc, #316]	; 401208 <xQueueGenericReceive+0x178>
		taskEXIT_CRITICAL();
  4010cc:	4d43      	ldr	r5, [pc, #268]	; (4011dc <xQueueGenericReceive+0x14c>)
  4010ce:	e03e      	b.n	40114e <xQueueGenericReceive+0xbe>
  4010d0:	2700      	movs	r7, #0
  4010d2:	e7f8      	b.n	4010c6 <xQueueGenericReceive+0x36>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4010d4:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4010d6:	4641      	mov	r1, r8
  4010d8:	4620      	mov	r0, r4
  4010da:	4b41      	ldr	r3, [pc, #260]	; (4011e0 <xQueueGenericReceive+0x150>)
  4010dc:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  4010de:	f1b9 0f00 	cmp.w	r9, #0
  4010e2:	d117      	bne.n	401114 <xQueueGenericReceive+0x84>
					--( pxQueue->uxMessagesWaiting );
  4010e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4010e6:	3b01      	subs	r3, #1
  4010e8:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4010ea:	6823      	ldr	r3, [r4, #0]
  4010ec:	b913      	cbnz	r3, 4010f4 <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4010ee:	4b3d      	ldr	r3, [pc, #244]	; (4011e4 <xQueueGenericReceive+0x154>)
  4010f0:	4798      	blx	r3
  4010f2:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4010f4:	6923      	ldr	r3, [r4, #16]
  4010f6:	b13b      	cbz	r3, 401108 <xQueueGenericReceive+0x78>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4010f8:	f104 0010 	add.w	r0, r4, #16
  4010fc:	4b3a      	ldr	r3, [pc, #232]	; (4011e8 <xQueueGenericReceive+0x158>)
  4010fe:	4798      	blx	r3
  401100:	2801      	cmp	r0, #1
  401102:	d101      	bne.n	401108 <xQueueGenericReceive+0x78>
							queueYIELD_IF_USING_PREEMPTION();
  401104:	4b39      	ldr	r3, [pc, #228]	; (4011ec <xQueueGenericReceive+0x15c>)
  401106:	4798      	blx	r3
				taskEXIT_CRITICAL();
  401108:	4b34      	ldr	r3, [pc, #208]	; (4011dc <xQueueGenericReceive+0x14c>)
  40110a:	4798      	blx	r3
				return pdPASS;
  40110c:	2001      	movs	r0, #1
}
  40110e:	b004      	add	sp, #16
  401110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401114:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401116:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401118:	2b00      	cmp	r3, #0
  40111a:	d0f5      	beq.n	401108 <xQueueGenericReceive+0x78>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40111c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401120:	4b31      	ldr	r3, [pc, #196]	; (4011e8 <xQueueGenericReceive+0x158>)
  401122:	4798      	blx	r3
  401124:	2800      	cmp	r0, #0
  401126:	d0ef      	beq.n	401108 <xQueueGenericReceive+0x78>
							queueYIELD_IF_USING_PREEMPTION();
  401128:	4b30      	ldr	r3, [pc, #192]	; (4011ec <xQueueGenericReceive+0x15c>)
  40112a:	4798      	blx	r3
  40112c:	e7ec      	b.n	401108 <xQueueGenericReceive+0x78>
					taskEXIT_CRITICAL();
  40112e:	4b2b      	ldr	r3, [pc, #172]	; (4011dc <xQueueGenericReceive+0x14c>)
  401130:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401132:	2000      	movs	r0, #0
  401134:	e7eb      	b.n	40110e <xQueueGenericReceive+0x7e>
					vTaskSetTimeOutState( &xTimeOut );
  401136:	a802      	add	r0, sp, #8
  401138:	47d0      	blx	sl
  40113a:	e011      	b.n	401160 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
  40113c:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  40113e:	6860      	ldr	r0, [r4, #4]
  401140:	4b2b      	ldr	r3, [pc, #172]	; (4011f0 <xQueueGenericReceive+0x160>)
  401142:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401144:	47a8      	blx	r5
  401146:	e028      	b.n	40119a <xQueueGenericReceive+0x10a>
					portYIELD_WITHIN_API();
  401148:	4b28      	ldr	r3, [pc, #160]	; (4011ec <xQueueGenericReceive+0x15c>)
  40114a:	4798      	blx	r3
  40114c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  40114e:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401150:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401152:	2b00      	cmp	r3, #0
  401154:	d1be      	bne.n	4010d4 <xQueueGenericReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
  401156:	9b01      	ldr	r3, [sp, #4]
  401158:	2b00      	cmp	r3, #0
  40115a:	d0e8      	beq.n	40112e <xQueueGenericReceive+0x9e>
				else if( xEntryTimeSet == pdFALSE )
  40115c:	2f00      	cmp	r7, #0
  40115e:	d0ea      	beq.n	401136 <xQueueGenericReceive+0xa6>
		taskEXIT_CRITICAL();
  401160:	47a8      	blx	r5
		vTaskSuspendAll();
  401162:	4b24      	ldr	r3, [pc, #144]	; (4011f4 <xQueueGenericReceive+0x164>)
  401164:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401166:	47b0      	blx	r6
  401168:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40116a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40116e:	bf04      	itt	eq
  401170:	2300      	moveq	r3, #0
  401172:	6463      	streq	r3, [r4, #68]	; 0x44
  401174:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401176:	f1b3 3fff 	cmp.w	r3, #4294967295
  40117a:	bf04      	itt	eq
  40117c:	2300      	moveq	r3, #0
  40117e:	64a3      	streq	r3, [r4, #72]	; 0x48
  401180:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401182:	a901      	add	r1, sp, #4
  401184:	a802      	add	r0, sp, #8
  401186:	4b1c      	ldr	r3, [pc, #112]	; (4011f8 <xQueueGenericReceive+0x168>)
  401188:	4798      	blx	r3
  40118a:	b9c8      	cbnz	r0, 4011c0 <xQueueGenericReceive+0x130>
	taskENTER_CRITICAL();
  40118c:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40118e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401190:	47a8      	blx	r5
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401192:	b97f      	cbnz	r7, 4011b4 <xQueueGenericReceive+0x124>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401194:	6823      	ldr	r3, [r4, #0]
  401196:	2b00      	cmp	r3, #0
  401198:	d0d0      	beq.n	40113c <xQueueGenericReceive+0xac>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40119a:	9901      	ldr	r1, [sp, #4]
  40119c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4011a0:	4b16      	ldr	r3, [pc, #88]	; (4011fc <xQueueGenericReceive+0x16c>)
  4011a2:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4011a4:	4620      	mov	r0, r4
  4011a6:	4b16      	ldr	r3, [pc, #88]	; (401200 <xQueueGenericReceive+0x170>)
  4011a8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4011aa:	4b16      	ldr	r3, [pc, #88]	; (401204 <xQueueGenericReceive+0x174>)
  4011ac:	4798      	blx	r3
  4011ae:	2800      	cmp	r0, #0
  4011b0:	d1cc      	bne.n	40114c <xQueueGenericReceive+0xbc>
  4011b2:	e7c9      	b.n	401148 <xQueueGenericReceive+0xb8>
				prvUnlockQueue( pxQueue );
  4011b4:	4620      	mov	r0, r4
  4011b6:	4b12      	ldr	r3, [pc, #72]	; (401200 <xQueueGenericReceive+0x170>)
  4011b8:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4011ba:	4b12      	ldr	r3, [pc, #72]	; (401204 <xQueueGenericReceive+0x174>)
  4011bc:	4798      	blx	r3
  4011be:	e7c5      	b.n	40114c <xQueueGenericReceive+0xbc>
			prvUnlockQueue( pxQueue );
  4011c0:	4620      	mov	r0, r4
  4011c2:	4b0f      	ldr	r3, [pc, #60]	; (401200 <xQueueGenericReceive+0x170>)
  4011c4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4011c6:	4b0f      	ldr	r3, [pc, #60]	; (401204 <xQueueGenericReceive+0x174>)
  4011c8:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4011ca:	2000      	movs	r0, #0
  4011cc:	e79f      	b.n	40110e <xQueueGenericReceive+0x7e>
  4011ce:	bf00      	nop
  4011d0:	00401a9d 	.word	0x00401a9d
  4011d4:	0040089d 	.word	0x0040089d
  4011d8:	004008cd 	.word	0x004008cd
  4011dc:	004008f5 	.word	0x004008f5
  4011e0:	00400cb5 	.word	0x00400cb5
  4011e4:	00401a91 	.word	0x00401a91
  4011e8:	0040195d 	.word	0x0040195d
  4011ec:	00400885 	.word	0x00400885
  4011f0:	00401abd 	.word	0x00401abd
  4011f4:	00401531 	.word	0x00401531
  4011f8:	00401a0d 	.word	0x00401a0d
  4011fc:	004018bd 	.word	0x004018bd
  401200:	00400cdd 	.word	0x00400cdd
  401204:	0040168d 	.word	0x0040168d
  401208:	004019e9 	.word	0x004019e9

0040120c <vQueueWaitForMessageRestricted>:
	{
  40120c:	b538      	push	{r3, r4, r5, lr}
  40120e:	4604      	mov	r4, r0
  401210:	460d      	mov	r5, r1
		prvLockQueue( pxQueue );
  401212:	4b0e      	ldr	r3, [pc, #56]	; (40124c <vQueueWaitForMessageRestricted+0x40>)
  401214:	4798      	blx	r3
  401216:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401218:	f1b3 3fff 	cmp.w	r3, #4294967295
  40121c:	bf04      	itt	eq
  40121e:	2300      	moveq	r3, #0
  401220:	6463      	streq	r3, [r4, #68]	; 0x44
  401222:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401224:	f1b3 3fff 	cmp.w	r3, #4294967295
  401228:	bf04      	itt	eq
  40122a:	2300      	moveq	r3, #0
  40122c:	64a3      	streq	r3, [r4, #72]	; 0x48
  40122e:	4b08      	ldr	r3, [pc, #32]	; (401250 <vQueueWaitForMessageRestricted+0x44>)
  401230:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401232:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401234:	b11b      	cbz	r3, 40123e <vQueueWaitForMessageRestricted+0x32>
		prvUnlockQueue( pxQueue );
  401236:	4620      	mov	r0, r4
  401238:	4b06      	ldr	r3, [pc, #24]	; (401254 <vQueueWaitForMessageRestricted+0x48>)
  40123a:	4798      	blx	r3
  40123c:	bd38      	pop	{r3, r4, r5, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40123e:	4629      	mov	r1, r5
  401240:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401244:	4b04      	ldr	r3, [pc, #16]	; (401258 <vQueueWaitForMessageRestricted+0x4c>)
  401246:	4798      	blx	r3
  401248:	e7f5      	b.n	401236 <vQueueWaitForMessageRestricted+0x2a>
  40124a:	bf00      	nop
  40124c:	004008cd 	.word	0x004008cd
  401250:	004008f5 	.word	0x004008f5
  401254:	00400cdd 	.word	0x00400cdd
  401258:	00401919 	.word	0x00401919

0040125c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40125c:	4b08      	ldr	r3, [pc, #32]	; (401280 <prvResetNextTaskUnblockTime+0x24>)
  40125e:	681b      	ldr	r3, [r3, #0]
  401260:	681b      	ldr	r3, [r3, #0]
  401262:	b13b      	cbz	r3, 401274 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401264:	4b06      	ldr	r3, [pc, #24]	; (401280 <prvResetNextTaskUnblockTime+0x24>)
  401266:	681b      	ldr	r3, [r3, #0]
  401268:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40126a:	68db      	ldr	r3, [r3, #12]
  40126c:	685a      	ldr	r2, [r3, #4]
  40126e:	4b05      	ldr	r3, [pc, #20]	; (401284 <prvResetNextTaskUnblockTime+0x28>)
  401270:	601a      	str	r2, [r3, #0]
  401272:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401274:	f04f 32ff 	mov.w	r2, #4294967295
  401278:	4b02      	ldr	r3, [pc, #8]	; (401284 <prvResetNextTaskUnblockTime+0x28>)
  40127a:	601a      	str	r2, [r3, #0]
  40127c:	4770      	bx	lr
  40127e:	bf00      	nop
  401280:	200139dc 	.word	0x200139dc
  401284:	2000009c 	.word	0x2000009c

00401288 <prvAddCurrentTaskToDelayedList>:
{
  401288:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40128a:	4b0f      	ldr	r3, [pc, #60]	; (4012c8 <prvAddCurrentTaskToDelayedList+0x40>)
  40128c:	681b      	ldr	r3, [r3, #0]
  40128e:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401290:	4b0e      	ldr	r3, [pc, #56]	; (4012cc <prvAddCurrentTaskToDelayedList+0x44>)
  401292:	681b      	ldr	r3, [r3, #0]
  401294:	4298      	cmp	r0, r3
  401296:	d30e      	bcc.n	4012b6 <prvAddCurrentTaskToDelayedList+0x2e>
  401298:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40129a:	4b0d      	ldr	r3, [pc, #52]	; (4012d0 <prvAddCurrentTaskToDelayedList+0x48>)
  40129c:	6818      	ldr	r0, [r3, #0]
  40129e:	4b0a      	ldr	r3, [pc, #40]	; (4012c8 <prvAddCurrentTaskToDelayedList+0x40>)
  4012a0:	6819      	ldr	r1, [r3, #0]
  4012a2:	3104      	adds	r1, #4
  4012a4:	4b0b      	ldr	r3, [pc, #44]	; (4012d4 <prvAddCurrentTaskToDelayedList+0x4c>)
  4012a6:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  4012a8:	4b0b      	ldr	r3, [pc, #44]	; (4012d8 <prvAddCurrentTaskToDelayedList+0x50>)
  4012aa:	681b      	ldr	r3, [r3, #0]
  4012ac:	429c      	cmp	r4, r3
			xNextTaskUnblockTime = xTimeToWake;
  4012ae:	bf3c      	itt	cc
  4012b0:	4b09      	ldrcc	r3, [pc, #36]	; (4012d8 <prvAddCurrentTaskToDelayedList+0x50>)
  4012b2:	601c      	strcc	r4, [r3, #0]
  4012b4:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4012b6:	4b09      	ldr	r3, [pc, #36]	; (4012dc <prvAddCurrentTaskToDelayedList+0x54>)
  4012b8:	6818      	ldr	r0, [r3, #0]
  4012ba:	4b03      	ldr	r3, [pc, #12]	; (4012c8 <prvAddCurrentTaskToDelayedList+0x40>)
  4012bc:	6819      	ldr	r1, [r3, #0]
  4012be:	3104      	adds	r1, #4
  4012c0:	4b04      	ldr	r3, [pc, #16]	; (4012d4 <prvAddCurrentTaskToDelayedList+0x4c>)
  4012c2:	4798      	blx	r3
  4012c4:	bd10      	pop	{r4, pc}
  4012c6:	bf00      	nop
  4012c8:	200139d8 	.word	0x200139d8
  4012cc:	20013acc 	.word	0x20013acc
  4012d0:	200139dc 	.word	0x200139dc
  4012d4:	004007b5 	.word	0x004007b5
  4012d8:	2000009c 	.word	0x2000009c
  4012dc:	200139e0 	.word	0x200139e0

004012e0 <xTaskGenericCreate>:
{
  4012e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4012e6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4012ea:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
  4012ee:	b140      	cbz	r0, 401302 <xTaskGenericCreate+0x22>
  4012f0:	460d      	mov	r5, r1
  4012f2:	4617      	mov	r7, r2
  4012f4:	469b      	mov	fp, r3
  4012f6:	4682      	mov	sl, r0
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  4012f8:	2e04      	cmp	r6, #4
  4012fa:	d905      	bls.n	401308 <xTaskGenericCreate+0x28>
  4012fc:	4b5b      	ldr	r3, [pc, #364]	; (40146c <xTaskGenericCreate+0x18c>)
  4012fe:	4798      	blx	r3
  401300:	e7fe      	b.n	401300 <xTaskGenericCreate+0x20>
	configASSERT( pxTaskCode );
  401302:	4b5a      	ldr	r3, [pc, #360]	; (40146c <xTaskGenericCreate+0x18c>)
  401304:	4798      	blx	r3
  401306:	e7fe      	b.n	401306 <xTaskGenericCreate+0x26>
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401308:	2044      	movs	r0, #68	; 0x44
  40130a:	4b59      	ldr	r3, [pc, #356]	; (401470 <xTaskGenericCreate+0x190>)
  40130c:	4798      	blx	r3
	if( pxNewTCB != NULL )
  40130e:	4604      	mov	r4, r0
  401310:	2800      	cmp	r0, #0
  401312:	d058      	beq.n	4013c6 <xTaskGenericCreate+0xe6>
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401314:	f1b8 0f00 	cmp.w	r8, #0
  401318:	d04c      	beq.n	4013b4 <xTaskGenericCreate+0xd4>
  40131a:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  40131e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
  401322:	3f01      	subs	r7, #1
  401324:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401326:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  40132a:	f023 0707 	bic.w	r7, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40132e:	782b      	ldrb	r3, [r5, #0]
  401330:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401334:	782b      	ldrb	r3, [r5, #0]
  401336:	b15b      	cbz	r3, 401350 <xTaskGenericCreate+0x70>
  401338:	462b      	mov	r3, r5
  40133a:	f104 0234 	add.w	r2, r4, #52	; 0x34
  40133e:	3509      	adds	r5, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401340:	7859      	ldrb	r1, [r3, #1]
  401342:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401346:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  40134a:	b109      	cbz	r1, 401350 <xTaskGenericCreate+0x70>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40134c:	42ab      	cmp	r3, r5
  40134e:	d1f7      	bne.n	401340 <xTaskGenericCreate+0x60>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401350:	2300      	movs	r3, #0
  401352:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  401356:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401358:	6426      	str	r6, [r4, #64]	; 0x40
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40135a:	f104 0804 	add.w	r8, r4, #4
  40135e:	4640      	mov	r0, r8
  401360:	4d44      	ldr	r5, [pc, #272]	; (401474 <xTaskGenericCreate+0x194>)
  401362:	47a8      	blx	r5
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401364:	f104 0018 	add.w	r0, r4, #24
  401368:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40136a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40136c:	f1c6 0305 	rsb	r3, r6, #5
  401370:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401372:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401374:	465a      	mov	r2, fp
  401376:	4651      	mov	r1, sl
  401378:	4638      	mov	r0, r7
  40137a:	4b3f      	ldr	r3, [pc, #252]	; (401478 <xTaskGenericCreate+0x198>)
  40137c:	4798      	blx	r3
  40137e:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401380:	f1b9 0f00 	cmp.w	r9, #0
  401384:	d001      	beq.n	40138a <xTaskGenericCreate+0xaa>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401386:	f8c9 4000 	str.w	r4, [r9]
		taskENTER_CRITICAL();
  40138a:	4b3c      	ldr	r3, [pc, #240]	; (40147c <xTaskGenericCreate+0x19c>)
  40138c:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  40138e:	4a3c      	ldr	r2, [pc, #240]	; (401480 <xTaskGenericCreate+0x1a0>)
  401390:	6813      	ldr	r3, [r2, #0]
  401392:	3301      	adds	r3, #1
  401394:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401396:	4b3b      	ldr	r3, [pc, #236]	; (401484 <xTaskGenericCreate+0x1a4>)
  401398:	681b      	ldr	r3, [r3, #0]
  40139a:	b1c3      	cbz	r3, 4013ce <xTaskGenericCreate+0xee>
				if( xSchedulerRunning == pdFALSE )
  40139c:	4b3a      	ldr	r3, [pc, #232]	; (401488 <xTaskGenericCreate+0x1a8>)
  40139e:	681b      	ldr	r3, [r3, #0]
  4013a0:	2b00      	cmp	r3, #0
  4013a2:	d13b      	bne.n	40141c <xTaskGenericCreate+0x13c>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4013a4:	4b37      	ldr	r3, [pc, #220]	; (401484 <xTaskGenericCreate+0x1a4>)
  4013a6:	681b      	ldr	r3, [r3, #0]
  4013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4013aa:	429e      	cmp	r6, r3
						pxCurrentTCB = pxNewTCB;
  4013ac:	bf24      	itt	cs
  4013ae:	4b35      	ldrcs	r3, [pc, #212]	; (401484 <xTaskGenericCreate+0x1a4>)
  4013b0:	601c      	strcs	r4, [r3, #0]
  4013b2:	e033      	b.n	40141c <xTaskGenericCreate+0x13c>
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4013b4:	00b8      	lsls	r0, r7, #2
  4013b6:	4b2e      	ldr	r3, [pc, #184]	; (401470 <xTaskGenericCreate+0x190>)
  4013b8:	4798      	blx	r3
  4013ba:	6320      	str	r0, [r4, #48]	; 0x30
		if( pxNewTCB->pxStack == NULL )
  4013bc:	2800      	cmp	r0, #0
  4013be:	d1ae      	bne.n	40131e <xTaskGenericCreate+0x3e>
			vPortFree( pxNewTCB );
  4013c0:	4620      	mov	r0, r4
  4013c2:	4b32      	ldr	r3, [pc, #200]	; (40148c <xTaskGenericCreate+0x1ac>)
  4013c4:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4013c6:	f04f 30ff 	mov.w	r0, #4294967295
}
  4013ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxCurrentTCB =  pxNewTCB;
  4013ce:	4b2d      	ldr	r3, [pc, #180]	; (401484 <xTaskGenericCreate+0x1a4>)
  4013d0:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4013d2:	6813      	ldr	r3, [r2, #0]
  4013d4:	2b01      	cmp	r3, #1
  4013d6:	d121      	bne.n	40141c <xTaskGenericCreate+0x13c>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4013d8:	4f2d      	ldr	r7, [pc, #180]	; (401490 <xTaskGenericCreate+0x1b0>)
  4013da:	4638      	mov	r0, r7
  4013dc:	4d2d      	ldr	r5, [pc, #180]	; (401494 <xTaskGenericCreate+0x1b4>)
  4013de:	47a8      	blx	r5
  4013e0:	f107 0014 	add.w	r0, r7, #20
  4013e4:	47a8      	blx	r5
  4013e6:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4013ea:	47a8      	blx	r5
  4013ec:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4013f0:	47a8      	blx	r5
  4013f2:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4013f6:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  4013f8:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 4014c4 <xTaskGenericCreate+0x1e4>
  4013fc:	4648      	mov	r0, r9
  4013fe:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401400:	4f25      	ldr	r7, [pc, #148]	; (401498 <xTaskGenericCreate+0x1b8>)
  401402:	4638      	mov	r0, r7
  401404:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401406:	4825      	ldr	r0, [pc, #148]	; (40149c <xTaskGenericCreate+0x1bc>)
  401408:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  40140a:	4825      	ldr	r0, [pc, #148]	; (4014a0 <xTaskGenericCreate+0x1c0>)
  40140c:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  40140e:	4825      	ldr	r0, [pc, #148]	; (4014a4 <xTaskGenericCreate+0x1c4>)
  401410:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  401412:	4b25      	ldr	r3, [pc, #148]	; (4014a8 <xTaskGenericCreate+0x1c8>)
  401414:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401418:	4b24      	ldr	r3, [pc, #144]	; (4014ac <xTaskGenericCreate+0x1cc>)
  40141a:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  40141c:	4a24      	ldr	r2, [pc, #144]	; (4014b0 <xTaskGenericCreate+0x1d0>)
  40141e:	6813      	ldr	r3, [r2, #0]
  401420:	3301      	adds	r3, #1
  401422:	6013      	str	r3, [r2, #0]
			prvAddTaskToReadyList( pxNewTCB );
  401424:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401426:	4b23      	ldr	r3, [pc, #140]	; (4014b4 <xTaskGenericCreate+0x1d4>)
  401428:	681b      	ldr	r3, [r3, #0]
  40142a:	4298      	cmp	r0, r3
  40142c:	bf84      	itt	hi
  40142e:	4b21      	ldrhi	r3, [pc, #132]	; (4014b4 <xTaskGenericCreate+0x1d4>)
  401430:	6018      	strhi	r0, [r3, #0]
  401432:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401436:	4641      	mov	r1, r8
  401438:	4b15      	ldr	r3, [pc, #84]	; (401490 <xTaskGenericCreate+0x1b0>)
  40143a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40143e:	4b1e      	ldr	r3, [pc, #120]	; (4014b8 <xTaskGenericCreate+0x1d8>)
  401440:	4798      	blx	r3
		taskEXIT_CRITICAL();
  401442:	4b1e      	ldr	r3, [pc, #120]	; (4014bc <xTaskGenericCreate+0x1dc>)
  401444:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401446:	4b10      	ldr	r3, [pc, #64]	; (401488 <xTaskGenericCreate+0x1a8>)
  401448:	681b      	ldr	r3, [r3, #0]
  40144a:	b14b      	cbz	r3, 401460 <xTaskGenericCreate+0x180>
			if( pxCurrentTCB->uxPriority < uxPriority )
  40144c:	4b0d      	ldr	r3, [pc, #52]	; (401484 <xTaskGenericCreate+0x1a4>)
  40144e:	681b      	ldr	r3, [r3, #0]
  401450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401452:	429e      	cmp	r6, r3
  401454:	d907      	bls.n	401466 <xTaskGenericCreate+0x186>
				taskYIELD_IF_USING_PREEMPTION();
  401456:	4b1a      	ldr	r3, [pc, #104]	; (4014c0 <xTaskGenericCreate+0x1e0>)
  401458:	4798      	blx	r3
  40145a:	2001      	movs	r0, #1
  40145c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401460:	2001      	movs	r0, #1
  401462:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401466:	2001      	movs	r0, #1
	return xReturn;
  401468:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40146c:	0040089d 	.word	0x0040089d
  401470:	00400ac9 	.word	0x00400ac9
  401474:	00400797 	.word	0x00400797
  401478:	0040083d 	.word	0x0040083d
  40147c:	004008cd 	.word	0x004008cd
  401480:	20013a48 	.word	0x20013a48
  401484:	200139d8 	.word	0x200139d8
  401488:	20013aa0 	.word	0x20013aa0
  40148c:	00400b9d 	.word	0x00400b9d
  401490:	200139e4 	.word	0x200139e4
  401494:	00400781 	.word	0x00400781
  401498:	20013a74 	.word	0x20013a74
  40149c:	20013a8c 	.word	0x20013a8c
  4014a0:	20013ab8 	.word	0x20013ab8
  4014a4:	20013aa4 	.word	0x20013aa4
  4014a8:	200139dc 	.word	0x200139dc
  4014ac:	200139e0 	.word	0x200139e0
  4014b0:	20013a54 	.word	0x20013a54
  4014b4:	20013a5c 	.word	0x20013a5c
  4014b8:	0040079d 	.word	0x0040079d
  4014bc:	004008f5 	.word	0x004008f5
  4014c0:	00400885 	.word	0x00400885
  4014c4:	20013a60 	.word	0x20013a60

004014c8 <vTaskStartScheduler>:
{
  4014c8:	b510      	push	{r4, lr}
  4014ca:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4014cc:	2300      	movs	r3, #0
  4014ce:	9303      	str	r3, [sp, #12]
  4014d0:	9302      	str	r3, [sp, #8]
  4014d2:	9301      	str	r3, [sp, #4]
  4014d4:	9300      	str	r3, [sp, #0]
  4014d6:	2282      	movs	r2, #130	; 0x82
  4014d8:	490d      	ldr	r1, [pc, #52]	; (401510 <vTaskStartScheduler+0x48>)
  4014da:	480e      	ldr	r0, [pc, #56]	; (401514 <vTaskStartScheduler+0x4c>)
  4014dc:	4c0e      	ldr	r4, [pc, #56]	; (401518 <vTaskStartScheduler+0x50>)
  4014de:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4014e0:	2801      	cmp	r0, #1
  4014e2:	d002      	beq.n	4014ea <vTaskStartScheduler+0x22>
		configASSERT( xReturn );
  4014e4:	b180      	cbz	r0, 401508 <vTaskStartScheduler+0x40>
}
  4014e6:	b004      	add	sp, #16
  4014e8:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  4014ea:	4b0c      	ldr	r3, [pc, #48]	; (40151c <vTaskStartScheduler+0x54>)
  4014ec:	4798      	blx	r3
	if( xReturn == pdPASS )
  4014ee:	2801      	cmp	r0, #1
  4014f0:	d1f8      	bne.n	4014e4 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
  4014f2:	4b0b      	ldr	r3, [pc, #44]	; (401520 <vTaskStartScheduler+0x58>)
  4014f4:	4798      	blx	r3
		xSchedulerRunning = pdTRUE;
  4014f6:	2201      	movs	r2, #1
  4014f8:	4b0a      	ldr	r3, [pc, #40]	; (401524 <vTaskStartScheduler+0x5c>)
  4014fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4014fc:	2200      	movs	r2, #0
  4014fe:	4b0a      	ldr	r3, [pc, #40]	; (401528 <vTaskStartScheduler+0x60>)
  401500:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401502:	4b0a      	ldr	r3, [pc, #40]	; (40152c <vTaskStartScheduler+0x64>)
  401504:	4798      	blx	r3
  401506:	e7ee      	b.n	4014e6 <vTaskStartScheduler+0x1e>
		configASSERT( xReturn );
  401508:	4b05      	ldr	r3, [pc, #20]	; (401520 <vTaskStartScheduler+0x58>)
  40150a:	4798      	blx	r3
  40150c:	e7fe      	b.n	40150c <vTaskStartScheduler+0x44>
  40150e:	bf00      	nop
  401510:	0040e58c 	.word	0x0040e58c
  401514:	00401791 	.word	0x00401791
  401518:	004012e1 	.word	0x004012e1
  40151c:	00401c4d 	.word	0x00401c4d
  401520:	0040089d 	.word	0x0040089d
  401524:	20013aa0 	.word	0x20013aa0
  401528:	20013acc 	.word	0x20013acc
  40152c:	004009b9 	.word	0x004009b9

00401530 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401530:	4a02      	ldr	r2, [pc, #8]	; (40153c <vTaskSuspendAll+0xc>)
  401532:	6813      	ldr	r3, [r2, #0]
  401534:	3301      	adds	r3, #1
  401536:	6013      	str	r3, [r2, #0]
  401538:	4770      	bx	lr
  40153a:	bf00      	nop
  40153c:	20013a50 	.word	0x20013a50

00401540 <xTaskGetTickCount>:
{
  401540:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
  401542:	4b04      	ldr	r3, [pc, #16]	; (401554 <xTaskGetTickCount+0x14>)
  401544:	4798      	blx	r3
		xTicks = xTickCount;
  401546:	4b04      	ldr	r3, [pc, #16]	; (401558 <xTaskGetTickCount+0x18>)
  401548:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
  40154a:	4b04      	ldr	r3, [pc, #16]	; (40155c <xTaskGetTickCount+0x1c>)
  40154c:	4798      	blx	r3
}
  40154e:	4620      	mov	r0, r4
  401550:	bd10      	pop	{r4, pc}
  401552:	bf00      	nop
  401554:	004008cd 	.word	0x004008cd
  401558:	20013acc 	.word	0x20013acc
  40155c:	004008f5 	.word	0x004008f5

00401560 <xTaskIncrementTick>:
{
  401560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401564:	4b3a      	ldr	r3, [pc, #232]	; (401650 <xTaskIncrementTick+0xf0>)
  401566:	681b      	ldr	r3, [r3, #0]
  401568:	2b00      	cmp	r3, #0
  40156a:	d163      	bne.n	401634 <xTaskIncrementTick+0xd4>
		++xTickCount;
  40156c:	4b39      	ldr	r3, [pc, #228]	; (401654 <xTaskIncrementTick+0xf4>)
  40156e:	681a      	ldr	r2, [r3, #0]
  401570:	3201      	adds	r2, #1
  401572:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401574:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  401576:	b996      	cbnz	r6, 40159e <xTaskIncrementTick+0x3e>
				taskSWITCH_DELAYED_LISTS();
  401578:	4b37      	ldr	r3, [pc, #220]	; (401658 <xTaskIncrementTick+0xf8>)
  40157a:	681b      	ldr	r3, [r3, #0]
  40157c:	681b      	ldr	r3, [r3, #0]
  40157e:	b113      	cbz	r3, 401586 <xTaskIncrementTick+0x26>
  401580:	4b36      	ldr	r3, [pc, #216]	; (40165c <xTaskIncrementTick+0xfc>)
  401582:	4798      	blx	r3
  401584:	e7fe      	b.n	401584 <xTaskIncrementTick+0x24>
  401586:	4a34      	ldr	r2, [pc, #208]	; (401658 <xTaskIncrementTick+0xf8>)
  401588:	6811      	ldr	r1, [r2, #0]
  40158a:	4b35      	ldr	r3, [pc, #212]	; (401660 <xTaskIncrementTick+0x100>)
  40158c:	6818      	ldr	r0, [r3, #0]
  40158e:	6010      	str	r0, [r2, #0]
  401590:	6019      	str	r1, [r3, #0]
  401592:	4a34      	ldr	r2, [pc, #208]	; (401664 <xTaskIncrementTick+0x104>)
  401594:	6813      	ldr	r3, [r2, #0]
  401596:	3301      	adds	r3, #1
  401598:	6013      	str	r3, [r2, #0]
  40159a:	4b33      	ldr	r3, [pc, #204]	; (401668 <xTaskIncrementTick+0x108>)
  40159c:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  40159e:	4b33      	ldr	r3, [pc, #204]	; (40166c <xTaskIncrementTick+0x10c>)
  4015a0:	681b      	ldr	r3, [r3, #0]
  4015a2:	429e      	cmp	r6, r3
  4015a4:	d20c      	bcs.n	4015c0 <xTaskIncrementTick+0x60>
BaseType_t xSwitchRequired = pdFALSE;
  4015a6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4015a8:	4b31      	ldr	r3, [pc, #196]	; (401670 <xTaskIncrementTick+0x110>)
  4015aa:	681b      	ldr	r3, [r3, #0]
  4015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4015ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4015b2:	4a30      	ldr	r2, [pc, #192]	; (401674 <xTaskIncrementTick+0x114>)
  4015b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4015b8:	2b02      	cmp	r3, #2
  4015ba:	bf28      	it	cs
  4015bc:	2401      	movcs	r4, #1
  4015be:	e03e      	b.n	40163e <xTaskIncrementTick+0xde>
  4015c0:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4015c2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 401658 <xTaskIncrementTick+0xf8>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4015c6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 401688 <xTaskIncrementTick+0x128>
						prvAddTaskToReadyList( pxTCB );
  4015ca:	4f2b      	ldr	r7, [pc, #172]	; (401678 <xTaskIncrementTick+0x118>)
  4015cc:	e01b      	b.n	401606 <xTaskIncrementTick+0xa6>
						xNextTaskUnblockTime = portMAX_DELAY;
  4015ce:	f04f 32ff 	mov.w	r2, #4294967295
  4015d2:	4b26      	ldr	r3, [pc, #152]	; (40166c <xTaskIncrementTick+0x10c>)
  4015d4:	601a      	str	r2, [r3, #0]
						break;
  4015d6:	e7e7      	b.n	4015a8 <xTaskIncrementTick+0x48>
							xNextTaskUnblockTime = xItemValue;
  4015d8:	4a24      	ldr	r2, [pc, #144]	; (40166c <xTaskIncrementTick+0x10c>)
  4015da:	6013      	str	r3, [r2, #0]
							break;
  4015dc:	e7e4      	b.n	4015a8 <xTaskIncrementTick+0x48>
						prvAddTaskToReadyList( pxTCB );
  4015de:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4015e0:	683b      	ldr	r3, [r7, #0]
  4015e2:	4298      	cmp	r0, r3
  4015e4:	bf88      	it	hi
  4015e6:	6038      	strhi	r0, [r7, #0]
  4015e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4015ec:	4651      	mov	r1, sl
  4015ee:	4b21      	ldr	r3, [pc, #132]	; (401674 <xTaskIncrementTick+0x114>)
  4015f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4015f4:	4b21      	ldr	r3, [pc, #132]	; (40167c <xTaskIncrementTick+0x11c>)
  4015f6:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4015f8:	4b1d      	ldr	r3, [pc, #116]	; (401670 <xTaskIncrementTick+0x110>)
  4015fa:	681b      	ldr	r3, [r3, #0]
  4015fc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401600:	429a      	cmp	r2, r3
  401602:	bf28      	it	cs
  401604:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401606:	f8d9 3000 	ldr.w	r3, [r9]
  40160a:	681b      	ldr	r3, [r3, #0]
  40160c:	2b00      	cmp	r3, #0
  40160e:	d0de      	beq.n	4015ce <xTaskIncrementTick+0x6e>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401610:	f8d9 3000 	ldr.w	r3, [r9]
  401614:	68db      	ldr	r3, [r3, #12]
  401616:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401618:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40161a:	429e      	cmp	r6, r3
  40161c:	d3dc      	bcc.n	4015d8 <xTaskIncrementTick+0x78>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40161e:	f105 0a04 	add.w	sl, r5, #4
  401622:	4650      	mov	r0, sl
  401624:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401626:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401628:	2b00      	cmp	r3, #0
  40162a:	d0d8      	beq.n	4015de <xTaskIncrementTick+0x7e>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40162c:	f105 0018 	add.w	r0, r5, #24
  401630:	47c0      	blx	r8
  401632:	e7d4      	b.n	4015de <xTaskIncrementTick+0x7e>
		++uxPendedTicks;
  401634:	4a12      	ldr	r2, [pc, #72]	; (401680 <xTaskIncrementTick+0x120>)
  401636:	6813      	ldr	r3, [r2, #0]
  401638:	3301      	adds	r3, #1
  40163a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
  40163c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
  40163e:	4b11      	ldr	r3, [pc, #68]	; (401684 <xTaskIncrementTick+0x124>)
  401640:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401642:	2b00      	cmp	r3, #0
}
  401644:	bf0c      	ite	eq
  401646:	4620      	moveq	r0, r4
  401648:	2001      	movne	r0, #1
  40164a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40164e:	bf00      	nop
  401650:	20013a50 	.word	0x20013a50
  401654:	20013acc 	.word	0x20013acc
  401658:	200139dc 	.word	0x200139dc
  40165c:	0040089d 	.word	0x0040089d
  401660:	200139e0 	.word	0x200139e0
  401664:	20013a88 	.word	0x20013a88
  401668:	0040125d 	.word	0x0040125d
  40166c:	2000009c 	.word	0x2000009c
  401670:	200139d8 	.word	0x200139d8
  401674:	200139e4 	.word	0x200139e4
  401678:	20013a5c 	.word	0x20013a5c
  40167c:	0040079d 	.word	0x0040079d
  401680:	20013a4c 	.word	0x20013a4c
  401684:	20013ad0 	.word	0x20013ad0
  401688:	004007e9 	.word	0x004007e9

0040168c <xTaskResumeAll>:
{
  40168c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  401690:	4b30      	ldr	r3, [pc, #192]	; (401754 <xTaskResumeAll+0xc8>)
  401692:	681b      	ldr	r3, [r3, #0]
  401694:	b913      	cbnz	r3, 40169c <xTaskResumeAll+0x10>
  401696:	4b30      	ldr	r3, [pc, #192]	; (401758 <xTaskResumeAll+0xcc>)
  401698:	4798      	blx	r3
  40169a:	e7fe      	b.n	40169a <xTaskResumeAll+0xe>
	taskENTER_CRITICAL();
  40169c:	4b2f      	ldr	r3, [pc, #188]	; (40175c <xTaskResumeAll+0xd0>)
  40169e:	4798      	blx	r3
		--uxSchedulerSuspended;
  4016a0:	4b2c      	ldr	r3, [pc, #176]	; (401754 <xTaskResumeAll+0xc8>)
  4016a2:	681a      	ldr	r2, [r3, #0]
  4016a4:	3a01      	subs	r2, #1
  4016a6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4016a8:	681b      	ldr	r3, [r3, #0]
  4016aa:	2b00      	cmp	r3, #0
  4016ac:	d14d      	bne.n	40174a <xTaskResumeAll+0xbe>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4016ae:	4b2c      	ldr	r3, [pc, #176]	; (401760 <xTaskResumeAll+0xd4>)
  4016b0:	681b      	ldr	r3, [r3, #0]
  4016b2:	b12b      	cbz	r3, 4016c0 <xTaskResumeAll+0x34>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4016b4:	4f2b      	ldr	r7, [pc, #172]	; (401764 <xTaskResumeAll+0xd8>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4016b6:	4e2c      	ldr	r6, [pc, #176]	; (401768 <xTaskResumeAll+0xdc>)
					prvAddTaskToReadyList( pxTCB );
  4016b8:	4d2c      	ldr	r5, [pc, #176]	; (40176c <xTaskResumeAll+0xe0>)
  4016ba:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 40178c <xTaskResumeAll+0x100>
  4016be:	e020      	b.n	401702 <xTaskResumeAll+0x76>
BaseType_t xAlreadyYielded = pdFALSE;
  4016c0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4016c2:	4b2b      	ldr	r3, [pc, #172]	; (401770 <xTaskResumeAll+0xe4>)
  4016c4:	4798      	blx	r3
}
  4016c6:	4620      	mov	r0, r4
  4016c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4016cc:	68fb      	ldr	r3, [r7, #12]
  4016ce:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4016d0:	f104 0018 	add.w	r0, r4, #24
  4016d4:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4016d6:	f104 0804 	add.w	r8, r4, #4
  4016da:	4640      	mov	r0, r8
  4016dc:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4016de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4016e0:	682b      	ldr	r3, [r5, #0]
  4016e2:	4298      	cmp	r0, r3
  4016e4:	bf88      	it	hi
  4016e6:	6028      	strhi	r0, [r5, #0]
  4016e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4016ec:	4641      	mov	r1, r8
  4016ee:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4016f2:	4b20      	ldr	r3, [pc, #128]	; (401774 <xTaskResumeAll+0xe8>)
  4016f4:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4016f6:	4b20      	ldr	r3, [pc, #128]	; (401778 <xTaskResumeAll+0xec>)
  4016f8:	681b      	ldr	r3, [r3, #0]
  4016fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4016fe:	429a      	cmp	r2, r3
  401700:	d20c      	bcs.n	40171c <xTaskResumeAll+0x90>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401702:	683b      	ldr	r3, [r7, #0]
  401704:	2b00      	cmp	r3, #0
  401706:	d1e1      	bne.n	4016cc <xTaskResumeAll+0x40>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401708:	4b1c      	ldr	r3, [pc, #112]	; (40177c <xTaskResumeAll+0xf0>)
  40170a:	681b      	ldr	r3, [r3, #0]
  40170c:	b1ab      	cbz	r3, 40173a <xTaskResumeAll+0xae>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40170e:	4b1b      	ldr	r3, [pc, #108]	; (40177c <xTaskResumeAll+0xf0>)
  401710:	681b      	ldr	r3, [r3, #0]
  401712:	b193      	cbz	r3, 40173a <xTaskResumeAll+0xae>
						if( xTaskIncrementTick() != pdFALSE )
  401714:	4e1a      	ldr	r6, [pc, #104]	; (401780 <xTaskResumeAll+0xf4>)
							xYieldPending = pdTRUE;
  401716:	4d1b      	ldr	r5, [pc, #108]	; (401784 <xTaskResumeAll+0xf8>)
						--uxPendedTicks;
  401718:	4c18      	ldr	r4, [pc, #96]	; (40177c <xTaskResumeAll+0xf0>)
  40171a:	e008      	b.n	40172e <xTaskResumeAll+0xa2>
						xYieldPending = pdTRUE;
  40171c:	2201      	movs	r2, #1
  40171e:	4b19      	ldr	r3, [pc, #100]	; (401784 <xTaskResumeAll+0xf8>)
  401720:	601a      	str	r2, [r3, #0]
  401722:	e7ee      	b.n	401702 <xTaskResumeAll+0x76>
						--uxPendedTicks;
  401724:	6823      	ldr	r3, [r4, #0]
  401726:	3b01      	subs	r3, #1
  401728:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40172a:	6823      	ldr	r3, [r4, #0]
  40172c:	b12b      	cbz	r3, 40173a <xTaskResumeAll+0xae>
						if( xTaskIncrementTick() != pdFALSE )
  40172e:	47b0      	blx	r6
  401730:	2800      	cmp	r0, #0
  401732:	d0f7      	beq.n	401724 <xTaskResumeAll+0x98>
							xYieldPending = pdTRUE;
  401734:	2301      	movs	r3, #1
  401736:	602b      	str	r3, [r5, #0]
  401738:	e7f4      	b.n	401724 <xTaskResumeAll+0x98>
				if( xYieldPending == pdTRUE )
  40173a:	4b12      	ldr	r3, [pc, #72]	; (401784 <xTaskResumeAll+0xf8>)
  40173c:	681b      	ldr	r3, [r3, #0]
  40173e:	2b01      	cmp	r3, #1
  401740:	d105      	bne.n	40174e <xTaskResumeAll+0xc2>
					taskYIELD_IF_USING_PREEMPTION();
  401742:	4b11      	ldr	r3, [pc, #68]	; (401788 <xTaskResumeAll+0xfc>)
  401744:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
  401746:	2401      	movs	r4, #1
  401748:	e7bb      	b.n	4016c2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
  40174a:	2400      	movs	r4, #0
  40174c:	e7b9      	b.n	4016c2 <xTaskResumeAll+0x36>
  40174e:	2400      	movs	r4, #0
  401750:	e7b7      	b.n	4016c2 <xTaskResumeAll+0x36>
  401752:	bf00      	nop
  401754:	20013a50 	.word	0x20013a50
  401758:	0040089d 	.word	0x0040089d
  40175c:	004008cd 	.word	0x004008cd
  401760:	20013a48 	.word	0x20013a48
  401764:	20013a8c 	.word	0x20013a8c
  401768:	004007e9 	.word	0x004007e9
  40176c:	20013a5c 	.word	0x20013a5c
  401770:	004008f5 	.word	0x004008f5
  401774:	0040079d 	.word	0x0040079d
  401778:	200139d8 	.word	0x200139d8
  40177c:	20013a4c 	.word	0x20013a4c
  401780:	00401561 	.word	0x00401561
  401784:	20013ad0 	.word	0x20013ad0
  401788:	00400885 	.word	0x00400885
  40178c:	200139e4 	.word	0x200139e4

00401790 <prvIdleTask>:
{
  401790:	b580      	push	{r7, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401792:	4d16      	ldr	r5, [pc, #88]	; (4017ec <prvIdleTask+0x5c>)
			vTaskSuspendAll();
  401794:	f8df 8078 	ldr.w	r8, [pc, #120]	; 401810 <prvIdleTask+0x80>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401798:	4e15      	ldr	r6, [pc, #84]	; (4017f0 <prvIdleTask+0x60>)
  40179a:	e024      	b.n	4017e6 <prvIdleTask+0x56>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40179c:	4b15      	ldr	r3, [pc, #84]	; (4017f4 <prvIdleTask+0x64>)
  40179e:	681b      	ldr	r3, [r3, #0]
  4017a0:	2b01      	cmp	r3, #1
  4017a2:	d81e      	bhi.n	4017e2 <prvIdleTask+0x52>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4017a4:	682b      	ldr	r3, [r5, #0]
  4017a6:	2b00      	cmp	r3, #0
  4017a8:	d0f8      	beq.n	40179c <prvIdleTask+0xc>
			vTaskSuspendAll();
  4017aa:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4017ac:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4017ae:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4017b0:	2c00      	cmp	r4, #0
  4017b2:	d0f7      	beq.n	4017a4 <prvIdleTask+0x14>
				taskENTER_CRITICAL();
  4017b4:	4b10      	ldr	r3, [pc, #64]	; (4017f8 <prvIdleTask+0x68>)
  4017b6:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4017b8:	68f3      	ldr	r3, [r6, #12]
  4017ba:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4017bc:	1d20      	adds	r0, r4, #4
  4017be:	4b0f      	ldr	r3, [pc, #60]	; (4017fc <prvIdleTask+0x6c>)
  4017c0:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4017c2:	4a0f      	ldr	r2, [pc, #60]	; (401800 <prvIdleTask+0x70>)
  4017c4:	6813      	ldr	r3, [r2, #0]
  4017c6:	3b01      	subs	r3, #1
  4017c8:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4017ca:	682b      	ldr	r3, [r5, #0]
  4017cc:	3b01      	subs	r3, #1
  4017ce:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4017d0:	4b0c      	ldr	r3, [pc, #48]	; (401804 <prvIdleTask+0x74>)
  4017d2:	4798      	blx	r3
		vPortFreeAligned( pxTCB->pxStack );
  4017d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4017d6:	f8df 903c 	ldr.w	r9, [pc, #60]	; 401814 <prvIdleTask+0x84>
  4017da:	47c8      	blx	r9
		vPortFree( pxTCB );
  4017dc:	4620      	mov	r0, r4
  4017de:	47c8      	blx	r9
  4017e0:	e7e0      	b.n	4017a4 <prvIdleTask+0x14>
				taskYIELD();
  4017e2:	4b09      	ldr	r3, [pc, #36]	; (401808 <prvIdleTask+0x78>)
  4017e4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4017e6:	4f09      	ldr	r7, [pc, #36]	; (40180c <prvIdleTask+0x7c>)
  4017e8:	e7dc      	b.n	4017a4 <prvIdleTask+0x14>
  4017ea:	bf00      	nop
  4017ec:	20013a58 	.word	0x20013a58
  4017f0:	20013ab8 	.word	0x20013ab8
  4017f4:	200139e4 	.word	0x200139e4
  4017f8:	004008cd 	.word	0x004008cd
  4017fc:	004007e9 	.word	0x004007e9
  401800:	20013a48 	.word	0x20013a48
  401804:	004008f5 	.word	0x004008f5
  401808:	00400885 	.word	0x00400885
  40180c:	0040168d 	.word	0x0040168d
  401810:	00401531 	.word	0x00401531
  401814:	00400b9d 	.word	0x00400b9d

00401818 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401818:	4b22      	ldr	r3, [pc, #136]	; (4018a4 <vTaskSwitchContext+0x8c>)
  40181a:	681b      	ldr	r3, [r3, #0]
  40181c:	b9fb      	cbnz	r3, 40185e <vTaskSwitchContext+0x46>
{
  40181e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  401820:	2200      	movs	r2, #0
  401822:	4b21      	ldr	r3, [pc, #132]	; (4018a8 <vTaskSwitchContext+0x90>)
  401824:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401826:	4b21      	ldr	r3, [pc, #132]	; (4018ac <vTaskSwitchContext+0x94>)
  401828:	681b      	ldr	r3, [r3, #0]
  40182a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40182e:	4a20      	ldr	r2, [pc, #128]	; (4018b0 <vTaskSwitchContext+0x98>)
  401830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401834:	b9bb      	cbnz	r3, 401866 <vTaskSwitchContext+0x4e>
  401836:	4b1d      	ldr	r3, [pc, #116]	; (4018ac <vTaskSwitchContext+0x94>)
  401838:	681b      	ldr	r3, [r3, #0]
  40183a:	b16b      	cbz	r3, 401858 <vTaskSwitchContext+0x40>
  40183c:	4a1b      	ldr	r2, [pc, #108]	; (4018ac <vTaskSwitchContext+0x94>)
  40183e:	491c      	ldr	r1, [pc, #112]	; (4018b0 <vTaskSwitchContext+0x98>)
  401840:	6813      	ldr	r3, [r2, #0]
  401842:	3b01      	subs	r3, #1
  401844:	6013      	str	r3, [r2, #0]
  401846:	6813      	ldr	r3, [r2, #0]
  401848:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40184c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  401850:	b94b      	cbnz	r3, 401866 <vTaskSwitchContext+0x4e>
  401852:	6813      	ldr	r3, [r2, #0]
  401854:	2b00      	cmp	r3, #0
  401856:	d1f3      	bne.n	401840 <vTaskSwitchContext+0x28>
  401858:	4b16      	ldr	r3, [pc, #88]	; (4018b4 <vTaskSwitchContext+0x9c>)
  40185a:	4798      	blx	r3
  40185c:	e7fe      	b.n	40185c <vTaskSwitchContext+0x44>
		xYieldPending = pdTRUE;
  40185e:	2201      	movs	r2, #1
  401860:	4b11      	ldr	r3, [pc, #68]	; (4018a8 <vTaskSwitchContext+0x90>)
  401862:	601a      	str	r2, [r3, #0]
  401864:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401866:	4b11      	ldr	r3, [pc, #68]	; (4018ac <vTaskSwitchContext+0x94>)
  401868:	681b      	ldr	r3, [r3, #0]
  40186a:	4a11      	ldr	r2, [pc, #68]	; (4018b0 <vTaskSwitchContext+0x98>)
  40186c:	0099      	lsls	r1, r3, #2
  40186e:	18c8      	adds	r0, r1, r3
  401870:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401874:	6844      	ldr	r4, [r0, #4]
  401876:	6864      	ldr	r4, [r4, #4]
  401878:	6044      	str	r4, [r0, #4]
  40187a:	4419      	add	r1, r3
  40187c:	4602      	mov	r2, r0
  40187e:	3208      	adds	r2, #8
  401880:	4294      	cmp	r4, r2
  401882:	d009      	beq.n	401898 <vTaskSwitchContext+0x80>
  401884:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401888:	4a09      	ldr	r2, [pc, #36]	; (4018b0 <vTaskSwitchContext+0x98>)
  40188a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40188e:	685b      	ldr	r3, [r3, #4]
  401890:	68da      	ldr	r2, [r3, #12]
  401892:	4b09      	ldr	r3, [pc, #36]	; (4018b8 <vTaskSwitchContext+0xa0>)
  401894:	601a      	str	r2, [r3, #0]
  401896:	bd10      	pop	{r4, pc}
  401898:	6860      	ldr	r0, [r4, #4]
  40189a:	4a05      	ldr	r2, [pc, #20]	; (4018b0 <vTaskSwitchContext+0x98>)
  40189c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4018a0:	6050      	str	r0, [r2, #4]
  4018a2:	e7ef      	b.n	401884 <vTaskSwitchContext+0x6c>
  4018a4:	20013a50 	.word	0x20013a50
  4018a8:	20013ad0 	.word	0x20013ad0
  4018ac:	20013a5c 	.word	0x20013a5c
  4018b0:	200139e4 	.word	0x200139e4
  4018b4:	0040089d 	.word	0x0040089d
  4018b8:	200139d8 	.word	0x200139d8

004018bc <vTaskPlaceOnEventList>:
{
  4018bc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4018be:	b190      	cbz	r0, 4018e6 <vTaskPlaceOnEventList+0x2a>
  4018c0:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4018c2:	4d0d      	ldr	r5, [pc, #52]	; (4018f8 <vTaskPlaceOnEventList+0x3c>)
  4018c4:	6829      	ldr	r1, [r5, #0]
  4018c6:	3118      	adds	r1, #24
  4018c8:	4b0c      	ldr	r3, [pc, #48]	; (4018fc <vTaskPlaceOnEventList+0x40>)
  4018ca:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4018cc:	6828      	ldr	r0, [r5, #0]
  4018ce:	3004      	adds	r0, #4
  4018d0:	4b0b      	ldr	r3, [pc, #44]	; (401900 <vTaskPlaceOnEventList+0x44>)
  4018d2:	4798      	blx	r3
		if( xTicksToWait == portMAX_DELAY )
  4018d4:	f1b4 3fff 	cmp.w	r4, #4294967295
  4018d8:	d008      	beq.n	4018ec <vTaskPlaceOnEventList+0x30>
			xTimeToWake = xTickCount + xTicksToWait;
  4018da:	4b0a      	ldr	r3, [pc, #40]	; (401904 <vTaskPlaceOnEventList+0x48>)
  4018dc:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4018de:	4420      	add	r0, r4
  4018e0:	4b09      	ldr	r3, [pc, #36]	; (401908 <vTaskPlaceOnEventList+0x4c>)
  4018e2:	4798      	blx	r3
  4018e4:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
  4018e6:	4b09      	ldr	r3, [pc, #36]	; (40190c <vTaskPlaceOnEventList+0x50>)
  4018e8:	4798      	blx	r3
  4018ea:	e7fe      	b.n	4018ea <vTaskPlaceOnEventList+0x2e>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4018ec:	6829      	ldr	r1, [r5, #0]
  4018ee:	3104      	adds	r1, #4
  4018f0:	4807      	ldr	r0, [pc, #28]	; (401910 <vTaskPlaceOnEventList+0x54>)
  4018f2:	4b08      	ldr	r3, [pc, #32]	; (401914 <vTaskPlaceOnEventList+0x58>)
  4018f4:	4798      	blx	r3
  4018f6:	bd38      	pop	{r3, r4, r5, pc}
  4018f8:	200139d8 	.word	0x200139d8
  4018fc:	004007b5 	.word	0x004007b5
  401900:	004007e9 	.word	0x004007e9
  401904:	20013acc 	.word	0x20013acc
  401908:	00401289 	.word	0x00401289
  40190c:	0040089d 	.word	0x0040089d
  401910:	20013aa4 	.word	0x20013aa4
  401914:	0040079d 	.word	0x0040079d

00401918 <vTaskPlaceOnEventListRestricted>:
	{
  401918:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
  40191a:	b178      	cbz	r0, 40193c <vTaskPlaceOnEventListRestricted+0x24>
  40191c:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40191e:	4c09      	ldr	r4, [pc, #36]	; (401944 <vTaskPlaceOnEventListRestricted+0x2c>)
  401920:	6821      	ldr	r1, [r4, #0]
  401922:	3118      	adds	r1, #24
  401924:	4b08      	ldr	r3, [pc, #32]	; (401948 <vTaskPlaceOnEventListRestricted+0x30>)
  401926:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401928:	6820      	ldr	r0, [r4, #0]
  40192a:	3004      	adds	r0, #4
  40192c:	4b07      	ldr	r3, [pc, #28]	; (40194c <vTaskPlaceOnEventListRestricted+0x34>)
  40192e:	4798      	blx	r3
		xTimeToWake = xTickCount + xTicksToWait;
  401930:	4b07      	ldr	r3, [pc, #28]	; (401950 <vTaskPlaceOnEventListRestricted+0x38>)
  401932:	6818      	ldr	r0, [r3, #0]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  401934:	4428      	add	r0, r5
  401936:	4b07      	ldr	r3, [pc, #28]	; (401954 <vTaskPlaceOnEventListRestricted+0x3c>)
  401938:	4798      	blx	r3
  40193a:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( pxEventList );
  40193c:	4b06      	ldr	r3, [pc, #24]	; (401958 <vTaskPlaceOnEventListRestricted+0x40>)
  40193e:	4798      	blx	r3
  401940:	e7fe      	b.n	401940 <vTaskPlaceOnEventListRestricted+0x28>
  401942:	bf00      	nop
  401944:	200139d8 	.word	0x200139d8
  401948:	0040079d 	.word	0x0040079d
  40194c:	004007e9 	.word	0x004007e9
  401950:	20013acc 	.word	0x20013acc
  401954:	00401289 	.word	0x00401289
  401958:	0040089d 	.word	0x0040089d

0040195c <xTaskRemoveFromEventList>:
{
  40195c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40195e:	68c3      	ldr	r3, [r0, #12]
  401960:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401962:	2c00      	cmp	r4, #0
  401964:	d025      	beq.n	4019b2 <xTaskRemoveFromEventList+0x56>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401966:	f104 0518 	add.w	r5, r4, #24
  40196a:	4628      	mov	r0, r5
  40196c:	4b15      	ldr	r3, [pc, #84]	; (4019c4 <xTaskRemoveFromEventList+0x68>)
  40196e:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401970:	4b15      	ldr	r3, [pc, #84]	; (4019c8 <xTaskRemoveFromEventList+0x6c>)
  401972:	681b      	ldr	r3, [r3, #0]
  401974:	bb03      	cbnz	r3, 4019b8 <xTaskRemoveFromEventList+0x5c>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401976:	1d25      	adds	r5, r4, #4
  401978:	4628      	mov	r0, r5
  40197a:	4b12      	ldr	r3, [pc, #72]	; (4019c4 <xTaskRemoveFromEventList+0x68>)
  40197c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  40197e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401980:	4b12      	ldr	r3, [pc, #72]	; (4019cc <xTaskRemoveFromEventList+0x70>)
  401982:	681b      	ldr	r3, [r3, #0]
  401984:	4298      	cmp	r0, r3
  401986:	bf84      	itt	hi
  401988:	4b10      	ldrhi	r3, [pc, #64]	; (4019cc <xTaskRemoveFromEventList+0x70>)
  40198a:	6018      	strhi	r0, [r3, #0]
  40198c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401990:	4629      	mov	r1, r5
  401992:	4b0f      	ldr	r3, [pc, #60]	; (4019d0 <xTaskRemoveFromEventList+0x74>)
  401994:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401998:	4b0e      	ldr	r3, [pc, #56]	; (4019d4 <xTaskRemoveFromEventList+0x78>)
  40199a:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40199c:	4b0e      	ldr	r3, [pc, #56]	; (4019d8 <xTaskRemoveFromEventList+0x7c>)
  40199e:	681b      	ldr	r3, [r3, #0]
  4019a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4019a4:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
  4019a6:	bf83      	ittte	hi
  4019a8:	2001      	movhi	r0, #1
  4019aa:	4b0c      	ldrhi	r3, [pc, #48]	; (4019dc <xTaskRemoveFromEventList+0x80>)
  4019ac:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
  4019ae:	2000      	movls	r0, #0
}
  4019b0:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
  4019b2:	4b0b      	ldr	r3, [pc, #44]	; (4019e0 <xTaskRemoveFromEventList+0x84>)
  4019b4:	4798      	blx	r3
  4019b6:	e7fe      	b.n	4019b6 <xTaskRemoveFromEventList+0x5a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4019b8:	4629      	mov	r1, r5
  4019ba:	480a      	ldr	r0, [pc, #40]	; (4019e4 <xTaskRemoveFromEventList+0x88>)
  4019bc:	4b05      	ldr	r3, [pc, #20]	; (4019d4 <xTaskRemoveFromEventList+0x78>)
  4019be:	4798      	blx	r3
  4019c0:	e7ec      	b.n	40199c <xTaskRemoveFromEventList+0x40>
  4019c2:	bf00      	nop
  4019c4:	004007e9 	.word	0x004007e9
  4019c8:	20013a50 	.word	0x20013a50
  4019cc:	20013a5c 	.word	0x20013a5c
  4019d0:	200139e4 	.word	0x200139e4
  4019d4:	0040079d 	.word	0x0040079d
  4019d8:	200139d8 	.word	0x200139d8
  4019dc:	20013ad0 	.word	0x20013ad0
  4019e0:	0040089d 	.word	0x0040089d
  4019e4:	20013a8c 	.word	0x20013a8c

004019e8 <vTaskSetTimeOutState>:
{
  4019e8:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
  4019ea:	b130      	cbz	r0, 4019fa <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4019ec:	4a04      	ldr	r2, [pc, #16]	; (401a00 <vTaskSetTimeOutState+0x18>)
  4019ee:	6812      	ldr	r2, [r2, #0]
  4019f0:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4019f2:	4a04      	ldr	r2, [pc, #16]	; (401a04 <vTaskSetTimeOutState+0x1c>)
  4019f4:	6812      	ldr	r2, [r2, #0]
  4019f6:	6042      	str	r2, [r0, #4]
  4019f8:	bd08      	pop	{r3, pc}
	configASSERT( pxTimeOut );
  4019fa:	4b03      	ldr	r3, [pc, #12]	; (401a08 <vTaskSetTimeOutState+0x20>)
  4019fc:	4798      	blx	r3
  4019fe:	e7fe      	b.n	4019fe <vTaskSetTimeOutState+0x16>
  401a00:	20013a88 	.word	0x20013a88
  401a04:	20013acc 	.word	0x20013acc
  401a08:	0040089d 	.word	0x0040089d

00401a0c <xTaskCheckForTimeOut>:
{
  401a0c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  401a0e:	b1d8      	cbz	r0, 401a48 <xTaskCheckForTimeOut+0x3c>
  401a10:	460d      	mov	r5, r1
  401a12:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  401a14:	b1d9      	cbz	r1, 401a4e <xTaskCheckForTimeOut+0x42>
	taskENTER_CRITICAL();
  401a16:	4b15      	ldr	r3, [pc, #84]	; (401a6c <xTaskCheckForTimeOut+0x60>)
  401a18:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  401a1a:	4b15      	ldr	r3, [pc, #84]	; (401a70 <xTaskCheckForTimeOut+0x64>)
  401a1c:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  401a1e:	682b      	ldr	r3, [r5, #0]
  401a20:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a24:	d01e      	beq.n	401a64 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401a26:	4913      	ldr	r1, [pc, #76]	; (401a74 <xTaskCheckForTimeOut+0x68>)
  401a28:	6809      	ldr	r1, [r1, #0]
  401a2a:	6820      	ldr	r0, [r4, #0]
  401a2c:	4288      	cmp	r0, r1
  401a2e:	d002      	beq.n	401a36 <xTaskCheckForTimeOut+0x2a>
  401a30:	6861      	ldr	r1, [r4, #4]
  401a32:	428a      	cmp	r2, r1
  401a34:	d218      	bcs.n	401a68 <xTaskCheckForTimeOut+0x5c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  401a36:	6861      	ldr	r1, [r4, #4]
  401a38:	1a50      	subs	r0, r2, r1
  401a3a:	4283      	cmp	r3, r0
  401a3c:	d80a      	bhi.n	401a54 <xTaskCheckForTimeOut+0x48>
			xReturn = pdTRUE;
  401a3e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  401a40:	4b0d      	ldr	r3, [pc, #52]	; (401a78 <xTaskCheckForTimeOut+0x6c>)
  401a42:	4798      	blx	r3
}
  401a44:	4620      	mov	r0, r4
  401a46:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxTimeOut );
  401a48:	4b0c      	ldr	r3, [pc, #48]	; (401a7c <xTaskCheckForTimeOut+0x70>)
  401a4a:	4798      	blx	r3
  401a4c:	e7fe      	b.n	401a4c <xTaskCheckForTimeOut+0x40>
	configASSERT( pxTicksToWait );
  401a4e:	4b0b      	ldr	r3, [pc, #44]	; (401a7c <xTaskCheckForTimeOut+0x70>)
  401a50:	4798      	blx	r3
  401a52:	e7fe      	b.n	401a52 <xTaskCheckForTimeOut+0x46>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401a54:	1a9b      	subs	r3, r3, r2
  401a56:	440b      	add	r3, r1
  401a58:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401a5a:	4620      	mov	r0, r4
  401a5c:	4b08      	ldr	r3, [pc, #32]	; (401a80 <xTaskCheckForTimeOut+0x74>)
  401a5e:	4798      	blx	r3
			xReturn = pdFALSE;
  401a60:	2400      	movs	r4, #0
  401a62:	e7ed      	b.n	401a40 <xTaskCheckForTimeOut+0x34>
				xReturn = pdFALSE;
  401a64:	2400      	movs	r4, #0
  401a66:	e7eb      	b.n	401a40 <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
  401a68:	2401      	movs	r4, #1
  401a6a:	e7e9      	b.n	401a40 <xTaskCheckForTimeOut+0x34>
  401a6c:	004008cd 	.word	0x004008cd
  401a70:	20013acc 	.word	0x20013acc
  401a74:	20013a88 	.word	0x20013a88
  401a78:	004008f5 	.word	0x004008f5
  401a7c:	0040089d 	.word	0x0040089d
  401a80:	004019e9 	.word	0x004019e9

00401a84 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401a84:	2201      	movs	r2, #1
  401a86:	4b01      	ldr	r3, [pc, #4]	; (401a8c <vTaskMissedYield+0x8>)
  401a88:	601a      	str	r2, [r3, #0]
  401a8a:	4770      	bx	lr
  401a8c:	20013ad0 	.word	0x20013ad0

00401a90 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  401a90:	4b01      	ldr	r3, [pc, #4]	; (401a98 <xTaskGetCurrentTaskHandle+0x8>)
  401a92:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
  401a94:	4770      	bx	lr
  401a96:	bf00      	nop
  401a98:	200139d8 	.word	0x200139d8

00401a9c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401a9c:	4b05      	ldr	r3, [pc, #20]	; (401ab4 <xTaskGetSchedulerState+0x18>)
  401a9e:	681b      	ldr	r3, [r3, #0]
  401aa0:	b133      	cbz	r3, 401ab0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401aa2:	4b05      	ldr	r3, [pc, #20]	; (401ab8 <xTaskGetSchedulerState+0x1c>)
  401aa4:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401aa6:	2b00      	cmp	r3, #0
  401aa8:	bf0c      	ite	eq
  401aaa:	2002      	moveq	r0, #2
  401aac:	2000      	movne	r0, #0
  401aae:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401ab0:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  401ab2:	4770      	bx	lr
  401ab4:	20013aa0 	.word	0x20013aa0
  401ab8:	20013a50 	.word	0x20013a50

00401abc <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401abc:	2800      	cmp	r0, #0
  401abe:	d034      	beq.n	401b2a <vTaskPriorityInherit+0x6e>
	{
  401ac0:	b538      	push	{r3, r4, r5, lr}
  401ac2:	4605      	mov	r5, r0
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401ac4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401ac6:	4919      	ldr	r1, [pc, #100]	; (401b2c <vTaskPriorityInherit+0x70>)
  401ac8:	6809      	ldr	r1, [r1, #0]
  401aca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401acc:	428a      	cmp	r2, r1
  401ace:	d214      	bcs.n	401afa <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401ad0:	6981      	ldr	r1, [r0, #24]
  401ad2:	2900      	cmp	r1, #0
  401ad4:	db05      	blt.n	401ae2 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ad6:	4915      	ldr	r1, [pc, #84]	; (401b2c <vTaskPriorityInherit+0x70>)
  401ad8:	6809      	ldr	r1, [r1, #0]
  401ada:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401adc:	f1c1 0105 	rsb	r1, r1, #5
  401ae0:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401ae2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401ae6:	4912      	ldr	r1, [pc, #72]	; (401b30 <vTaskPriorityInherit+0x74>)
  401ae8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401aec:	6969      	ldr	r1, [r5, #20]
  401aee:	4291      	cmp	r1, r2
  401af0:	d004      	beq.n	401afc <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401af2:	4a0e      	ldr	r2, [pc, #56]	; (401b2c <vTaskPriorityInherit+0x70>)
  401af4:	6812      	ldr	r2, [r2, #0]
  401af6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401af8:	62ea      	str	r2, [r5, #44]	; 0x2c
  401afa:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401afc:	1d2c      	adds	r4, r5, #4
  401afe:	4620      	mov	r0, r4
  401b00:	4b0c      	ldr	r3, [pc, #48]	; (401b34 <vTaskPriorityInherit+0x78>)
  401b02:	4798      	blx	r3
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401b04:	4b09      	ldr	r3, [pc, #36]	; (401b2c <vTaskPriorityInherit+0x70>)
  401b06:	681b      	ldr	r3, [r3, #0]
  401b08:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401b0a:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401b0c:	4b0a      	ldr	r3, [pc, #40]	; (401b38 <vTaskPriorityInherit+0x7c>)
  401b0e:	681b      	ldr	r3, [r3, #0]
  401b10:	4298      	cmp	r0, r3
  401b12:	bf84      	itt	hi
  401b14:	4b08      	ldrhi	r3, [pc, #32]	; (401b38 <vTaskPriorityInherit+0x7c>)
  401b16:	6018      	strhi	r0, [r3, #0]
  401b18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b1c:	4621      	mov	r1, r4
  401b1e:	4b04      	ldr	r3, [pc, #16]	; (401b30 <vTaskPriorityInherit+0x74>)
  401b20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b24:	4b05      	ldr	r3, [pc, #20]	; (401b3c <vTaskPriorityInherit+0x80>)
  401b26:	4798      	blx	r3
  401b28:	bd38      	pop	{r3, r4, r5, pc}
  401b2a:	4770      	bx	lr
  401b2c:	200139d8 	.word	0x200139d8
  401b30:	200139e4 	.word	0x200139e4
  401b34:	004007e9 	.word	0x004007e9
  401b38:	20013a5c 	.word	0x20013a5c
  401b3c:	0040079d 	.word	0x0040079d

00401b40 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
  401b40:	b300      	cbz	r0, 401b84 <vTaskPriorityDisinherit+0x44>
	{
  401b42:	b538      	push	{r3, r4, r5, lr}
  401b44:	4604      	mov	r4, r0
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401b46:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  401b48:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401b4a:	4291      	cmp	r1, r2
  401b4c:	d019      	beq.n	401b82 <vTaskPriorityDisinherit+0x42>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401b4e:	1d05      	adds	r5, r0, #4
  401b50:	4628      	mov	r0, r5
  401b52:	4b0d      	ldr	r3, [pc, #52]	; (401b88 <vTaskPriorityDisinherit+0x48>)
  401b54:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  401b56:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401b58:	62e0      	str	r0, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401b5a:	69a3      	ldr	r3, [r4, #24]
  401b5c:	2b00      	cmp	r3, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401b5e:	bfa4      	itt	ge
  401b60:	f1c0 0305 	rsbge	r3, r0, #5
  401b64:	61a3      	strge	r3, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
  401b66:	4b09      	ldr	r3, [pc, #36]	; (401b8c <vTaskPriorityDisinherit+0x4c>)
  401b68:	681b      	ldr	r3, [r3, #0]
  401b6a:	4298      	cmp	r0, r3
  401b6c:	bf84      	itt	hi
  401b6e:	4b07      	ldrhi	r3, [pc, #28]	; (401b8c <vTaskPriorityDisinherit+0x4c>)
  401b70:	6018      	strhi	r0, [r3, #0]
  401b72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b76:	4629      	mov	r1, r5
  401b78:	4b05      	ldr	r3, [pc, #20]	; (401b90 <vTaskPriorityDisinherit+0x50>)
  401b7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b7e:	4b05      	ldr	r3, [pc, #20]	; (401b94 <vTaskPriorityDisinherit+0x54>)
  401b80:	4798      	blx	r3
  401b82:	bd38      	pop	{r3, r4, r5, pc}
  401b84:	4770      	bx	lr
  401b86:	bf00      	nop
  401b88:	004007e9 	.word	0x004007e9
  401b8c:	20013a5c 	.word	0x20013a5c
  401b90:	200139e4 	.word	0x200139e4
  401b94:	0040079d 	.word	0x0040079d

00401b98 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401b98:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401b9a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401b9c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401b9e:	4291      	cmp	r1, r2
  401ba0:	d80c      	bhi.n	401bbc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  401ba2:	1ad2      	subs	r2, r2, r3
  401ba4:	6983      	ldr	r3, [r0, #24]
  401ba6:	429a      	cmp	r2, r3
  401ba8:	d301      	bcc.n	401bae <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401baa:	2001      	movs	r0, #1
  401bac:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401bae:	1d01      	adds	r1, r0, #4
  401bb0:	4b09      	ldr	r3, [pc, #36]	; (401bd8 <prvInsertTimerInActiveList+0x40>)
  401bb2:	6818      	ldr	r0, [r3, #0]
  401bb4:	4b09      	ldr	r3, [pc, #36]	; (401bdc <prvInsertTimerInActiveList+0x44>)
  401bb6:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401bb8:	2000      	movs	r0, #0
  401bba:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401bbc:	429a      	cmp	r2, r3
  401bbe:	d201      	bcs.n	401bc4 <prvInsertTimerInActiveList+0x2c>
  401bc0:	4299      	cmp	r1, r3
  401bc2:	d206      	bcs.n	401bd2 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401bc4:	1d01      	adds	r1, r0, #4
  401bc6:	4b06      	ldr	r3, [pc, #24]	; (401be0 <prvInsertTimerInActiveList+0x48>)
  401bc8:	6818      	ldr	r0, [r3, #0]
  401bca:	4b04      	ldr	r3, [pc, #16]	; (401bdc <prvInsertTimerInActiveList+0x44>)
  401bcc:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401bce:	2000      	movs	r0, #0
  401bd0:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
  401bd2:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
  401bd4:	bd08      	pop	{r3, pc}
  401bd6:	bf00      	nop
  401bd8:	20013ad8 	.word	0x20013ad8
  401bdc:	004007b5 	.word	0x004007b5
  401be0:	20013ad4 	.word	0x20013ad4

00401be4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401be4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401be6:	4b0f      	ldr	r3, [pc, #60]	; (401c24 <prvCheckForValidListAndQueue+0x40>)
  401be8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401bea:	4b0f      	ldr	r3, [pc, #60]	; (401c28 <prvCheckForValidListAndQueue+0x44>)
  401bec:	681b      	ldr	r3, [r3, #0]
  401bee:	b113      	cbz	r3, 401bf6 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401bf0:	4b0e      	ldr	r3, [pc, #56]	; (401c2c <prvCheckForValidListAndQueue+0x48>)
  401bf2:	4798      	blx	r3
  401bf4:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401bf6:	4d0e      	ldr	r5, [pc, #56]	; (401c30 <prvCheckForValidListAndQueue+0x4c>)
  401bf8:	4628      	mov	r0, r5
  401bfa:	4e0e      	ldr	r6, [pc, #56]	; (401c34 <prvCheckForValidListAndQueue+0x50>)
  401bfc:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401bfe:	4c0e      	ldr	r4, [pc, #56]	; (401c38 <prvCheckForValidListAndQueue+0x54>)
  401c00:	4620      	mov	r0, r4
  401c02:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401c04:	4b0d      	ldr	r3, [pc, #52]	; (401c3c <prvCheckForValidListAndQueue+0x58>)
  401c06:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401c08:	4b0d      	ldr	r3, [pc, #52]	; (401c40 <prvCheckForValidListAndQueue+0x5c>)
  401c0a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401c0c:	2200      	movs	r2, #0
  401c0e:	210c      	movs	r1, #12
  401c10:	2002      	movs	r0, #2
  401c12:	4b0c      	ldr	r3, [pc, #48]	; (401c44 <prvCheckForValidListAndQueue+0x60>)
  401c14:	4798      	blx	r3
  401c16:	4b04      	ldr	r3, [pc, #16]	; (401c28 <prvCheckForValidListAndQueue+0x44>)
  401c18:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  401c1a:	2800      	cmp	r0, #0
  401c1c:	d1e8      	bne.n	401bf0 <prvCheckForValidListAndQueue+0xc>
  401c1e:	4b0a      	ldr	r3, [pc, #40]	; (401c48 <prvCheckForValidListAndQueue+0x64>)
  401c20:	4798      	blx	r3
  401c22:	e7fe      	b.n	401c22 <prvCheckForValidListAndQueue+0x3e>
  401c24:	004008cd 	.word	0x004008cd
  401c28:	20013b08 	.word	0x20013b08
  401c2c:	004008f5 	.word	0x004008f5
  401c30:	20013adc 	.word	0x20013adc
  401c34:	00400781 	.word	0x00400781
  401c38:	20013af0 	.word	0x20013af0
  401c3c:	20013ad4 	.word	0x20013ad4
  401c40:	20013ad8 	.word	0x20013ad8
  401c44:	00400dfd 	.word	0x00400dfd
  401c48:	0040089d 	.word	0x0040089d

00401c4c <xTimerCreateTimerTask>:
{
  401c4c:	b510      	push	{r4, lr}
  401c4e:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  401c50:	4b0b      	ldr	r3, [pc, #44]	; (401c80 <xTimerCreateTimerTask+0x34>)
  401c52:	4798      	blx	r3
	if( xTimerQueue != NULL )
  401c54:	4b0b      	ldr	r3, [pc, #44]	; (401c84 <xTimerCreateTimerTask+0x38>)
  401c56:	681b      	ldr	r3, [r3, #0]
  401c58:	b173      	cbz	r3, 401c78 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401c5a:	2300      	movs	r3, #0
  401c5c:	9303      	str	r3, [sp, #12]
  401c5e:	9302      	str	r3, [sp, #8]
  401c60:	9301      	str	r3, [sp, #4]
  401c62:	2202      	movs	r2, #2
  401c64:	9200      	str	r2, [sp, #0]
  401c66:	f44f 7282 	mov.w	r2, #260	; 0x104
  401c6a:	4907      	ldr	r1, [pc, #28]	; (401c88 <xTimerCreateTimerTask+0x3c>)
  401c6c:	4807      	ldr	r0, [pc, #28]	; (401c8c <xTimerCreateTimerTask+0x40>)
  401c6e:	4c08      	ldr	r4, [pc, #32]	; (401c90 <xTimerCreateTimerTask+0x44>)
  401c70:	47a0      	blx	r4
	configASSERT( xReturn );
  401c72:	b108      	cbz	r0, 401c78 <xTimerCreateTimerTask+0x2c>
}
  401c74:	b004      	add	sp, #16
  401c76:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
  401c78:	4b06      	ldr	r3, [pc, #24]	; (401c94 <xTimerCreateTimerTask+0x48>)
  401c7a:	4798      	blx	r3
  401c7c:	e7fe      	b.n	401c7c <xTimerCreateTimerTask+0x30>
  401c7e:	bf00      	nop
  401c80:	00401be5 	.word	0x00401be5
  401c84:	20013b08 	.word	0x20013b08
  401c88:	0040e594 	.word	0x0040e594
  401c8c:	00401d9d 	.word	0x00401d9d
  401c90:	004012e1 	.word	0x004012e1
  401c94:	0040089d 	.word	0x0040089d

00401c98 <xTimerGenericCommand>:
{
  401c98:	b530      	push	{r4, r5, lr}
  401c9a:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
  401c9c:	4c10      	ldr	r4, [pc, #64]	; (401ce0 <xTimerGenericCommand+0x48>)
  401c9e:	6825      	ldr	r5, [r4, #0]
  401ca0:	b1dd      	cbz	r5, 401cda <xTimerGenericCommand+0x42>
  401ca2:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
  401ca4:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401ca6:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  401ca8:	9003      	str	r0, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401caa:	2905      	cmp	r1, #5
  401cac:	dc0e      	bgt.n	401ccc <xTimerGenericCommand+0x34>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401cae:	4b0d      	ldr	r3, [pc, #52]	; (401ce4 <xTimerGenericCommand+0x4c>)
  401cb0:	4798      	blx	r3
  401cb2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401cb4:	f04f 0300 	mov.w	r3, #0
  401cb8:	bf0c      	ite	eq
  401cba:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401cbc:	461a      	movne	r2, r3
  401cbe:	a901      	add	r1, sp, #4
  401cc0:	4807      	ldr	r0, [pc, #28]	; (401ce0 <xTimerGenericCommand+0x48>)
  401cc2:	6800      	ldr	r0, [r0, #0]
  401cc4:	4c08      	ldr	r4, [pc, #32]	; (401ce8 <xTimerGenericCommand+0x50>)
  401cc6:	47a0      	blx	r4
}
  401cc8:	b005      	add	sp, #20
  401cca:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401ccc:	2300      	movs	r3, #0
  401cce:	4622      	mov	r2, r4
  401cd0:	a901      	add	r1, sp, #4
  401cd2:	4628      	mov	r0, r5
  401cd4:	4c05      	ldr	r4, [pc, #20]	; (401cec <xTimerGenericCommand+0x54>)
  401cd6:	47a0      	blx	r4
  401cd8:	e7f6      	b.n	401cc8 <xTimerGenericCommand+0x30>
BaseType_t xReturn = pdFAIL;
  401cda:	2000      	movs	r0, #0
	return xReturn;
  401cdc:	e7f4      	b.n	401cc8 <xTimerGenericCommand+0x30>
  401cde:	bf00      	nop
  401ce0:	20013b08 	.word	0x20013b08
  401ce4:	00401a9d 	.word	0x00401a9d
  401ce8:	00400e4d 	.word	0x00400e4d
  401cec:	00400fbd 	.word	0x00400fbd

00401cf0 <prvSampleTimeNow>:
{
  401cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401cf4:	b082      	sub	sp, #8
  401cf6:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  401cf8:	4b20      	ldr	r3, [pc, #128]	; (401d7c <prvSampleTimeNow+0x8c>)
  401cfa:	4798      	blx	r3
  401cfc:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  401cfe:	4b20      	ldr	r3, [pc, #128]	; (401d80 <prvSampleTimeNow+0x90>)
  401d00:	681b      	ldr	r3, [r3, #0]
  401d02:	4298      	cmp	r0, r3
  401d04:	d313      	bcc.n	401d2e <prvSampleTimeNow+0x3e>
		*pxTimerListsWereSwitched = pdFALSE;
  401d06:	2300      	movs	r3, #0
  401d08:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  401d0c:	4b1c      	ldr	r3, [pc, #112]	; (401d80 <prvSampleTimeNow+0x90>)
  401d0e:	601f      	str	r7, [r3, #0]
}
  401d10:	4638      	mov	r0, r7
  401d12:	b002      	add	sp, #8
  401d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401d18:	2100      	movs	r1, #0
  401d1a:	9100      	str	r1, [sp, #0]
  401d1c:	460b      	mov	r3, r1
  401d1e:	4652      	mov	r2, sl
  401d20:	4620      	mov	r0, r4
  401d22:	4c18      	ldr	r4, [pc, #96]	; (401d84 <prvSampleTimeNow+0x94>)
  401d24:	47a0      	blx	r4
				configASSERT( xResult );
  401d26:	b920      	cbnz	r0, 401d32 <prvSampleTimeNow+0x42>
  401d28:	4b17      	ldr	r3, [pc, #92]	; (401d88 <prvSampleTimeNow+0x98>)
  401d2a:	4798      	blx	r3
  401d2c:	e7fe      	b.n	401d2c <prvSampleTimeNow+0x3c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401d2e:	4d17      	ldr	r5, [pc, #92]	; (401d8c <prvSampleTimeNow+0x9c>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401d30:	4e17      	ldr	r6, [pc, #92]	; (401d90 <prvSampleTimeNow+0xa0>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401d32:	682b      	ldr	r3, [r5, #0]
  401d34:	681a      	ldr	r2, [r3, #0]
  401d36:	b1c2      	cbz	r2, 401d6a <prvSampleTimeNow+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401d38:	68db      	ldr	r3, [r3, #12]
  401d3a:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401d3e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401d40:	f104 0904 	add.w	r9, r4, #4
  401d44:	4648      	mov	r0, r9
  401d46:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401d4a:	4620      	mov	r0, r4
  401d4c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401d4e:	69e3      	ldr	r3, [r4, #28]
  401d50:	2b01      	cmp	r3, #1
  401d52:	d1ee      	bne.n	401d32 <prvSampleTimeNow+0x42>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401d54:	69a3      	ldr	r3, [r4, #24]
  401d56:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401d58:	459a      	cmp	sl, r3
  401d5a:	d2dd      	bcs.n	401d18 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401d5c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401d5e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401d60:	4649      	mov	r1, r9
  401d62:	6828      	ldr	r0, [r5, #0]
  401d64:	4b0b      	ldr	r3, [pc, #44]	; (401d94 <prvSampleTimeNow+0xa4>)
  401d66:	4798      	blx	r3
  401d68:	e7e3      	b.n	401d32 <prvSampleTimeNow+0x42>
	pxCurrentTimerList = pxOverflowTimerList;
  401d6a:	4a0b      	ldr	r2, [pc, #44]	; (401d98 <prvSampleTimeNow+0xa8>)
  401d6c:	6810      	ldr	r0, [r2, #0]
  401d6e:	4907      	ldr	r1, [pc, #28]	; (401d8c <prvSampleTimeNow+0x9c>)
  401d70:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  401d72:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  401d74:	2301      	movs	r3, #1
  401d76:	f8c8 3000 	str.w	r3, [r8]
  401d7a:	e7c7      	b.n	401d0c <prvSampleTimeNow+0x1c>
  401d7c:	00401541 	.word	0x00401541
  401d80:	20013b04 	.word	0x20013b04
  401d84:	00401c99 	.word	0x00401c99
  401d88:	0040089d 	.word	0x0040089d
  401d8c:	20013ad4 	.word	0x20013ad4
  401d90:	004007e9 	.word	0x004007e9
  401d94:	004007b5 	.word	0x004007b5
  401d98:	20013ad8 	.word	0x20013ad8

00401d9c <prvTimerTask>:
{
  401d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401d9e:	b087      	sub	sp, #28
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401da0:	4f57      	ldr	r7, [pc, #348]	; (401f00 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401da2:	4b58      	ldr	r3, [pc, #352]	; (401f04 <prvTimerTask+0x168>)
  401da4:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  401da6:	681a      	ldr	r2, [r3, #0]
  401da8:	2a00      	cmp	r2, #0
  401daa:	f000 809e 	beq.w	401eea <prvTimerTask+0x14e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401dae:	68db      	ldr	r3, [r3, #12]
  401db0:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
  401db2:	4b55      	ldr	r3, [pc, #340]	; (401f08 <prvTimerTask+0x16c>)
  401db4:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401db6:	a803      	add	r0, sp, #12
  401db8:	4b54      	ldr	r3, [pc, #336]	; (401f0c <prvTimerTask+0x170>)
  401dba:	4798      	blx	r3
  401dbc:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401dbe:	9b03      	ldr	r3, [sp, #12]
  401dc0:	2b00      	cmp	r3, #0
  401dc2:	d160      	bne.n	401e86 <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401dc4:	42a8      	cmp	r0, r5
  401dc6:	d237      	bcs.n	401e38 <prvTimerTask+0x9c>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  401dc8:	1b29      	subs	r1, r5, r4
  401dca:	4b51      	ldr	r3, [pc, #324]	; (401f10 <prvTimerTask+0x174>)
  401dcc:	6818      	ldr	r0, [r3, #0]
  401dce:	4b51      	ldr	r3, [pc, #324]	; (401f14 <prvTimerTask+0x178>)
  401dd0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401dd2:	4b51      	ldr	r3, [pc, #324]	; (401f18 <prvTimerTask+0x17c>)
  401dd4:	4798      	blx	r3
  401dd6:	2800      	cmp	r0, #0
  401dd8:	d052      	beq.n	401e80 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401dda:	4d4d      	ldr	r5, [pc, #308]	; (401f10 <prvTimerTask+0x174>)
  401ddc:	4c4f      	ldr	r4, [pc, #316]	; (401f1c <prvTimerTask+0x180>)
  401dde:	2300      	movs	r3, #0
  401de0:	461a      	mov	r2, r3
  401de2:	a903      	add	r1, sp, #12
  401de4:	6828      	ldr	r0, [r5, #0]
  401de6:	47a0      	blx	r4
  401de8:	2800      	cmp	r0, #0
  401dea:	d0da      	beq.n	401da2 <prvTimerTask+0x6>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401dec:	9b03      	ldr	r3, [sp, #12]
  401dee:	2b00      	cmp	r3, #0
  401df0:	dbf5      	blt.n	401dde <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401df2:	9e05      	ldr	r6, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  401df4:	6973      	ldr	r3, [r6, #20]
  401df6:	b10b      	cbz	r3, 401dfc <prvTimerTask+0x60>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401df8:	1d30      	adds	r0, r6, #4
  401dfa:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401dfc:	a802      	add	r0, sp, #8
  401dfe:	4b43      	ldr	r3, [pc, #268]	; (401f0c <prvTimerTask+0x170>)
  401e00:	4798      	blx	r3
			switch( xMessage.xMessageID )
  401e02:	9b03      	ldr	r3, [sp, #12]
  401e04:	2b09      	cmp	r3, #9
  401e06:	d8ea      	bhi.n	401dde <prvTimerTask+0x42>
  401e08:	a201      	add	r2, pc, #4	; (adr r2, 401e10 <prvTimerTask+0x74>)
  401e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401e0e:	bf00      	nop
  401e10:	00401e8d 	.word	0x00401e8d
  401e14:	00401e8d 	.word	0x00401e8d
  401e18:	00401e8d 	.word	0x00401e8d
  401e1c:	00401ddf 	.word	0x00401ddf
  401e20:	00401ec9 	.word	0x00401ec9
  401e24:	00401ee3 	.word	0x00401ee3
  401e28:	00401e8d 	.word	0x00401e8d
  401e2c:	00401e8d 	.word	0x00401e8d
  401e30:	00401ddf 	.word	0x00401ddf
  401e34:	00401ec9 	.word	0x00401ec9
				( void ) xTaskResumeAll();
  401e38:	4b37      	ldr	r3, [pc, #220]	; (401f18 <prvTimerTask+0x17c>)
  401e3a:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401e3c:	4b31      	ldr	r3, [pc, #196]	; (401f04 <prvTimerTask+0x168>)
  401e3e:	681b      	ldr	r3, [r3, #0]
  401e40:	68db      	ldr	r3, [r3, #12]
  401e42:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401e44:	1d30      	adds	r0, r6, #4
  401e46:	47b8      	blx	r7
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401e48:	69f3      	ldr	r3, [r6, #28]
  401e4a:	2b01      	cmp	r3, #1
  401e4c:	d003      	beq.n	401e56 <prvTimerTask+0xba>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401e4e:	6a73      	ldr	r3, [r6, #36]	; 0x24
  401e50:	4630      	mov	r0, r6
  401e52:	4798      	blx	r3
  401e54:	e7c1      	b.n	401dda <prvTimerTask+0x3e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401e56:	69b1      	ldr	r1, [r6, #24]
  401e58:	462b      	mov	r3, r5
  401e5a:	4622      	mov	r2, r4
  401e5c:	4429      	add	r1, r5
  401e5e:	4630      	mov	r0, r6
  401e60:	4c2f      	ldr	r4, [pc, #188]	; (401f20 <prvTimerTask+0x184>)
  401e62:	47a0      	blx	r4
  401e64:	2801      	cmp	r0, #1
  401e66:	d1f2      	bne.n	401e4e <prvTimerTask+0xb2>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401e68:	2100      	movs	r1, #0
  401e6a:	9100      	str	r1, [sp, #0]
  401e6c:	460b      	mov	r3, r1
  401e6e:	462a      	mov	r2, r5
  401e70:	4630      	mov	r0, r6
  401e72:	4c2c      	ldr	r4, [pc, #176]	; (401f24 <prvTimerTask+0x188>)
  401e74:	47a0      	blx	r4
			configASSERT( xResult );
  401e76:	2800      	cmp	r0, #0
  401e78:	d1e9      	bne.n	401e4e <prvTimerTask+0xb2>
  401e7a:	4b2b      	ldr	r3, [pc, #172]	; (401f28 <prvTimerTask+0x18c>)
  401e7c:	4798      	blx	r3
  401e7e:	e7fe      	b.n	401e7e <prvTimerTask+0xe2>
					portYIELD_WITHIN_API();
  401e80:	4b2a      	ldr	r3, [pc, #168]	; (401f2c <prvTimerTask+0x190>)
  401e82:	4798      	blx	r3
  401e84:	e7a9      	b.n	401dda <prvTimerTask+0x3e>
			( void ) xTaskResumeAll();
  401e86:	4b24      	ldr	r3, [pc, #144]	; (401f18 <prvTimerTask+0x17c>)
  401e88:	4798      	blx	r3
  401e8a:	e7a6      	b.n	401dda <prvTimerTask+0x3e>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  401e8c:	9904      	ldr	r1, [sp, #16]
  401e8e:	69b4      	ldr	r4, [r6, #24]
  401e90:	460b      	mov	r3, r1
  401e92:	4602      	mov	r2, r0
  401e94:	4421      	add	r1, r4
  401e96:	4630      	mov	r0, r6
  401e98:	4c21      	ldr	r4, [pc, #132]	; (401f20 <prvTimerTask+0x184>)
  401e9a:	47a0      	blx	r4
  401e9c:	2801      	cmp	r0, #1
  401e9e:	d19d      	bne.n	401ddc <prvTimerTask+0x40>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401ea0:	6a73      	ldr	r3, [r6, #36]	; 0x24
  401ea2:	4630      	mov	r0, r6
  401ea4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401ea6:	69f3      	ldr	r3, [r6, #28]
  401ea8:	2b01      	cmp	r3, #1
  401eaa:	d197      	bne.n	401ddc <prvTimerTask+0x40>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  401eac:	69b2      	ldr	r2, [r6, #24]
  401eae:	2100      	movs	r1, #0
  401eb0:	9100      	str	r1, [sp, #0]
  401eb2:	460b      	mov	r3, r1
  401eb4:	9804      	ldr	r0, [sp, #16]
  401eb6:	4402      	add	r2, r0
  401eb8:	4630      	mov	r0, r6
  401eba:	4c1a      	ldr	r4, [pc, #104]	; (401f24 <prvTimerTask+0x188>)
  401ebc:	47a0      	blx	r4
							configASSERT( xResult );
  401ebe:	2800      	cmp	r0, #0
  401ec0:	d18c      	bne.n	401ddc <prvTimerTask+0x40>
  401ec2:	4b19      	ldr	r3, [pc, #100]	; (401f28 <prvTimerTask+0x18c>)
  401ec4:	4798      	blx	r3
  401ec6:	e7fe      	b.n	401ec6 <prvTimerTask+0x12a>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  401ec8:	9904      	ldr	r1, [sp, #16]
  401eca:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401ecc:	b131      	cbz	r1, 401edc <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  401ece:	4603      	mov	r3, r0
  401ed0:	4602      	mov	r2, r0
  401ed2:	4401      	add	r1, r0
  401ed4:	4630      	mov	r0, r6
  401ed6:	4c12      	ldr	r4, [pc, #72]	; (401f20 <prvTimerTask+0x184>)
  401ed8:	47a0      	blx	r4
  401eda:	e77f      	b.n	401ddc <prvTimerTask+0x40>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401edc:	4b12      	ldr	r3, [pc, #72]	; (401f28 <prvTimerTask+0x18c>)
  401ede:	4798      	blx	r3
  401ee0:	e7fe      	b.n	401ee0 <prvTimerTask+0x144>
					vPortFree( pxTimer );
  401ee2:	4630      	mov	r0, r6
  401ee4:	4b12      	ldr	r3, [pc, #72]	; (401f30 <prvTimerTask+0x194>)
  401ee6:	4798      	blx	r3
  401ee8:	e778      	b.n	401ddc <prvTimerTask+0x40>
	vTaskSuspendAll();
  401eea:	4b07      	ldr	r3, [pc, #28]	; (401f08 <prvTimerTask+0x16c>)
  401eec:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401eee:	a803      	add	r0, sp, #12
  401ef0:	4b06      	ldr	r3, [pc, #24]	; (401f0c <prvTimerTask+0x170>)
  401ef2:	4798      	blx	r3
  401ef4:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401ef6:	9b03      	ldr	r3, [sp, #12]
  401ef8:	2b00      	cmp	r3, #0
  401efa:	d1c4      	bne.n	401e86 <prvTimerTask+0xea>
		xNextExpireTime = ( TickType_t ) 0U;
  401efc:	2500      	movs	r5, #0
  401efe:	e763      	b.n	401dc8 <prvTimerTask+0x2c>
  401f00:	004007e9 	.word	0x004007e9
  401f04:	20013ad4 	.word	0x20013ad4
  401f08:	00401531 	.word	0x00401531
  401f0c:	00401cf1 	.word	0x00401cf1
  401f10:	20013b08 	.word	0x20013b08
  401f14:	0040120d 	.word	0x0040120d
  401f18:	0040168d 	.word	0x0040168d
  401f1c:	00401091 	.word	0x00401091
  401f20:	00401b99 	.word	0x00401b99
  401f24:	00401c99 	.word	0x00401c99
  401f28:	0040089d 	.word	0x0040089d
  401f2c:	00400885 	.word	0x00400885
  401f30:	00400b9d 	.word	0x00400b9d

00401f34 <ext_interrupt_handler>:




void ext_interrupt_handler(void)
{
  401f34:	b510      	push	{r4, lr}
	xSemaphoreGive(sema_sensor_int_pb03);
  401f36:	2300      	movs	r3, #0
  401f38:	461a      	mov	r2, r3
  401f3a:	4619      	mov	r1, r3
  401f3c:	4802      	ldr	r0, [pc, #8]	; (401f48 <ext_interrupt_handler+0x14>)
  401f3e:	6800      	ldr	r0, [r0, #0]
  401f40:	4c02      	ldr	r4, [pc, #8]	; (401f4c <ext_interrupt_handler+0x18>)
  401f42:	47a0      	blx	r4
  401f44:	bd10      	pop	{r4, pc}
  401f46:	bf00      	nop
  401f48:	2002224c 	.word	0x2002224c
  401f4c:	00400e4d 	.word	0x00400e4d

00401f50 <ext_int_initialize>:
}

void ext_int_initialize(void (*handler_function)(void))
{
  401f50:	b570      	push	{r4, r5, r6, lr}
  401f52:	b082      	sub	sp, #8
  401f54:	4605      	mov	r5, r0
	/* Enable the peripheral clock for the MAG extension board interrupt pin. */
	pmc_enable_periph_clk(PIN_EXT_INTERRUPT_ID);
  401f56:	200b      	movs	r0, #11
  401f58:	4b0f      	ldr	r3, [pc, #60]	; (401f98 <ext_int_initialize+0x48>)
  401f5a:	4798      	blx	r3

	/* Configure PIOs as input pins. */
	pio_configure(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_TYPE, PIN_EXT_INTERRUPT_MASK, PIN_EXT_INTERRUPT_ATTR);
  401f5c:	4c0f      	ldr	r4, [pc, #60]	; (401f9c <ext_int_initialize+0x4c>)
  401f5e:	2370      	movs	r3, #112	; 0x70
  401f60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401f64:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401f68:	4620      	mov	r0, r4
  401f6a:	4e0d      	ldr	r6, [pc, #52]	; (401fa0 <ext_int_initialize+0x50>)
  401f6c:	47b0      	blx	r6

	/* Initialize PIO interrupt handler, interrupt on rising edge. */
	pio_handler_set(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_ID, PIN_EXT_INTERRUPT_MASK,
  401f6e:	9500      	str	r5, [sp, #0]
  401f70:	2370      	movs	r3, #112	; 0x70
  401f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401f76:	210b      	movs	r1, #11
  401f78:	4620      	mov	r0, r4
  401f7a:	4d0a      	ldr	r5, [pc, #40]	; (401fa4 <ext_int_initialize+0x54>)
  401f7c:	47a8      	blx	r5
	PIN_EXT_INTERRUPT_ATTR, (void (*) (uint32_t, uint32_t))handler_function);

	/* Initialize and enable push button (PIO) interrupt. */
	pio_handler_set_priority(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_IRQn, 0);
  401f7e:	2200      	movs	r2, #0
  401f80:	210b      	movs	r1, #11
  401f82:	4620      	mov	r0, r4
  401f84:	4b08      	ldr	r3, [pc, #32]	; (401fa8 <ext_int_initialize+0x58>)
  401f86:	4798      	blx	r3
	pio_enable_interrupt(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_MASK);
  401f88:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f8c:	4620      	mov	r0, r4
  401f8e:	4b07      	ldr	r3, [pc, #28]	; (401fac <ext_int_initialize+0x5c>)
  401f90:	4798      	blx	r3

}
  401f92:	b002      	add	sp, #8
  401f94:	bd70      	pop	{r4, r5, r6, pc}
  401f96:	bf00      	nop
  401f98:	00404a99 	.word	0x00404a99
  401f9c:	400e0e00 	.word	0x400e0e00
  401fa0:	004002a9 	.word	0x004002a9
  401fa4:	004003b9 	.word	0x004003b9
  401fa8:	00400451 	.word	0x00400451
  401fac:	00400357 	.word	0x00400357

00401fb0 <initBSP>:

void initBSP(bool bRev)
{
  401fb0:	b510      	push	{r4, lr}
  401fb2:	4604      	mov	r4, r0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401fb4:	4b08      	ldr	r3, [pc, #32]	; (401fd8 <initBSP+0x28>)
  401fb6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401fba:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401fbc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401fc0:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_dir(CRYSTAL_RST, IOPORT_DIR_OUTPUT); //
	ioport_set_pin_level(CRYSTAL_RST, IOPORT_PIN_LEVEL_HIGH); //
	
	ext_int_initialize(ext_interrupt_handler);
  401fc2:	4806      	ldr	r0, [pc, #24]	; (401fdc <initBSP+0x2c>)
  401fc4:	4b06      	ldr	r3, [pc, #24]	; (401fe0 <initBSP+0x30>)
  401fc6:	4798      	blx	r3
	
	if (bRev)
  401fc8:	b914      	cbnz	r4, 401fd0 <initBSP+0x20>
	  spi_master_init1(); //for ver-B and D+ board EVB
	 else
	  spi_master_init(); //for ver-A board EVB and on board sensor
  401fca:	4b06      	ldr	r3, [pc, #24]	; (401fe4 <initBSP+0x34>)
  401fcc:	4798      	blx	r3
  401fce:	bd10      	pop	{r4, pc}
	  spi_master_init1(); //for ver-B and D+ board EVB
  401fd0:	4b05      	ldr	r3, [pc, #20]	; (401fe8 <initBSP+0x38>)
  401fd2:	4798      	blx	r3
  401fd4:	bd10      	pop	{r4, pc}
  401fd6:	bf00      	nop
  401fd8:	400e0e00 	.word	0x400e0e00
  401fdc:	00401f35 	.word	0x00401f35
  401fe0:	00401f51 	.word	0x00401f51
  401fe4:	00403eed 	.word	0x00403eed
  401fe8:	00403e51 	.word	0x00403e51

00401fec <processUartData>:

}

void processUartData(void)
{
  401fec:	b510      	push	{r4, lr}
	uint8_t  cmdId;

	
	xSemaphoreTake( sema_main_rx_uart, portMAX_DELAY);
  401fee:	2300      	movs	r3, #0
  401ff0:	f04f 32ff 	mov.w	r2, #4294967295
  401ff4:	4619      	mov	r1, r3
  401ff6:	4812      	ldr	r0, [pc, #72]	; (402040 <processUartData+0x54>)
  401ff8:	6800      	ldr	r0, [r0, #0]
  401ffa:	4c12      	ldr	r4, [pc, #72]	; (402044 <processUartData+0x58>)
  401ffc:	47a0      	blx	r4
	

	
	cmdId = main_rx_buf[0]; //when using teraterm
  401ffe:	4b12      	ldr	r3, [pc, #72]	; (402048 <processUartData+0x5c>)
  402000:	781c      	ldrb	r4, [r3, #0]
	
	printf(" Running test %c  ... Press ^X to exit test and enter new test key\r\n", cmdId); 
  402002:	4621      	mov	r1, r4
  402004:	4811      	ldr	r0, [pc, #68]	; (40204c <processUartData+0x60>)
  402006:	4b12      	ldr	r3, [pc, #72]	; (402050 <processUartData+0x64>)
  402008:	4798      	blx	r3
	
	switch (cmdId)
  40200a:	3c31      	subs	r4, #49	; 0x31
  40200c:	2c08      	cmp	r4, #8
  40200e:	d812      	bhi.n	402036 <processUartData+0x4a>
  402010:	e8df f004 	tbb	[pc, r4]
  402014:	11081105 	.word	0x11081105
  402018:	1111110b 	.word	0x1111110b
  40201c:	0e          	.byte	0x0e
  40201d:	00          	.byte	0x00
	{
		case '1':  //command to run IAM-20685 Test code
		{
			TestMain();	
  40201e:	4b0d      	ldr	r3, [pc, #52]	; (402054 <processUartData+0x68>)
  402020:	4798      	blx	r3
			break;
  402022:	bd10      	pop	{r4, pc}
		}
		case '3':// command for IAM-20685
		{
			IAM20685Original();
  402024:	4b0c      	ldr	r3, [pc, #48]	; (402058 <processUartData+0x6c>)
  402026:	4798      	blx	r3
			break;
  402028:	bd10      	pop	{r4, pc}
		}
		
		case '5':// command for IAM-20685
		{
			IAM20685();
  40202a:	4b0c      	ldr	r3, [pc, #48]	; (40205c <processUartData+0x70>)
  40202c:	4798      	blx	r3
			break;
  40202e:	bd10      	pop	{r4, pc}
		}
		case '9'://command for IAM-20685
		{
			IAM20685_PRM();
  402030:	4b0b      	ldr	r3, [pc, #44]	; (402060 <processUartData+0x74>)
  402032:	4798      	blx	r3
			break;
  402034:	bd10      	pop	{r4, pc}
		}
		
		
		default:
		{
			printf ("default  case");
  402036:	480b      	ldr	r0, [pc, #44]	; (402064 <processUartData+0x78>)
  402038:	4b05      	ldr	r3, [pc, #20]	; (402050 <processUartData+0x64>)
  40203a:	4798      	blx	r3
  40203c:	bd10      	pop	{r4, pc}
  40203e:	bf00      	nop
  402040:	2001a240 	.word	0x2001a240
  402044:	00401091 	.word	0x00401091
  402048:	2001a24c 	.word	0x2001a24c
  40204c:	0040e59c 	.word	0x0040e59c
  402050:	00407d2d 	.word	0x00407d2d
  402054:	004068d9 	.word	0x004068d9
  402058:	004030f5 	.word	0x004030f5
  40205c:	00403491 	.word	0x00403491
  402060:	00404e0d 	.word	0x00404e0d
  402064:	0040e5e4 	.word	0x0040e5e4

00402068 <userexit>:
	}
}

#define CTRLX 0x18
bool userexit()
{
  402068:	b510      	push	{r4, lr}
	bool retVal = false;
	uint8_t c;
	if (xSemaphoreTake( sema_main_rx_uart, 0))  // sample, dont wait.  There's always a next time
  40206a:	2300      	movs	r3, #0
  40206c:	461a      	mov	r2, r3
  40206e:	4619      	mov	r1, r3
  402070:	4806      	ldr	r0, [pc, #24]	; (40208c <userexit+0x24>)
  402072:	6800      	ldr	r0, [r0, #0]
  402074:	4c06      	ldr	r4, [pc, #24]	; (402090 <userexit+0x28>)
  402076:	47a0      	blx	r4
  402078:	b130      	cbz	r0, 402088 <userexit+0x20>
	{
	  c = main_rx_buf[0];
  40207a:	4b06      	ldr	r3, [pc, #24]	; (402094 <userexit+0x2c>)
	  if (c == CTRLX)
  40207c:	7818      	ldrb	r0, [r3, #0]
  40207e:	2818      	cmp	r0, #24
  402080:	bf14      	ite	ne
  402082:	2000      	movne	r0, #0
  402084:	2001      	moveq	r0, #1
  402086:	bd10      	pop	{r4, pc}
	bool retVal = false;
  402088:	2000      	movs	r0, #0
	    retVal = true;
	}
	return retVal;
}
  40208a:	bd10      	pop	{r4, pc}
  40208c:	2001a240 	.word	0x2001a240
  402090:	00401091 	.word	0x00401091
  402094:	2001a24c 	.word	0x2001a24c

00402098 <getFSRval>:
{
	currentGyroFSR = fsr;
}

void getFSRval(uint16_t *afsrp,  uint16_t *alrfsrp, uint16_t *gfsrp)
{
  402098:	b410      	push	{r4}
	if (afsrp)
  40209a:	b130      	cbz	r0, 4020aa <getFSRval+0x12>
  40209c:	4603      	mov	r3, r0
	  *afsrp = afsrValTab[currentAccelFSR];
  40209e:	480b      	ldr	r0, [pc, #44]	; (4020cc <getFSRval+0x34>)
  4020a0:	7804      	ldrb	r4, [r0, #0]
  4020a2:	480b      	ldr	r0, [pc, #44]	; (4020d0 <getFSRval+0x38>)
  4020a4:	f830 0014 	ldrh.w	r0, [r0, r4, lsl #1]
  4020a8:	8018      	strh	r0, [r3, #0]
	if (alrfsrp)
  4020aa:	b129      	cbz	r1, 4020b8 <getFSRval+0x20>
	  *alrfsrp = aflrValTab[currentlowresAccelFSR];
  4020ac:	4b09      	ldr	r3, [pc, #36]	; (4020d4 <getFSRval+0x3c>)
  4020ae:	7818      	ldrb	r0, [r3, #0]
  4020b0:	4b09      	ldr	r3, [pc, #36]	; (4020d8 <getFSRval+0x40>)
  4020b2:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
  4020b6:	800b      	strh	r3, [r1, #0]
	if (gfsrp)
  4020b8:	b12a      	cbz	r2, 4020c6 <getFSRval+0x2e>
	  *gfsrp = gfsrValTab[currentGyroFSR];
  4020ba:	4b08      	ldr	r3, [pc, #32]	; (4020dc <getFSRval+0x44>)
  4020bc:	7819      	ldrb	r1, [r3, #0]
  4020be:	4b08      	ldr	r3, [pc, #32]	; (4020e0 <getFSRval+0x48>)
  4020c0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
  4020c4:	8013      	strh	r3, [r2, #0]
}
  4020c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4020ca:	4770      	bx	lr
  4020cc:	20013b0c 	.word	0x20013b0c
  4020d0:	200000bc 	.word	0x200000bc
  4020d4:	20013b10 	.word	0x20013b10
  4020d8:	200000a0 	.word	0x200000a0
  4020dc:	20013b0e 	.word	0x20013b0e
  4020e0:	20000118 	.word	0x20000118

004020e4 <AccelFSRset>:
//**********************************
void AccelFSRset (AccelFsrtype afsr, AccellRestype alrfsr)
{
  4020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4020e6:	4604      	mov	r4, r0
  4020e8:	460d      	mov	r5, r1
	uint16_t regVal;
	enum errWriteType rwerr = noProtocolErr;
	switch(afsr)
  4020ea:	2801      	cmp	r0, #1
  4020ec:	d019      	beq.n	402122 <AccelFSRset+0x3e>
  4020ee:	b130      	cbz	r0, 4020fe <AccelFSRset+0x1a>
  4020f0:	2802      	cmp	r0, #2
  4020f2:	d01b      	beq.n	40212c <AccelFSRset+0x48>
			if (alrfsr == flr32) regVal=0;
		break;		
		case afsr32:
		default:
			regVal=3;
			if (alrfsr == flr32) regVal=2;
  4020f4:	2903      	cmp	r1, #3
  4020f6:	bf14      	ite	ne
  4020f8:	2703      	movne	r7, #3
  4020fa:	2702      	moveq	r7, #2
  4020fc:	e003      	b.n	402106 <AccelFSRset+0x22>
			if (alrfsr == flr4) regVal=4;
  4020fe:	2900      	cmp	r1, #0
  402100:	bf14      	ite	ne
  402102:	2705      	movne	r7, #5
  402104:	2704      	moveq	r7, #4
	}
	
	// 	read and save bank
	//uint16_t currbank = yamRead(0, Bank);
	
	bankselect(bFSa);
  402106:	2006      	movs	r0, #6
  402108:	4e0a      	ldr	r6, [pc, #40]	; (402134 <AccelFSRset+0x50>)
  40210a:	47b0      	blx	r6
	rwerr = WriteReg(FSa, regVal);
  40210c:	4639      	mov	r1, r7
  40210e:	2014      	movs	r0, #20
  402110:	4b09      	ldr	r3, [pc, #36]	; (402138 <AccelFSRset+0x54>)
  402112:	4798      	blx	r3
	bankselect(0);
  402114:	2000      	movs	r0, #0
  402116:	47b0      	blx	r6
	currentAccelFSR = afsr;
  402118:	4b08      	ldr	r3, [pc, #32]	; (40213c <AccelFSRset+0x58>)
  40211a:	701c      	strb	r4, [r3, #0]
	currentlowresAccelFSR = alrfsr;
  40211c:	4b08      	ldr	r3, [pc, #32]	; (402140 <AccelFSRset+0x5c>)
  40211e:	701d      	strb	r5, [r3, #0]
  402120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (alrfsr == flr4) regVal=6;
  402122:	2900      	cmp	r1, #0
  402124:	bf14      	ite	ne
  402126:	2707      	movne	r7, #7
  402128:	2706      	moveq	r7, #6
  40212a:	e7ec      	b.n	402106 <AccelFSRset+0x22>
			if (alrfsr == flr4) regVal=4;
  40212c:	1ecf      	subs	r7, r1, #3
  40212e:	bf18      	it	ne
  402130:	2701      	movne	r7, #1
  402132:	e7e8      	b.n	402106 <AccelFSRset+0x22>
  402134:	00403d71 	.word	0x00403d71
  402138:	00403c8d 	.word	0x00403c8d
  40213c:	20013b0c 	.word	0x20013b0c
  402140:	20013b10 	.word	0x20013b10

00402144 <GyroFSRset>:
}


//**********************************
void GyroFSRset(GyroFSRtype fsr )
{
  402144:	b538      	push	{r3, r4, r5, lr}
  402146:	4604      	mov	r4, r0
	enum errWriteType rwerr=noProtocolErr;
	bankselect(bFSg);
  402148:	2007      	movs	r0, #7
  40214a:	4d05      	ldr	r5, [pc, #20]	; (402160 <GyroFSRset+0x1c>)
  40214c:	47a8      	blx	r5
	rwerr = WriteReg(FSg, fsr);
  40214e:	4621      	mov	r1, r4
  402150:	2014      	movs	r0, #20
  402152:	4b04      	ldr	r3, [pc, #16]	; (402164 <GyroFSRset+0x20>)
  402154:	4798      	blx	r3
	bankselect(0);
  402156:	2000      	movs	r0, #0
  402158:	47a8      	blx	r5
	currentGyroFSR = fsr;
  40215a:	4b03      	ldr	r3, [pc, #12]	; (402168 <GyroFSRset+0x24>)
  40215c:	701c      	strb	r4, [r3, #0]
  40215e:	bd38      	pop	{r3, r4, r5, pc}
  402160:	00403d71 	.word	0x00403d71
  402164:	00403c8d 	.word	0x00403c8d
  402168:	20013b0e 	.word	0x20013b0e

0040216c <ReadTempSensors>:

}

//**********************************
void ReadTempSensors(int16_t *readArr)
{
  40216c:	b570      	push	{r4, r5, r6, lr}
  40216e:	b082      	sub	sp, #8
  402170:	4605      	mov	r5, r0
	enum errWriteType rwerr = noProtocolErr;
  402172:	ac02      	add	r4, sp, #8
  402174:	2300      	movs	r3, #0
  402176:	f804 3d01 	strb.w	r3, [r4, #-1]!
	readArr[0] = ReadReg(T1, &rwerr);
  40217a:	4621      	mov	r1, r4
  40217c:	2003      	movs	r0, #3
  40217e:	4e06      	ldr	r6, [pc, #24]	; (402198 <ReadTempSensors+0x2c>)
  402180:	47b0      	blx	r6
  402182:	8028      	strh	r0, [r5, #0]
	readArr[1] = ReadReg(T2, &rwerr);
  402184:	4621      	mov	r1, r4
  402186:	2007      	movs	r0, #7
  402188:	47b0      	blx	r6
  40218a:	8068      	strh	r0, [r5, #2]
	readArr[2] = ReadReg(T12, &rwerr);
  40218c:	4621      	mov	r1, r4
  40218e:	200f      	movs	r0, #15
  402190:	47b0      	blx	r6
  402192:	80a8      	strh	r0, [r5, #4]
}
  402194:	b002      	add	sp, #8
  402196:	bd70      	pop	{r4, r5, r6, pc}
  402198:	00403cad 	.word	0x00403cad

0040219c <ReadAccel>:

void ReadAccel(int16_t *p)
{
  40219c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40219e:	b083      	sub	sp, #12
  4021a0:	4605      	mov	r5, r0
	regAddrType reg;
	enum errWriteType rwerr = noProtocolErr;
  4021a2:	ae02      	add	r6, sp, #8
  4021a4:	2300      	movs	r3, #0
  4021a6:	f806 3d01 	strb.w	r3, [r6, #-1]!
	for (reg=Ax; reg<=Az; reg++, p++)
  4021aa:	2404      	movs	r4, #4
	*p = ReadReg(reg, &rwerr);
  4021ac:	4f05      	ldr	r7, [pc, #20]	; (4021c4 <ReadAccel+0x28>)
  4021ae:	4631      	mov	r1, r6
  4021b0:	4620      	mov	r0, r4
  4021b2:	47b8      	blx	r7
  4021b4:	f825 0b02 	strh.w	r0, [r5], #2
	for (reg=Ax; reg<=Az; reg++, p++)
  4021b8:	3401      	adds	r4, #1
  4021ba:	b2e4      	uxtb	r4, r4
  4021bc:	2c07      	cmp	r4, #7
  4021be:	d1f6      	bne.n	4021ae <ReadAccel+0x12>

}
  4021c0:	b003      	add	sp, #12
  4021c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4021c4:	00403cad 	.word	0x00403cad

004021c8 <ReadAccelLowRes>:
{
	
}
//**********************************
void ReadAccelLowRes(int16_t * p)
{
  4021c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4021ca:	b083      	sub	sp, #12
  4021cc:	4605      	mov	r5, r0
	enum errWriteType rwerr = noProtocolErr;
  4021ce:	ae02      	add	r6, sp, #8
  4021d0:	2300      	movs	r3, #0
  4021d2:	f806 3d01 	strb.w	r3, [r6, #-1]!
	for(int addr=Axlr; addr <= Azlr; addr++ , p++)
  4021d6:	2408      	movs	r4, #8
	  *p = ReadReg(addr, &rwerr);
  4021d8:	4f05      	ldr	r7, [pc, #20]	; (4021f0 <ReadAccelLowRes+0x28>)
  4021da:	4631      	mov	r1, r6
  4021dc:	b2e0      	uxtb	r0, r4
  4021de:	47b8      	blx	r7
  4021e0:	f825 0b02 	strh.w	r0, [r5], #2
	for(int addr=Axlr; addr <= Azlr; addr++ , p++)
  4021e4:	3401      	adds	r4, #1
  4021e6:	2c0b      	cmp	r4, #11
  4021e8:	d1f7      	bne.n	4021da <ReadAccelLowRes+0x12>
}
  4021ea:	b003      	add	sp, #12
  4021ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4021ee:	bf00      	nop
  4021f0:	00403cad 	.word	0x00403cad

004021f4 <getWhoAmI>:
//**********************************
WhoAmIType getWhoAmI(uint16_t * wmi)
{
  4021f4:	b510      	push	{r4, lr}
  4021f6:	b082      	sub	sp, #8
  4021f8:	4604      	mov	r4, r0
	WhoAmIType ret = YamOK;
	enum errWriteType rwerr = noProtocolErr;
  4021fa:	a902      	add	r1, sp, #8
  4021fc:	2300      	movs	r3, #0
  4021fe:	f801 3d01 	strb.w	r3, [r1, #-1]!
	uint16_t myID;
	myID = ReadReg(Fxd, &rwerr); 
  402202:	200b      	movs	r0, #11
  402204:	4b05      	ldr	r3, [pc, #20]	; (40221c <getWhoAmI+0x28>)
  402206:	4798      	blx	r3
  402208:	b280      	uxth	r0, r0
	*wmi = myID;
  40220a:	8020      	strh	r0, [r4, #0]
	if (myID != FIXEDYAM)
	  ret = YamNotOK;
	  
	return ret;

}
  40220c:	f64a 2355 	movw	r3, #43605	; 0xaa55
  402210:	4298      	cmp	r0, r3
  402212:	bf14      	ite	ne
  402214:	2000      	movne	r0, #0
  402216:	2001      	moveq	r0, #1
  402218:	b002      	add	sp, #8
  40221a:	bd10      	pop	{r4, pc}
  40221c:	00403cad 	.word	0x00403cad

00402220 <ReadAxesAndTemp>:
{
  402220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402224:	b082      	sub	sp, #8
  402226:	4604      	mov	r4, r0
  402228:	460f      	mov	r7, r1
  40222a:	4615      	mov	r5, r2
  40222c:	4698      	mov	r8, r3
  40222e:	9808      	ldr	r0, [sp, #32]
	enum errWriteType rwerr = noProtocolErr;
  402230:	2300      	movs	r3, #0
  402232:	f88d 3007 	strb.w	r3, [sp, #7]
	if (anythingelsep)  
  402236:	b108      	cbz	r0, 40223c <ReadAxesAndTemp+0x1c>
	   err = getWhoAmI((uint16_t*) anythingelsep);
  402238:	4b0f      	ldr	r3, [pc, #60]	; (402278 <ReadAxesAndTemp+0x58>)
  40223a:	4798      	blx	r3
	if (accelp)
  40223c:	b114      	cbz	r4, 402244 <ReadAxesAndTemp+0x24>
		ReadAccel(accelp);
  40223e:	4620      	mov	r0, r4
  402240:	4b0e      	ldr	r3, [pc, #56]	; (40227c <ReadAxesAndTemp+0x5c>)
  402242:	4798      	blx	r3
	if (gyrop) 
  402244:	b155      	cbz	r5, 40225c <ReadAxesAndTemp+0x3c>
  402246:	2400      	movs	r4, #0
	 		*gyrop = ReadReg(reg, &rwerr);
  402248:	4e0d      	ldr	r6, [pc, #52]	; (402280 <ReadAxesAndTemp+0x60>)
  40224a:	f10d 0107 	add.w	r1, sp, #7
  40224e:	b2e0      	uxtb	r0, r4
  402250:	47b0      	blx	r6
  402252:	f825 0b02 	strh.w	r0, [r5], #2
  402256:	3401      	adds	r4, #1
	 	for (reg=Gx; reg<=Gz; reg++, gyrop++)
  402258:	2c03      	cmp	r4, #3
  40225a:	d1f6      	bne.n	40224a <ReadAxesAndTemp+0x2a>
    if (temperaturep)
  40225c:	f1b8 0f00 	cmp.w	r8, #0
  402260:	d002      	beq.n	402268 <ReadAxesAndTemp+0x48>
	   ReadTempSensors(temperaturep);
  402262:	4640      	mov	r0, r8
  402264:	4b07      	ldr	r3, [pc, #28]	; (402284 <ReadAxesAndTemp+0x64>)
  402266:	4798      	blx	r3
	if (accelLowresp)
  402268:	b117      	cbz	r7, 402270 <ReadAxesAndTemp+0x50>
	    ReadAccelLowRes(accelLowresp);
  40226a:	4638      	mov	r0, r7
  40226c:	4b06      	ldr	r3, [pc, #24]	; (402288 <ReadAxesAndTemp+0x68>)
  40226e:	4798      	blx	r3
}
  402270:	b002      	add	sp, #8
  402272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402276:	bf00      	nop
  402278:	004021f5 	.word	0x004021f5
  40227c:	0040219d 	.word	0x0040219d
  402280:	00403cad 	.word	0x00403cad
  402284:	0040216d 	.word	0x0040216d
  402288:	004021c9 	.word	0x004021c9

0040228c <getCurrFilter>:
static float accelfilterBW[] = {10.0, 46.0, 60.0, 250.0, 300.0, 400.0};


	
void getCurrFilter(struct filterInfoType * gfp, struct filterInfoType *afp, struct filterInfoType *afstr)
{
  40228c:	b510      	push	{r4, lr}
  if (gfp) {
  40228e:	b160      	cbz	r0, 4022aa <getCurrFilter+0x1e>
  402290:	4603      	mov	r3, r0
	  gfp->filterIndex = currentGyroFilter;
  402292:	4810      	ldr	r0, [pc, #64]	; (4022d4 <getCurrFilter+0x48>)
  402294:	7800      	ldrb	r0, [r0, #0]
  402296:	8018      	strh	r0, [r3, #0]
	  gfp->BW = gyrofilterBW[currentGyroFilter];
  402298:	4c0f      	ldr	r4, [pc, #60]	; (4022d8 <getCurrFilter+0x4c>)
  40229a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  40229e:	6824      	ldr	r4, [r4, #0]
  4022a0:	605c      	str	r4, [r3, #4]
	  gfp->str = gyrofilterString[currentGyroFilter];  
  4022a2:	4c0e      	ldr	r4, [pc, #56]	; (4022dc <getCurrFilter+0x50>)
  4022a4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
  4022a8:	6098      	str	r0, [r3, #8]
  }
  if (afp) {
  4022aa:	b159      	cbz	r1, 4022c4 <getCurrFilter+0x38>
	  afp->filterIndex = currentAccelFilter;
  4022ac:	4b0c      	ldr	r3, [pc, #48]	; (4022e0 <getCurrFilter+0x54>)
  4022ae:	781b      	ldrb	r3, [r3, #0]
  4022b0:	800b      	strh	r3, [r1, #0]
	  afp->BW = accelfilterBW[currentAccelFilter];
  4022b2:	480c      	ldr	r0, [pc, #48]	; (4022e4 <getCurrFilter+0x58>)
  4022b4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  4022b8:	6800      	ldr	r0, [r0, #0]
  4022ba:	6048      	str	r0, [r1, #4]
	  afp->str = accelfilterString[currentAccelFilter];
  4022bc:	480a      	ldr	r0, [pc, #40]	; (4022e8 <getCurrFilter+0x5c>)
  4022be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  4022c2:	608b      	str	r3, [r1, #8]
  }
  if (afstr) {
  4022c4:	b122      	cbz	r2, 4022d0 <getCurrFilter+0x44>
	  yamMsg("Unimplemented Low Res Filter Return", yamwait, 0);
  4022c6:	2200      	movs	r2, #0
  4022c8:	2101      	movs	r1, #1
  4022ca:	4808      	ldr	r0, [pc, #32]	; (4022ec <getCurrFilter+0x60>)
  4022cc:	4b08      	ldr	r3, [pc, #32]	; (4022f0 <getCurrFilter+0x64>)
  4022ce:	4798      	blx	r3
  4022d0:	bd10      	pop	{r4, pc}
  4022d2:	bf00      	nop
  4022d4:	20013b0f 	.word	0x20013b0f
  4022d8:	0040e6c0 	.word	0x0040e6c0
  4022dc:	0040e6d4 	.word	0x0040e6d4
  4022e0:	20013b0d 	.word	0x20013b0d
  4022e4:	0040e624 	.word	0x0040e624
  4022e8:	0040e63c 	.word	0x0040e63c
  4022ec:	0040e69c 	.word	0x0040e69c
  4022f0:	00404f71 	.word	0x00404f71

004022f4 <SetFilter>:
  
  
}
//**********************************
void SetFilter (AxisType axis,  gyrofilterBWType gyroflt, accelfilterBWType accelflt)
{
  4022f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4022f8:	b083      	sub	sp, #12
  4022fa:	4605      	mov	r5, r0
  4022fc:	460e      	mov	r6, r1
  4022fe:	4617      	mov	r7, r2
    uint16_t index =  gyroflt*6 + accelflt;  // relies on enums starting from 0
  402300:	eb01 0441 	add.w	r4, r1, r1, lsl #1
  402304:	eb02 0444 	add.w	r4, r2, r4, lsl #1
	uint16_t regCode, regbitfield, value;
	uint16_t mask, temp;
	regAddrType regaddr;
	enum errWriteType rwerr=noProtocolErr;
  402308:	2300      	movs	r3, #0
  40230a:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(currentBank() != bZ_flt)  // all filter settings in bank 0, so ok to check bank for z-filter only
  40230e:	4b2b      	ldr	r3, [pc, #172]	; (4023bc <SetFilter+0xc8>)
  402310:	4798      	blx	r3
  402312:	b958      	cbnz	r0, 40232c <SetFilter+0x38>
	  bankselect(bZ_flt);
	  
	regCode = filterTable[index];
  402314:	4b2a      	ldr	r3, [pc, #168]	; (4023c0 <SetFilter+0xcc>)
  402316:	f833 9014 	ldrh.w	r9, [r3, r4, lsl #1]
	
	mask		= axis == X ? fX_flt : axis == Y ? fY_flt : fZ_flt;
  40231a:	b15d      	cbz	r5, 402334 <SetFilter+0x40>
  40231c:	2d01      	cmp	r5, #1
  40231e:	d047      	beq.n	4023b0 <SetFilter+0xbc>
  402320:	f44f 657c 	mov.w	r5, #4032	; 0xfc0
		if ((bitfield>>i)&1)
  402324:	462a      	mov	r2, r5
	regaddr		= axis == X ?  X_flt : axis == Y ?  Y_flt :  Z_flt;
  402326:	f04f 080c 	mov.w	r8, #12
  40232a:	e008      	b.n	40233e <SetFilter+0x4a>
	  bankselect(bZ_flt);
  40232c:	2000      	movs	r0, #0
  40232e:	4b25      	ldr	r3, [pc, #148]	; (4023c4 <SetFilter+0xd0>)
  402330:	4798      	blx	r3
  402332:	e7ef      	b.n	402314 <SetFilter+0x20>
	mask		= axis == X ? fX_flt : axis == Y ? fY_flt : fZ_flt;
  402334:	f44f 557c 	mov.w	r5, #16128	; 0x3f00
		if ((bitfield>>i)&1)
  402338:	462a      	mov	r2, r5
	regaddr		= axis == X ?  X_flt : axis == Y ?  Y_flt :  Z_flt;
  40233a:	f04f 080e 	mov.w	r8, #14
  40233e:	2401      	movs	r4, #1
		if ((bitfield>>i)&1)
  402340:	fa42 f304 	asr.w	r3, r2, r4
  402344:	f013 0f01 	tst.w	r3, #1
  402348:	d116      	bne.n	402378 <SetFilter+0x84>
	for (i=0; i<16; i++)
  40234a:	3401      	adds	r4, #1
  40234c:	2c10      	cmp	r4, #16
  40234e:	d1f7      	bne.n	402340 <SetFilter+0x4c>
	  {  printf("bitfield is empty\r\n");  getchar(); printf("Press any key to continue \r\n"); }
  402350:	481d      	ldr	r0, [pc, #116]	; (4023c8 <SetFilter+0xd4>)
  402352:	4b1e      	ldr	r3, [pc, #120]	; (4023cc <SetFilter+0xd8>)
  402354:	4798      	blx	r3
  402356:	4b1e      	ldr	r3, [pc, #120]	; (4023d0 <SetFilter+0xdc>)
  402358:	6818      	ldr	r0, [r3, #0]
  40235a:	6842      	ldr	r2, [r0, #4]
  40235c:	6853      	ldr	r3, [r2, #4]
  40235e:	3b01      	subs	r3, #1
  402360:	6053      	str	r3, [r2, #4]
  402362:	2b00      	cmp	r3, #0
  402364:	db20      	blt.n	4023a8 <SetFilter+0xb4>
  402366:	6842      	ldr	r2, [r0, #4]
  402368:	6813      	ldr	r3, [r2, #0]
  40236a:	3301      	adds	r3, #1
  40236c:	6013      	str	r3, [r2, #0]
  40236e:	4819      	ldr	r0, [pc, #100]	; (4023d4 <SetFilter+0xe0>)
  402370:	4b16      	ldr	r3, [pc, #88]	; (4023cc <SetFilter+0xd8>)
  402372:	4798      	blx	r3
  402374:	2410      	movs	r4, #16
  402376:	e001      	b.n	40237c <SetFilter+0x88>
	if (i==16) 
  402378:	2c10      	cmp	r4, #16
  40237a:	d0e9      	beq.n	402350 <SetFilter+0x5c>
								 
	regbitfield = alignfield2mask(regCode, mask);
	temp = ReadReg(regaddr, &rwerr);
  40237c:	f10d 0107 	add.w	r1, sp, #7
  402380:	4640      	mov	r0, r8
  402382:	4b15      	ldr	r3, [pc, #84]	; (4023d8 <SetFilter+0xe4>)
  402384:	4798      	blx	r3
	temp &= ~mask;
  402386:	ea20 0105 	bic.w	r1, r0, r5
  40238a:	b289      	uxth	r1, r1
	retval	= v2shift<<i;
  40238c:	fa09 f404 	lsl.w	r4, r9, r4
	temp |= regbitfield & mask;
  402390:	4025      	ands	r5, r4
	rwerr = WriteReg(regaddr, temp);
  402392:	4329      	orrs	r1, r5
  402394:	4640      	mov	r0, r8
  402396:	4b11      	ldr	r3, [pc, #68]	; (4023dc <SetFilter+0xe8>)
  402398:	4798      	blx	r3
	currentGyroFilter = gyroflt;
  40239a:	4b11      	ldr	r3, [pc, #68]	; (4023e0 <SetFilter+0xec>)
  40239c:	701e      	strb	r6, [r3, #0]
	currentAccelFilter = accelflt;
  40239e:	4b11      	ldr	r3, [pc, #68]	; (4023e4 <SetFilter+0xf0>)
  4023a0:	701f      	strb	r7, [r3, #0]
}
  4023a2:	b003      	add	sp, #12
  4023a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  {  printf("bitfield is empty\r\n");  getchar(); printf("Press any key to continue \r\n"); }
  4023a8:	6841      	ldr	r1, [r0, #4]
  4023aa:	4b0f      	ldr	r3, [pc, #60]	; (4023e8 <SetFilter+0xf4>)
  4023ac:	4798      	blx	r3
  4023ae:	e7de      	b.n	40236e <SetFilter+0x7a>
	mask		= axis == X ? fX_flt : axis == Y ? fY_flt : fZ_flt;
  4023b0:	253f      	movs	r5, #63	; 0x3f
	regaddr		= axis == X ?  X_flt : axis == Y ?  Y_flt :  Z_flt;
  4023b2:	f04f 080c 	mov.w	r8, #12
	for (i=0; i<16; i++)
  4023b6:	2400      	movs	r4, #0
  4023b8:	e7e0      	b.n	40237c <SetFilter+0x88>
  4023ba:	bf00      	nop
  4023bc:	00403d81 	.word	0x00403d81
  4023c0:	0040e654 	.word	0x0040e654
  4023c4:	00403d71 	.word	0x00403d71
  4023c8:	0040e5f4 	.word	0x0040e5f4
  4023cc:	00407df1 	.word	0x00407df1
  4023d0:	20000378 	.word	0x20000378
  4023d4:	0040e608 	.word	0x0040e608
  4023d8:	00403cad 	.word	0x00403cad
  4023dc:	00403c8d 	.word	0x00403c8d
  4023e0:	20013b0f 	.word	0x20013b0f
  4023e4:	20013b0d 	.word	0x20013b0d
  4023e8:	00407e01 	.word	0x00407e01

004023ec <accel2gee>:

float afsrTab[] = {2.048, 4.096, 16.384, 32.768};  // depends on AccelFsrType not changing definition of members.
float alrfsrTab[] = {4.096, 8.192, 16.384, 32.768, 65.536};  // depends on AccelFsrType not changing definition of members.
//**********************************************
float accel2gee (int16_t accelVal, bool hiLoRes)
{
  4023ec:	ee07 0a90 	vmov	s15, r0
	float fsrVal = hiLoRes == 0 ? afsrTab[currentAccelFSR] : alrfsrTab[currentlowresAccelFSR];
  4023f0:	b189      	cbz	r1, 402416 <accel2gee+0x2a>
  4023f2:	4b0d      	ldr	r3, [pc, #52]	; (402428 <accel2gee+0x3c>)
  4023f4:	781a      	ldrb	r2, [r3, #0]
  4023f6:	4b0d      	ldr	r3, [pc, #52]	; (40242c <accel2gee+0x40>)
  4023f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4023fc:	ed93 7a00 	vldr	s14, [r3]
  float f = (float)bits*(float)fsrVal/(float)pwr2raise15;
  402400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  402404:	ee67 7a87 	vmul.f32	s15, s15, s14
	float accelgee = bits2real(accelVal, fsrVal);
	
	return (accelgee);  
}
  402408:	ed9f 7a09 	vldr	s14, [pc, #36]	; 402430 <accel2gee+0x44>
  40240c:	ee67 7a87 	vmul.f32	s15, s15, s14
  402410:	ee17 0a90 	vmov	r0, s15
  402414:	4770      	bx	lr
	float fsrVal = hiLoRes == 0 ? afsrTab[currentAccelFSR] : alrfsrTab[currentlowresAccelFSR];
  402416:	4b07      	ldr	r3, [pc, #28]	; (402434 <accel2gee+0x48>)
  402418:	781a      	ldrb	r2, [r3, #0]
  40241a:	4b07      	ldr	r3, [pc, #28]	; (402438 <accel2gee+0x4c>)
  40241c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402420:	ed93 7a00 	vldr	s14, [r3]
  402424:	e7ec      	b.n	402400 <accel2gee+0x14>
  402426:	bf00      	nop
  402428:	20013b10 	.word	0x20013b10
  40242c:	200000c4 	.word	0x200000c4
  402430:	38000000 	.word	0x38000000
  402434:	20013b0c 	.word	0x20013b0c
  402438:	200000ac 	.word	0x200000ac

0040243c <faccel2gee>:

float faccel2gee(float fAccel, bool hiLoRes)
{
  40243c:	ee07 0a10 	vmov	s14, r0
	float fsrVal = hiLoRes == 0 ? afsrTab[currentAccelFSR] : alrfsrTab[currentlowresAccelFSR];
  402440:	b179      	cbz	r1, 402462 <faccel2gee+0x26>
  402442:	4b0c      	ldr	r3, [pc, #48]	; (402474 <faccel2gee+0x38>)
  402444:	781a      	ldrb	r2, [r3, #0]
  402446:	4b0c      	ldr	r3, [pc, #48]	; (402478 <faccel2gee+0x3c>)
  402448:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40244c:	edd3 7a00 	vldr	s15, [r3]
	float faccelgee = fAccel*fsrVal/(float)pwr2raise15;
  402450:	ee67 7a87 	vmul.f32	s15, s15, s14
	return (faccelgee);	
}
  402454:	ed9f 7a09 	vldr	s14, [pc, #36]	; 40247c <faccel2gee+0x40>
  402458:	ee67 7a87 	vmul.f32	s15, s15, s14
  40245c:	ee17 0a90 	vmov	r0, s15
  402460:	4770      	bx	lr
	float fsrVal = hiLoRes == 0 ? afsrTab[currentAccelFSR] : alrfsrTab[currentlowresAccelFSR];
  402462:	4b07      	ldr	r3, [pc, #28]	; (402480 <faccel2gee+0x44>)
  402464:	781a      	ldrb	r2, [r3, #0]
  402466:	4b07      	ldr	r3, [pc, #28]	; (402484 <faccel2gee+0x48>)
  402468:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40246c:	edd3 7a00 	vldr	s15, [r3]
  402470:	e7ee      	b.n	402450 <faccel2gee+0x14>
  402472:	bf00      	nop
  402474:	20013b10 	.word	0x20013b10
  402478:	200000c4 	.word	0x200000c4
  40247c:	38000000 	.word	0x38000000
  402480:	20013b0c 	.word	0x20013b0c
  402484:	200000ac 	.word	0x200000ac

00402488 <gyro2dps>:

float gfsrTab[] = {491.0, 983.0, 1966.0, 2949.0, 328.0, 655.0, 1311.0, 1966.0, 92.0, 184.0, 369.0, 737.0, 61.0, 123.0, 246.0, 491.0};
//**********************************************
float gyro2dps (int16_t gyroVal)
{
	float fsrVal = gfsrTab[currentGyroFSR];
  402488:	4b09      	ldr	r3, [pc, #36]	; (4024b0 <gyro2dps+0x28>)
  40248a:	781a      	ldrb	r2, [r3, #0]
  40248c:	4b09      	ldr	r3, [pc, #36]	; (4024b4 <gyro2dps+0x2c>)
  40248e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  float f = (float)bits*(float)fsrVal/(float)pwr2raise15;
  402492:	ee07 0a90 	vmov	s15, r0
  402496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40249a:	ed93 7a00 	vldr	s14, [r3]
  40249e:	ee67 7a87 	vmul.f32	s15, s15, s14
	float gyrodps = bits2real(gyroVal, fsrVal);
	
	return (gyrodps); 
}
  4024a2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 4024b8 <gyro2dps+0x30>
  4024a6:	ee67 7a87 	vmul.f32	s15, s15, s14
  4024aa:	ee17 0a90 	vmov	r0, s15
  4024ae:	4770      	bx	lr
  4024b0:	20013b0e 	.word	0x20013b0e
  4024b4:	200000d8 	.word	0x200000d8
  4024b8:	38000000 	.word	0x38000000

004024bc <fgyro2dps>:
float fgyro2dps (float gyroVal)
{
	float fsrVal = gfsrTab[currentGyroFSR];
  4024bc:	4b08      	ldr	r3, [pc, #32]	; (4024e0 <fgyro2dps+0x24>)
  4024be:	781a      	ldrb	r2, [r3, #0]
  4024c0:	4b08      	ldr	r3, [pc, #32]	; (4024e4 <fgyro2dps+0x28>)
  4024c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    float gyrodps = (float)gyroVal*fsrVal/(float)pwr2raise15;
  4024c6:	edd3 7a00 	vldr	s15, [r3]
  4024ca:	ee07 0a10 	vmov	s14, r0
  4024ce:	ee67 7a27 	vmul.f32	s15, s14, s15
	
	return (gyrodps);
}
  4024d2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 4024e8 <fgyro2dps+0x2c>
  4024d6:	ee67 7a87 	vmul.f32	s15, s15, s14
  4024da:	ee17 0a90 	vmov	r0, s15
  4024de:	4770      	bx	lr
  4024e0:	20013b0e 	.word	0x20013b0e
  4024e4:	200000d8 	.word	0x200000d8
  4024e8:	38000000 	.word	0x38000000

004024ec <temp2Centigrade>:
float temp2Centigrade(int16_t temperatureBits)
{
	float f =  temperatureBits/TEMP2CENTgrad  + TEMP_SENSOR_ROOMTEMP;	
  4024ec:	ee07 0a90 	vmov	s15, r0
  4024f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  4024f4:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
  4024f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	return(f);
}
  4024fc:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
  402500:	ee77 7a27 	vadd.f32	s15, s14, s15
  402504:	ee17 0a90 	vmov	r0, s15
  402508:	4770      	bx	lr
	...

0040250c <accelnormfloat>:

float accelnormfloat(int16_t x1, int16_t  x2, int16_t x3, bool Lores  // input
                     ,float *nfx1, float *nfx2, float *nfx3   //output
					)
{
  40250c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402510:	ed2d 8b04 	vpush	{d8-d9}
  402514:	468a      	mov	sl, r1
  402516:	4691      	mov	r9, r2
  402518:	461d      	mov	r5, r3
  40251a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  40251e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  402520:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	float fx1, fx2, fx3, fNorm;

	
	fx1 = accel2gee(x1, Lores);
  402522:	4619      	mov	r1, r3
  402524:	4c1f      	ldr	r4, [pc, #124]	; (4025a4 <accelnormfloat+0x98>)
  402526:	47a0      	blx	r4
  402528:	ee08 0a10 	vmov	s16, r0
	fx2 = accel2gee(x2, Lores);
  40252c:	4629      	mov	r1, r5
  40252e:	4650      	mov	r0, sl
  402530:	47a0      	blx	r4
  402532:	ee09 0a10 	vmov	s18, r0
	fx3 = accel2gee(x3, Lores);
  402536:	4629      	mov	r1, r5
  402538:	4648      	mov	r0, r9
  40253a:	47a0      	blx	r4
  40253c:	ee08 0a90 	vmov	s17, r0
	
	if (nfx1) *nfx1 = floatAbs(fx1);
  402540:	f1b8 0f00 	cmp.w	r8, #0
  402544:	d005      	beq.n	402552 <accelnormfloat+0x46>
  402546:	ee18 0a10 	vmov	r0, s16
  40254a:	4b17      	ldr	r3, [pc, #92]	; (4025a8 <accelnormfloat+0x9c>)
  40254c:	4798      	blx	r3
  40254e:	f8c8 0000 	str.w	r0, [r8]
	if (nfx2) *nfx2 = floatAbs(fx2);
  402552:	b127      	cbz	r7, 40255e <accelnormfloat+0x52>
  402554:	ee19 0a10 	vmov	r0, s18
  402558:	4b13      	ldr	r3, [pc, #76]	; (4025a8 <accelnormfloat+0x9c>)
  40255a:	4798      	blx	r3
  40255c:	6038      	str	r0, [r7, #0]
	if (nfx3) *nfx3 = floatAbs(fx3);
  40255e:	b126      	cbz	r6, 40256a <accelnormfloat+0x5e>
  402560:	ee18 0a90 	vmov	r0, s17
  402564:	4b10      	ldr	r3, [pc, #64]	; (4025a8 <accelnormfloat+0x9c>)
  402566:	4798      	blx	r3
  402568:	6030      	str	r0, [r6, #0]
	
	
	fNorm = fx1*fx1 + fx2*fx2 + fx3*fx3;
  40256a:	ee28 8a08 	vmul.f32	s16, s16, s16
  40256e:	ee29 9a09 	vmul.f32	s18, s18, s18
  402572:	ee38 8a09 	vadd.f32	s16, s16, s18
  402576:	ee68 8aa8 	vmul.f32	s17, s17, s17
  40257a:	ee38 8a28 	vadd.f32	s16, s16, s17
	fNorm = sqrtf(fNorm);
  40257e:	eef1 8ac8 	vsqrt.f32	s17, s16
  402582:	eeb5 8a40 	vcmp.f32	s16, #0.0
  402586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40258a:	d405      	bmi.n	402598 <accelnormfloat+0x8c>
	return fNorm;
}
  40258c:	ee18 0a90 	vmov	r0, s17
  402590:	ecbd 8b04 	vpop	{d8-d9}
  402594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fNorm = sqrtf(fNorm);
  402598:	ee18 0a10 	vmov	r0, s16
  40259c:	4b03      	ldr	r3, [pc, #12]	; (4025ac <accelnormfloat+0xa0>)
  40259e:	4798      	blx	r3
	return fNorm;
  4025a0:	e7f4      	b.n	40258c <accelnormfloat+0x80>
  4025a2:	bf00      	nop
  4025a4:	004023ed 	.word	0x004023ed
  4025a8:	00402fc5 	.word	0x00402fc5
  4025ac:	00406b8d 	.word	0x00406b8d

004025b0 <ReadID>:

//********************************
void ReadID(uint8_t *gyroRevp, uint8_t *accelRevp, uint8_t *sensorRevp, uint32_t *serialIDp)
{
  4025b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4025b4:	b082      	sub	sp, #8
  4025b6:	4607      	mov	r7, r0
  4025b8:	4616      	mov	r6, r2
  4025ba:	461d      	mov	r5, r3
	int32_t regVal;
	uint16_t b2s;
	enum errWriteType rwerr = noProtocolErr;
  4025bc:	2300      	movs	r3, #0
  4025be:	f88d 3007 	strb.w	r3, [sp, #7]
		
	if (accelRevp || gyroRevp)
  4025c2:	2900      	cmp	r1, #0
  4025c4:	d03b      	beq.n	40263e <ReadID+0x8e>
  4025c6:	4688      	mov	r8, r1
		regVal = ReadReg(Arev, &rwerr);
  4025c8:	f10d 0107 	add.w	r1, sp, #7
  4025cc:	201b      	movs	r0, #27
  4025ce:	4b20      	ldr	r3, [pc, #128]	; (402650 <ReadID+0xa0>)
  4025d0:	4798      	blx	r3
  4025d2:	4604      	mov	r4, r0
	
	if (accelRevp) {
		b2s = lsbSet(fArev);
  4025d4:	201f      	movs	r0, #31
  4025d6:	4b1f      	ldr	r3, [pc, #124]	; (402654 <ReadID+0xa4>)
  4025d8:	4798      	blx	r3
		*accelRevp = (regVal >> b2s) & (fArev>>b2s);
  4025da:	f004 031f 	and.w	r3, r4, #31
  4025de:	fa43 f000 	asr.w	r0, r3, r0
  4025e2:	f888 0000 	strb.w	r0, [r8]
	}
	if (gyroRevp) {
  4025e6:	b13f      	cbz	r7, 4025f8 <ReadID+0x48>
		b2s = lsbSet(fGrev);
  4025e8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
  4025ec:	4b19      	ldr	r3, [pc, #100]	; (402654 <ReadID+0xa4>)
  4025ee:	4798      	blx	r3
		*gyroRevp = (regVal >> b2s) & (fGrev>>b2s);
  4025f0:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
  4025f4:	4104      	asrs	r4, r0
  4025f6:	703c      	strb	r4, [r7, #0]
	}
	
	if (sensorRevp) {
  4025f8:	b166      	cbz	r6, 402614 <ReadID+0x64>
		regVal = ReadReg(Srev, &rwerr); 
  4025fa:	f10d 0107 	add.w	r1, sp, #7
  4025fe:	201c      	movs	r0, #28
  402600:	4b13      	ldr	r3, [pc, #76]	; (402650 <ReadID+0xa0>)
  402602:	4798      	blx	r3
  402604:	4604      	mov	r4, r0
		b2s = lsbSet(fSrev);
  402606:	201f      	movs	r0, #31
  402608:	4b12      	ldr	r3, [pc, #72]	; (402654 <ReadID+0xa4>)
  40260a:	4798      	blx	r3
		*sensorRevp = (regVal >> b2s) & (fSrev>>b2s);
  40260c:	f004 041f 	and.w	r4, r4, #31
  402610:	4104      	asrs	r4, r0
  402612:	7034      	strb	r4, [r6, #0]
	}
	
	if (serialIDp) {
  402614:	b185      	cbz	r5, 402638 <ReadID+0x88>
		int16_t msb = ReadReg(SerIdmsb, &rwerr); 
  402616:	f10d 0107 	add.w	r1, sp, #7
  40261a:	201d      	movs	r0, #29
  40261c:	4c0c      	ldr	r4, [pc, #48]	; (402650 <ReadID+0xa0>)
  40261e:	47a0      	blx	r4
  402620:	4606      	mov	r6, r0
		int16_t lsb  = ReadReg(SerIdlsb, &rwerr); 
  402622:	f10d 0107 	add.w	r1, sp, #7
  402626:	201e      	movs	r0, #30
  402628:	47a0      	blx	r4
		// short-circuit the bit shift - all bits are valid
		*serialIDp = ((uint32_t)msb)<<16 | ((uint32_t)lsb & LOWER16Of32);
  40262a:	b200      	sxth	r0, r0
  40262c:	4b0a      	ldr	r3, [pc, #40]	; (402658 <ReadID+0xa8>)
  40262e:	681b      	ldr	r3, [r3, #0]
  402630:	4018      	ands	r0, r3
  402632:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
  402636:	6028      	str	r0, [r5, #0]
	}
	
	
}
  402638:	b002      	add	sp, #8
  40263a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (accelRevp || gyroRevp)
  40263e:	2800      	cmp	r0, #0
  402640:	d0da      	beq.n	4025f8 <ReadID+0x48>
		regVal = ReadReg(Arev, &rwerr);
  402642:	f10d 0107 	add.w	r1, sp, #7
  402646:	201b      	movs	r0, #27
  402648:	4b01      	ldr	r3, [pc, #4]	; (402650 <ReadID+0xa0>)
  40264a:	4798      	blx	r3
  40264c:	4604      	mov	r4, r0
  40264e:	e7ca      	b.n	4025e6 <ReadID+0x36>
  402650:	00403cad 	.word	0x00403cad
  402654:	00402fdd 	.word	0x00402fdd
  402658:	0040eca8 	.word	0x0040eca8

0040265c <SMtopstatus>:
	
}

// *  report top level SM err status
uint16_t SMtopstatus ()
{
  40265c:	b530      	push	{r4, r5, lr}
  40265e:	b083      	sub	sp, #12
	uint16_t errbits;
	enum errWriteType rwerr;
	
	bankselect(bSMs);
  402660:	2001      	movs	r0, #1
  402662:	4d07      	ldr	r5, [pc, #28]	; (402680 <SMtopstatus+0x24>)
  402664:	47a8      	blx	r5
	
	errbits = ReadReg(SMs, &rwerr);	
  402666:	f10d 0107 	add.w	r1, sp, #7
  40266a:	201c      	movs	r0, #28
  40266c:	4b05      	ldr	r3, [pc, #20]	; (402684 <SMtopstatus+0x28>)
  40266e:	4798      	blx	r3
  402670:	b284      	uxth	r4, r0
	errbits &= fSMs;
	
	bankselect(0);
  402672:	2000      	movs	r0, #0
  402674:	47a8      	blx	r5
	errbits &= fSMs;
  402676:	f024 00e7 	bic.w	r0, r4, #231	; 0xe7
	
    return errbits;
}
  40267a:	b003      	add	sp, #12
  40267c:	bd30      	pop	{r4, r5, pc}
  40267e:	bf00      	nop
  402680:	00403d71 	.word	0x00403d71
  402684:	00403cad 	.word	0x00403cad

00402688 <almMsgAppend>:
static int almMsgIndex=0;
const char crlf[] = "\r\n"; 

void almMsgbufclear() { almMsgIndex=0;}
void almMsgAppend(char * p, bool addNewline) 
{ 
  402688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40268a:	4606      	mov	r6, r0
  40268c:	460f      	mov	r7, r1
	sprintf(almMsgbuf+almMsgIndex, "%s", p); 
  40268e:	4d0b      	ldr	r5, [pc, #44]	; (4026bc <almMsgAppend+0x34>)
  402690:	682c      	ldr	r4, [r5, #0]
  402692:	4601      	mov	r1, r0
  402694:	480a      	ldr	r0, [pc, #40]	; (4026c0 <almMsgAppend+0x38>)
  402696:	4420      	add	r0, r4
  402698:	4b0a      	ldr	r3, [pc, #40]	; (4026c4 <almMsgAppend+0x3c>)
  40269a:	4798      	blx	r3
	almMsgIndex += strlen(p); 
  40269c:	4630      	mov	r0, r6
  40269e:	4b0a      	ldr	r3, [pc, #40]	; (4026c8 <almMsgAppend+0x40>)
  4026a0:	4798      	blx	r3
  4026a2:	4420      	add	r0, r4
  4026a4:	6028      	str	r0, [r5, #0]
	if (addNewline) {
  4026a6:	b147      	cbz	r7, 4026ba <almMsgAppend+0x32>
	  sprintf(almMsgbuf+almMsgIndex, "%s", crlf); 
  4026a8:	4b05      	ldr	r3, [pc, #20]	; (4026c0 <almMsgAppend+0x38>)
  4026aa:	4a08      	ldr	r2, [pc, #32]	; (4026cc <almMsgAppend+0x44>)
  4026ac:	1819      	adds	r1, r3, r0
  4026ae:	8814      	ldrh	r4, [r2, #0]
  4026b0:	7892      	ldrb	r2, [r2, #2]
  4026b2:	521c      	strh	r4, [r3, r0]
  4026b4:	708a      	strb	r2, [r1, #2]
	  almMsgIndex+= strlen(crlf);
  4026b6:	3002      	adds	r0, #2
  4026b8:	6028      	str	r0, [r5, #0]
  4026ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4026bc:	20013b14 	.word	0x20013b14
  4026c0:	20013b18 	.word	0x20013b18
  4026c4:	00408021 	.word	0x00408021
  4026c8:	004081c1 	.word	0x004081c1
  4026cc:	0040f654 	.word	0x0040f654

004026d0 <almDataAppend>:
	}
}
void almDataAppend(uint32_t dp, bool addNewline)
{
  4026d0:	b570      	push	{r4, r5, r6, lr}
  4026d2:	b086      	sub	sp, #24
  4026d4:	460e      	mov	r6, r1

	  char buff[20];
	  sprintf(buff, "%04X", dp);
  4026d6:	4602      	mov	r2, r0
  4026d8:	490d      	ldr	r1, [pc, #52]	; (402710 <almDataAppend+0x40>)
  4026da:	a801      	add	r0, sp, #4
  4026dc:	4b0d      	ldr	r3, [pc, #52]	; (402714 <almDataAppend+0x44>)
  4026de:	4798      	blx	r3
      sprintf(almMsgbuf+almMsgIndex, "%s", buff); 
  4026e0:	4d0d      	ldr	r5, [pc, #52]	; (402718 <almDataAppend+0x48>)
  4026e2:	682c      	ldr	r4, [r5, #0]
  4026e4:	a901      	add	r1, sp, #4
  4026e6:	480d      	ldr	r0, [pc, #52]	; (40271c <almDataAppend+0x4c>)
  4026e8:	4420      	add	r0, r4
  4026ea:	4b0d      	ldr	r3, [pc, #52]	; (402720 <almDataAppend+0x50>)
  4026ec:	4798      	blx	r3
	  almMsgIndex += strlen(buff);
  4026ee:	a801      	add	r0, sp, #4
  4026f0:	4b0c      	ldr	r3, [pc, #48]	; (402724 <almDataAppend+0x54>)
  4026f2:	4798      	blx	r3
  4026f4:	4420      	add	r0, r4
  4026f6:	6028      	str	r0, [r5, #0]
	
	  
	if (addNewline) {
  4026f8:	b146      	cbz	r6, 40270c <almDataAppend+0x3c>
	  sprintf(almMsgbuf+almMsgIndex, "%s", crlf); 
  4026fa:	4b08      	ldr	r3, [pc, #32]	; (40271c <almDataAppend+0x4c>)
  4026fc:	4a0a      	ldr	r2, [pc, #40]	; (402728 <almDataAppend+0x58>)
  4026fe:	1819      	adds	r1, r3, r0
  402700:	8814      	ldrh	r4, [r2, #0]
  402702:	7892      	ldrb	r2, [r2, #2]
  402704:	521c      	strh	r4, [r3, r0]
  402706:	708a      	strb	r2, [r1, #2]
	  almMsgIndex+= strlen(crlf);
  402708:	3002      	adds	r0, #2
  40270a:	6028      	str	r0, [r5, #0]
	}
	
}
  40270c:	b006      	add	sp, #24
  40270e:	bd70      	pop	{r4, r5, r6, pc}
  402710:	0040e74c 	.word	0x0040e74c
  402714:	00407fd5 	.word	0x00407fd5
  402718:	20013b14 	.word	0x20013b14
  40271c:	20013b18 	.word	0x20013b18
  402720:	00408021 	.word	0x00408021
  402724:	004081c1 	.word	0x004081c1
  402728:	0040f654 	.word	0x0040f654

0040272c <almMsgPrint>:
void almMsgPrint() {printf("%s", almMsgbuf); almMsgbufclear();}
  40272c:	b508      	push	{r3, lr}
  40272e:	4904      	ldr	r1, [pc, #16]	; (402740 <almMsgPrint+0x14>)
  402730:	4804      	ldr	r0, [pc, #16]	; (402744 <almMsgPrint+0x18>)
  402732:	4b05      	ldr	r3, [pc, #20]	; (402748 <almMsgPrint+0x1c>)
  402734:	4798      	blx	r3
void almMsgbufclear() { almMsgIndex=0;}
  402736:	2200      	movs	r2, #0
  402738:	4b04      	ldr	r3, [pc, #16]	; (40274c <almMsgPrint+0x20>)
  40273a:	601a      	str	r2, [r3, #0]
  40273c:	bd08      	pop	{r3, pc}
  40273e:	bf00      	nop
  402740:	20013b18 	.word	0x20013b18
  402744:	0040e754 	.word	0x0040e754
  402748:	00407d2d 	.word	0x00407d2d
  40274c:	20013b14 	.word	0x20013b14

00402750 <parseStsbits>:


uint16_t parseStsbits(uint16_t sts, uint16_t validFld, char * msgs[])
{
  402750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402754:	460f      	mov	r7, r1
  402756:	4693      	mov	fp, r2
		int i, j, bitfld;
		
		sts &= validFld;
  402758:	ea00 0801 	and.w	r8, r0, r1
		for (i=15, j=-1; i>=0; i--)
  40275c:	f04f 35ff 	mov.w	r5, #4294967295
  402760:	240f      	movs	r4, #15
		{
			bitfld = 1<<i;
  402762:	2601      	movs	r6, #1
			if (bitfld & validFld)
			{
				j++;
				if (bitfld & sts)
				{
					almMsgAppend("Received Status Event, ", false);
  402764:	f8df a034 	ldr.w	sl, [pc, #52]	; 40279c <parseStsbits+0x4c>
  402768:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4027a0 <parseStsbits+0x50>
  40276c:	e003      	b.n	402776 <parseStsbits+0x26>
		for (i=15, j=-1; i>=0; i--)
  40276e:	3c01      	subs	r4, #1
  402770:	f1b4 3fff 	cmp.w	r4, #4294967295
  402774:	d00f      	beq.n	402796 <parseStsbits+0x46>
			bitfld = 1<<i;
  402776:	fa06 f304 	lsl.w	r3, r6, r4
			if (bitfld & validFld)
  40277a:	421f      	tst	r7, r3
  40277c:	d0f7      	beq.n	40276e <parseStsbits+0x1e>
				j++;
  40277e:	3501      	adds	r5, #1
				if (bitfld & sts)
  402780:	ea18 0f03 	tst.w	r8, r3
  402784:	d0f3      	beq.n	40276e <parseStsbits+0x1e>
					almMsgAppend("Received Status Event, ", false);
  402786:	2100      	movs	r1, #0
  402788:	4650      	mov	r0, sl
  40278a:	47c8      	blx	r9
					almMsgAppend(msgs[j], true);
  40278c:	4631      	mov	r1, r6
  40278e:	f85b 0025 	ldr.w	r0, [fp, r5, lsl #2]
  402792:	47c8      	blx	r9
  402794:	e7eb      	b.n	40276e <parseStsbits+0x1e>
				}
			}
		}
		
		return j;  // valid event bits parsed
}
  402796:	b2a8      	uxth	r0, r5
  402798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40279c:	0040e788 	.word	0x0040e788
  4027a0:	00402689 	.word	0x00402689

004027a4 <alarmHandler>:
void alarmHandler(uint16_t errGrp)
{
  4027a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4027a6:	b083      	sub	sp, #12
	uint16_t eventSts;
	enum errWriteType rwerr=noProtocolErr;
  4027a8:	2300      	movs	r3, #0
  4027aa:	f88d 3007 	strb.w	r3, [sp, #7]
	int eventsParsed;
	
	switch (errGrp)
  4027ae:	f5b0 5fe0 	cmp.w	r0, #7168	; 0x1c00
  4027b2:	d05e      	beq.n	402872 <alarmHandler+0xce>
  4027b4:	f5b0 4f60 	cmp.w	r0, #57344	; 0xe000
  4027b8:	d042      	beq.n	402840 <alarmHandler+0x9c>
  4027ba:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  4027be:	d06f      	beq.n	4028a0 <alarmHandler+0xfc>
	    eventSts = ReadReg(Oa2, &rwerr);
	    parseStsbits(eventSts, fOa2, &accelErrMsg[eventsParsed]);
	  break;
	  
	  default:  // default case should be blank, but need to force read of status for test
	  	    eventSts = ReadReg(Ga1, &rwerr);
  4027c0:	f10d 0107 	add.w	r1, sp, #7
  4027c4:	2010      	movs	r0, #16
  4027c6:	4d42      	ldr	r5, [pc, #264]	; (4028d0 <alarmHandler+0x12c>)
  4027c8:	47a8      	blx	r5
	  	    eventsParsed = parseStsbits(eventSts, fGa1, gyroErrMsg);
  4027ca:	4e42      	ldr	r6, [pc, #264]	; (4028d4 <alarmHandler+0x130>)
  4027cc:	4632      	mov	r2, r6
  4027ce:	f44f 51ee 	mov.w	r1, #7616	; 0x1dc0
  4027d2:	b280      	uxth	r0, r0
  4027d4:	4c40      	ldr	r4, [pc, #256]	; (4028d8 <alarmHandler+0x134>)
  4027d6:	47a0      	blx	r4
  4027d8:	4607      	mov	r7, r0
	  	    eventSts = ReadReg(Ga2, &rwerr);
  4027da:	f10d 0107 	add.w	r1, sp, #7
  4027de:	2011      	movs	r0, #17
  4027e0:	47a8      	blx	r5
	  	    parseStsbits(eventSts, fGa2, &gyroErrMsg[eventsParsed]);
  4027e2:	eb06 0287 	add.w	r2, r6, r7, lsl #2
  4027e6:	f247 011e 	movw	r1, #28702	; 0x701e
  4027ea:	b280      	uxth	r0, r0
  4027ec:	47a0      	blx	r4
			eventSts = ReadReg(Aa1, &rwerr);
  4027ee:	f10d 0107 	add.w	r1, sp, #7
  4027f2:	2012      	movs	r0, #18
  4027f4:	47a8      	blx	r5
			eventsParsed = parseStsbits(eventSts, fAa1, accelErrMsg);
  4027f6:	4e39      	ldr	r6, [pc, #228]	; (4028dc <alarmHandler+0x138>)
  4027f8:	4632      	mov	r2, r6
  4027fa:	f243 0103 	movw	r1, #12291	; 0x3003
  4027fe:	b280      	uxth	r0, r0
  402800:	47a0      	blx	r4
  402802:	4607      	mov	r7, r0
			eventSts = ReadReg(Aa2, &rwerr);
  402804:	f10d 0107 	add.w	r1, sp, #7
  402808:	2013      	movs	r0, #19
  40280a:	47a8      	blx	r5
			parseStsbits(eventSts, fAa2, &accelErrMsg[eventsParsed]);
  40280c:	eb06 0287 	add.w	r2, r6, r7, lsl #2
  402810:	2107      	movs	r1, #7
  402812:	b280      	uxth	r0, r0
  402814:	47a0      	blx	r4
			eventSts = ReadReg(Oa1, &rwerr);
  402816:	f10d 0107 	add.w	r1, sp, #7
  40281a:	2014      	movs	r0, #20
  40281c:	47a8      	blx	r5
			eventsParsed = parseStsbits(eventSts, fOa1, accelErrMsg);
  40281e:	4632      	mov	r2, r6
  402820:	f643 71ff 	movw	r1, #16383	; 0x3fff
  402824:	b280      	uxth	r0, r0
  402826:	47a0      	blx	r4
  402828:	4607      	mov	r7, r0
			eventSts = ReadReg(Oa2, &rwerr);
  40282a:	f10d 0107 	add.w	r1, sp, #7
  40282e:	2015      	movs	r0, #21
  402830:	47a8      	blx	r5
			parseStsbits(eventSts, fOa2, &accelErrMsg[eventsParsed]);
  402832:	eb06 0287 	add.w	r2, r6, r7, lsl #2
  402836:	f243 013e 	movw	r1, #12350	; 0x303e
  40283a:	b280      	uxth	r0, r0
  40283c:	47a0      	blx	r4
	  break;	
	}
}
  40283e:	e016      	b.n	40286e <alarmHandler+0xca>
	    eventSts = ReadReg(Ga1, &rwerr);
  402840:	f10d 0107 	add.w	r1, sp, #7
  402844:	2010      	movs	r0, #16
  402846:	4e22      	ldr	r6, [pc, #136]	; (4028d0 <alarmHandler+0x12c>)
  402848:	47b0      	blx	r6
		eventsParsed = parseStsbits(eventSts, fGa1, gyroErrMsg);
  40284a:	4d22      	ldr	r5, [pc, #136]	; (4028d4 <alarmHandler+0x130>)
  40284c:	462a      	mov	r2, r5
  40284e:	f44f 51ee 	mov.w	r1, #7616	; 0x1dc0
  402852:	b280      	uxth	r0, r0
  402854:	4c20      	ldr	r4, [pc, #128]	; (4028d8 <alarmHandler+0x134>)
  402856:	47a0      	blx	r4
  402858:	4607      	mov	r7, r0
	    eventSts = ReadReg(Ga2, &rwerr);
  40285a:	f10d 0107 	add.w	r1, sp, #7
  40285e:	2011      	movs	r0, #17
  402860:	47b0      	blx	r6
	    parseStsbits(eventSts, fGa2, &gyroErrMsg[eventsParsed]);
  402862:	eb05 0287 	add.w	r2, r5, r7, lsl #2
  402866:	f247 011e 	movw	r1, #28702	; 0x701e
  40286a:	b280      	uxth	r0, r0
  40286c:	47a0      	blx	r4
}
  40286e:	b003      	add	sp, #12
  402870:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    eventSts = ReadReg(Aa1, &rwerr);
  402872:	f10d 0107 	add.w	r1, sp, #7
  402876:	2012      	movs	r0, #18
  402878:	4e15      	ldr	r6, [pc, #84]	; (4028d0 <alarmHandler+0x12c>)
  40287a:	47b0      	blx	r6
	    eventsParsed = parseStsbits(eventSts, fAa1, accelErrMsg);
  40287c:	4d17      	ldr	r5, [pc, #92]	; (4028dc <alarmHandler+0x138>)
  40287e:	462a      	mov	r2, r5
  402880:	f243 0103 	movw	r1, #12291	; 0x3003
  402884:	b280      	uxth	r0, r0
  402886:	4c14      	ldr	r4, [pc, #80]	; (4028d8 <alarmHandler+0x134>)
  402888:	47a0      	blx	r4
  40288a:	4607      	mov	r7, r0
	    eventSts = ReadReg(Aa2, &rwerr);
  40288c:	f10d 0107 	add.w	r1, sp, #7
  402890:	2013      	movs	r0, #19
  402892:	47b0      	blx	r6
	    parseStsbits(eventSts, fAa2, &accelErrMsg[eventsParsed]);
  402894:	eb05 0287 	add.w	r2, r5, r7, lsl #2
  402898:	2107      	movs	r1, #7
  40289a:	b280      	uxth	r0, r0
  40289c:	47a0      	blx	r4
	  break;
  40289e:	e7e6      	b.n	40286e <alarmHandler+0xca>
	    eventSts = ReadReg(Oa1, &rwerr);
  4028a0:	f10d 0107 	add.w	r1, sp, #7
  4028a4:	2014      	movs	r0, #20
  4028a6:	4e0a      	ldr	r6, [pc, #40]	; (4028d0 <alarmHandler+0x12c>)
  4028a8:	47b0      	blx	r6
	    eventsParsed = parseStsbits(eventSts, fOa1, accelErrMsg);
  4028aa:	4d0c      	ldr	r5, [pc, #48]	; (4028dc <alarmHandler+0x138>)
  4028ac:	462a      	mov	r2, r5
  4028ae:	f643 71ff 	movw	r1, #16383	; 0x3fff
  4028b2:	b280      	uxth	r0, r0
  4028b4:	4c08      	ldr	r4, [pc, #32]	; (4028d8 <alarmHandler+0x134>)
  4028b6:	47a0      	blx	r4
  4028b8:	4607      	mov	r7, r0
	    eventSts = ReadReg(Oa2, &rwerr);
  4028ba:	f10d 0107 	add.w	r1, sp, #7
  4028be:	2015      	movs	r0, #21
  4028c0:	47b0      	blx	r6
	    parseStsbits(eventSts, fOa2, &accelErrMsg[eventsParsed]);
  4028c2:	eb05 0287 	add.w	r2, r5, r7, lsl #2
  4028c6:	f243 013e 	movw	r1, #12350	; 0x303e
  4028ca:	b280      	uxth	r0, r0
  4028cc:	47a0      	blx	r4
	  break;
  4028ce:	e7ce      	b.n	40286e <alarmHandler+0xca>
  4028d0:	00403cad 	.word	0x00403cad
  4028d4:	20000154 	.word	0x20000154
  4028d8:	00402751 	.word	0x00402751
  4028dc:	20000138 	.word	0x20000138

004028e0 <demuxTop>:

void demuxTop(uint16_t err)
{
  4028e0:	b538      	push	{r3, r4, r5, lr}
  4028e2:	4604      	mov	r4, r0
  //uint16_t gyroErr = err & ((ferGX | ferGY | ferGZ));
  //uint16_t accelErr = err & ((ferAX | ferAY | ferAZ));
  //uint16_t tempErr = err & ((ferT1| ferT2));
  
	
  if (!anyerr && err) { almMsgAppend("All errors Or-ed=0, but Groups show errors: ", false); almDataAppend (errcopy, true); }
  4028e4:	f010 0f08 	tst.w	r0, #8
  4028e8:	d100      	bne.n	4028ec <demuxTop+0xc>
  4028ea:	b950      	cbnz	r0, 402902 <demuxTop+0x22>

//  if (err & ferGany)
    alarmHandler (err & ferGany);
  4028ec:	f404 4060 	and.w	r0, r4, #57344	; 0xe000
  4028f0:	4d08      	ldr	r5, [pc, #32]	; (402914 <demuxTop+0x34>)
  4028f2:	47a8      	blx	r5
//  if (err & ferAany)
    alarmHandler (err & ferAany);
  4028f4:	f404 50e0 	and.w	r0, r4, #7168	; 0x1c00
  4028f8:	47a8      	blx	r5
//  if (err & ferTany)
    alarmHandler (err & ferTany);
  4028fa:	f404 7040 	and.w	r0, r4, #768	; 0x300
  4028fe:	47a8      	blx	r5
  402900:	bd38      	pop	{r3, r4, r5, pc}
  if (!anyerr && err) { almMsgAppend("All errors Or-ed=0, but Groups show errors: ", false); almDataAppend (errcopy, true); }
  402902:	2100      	movs	r1, #0
  402904:	4804      	ldr	r0, [pc, #16]	; (402918 <demuxTop+0x38>)
  402906:	4b05      	ldr	r3, [pc, #20]	; (40291c <demuxTop+0x3c>)
  402908:	4798      	blx	r3
  40290a:	2101      	movs	r1, #1
  40290c:	4620      	mov	r0, r4
  40290e:	4b04      	ldr	r3, [pc, #16]	; (402920 <demuxTop+0x40>)
  402910:	4798      	blx	r3
  402912:	e7eb      	b.n	4028ec <demuxTop+0xc>
  402914:	004027a5 	.word	0x004027a5
  402918:	0040e758 	.word	0x0040e758
  40291c:	00402689 	.word	0x00402689
  402920:	004026d1 	.word	0x004026d1

00402924 <getEvents>:
}

void getEvents()
{
  402924:	b508      	push	{r3, lr}
	uint16_t errTop;
	errTop = SMtopstatus();
  402926:	4b05      	ldr	r3, [pc, #20]	; (40293c <getEvents+0x18>)
  402928:	4798      	blx	r3
void almMsgbufclear() { almMsgIndex=0;}
  40292a:	2200      	movs	r2, #0
  40292c:	4b04      	ldr	r3, [pc, #16]	; (402940 <getEvents+0x1c>)
  40292e:	601a      	str	r2, [r3, #0]
almMsgbufclear();
//	if (errTop)
		demuxTop(errTop);
  402930:	4b04      	ldr	r3, [pc, #16]	; (402944 <getEvents+0x20>)
  402932:	4798      	blx	r3
	
	
	
almMsgPrint();
  402934:	4b04      	ldr	r3, [pc, #16]	; (402948 <getEvents+0x24>)
  402936:	4798      	blx	r3
  402938:	bd08      	pop	{r3, pc}
  40293a:	bf00      	nop
  40293c:	0040265d 	.word	0x0040265d
  402940:	20013b14 	.word	0x20013b14
  402944:	004028e1 	.word	0x004028e1
  402948:	0040272d 	.word	0x0040272d

0040294c <setPrintUnits>:
const char  tfmt[]  = "%4.1f ";
const char amres[]  = "%5.1f ";
const char gmres[]  = "%5.1f ";

void setPrintUnits(printUnitsType printFmt)
{
  40294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printUnits = printFmt;	
  40294e:	4b21      	ldr	r3, [pc, #132]	; (4029d4 <setPrintUnits+0x88>)
  402950:	7018      	strb	r0, [r3, #0]
	if (printUnits == milliUnits) { 
  402952:	2801      	cmp	r0, #1
  402954:	d01e      	beq.n	402994 <setPrintUnits+0x48>
		 strlcpy(gtbuf, gmres, GTBUFSZ);
		 strlcat(gtbuf, gmres, GTBUFSZ);
		 strlcat(gtbuf, gmres, GTBUFSZ); 
    }
	else { 
		strlcpy(atbuf, afres, ATBUFSZ); 
  402956:	4e20      	ldr	r6, [pc, #128]	; (4029d8 <setPrintUnits+0x8c>)
  402958:	4d20      	ldr	r5, [pc, #128]	; (4029dc <setPrintUnits+0x90>)
  40295a:	2264      	movs	r2, #100	; 0x64
  40295c:	4631      	mov	r1, r6
  40295e:	4628      	mov	r0, r5
  402960:	4f1f      	ldr	r7, [pc, #124]	; (4029e0 <setPrintUnits+0x94>)
  402962:	47b8      	blx	r7
		strlcat(atbuf, afres, ATBUFSZ); 
  402964:	2264      	movs	r2, #100	; 0x64
  402966:	4631      	mov	r1, r6
  402968:	4628      	mov	r0, r5
  40296a:	4c1e      	ldr	r4, [pc, #120]	; (4029e4 <setPrintUnits+0x98>)
  40296c:	47a0      	blx	r4
		strlcat(atbuf, afres, ATBUFSZ); 
  40296e:	2264      	movs	r2, #100	; 0x64
  402970:	4631      	mov	r1, r6
  402972:	4628      	mov	r0, r5
  402974:	47a0      	blx	r4
			 
		strlcpy(gtbuf, gfres, GTBUFSZ);
  402976:	4e1c      	ldr	r6, [pc, #112]	; (4029e8 <setPrintUnits+0x9c>)
  402978:	4d1c      	ldr	r5, [pc, #112]	; (4029ec <setPrintUnits+0xa0>)
  40297a:	2264      	movs	r2, #100	; 0x64
  40297c:	4631      	mov	r1, r6
  40297e:	4628      	mov	r0, r5
  402980:	47b8      	blx	r7
		strlcat(gtbuf, gfres, GTBUFSZ);
  402982:	2264      	movs	r2, #100	; 0x64
  402984:	4631      	mov	r1, r6
  402986:	4628      	mov	r0, r5
  402988:	47a0      	blx	r4
		strlcat(gtbuf, gfres, GTBUFSZ);	
  40298a:	2264      	movs	r2, #100	; 0x64
  40298c:	4631      	mov	r1, r6
  40298e:	4628      	mov	r0, r5
  402990:	47a0      	blx	r4
  402992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		 strlcpy(atbuf, amres, ATBUFSZ); 
  402994:	4e16      	ldr	r6, [pc, #88]	; (4029f0 <setPrintUnits+0xa4>)
  402996:	4d11      	ldr	r5, [pc, #68]	; (4029dc <setPrintUnits+0x90>)
  402998:	2264      	movs	r2, #100	; 0x64
  40299a:	4631      	mov	r1, r6
  40299c:	4628      	mov	r0, r5
  40299e:	4f10      	ldr	r7, [pc, #64]	; (4029e0 <setPrintUnits+0x94>)
  4029a0:	47b8      	blx	r7
		 strlcat(atbuf, amres, ATBUFSZ); 
  4029a2:	2264      	movs	r2, #100	; 0x64
  4029a4:	4631      	mov	r1, r6
  4029a6:	4628      	mov	r0, r5
  4029a8:	4c0e      	ldr	r4, [pc, #56]	; (4029e4 <setPrintUnits+0x98>)
  4029aa:	47a0      	blx	r4
		 strlcat(atbuf, amres, ATBUFSZ); 
  4029ac:	2264      	movs	r2, #100	; 0x64
  4029ae:	4631      	mov	r1, r6
  4029b0:	4628      	mov	r0, r5
  4029b2:	47a0      	blx	r4
		 strlcpy(gtbuf, gmres, GTBUFSZ);
  4029b4:	4e0f      	ldr	r6, [pc, #60]	; (4029f4 <setPrintUnits+0xa8>)
  4029b6:	4d0d      	ldr	r5, [pc, #52]	; (4029ec <setPrintUnits+0xa0>)
  4029b8:	2264      	movs	r2, #100	; 0x64
  4029ba:	4631      	mov	r1, r6
  4029bc:	4628      	mov	r0, r5
  4029be:	47b8      	blx	r7
		 strlcat(gtbuf, gmres, GTBUFSZ);
  4029c0:	2264      	movs	r2, #100	; 0x64
  4029c2:	4631      	mov	r1, r6
  4029c4:	4628      	mov	r0, r5
  4029c6:	47a0      	blx	r4
		 strlcat(gtbuf, gmres, GTBUFSZ); 
  4029c8:	2264      	movs	r2, #100	; 0x64
  4029ca:	4631      	mov	r1, r6
  4029cc:	4628      	mov	r0, r5
  4029ce:	47a0      	blx	r4
  4029d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4029d2:	bf00      	nop
  4029d4:	20013ff8 	.word	0x20013ff8
  4029d8:	0040ea48 	.word	0x0040ea48
  4029dc:	20013f00 	.word	0x20013f00
  4029e0:	0040814d 	.word	0x0040814d
  4029e4:	004080dd 	.word	0x004080dd
  4029e8:	0040ea58 	.word	0x0040ea58
  4029ec:	20013f8c 	.word	0x20013f8c
  4029f0:	0040ea50 	.word	0x0040ea50
  4029f4:	0040ea60 	.word	0x0040ea60

004029f8 <resetPrintHdrCount>:
#define SFT %8.3f
#define TFT %2.1f

	
static int printAxesCount=0;
void resetPrintHdrCount() {	printAxesCount=0;}
  4029f8:	2200      	movs	r2, #0
  4029fa:	4b01      	ldr	r3, [pc, #4]	; (402a00 <resetPrintHdrCount+0x8>)
  4029fc:	601a      	str	r2, [r3, #0]
  4029fe:	4770      	bx	lr
  402a00:	20013ff4 	.word	0x20013ff4

00402a04 <printHdr>:
			);
}

void printHdr(int i)
{
	if ((i%HdrFreq==0) )
  402a04:	4a2b      	ldr	r2, [pc, #172]	; (402ab4 <printHdr+0xb0>)
  402a06:	fb82 3200 	smull	r3, r2, r2, r0
  402a0a:	17c3      	asrs	r3, r0, #31
  402a0c:	ebc3 1362 	rsb	r3, r3, r2, asr #5
  402a10:	2264      	movs	r2, #100	; 0x64
  402a12:	fb02 0013 	mls	r0, r2, r3, r0
  402a16:	2800      	cmp	r0, #0
  402a18:	d14a      	bne.n	402ab0 <printHdr+0xac>
{
  402a1a:	b530      	push	{r4, r5, lr}
  402a1c:	b087      	sub	sp, #28
	{
		if (printUnits == rawbits) {
  402a1e:	4b26      	ldr	r3, [pc, #152]	; (402ab8 <printHdr+0xb4>)
  402a20:	781b      	ldrb	r3, [r3, #0]
  402a22:	2b00      	cmp	r3, #0
  402a24:	d123      	bne.n	402a6e <printHdr+0x6a>
			printf("%s%s%s%s%s%s%s%s%s\r\n", "", "      Az", "      Ay" ,"      Ax", "      Gz", "      Gy", "      Gx", "   T1 ", "  T2 ");
  402a26:	4d25      	ldr	r5, [pc, #148]	; (402abc <printHdr+0xb8>)
  402a28:	4b25      	ldr	r3, [pc, #148]	; (402ac0 <printHdr+0xbc>)
  402a2a:	9305      	str	r3, [sp, #20]
  402a2c:	4b25      	ldr	r3, [pc, #148]	; (402ac4 <printHdr+0xc0>)
  402a2e:	9304      	str	r3, [sp, #16]
  402a30:	4b25      	ldr	r3, [pc, #148]	; (402ac8 <printHdr+0xc4>)
  402a32:	9303      	str	r3, [sp, #12]
  402a34:	4b25      	ldr	r3, [pc, #148]	; (402acc <printHdr+0xc8>)
  402a36:	9302      	str	r3, [sp, #8]
  402a38:	4b25      	ldr	r3, [pc, #148]	; (402ad0 <printHdr+0xcc>)
  402a3a:	9301      	str	r3, [sp, #4]
  402a3c:	4b25      	ldr	r3, [pc, #148]	; (402ad4 <printHdr+0xd0>)
  402a3e:	9300      	str	r3, [sp, #0]
  402a40:	4b25      	ldr	r3, [pc, #148]	; (402ad8 <printHdr+0xd4>)
  402a42:	4a26      	ldr	r2, [pc, #152]	; (402adc <printHdr+0xd8>)
  402a44:	4926      	ldr	r1, [pc, #152]	; (402ae0 <printHdr+0xdc>)
  402a46:	4628      	mov	r0, r5
  402a48:	4c26      	ldr	r4, [pc, #152]	; (402ae4 <printHdr+0xe0>)
  402a4a:	47a0      	blx	r4
			printf("%s%s%s%s%s%s%s%s%s\r\n", "  ", " -----  ", " -----  " ," -----  ", " -----  ", " -----  ", " -----  ", " --  ", " --  ");
  402a4c:	4a26      	ldr	r2, [pc, #152]	; (402ae8 <printHdr+0xe4>)
  402a4e:	4b27      	ldr	r3, [pc, #156]	; (402aec <printHdr+0xe8>)
  402a50:	9305      	str	r3, [sp, #20]
  402a52:	9304      	str	r3, [sp, #16]
  402a54:	9203      	str	r2, [sp, #12]
  402a56:	9202      	str	r2, [sp, #8]
  402a58:	9201      	str	r2, [sp, #4]
  402a5a:	9200      	str	r2, [sp, #0]
  402a5c:	4613      	mov	r3, r2
  402a5e:	4924      	ldr	r1, [pc, #144]	; (402af0 <printHdr+0xec>)
  402a60:	4628      	mov	r0, r5
  402a62:	47a0      	blx	r4
		}
		else {
			printf("%s%s%s%s%s%s%s%s%s\r\n", "    ", "Az       ", "Ay       " ,"Ax       ", "Gz       ", "Gy       ", "Gx     ", "T1    ", "T2 ");
			printf("%s%s%s%s%s%s%s%s%s\r\n", "", " ------  ", " ------- " ," ------- ", " ------- ", " ------- ", " ------- ", " ---    ", "--- ");
		}
		printf("\r\n");
  402a64:	4823      	ldr	r0, [pc, #140]	; (402af4 <printHdr+0xf0>)
  402a66:	4b24      	ldr	r3, [pc, #144]	; (402af8 <printHdr+0xf4>)
  402a68:	4798      	blx	r3
	}
}
  402a6a:	b007      	add	sp, #28
  402a6c:	bd30      	pop	{r4, r5, pc}
			printf("%s%s%s%s%s%s%s%s%s\r\n", "    ", "Az       ", "Ay       " ,"Ax       ", "Gz       ", "Gy       ", "Gx     ", "T1    ", "T2 ");
  402a6e:	4d13      	ldr	r5, [pc, #76]	; (402abc <printHdr+0xb8>)
  402a70:	4b22      	ldr	r3, [pc, #136]	; (402afc <printHdr+0xf8>)
  402a72:	9305      	str	r3, [sp, #20]
  402a74:	4b22      	ldr	r3, [pc, #136]	; (402b00 <printHdr+0xfc>)
  402a76:	9304      	str	r3, [sp, #16]
  402a78:	4b22      	ldr	r3, [pc, #136]	; (402b04 <printHdr+0x100>)
  402a7a:	9303      	str	r3, [sp, #12]
  402a7c:	4b22      	ldr	r3, [pc, #136]	; (402b08 <printHdr+0x104>)
  402a7e:	9302      	str	r3, [sp, #8]
  402a80:	4b22      	ldr	r3, [pc, #136]	; (402b0c <printHdr+0x108>)
  402a82:	9301      	str	r3, [sp, #4]
  402a84:	4b22      	ldr	r3, [pc, #136]	; (402b10 <printHdr+0x10c>)
  402a86:	9300      	str	r3, [sp, #0]
  402a88:	4b22      	ldr	r3, [pc, #136]	; (402b14 <printHdr+0x110>)
  402a8a:	4a23      	ldr	r2, [pc, #140]	; (402b18 <printHdr+0x114>)
  402a8c:	4923      	ldr	r1, [pc, #140]	; (402b1c <printHdr+0x118>)
  402a8e:	4628      	mov	r0, r5
  402a90:	4c14      	ldr	r4, [pc, #80]	; (402ae4 <printHdr+0xe0>)
  402a92:	47a0      	blx	r4
			printf("%s%s%s%s%s%s%s%s%s\r\n", "", " ------  ", " ------- " ," ------- ", " ------- ", " ------- ", " ------- ", " ---    ", "--- ");
  402a94:	4b22      	ldr	r3, [pc, #136]	; (402b20 <printHdr+0x11c>)
  402a96:	4a23      	ldr	r2, [pc, #140]	; (402b24 <printHdr+0x120>)
  402a98:	9205      	str	r2, [sp, #20]
  402a9a:	4a23      	ldr	r2, [pc, #140]	; (402b28 <printHdr+0x124>)
  402a9c:	9204      	str	r2, [sp, #16]
  402a9e:	9303      	str	r3, [sp, #12]
  402aa0:	9302      	str	r3, [sp, #8]
  402aa2:	9301      	str	r3, [sp, #4]
  402aa4:	9300      	str	r3, [sp, #0]
  402aa6:	4a21      	ldr	r2, [pc, #132]	; (402b2c <printHdr+0x128>)
  402aa8:	490d      	ldr	r1, [pc, #52]	; (402ae0 <printHdr+0xdc>)
  402aaa:	4628      	mov	r0, r5
  402aac:	47a0      	blx	r4
  402aae:	e7d9      	b.n	402a64 <printHdr+0x60>
  402ab0:	4770      	bx	lr
  402ab2:	bf00      	nop
  402ab4:	51eb851f 	.word	0x51eb851f
  402ab8:	20013ff8 	.word	0x20013ff8
  402abc:	0040eb34 	.word	0x0040eb34
  402ac0:	0040eb4c 	.word	0x0040eb4c
  402ac4:	0040eb54 	.word	0x0040eb54
  402ac8:	0040eb5c 	.word	0x0040eb5c
  402acc:	0040eb68 	.word	0x0040eb68
  402ad0:	0040eb74 	.word	0x0040eb74
  402ad4:	0040eb80 	.word	0x0040eb80
  402ad8:	0040eb1c 	.word	0x0040eb1c
  402adc:	0040eb28 	.word	0x0040eb28
  402ae0:	0040f558 	.word	0x0040f558
  402ae4:	00407d2d 	.word	0x00407d2d
  402ae8:	0040eb8c 	.word	0x0040eb8c
  402aec:	0040eb98 	.word	0x0040eb98
  402af0:	0040ebc0 	.word	0x0040ebc0
  402af4:	0040ec40 	.word	0x0040ec40
  402af8:	00407df1 	.word	0x00407df1
  402afc:	0040ebb8 	.word	0x0040ebb8
  402b00:	0040ebbc 	.word	0x0040ebbc
  402b04:	0040ebc4 	.word	0x0040ebc4
  402b08:	0040ebcc 	.word	0x0040ebcc
  402b0c:	0040ebd8 	.word	0x0040ebd8
  402b10:	0040ebe4 	.word	0x0040ebe4
  402b14:	0040eba0 	.word	0x0040eba0
  402b18:	0040ebac 	.word	0x0040ebac
  402b1c:	0040ec14 	.word	0x0040ec14
  402b20:	0040ebf0 	.word	0x0040ebf0
  402b24:	0040ec08 	.word	0x0040ec08
  402b28:	0040ec10 	.word	0x0040ec10
  402b2c:	0040ebfc 	.word	0x0040ebfc

00402b30 <printComponentHeader>:

void printComponentHeader(printCompType comp)
{
	if (!HdrFreq)
	 return;  // dont waste time
	if (printAxesCount%HdrFreq==0)
  402b30:	4b30      	ldr	r3, [pc, #192]	; (402bf4 <printComponentHeader+0xc4>)
  402b32:	681a      	ldr	r2, [r3, #0]
  402b34:	4930      	ldr	r1, [pc, #192]	; (402bf8 <printComponentHeader+0xc8>)
  402b36:	fb81 3102 	smull	r3, r1, r1, r2
  402b3a:	17d3      	asrs	r3, r2, #31
  402b3c:	ebc3 1361 	rsb	r3, r3, r1, asr #5
  402b40:	2164      	movs	r1, #100	; 0x64
  402b42:	fb01 2313 	mls	r3, r1, r3, r2
  402b46:	2b00      	cmp	r3, #0
  402b48:	d152      	bne.n	402bf0 <printComponentHeader+0xc0>
{
  402b4a:	b510      	push	{r4, lr}
  402b4c:	b084      	sub	sp, #16
	{
		//printf("%s", fGRN);
		switch (comp)
  402b4e:	2804      	cmp	r0, #4
  402b50:	d848      	bhi.n	402be4 <printComponentHeader+0xb4>
  402b52:	e8df f000 	tbb	[pc, r0]
  402b56:	1103      	.short	0x1103
  402b58:	1f3a      	.short	0x1f3a
  402b5a:	2d          	.byte	0x2d
  402b5b:	00          	.byte	0x00
		{
			case Af:  
			   printf("%s %s %s %s %s %s %s", left, "Ax", mid4, "Ay", mid4, "Az", mid4);
  402b5c:	4b27      	ldr	r3, [pc, #156]	; (402bfc <printComponentHeader+0xcc>)
  402b5e:	9303      	str	r3, [sp, #12]
  402b60:	4a27      	ldr	r2, [pc, #156]	; (402c00 <printComponentHeader+0xd0>)
  402b62:	9202      	str	r2, [sp, #8]
  402b64:	9301      	str	r3, [sp, #4]
  402b66:	4a27      	ldr	r2, [pc, #156]	; (402c04 <printComponentHeader+0xd4>)
  402b68:	9200      	str	r2, [sp, #0]
  402b6a:	4a27      	ldr	r2, [pc, #156]	; (402c08 <printComponentHeader+0xd8>)
  402b6c:	4927      	ldr	r1, [pc, #156]	; (402c0c <printComponentHeader+0xdc>)
  402b6e:	4828      	ldr	r0, [pc, #160]	; (402c10 <printComponentHeader+0xe0>)
  402b70:	4c28      	ldr	r4, [pc, #160]	; (402c14 <printComponentHeader+0xe4>)
  402b72:	47a0      	blx	r4
			break;		
		}
		//printf("%s", fWHT);

	}
}
  402b74:	b004      	add	sp, #16
  402b76:	bd10      	pop	{r4, pc}
			   printf("%s %s %s %s %s %s %s", nosp, "Axlr", mid2, "Aylr", mid2, "Azlr", mid1);
  402b78:	4b27      	ldr	r3, [pc, #156]	; (402c18 <printComponentHeader+0xe8>)
  402b7a:	4a28      	ldr	r2, [pc, #160]	; (402c1c <printComponentHeader+0xec>)
  402b7c:	9203      	str	r2, [sp, #12]
  402b7e:	4a28      	ldr	r2, [pc, #160]	; (402c20 <printComponentHeader+0xf0>)
  402b80:	9202      	str	r2, [sp, #8]
  402b82:	9301      	str	r3, [sp, #4]
  402b84:	4a27      	ldr	r2, [pc, #156]	; (402c24 <printComponentHeader+0xf4>)
  402b86:	9200      	str	r2, [sp, #0]
  402b88:	4a27      	ldr	r2, [pc, #156]	; (402c28 <printComponentHeader+0xf8>)
  402b8a:	4928      	ldr	r1, [pc, #160]	; (402c2c <printComponentHeader+0xfc>)
  402b8c:	4820      	ldr	r0, [pc, #128]	; (402c10 <printComponentHeader+0xe0>)
  402b8e:	4c21      	ldr	r4, [pc, #132]	; (402c14 <printComponentHeader+0xe4>)
  402b90:	47a0      	blx	r4
			break;
  402b92:	e7ef      	b.n	402b74 <printComponentHeader+0x44>
			   printf("%s %s %s %s %s %s %s", left, "Gx", mid4, "Gy", mid4, "Gz", mid2);
  402b94:	4b19      	ldr	r3, [pc, #100]	; (402bfc <printComponentHeader+0xcc>)
  402b96:	4a20      	ldr	r2, [pc, #128]	; (402c18 <printComponentHeader+0xe8>)
  402b98:	9203      	str	r2, [sp, #12]
  402b9a:	4a25      	ldr	r2, [pc, #148]	; (402c30 <printComponentHeader+0x100>)
  402b9c:	9202      	str	r2, [sp, #8]
  402b9e:	9301      	str	r3, [sp, #4]
  402ba0:	4a24      	ldr	r2, [pc, #144]	; (402c34 <printComponentHeader+0x104>)
  402ba2:	9200      	str	r2, [sp, #0]
  402ba4:	4a24      	ldr	r2, [pc, #144]	; (402c38 <printComponentHeader+0x108>)
  402ba6:	4919      	ldr	r1, [pc, #100]	; (402c0c <printComponentHeader+0xdc>)
  402ba8:	4819      	ldr	r0, [pc, #100]	; (402c10 <printComponentHeader+0xe0>)
  402baa:	4c1a      	ldr	r4, [pc, #104]	; (402c14 <printComponentHeader+0xe4>)
  402bac:	47a0      	blx	r4
			break;
  402bae:	e7e1      	b.n	402b74 <printComponentHeader+0x44>
			   printf("%s %s %s %s %s %s %s", nosp, "T1", mid2, "T2", mid2, "dT", mid2);
  402bb0:	4b19      	ldr	r3, [pc, #100]	; (402c18 <printComponentHeader+0xe8>)
  402bb2:	9303      	str	r3, [sp, #12]
  402bb4:	4a21      	ldr	r2, [pc, #132]	; (402c3c <printComponentHeader+0x10c>)
  402bb6:	9202      	str	r2, [sp, #8]
  402bb8:	9301      	str	r3, [sp, #4]
  402bba:	4a21      	ldr	r2, [pc, #132]	; (402c40 <printComponentHeader+0x110>)
  402bbc:	9200      	str	r2, [sp, #0]
  402bbe:	4a21      	ldr	r2, [pc, #132]	; (402c44 <printComponentHeader+0x114>)
  402bc0:	491a      	ldr	r1, [pc, #104]	; (402c2c <printComponentHeader+0xfc>)
  402bc2:	4813      	ldr	r0, [pc, #76]	; (402c10 <printComponentHeader+0xe0>)
  402bc4:	4c13      	ldr	r4, [pc, #76]	; (402c14 <printComponentHeader+0xe4>)
  402bc6:	47a0      	blx	r4
			break;
  402bc8:	e7d4      	b.n	402b74 <printComponentHeader+0x44>
			   printf("%s %s %s %s %s %s %s", nosp, "AxDif", mid1, "AyDif", mid1, "AzDif", nosp);
  402bca:	4b14      	ldr	r3, [pc, #80]	; (402c1c <printComponentHeader+0xec>)
  402bcc:	4917      	ldr	r1, [pc, #92]	; (402c2c <printComponentHeader+0xfc>)
  402bce:	9103      	str	r1, [sp, #12]
  402bd0:	4a1d      	ldr	r2, [pc, #116]	; (402c48 <printComponentHeader+0x118>)
  402bd2:	9202      	str	r2, [sp, #8]
  402bd4:	9301      	str	r3, [sp, #4]
  402bd6:	4a1d      	ldr	r2, [pc, #116]	; (402c4c <printComponentHeader+0x11c>)
  402bd8:	9200      	str	r2, [sp, #0]
  402bda:	4a1d      	ldr	r2, [pc, #116]	; (402c50 <printComponentHeader+0x120>)
  402bdc:	480c      	ldr	r0, [pc, #48]	; (402c10 <printComponentHeader+0xe0>)
  402bde:	4c0d      	ldr	r4, [pc, #52]	; (402c14 <printComponentHeader+0xe4>)
  402be0:	47a0      	blx	r4
			break;
  402be2:	e7c7      	b.n	402b74 <printComponentHeader+0x44>
			   printf("%s%s",mid2, "Other");
  402be4:	4a1b      	ldr	r2, [pc, #108]	; (402c54 <printComponentHeader+0x124>)
  402be6:	490c      	ldr	r1, [pc, #48]	; (402c18 <printComponentHeader+0xe8>)
  402be8:	481b      	ldr	r0, [pc, #108]	; (402c58 <printComponentHeader+0x128>)
  402bea:	4b0a      	ldr	r3, [pc, #40]	; (402c14 <printComponentHeader+0xe4>)
  402bec:	4798      	blx	r3
			break;		
  402bee:	e7c1      	b.n	402b74 <printComponentHeader+0x44>
  402bf0:	4770      	bx	lr
  402bf2:	bf00      	nop
  402bf4:	20013ff4 	.word	0x20013ff4
  402bf8:	51eb851f 	.word	0x51eb851f
  402bfc:	20000194 	.word	0x20000194
  402c00:	0040eabc 	.word	0x0040eabc
  402c04:	0040eac0 	.word	0x0040eac0
  402c08:	0040eaa0 	.word	0x0040eaa0
  402c0c:	20000188 	.word	0x20000188
  402c10:	0040eaa4 	.word	0x0040eaa4
  402c14:	00407d2d 	.word	0x00407d2d
  402c18:	20000190 	.word	0x20000190
  402c1c:	2000018c 	.word	0x2000018c
  402c20:	0040eacc 	.word	0x0040eacc
  402c24:	0040ead4 	.word	0x0040ead4
  402c28:	0040eac4 	.word	0x0040eac4
  402c2c:	20013ff0 	.word	0x20013ff0
  402c30:	0040eae0 	.word	0x0040eae0
  402c34:	0040eae4 	.word	0x0040eae4
  402c38:	0040eadc 	.word	0x0040eadc
  402c3c:	0040eaec 	.word	0x0040eaec
  402c40:	0040eaf0 	.word	0x0040eaf0
  402c44:	0040eae8 	.word	0x0040eae8
  402c48:	0040eafc 	.word	0x0040eafc
  402c4c:	0040eb04 	.word	0x0040eb04
  402c50:	0040eaf4 	.word	0x0040eaf4
  402c54:	0040eb0c 	.word	0x0040eb0c
  402c58:	0040eb14 	.word	0x0040eb14

00402c5c <printAxes>:
{
  402c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c60:	ed2d 8b02 	vpush	{d8}
  402c64:	b087      	sub	sp, #28
  402c66:	4604      	mov	r4, r0
  402c68:	460f      	mov	r7, r1
  402c6a:	4615      	mov	r5, r2
  402c6c:	461e      	mov	r6, r3
  402c6e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
	if(HdrFreq && printAxesCount%HdrFreq == 0) {
  402c72:	4b35      	ldr	r3, [pc, #212]	; (402d48 <printAxes+0xec>)
  402c74:	681a      	ldr	r2, [r3, #0]
  402c76:	4935      	ldr	r1, [pc, #212]	; (402d4c <printAxes+0xf0>)
  402c78:	fb81 3102 	smull	r3, r1, r1, r2
  402c7c:	17d3      	asrs	r3, r2, #31
  402c7e:	ebc3 1361 	rsb	r3, r3, r1, asr #5
  402c82:	2164      	movs	r1, #100	; 0x64
  402c84:	fb01 2313 	mls	r3, r1, r3, r2
  402c88:	b9e3      	cbnz	r3, 402cc4 <printAxes+0x68>
		if (accelp)					printComponentHeader(Af);
  402c8a:	2800      	cmp	r0, #0
  402c8c:	d054      	beq.n	402d38 <printAxes+0xdc>
  402c8e:	2000      	movs	r0, #0
  402c90:	4b2f      	ldr	r3, [pc, #188]	; (402d50 <printAxes+0xf4>)
  402c92:	4798      	blx	r3
		if (accelLowresp)			printComponentHeader(Al);
  402c94:	b12f      	cbz	r7, 402ca2 <printAxes+0x46>
  402c96:	2001      	movs	r0, #1
  402c98:	4b2d      	ldr	r3, [pc, #180]	; (402d50 <printAxes+0xf4>)
  402c9a:	4798      	blx	r3
		if (accelp && accelLowresp) printComponentHeader(dA);
  402c9c:	2002      	movs	r0, #2
  402c9e:	4b2c      	ldr	r3, [pc, #176]	; (402d50 <printAxes+0xf4>)
  402ca0:	4798      	blx	r3
		if (gyrop)					printComponentHeader(Gp);
  402ca2:	b115      	cbz	r5, 402caa <printAxes+0x4e>
  402ca4:	2003      	movs	r0, #3
  402ca6:	4b2a      	ldr	r3, [pc, #168]	; (402d50 <printAxes+0xf4>)
  402ca8:	4798      	blx	r3
		if (temperaturep)			printComponentHeader(Tp);
  402caa:	b116      	cbz	r6, 402cb2 <printAxes+0x56>
  402cac:	2004      	movs	r0, #4
  402cae:	4b28      	ldr	r3, [pc, #160]	; (402d50 <printAxes+0xf4>)
  402cb0:	4798      	blx	r3
		if(anythingelsep)			printComponentHeader(Op);
  402cb2:	f1b8 0f00 	cmp.w	r8, #0
  402cb6:	d002      	beq.n	402cbe <printAxes+0x62>
  402cb8:	2005      	movs	r0, #5
  402cba:	4b25      	ldr	r3, [pc, #148]	; (402d50 <printAxes+0xf4>)
  402cbc:	4798      	blx	r3
		printf("\r\n");
  402cbe:	4825      	ldr	r0, [pc, #148]	; (402d54 <printAxes+0xf8>)
  402cc0:	4b25      	ldr	r3, [pc, #148]	; (402d58 <printAxes+0xfc>)
  402cc2:	4798      	blx	r3
	printAxesCount++;
  402cc4:	4a20      	ldr	r2, [pc, #128]	; (402d48 <printAxes+0xec>)
  402cc6:	6813      	ldr	r3, [r2, #0]
  402cc8:	3301      	adds	r3, #1
  402cca:	6013      	str	r3, [r2, #0]
	if (printUnits == rawbits)
  402ccc:	4b23      	ldr	r3, [pc, #140]	; (402d5c <printAxes+0x100>)
  402cce:	781b      	ldrb	r3, [r3, #0]
  402cd0:	2b00      	cmp	r3, #0
  402cd2:	d14b      	bne.n	402d6c <printAxes+0x110>
		if (accelp) 
  402cd4:	b144      	cbz	r4, 402ce8 <printAxes+0x8c>
		   printf ("%7d %7d %7d ", *(accelp+2), *(accelp+1), *(accelp));
  402cd6:	f9b4 3000 	ldrsh.w	r3, [r4]
  402cda:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  402cde:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
  402ce2:	481f      	ldr	r0, [pc, #124]	; (402d60 <printAxes+0x104>)
  402ce4:	4c1f      	ldr	r4, [pc, #124]	; (402d64 <printAxes+0x108>)
  402ce6:	47a0      	blx	r4
		if (accelLowresp) 
  402ce8:	b147      	cbz	r7, 402cfc <printAxes+0xa0>
		   printf ("%7d %7d %7d ", *(accelLowresp+2), *(accelLowresp+1), *(accelLowresp));
  402cea:	f9b7 3000 	ldrsh.w	r3, [r7]
  402cee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
  402cf2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
  402cf6:	481a      	ldr	r0, [pc, #104]	; (402d60 <printAxes+0x104>)
  402cf8:	4c1a      	ldr	r4, [pc, #104]	; (402d64 <printAxes+0x108>)
  402cfa:	47a0      	blx	r4
		if (gyrop) 
  402cfc:	b145      	cbz	r5, 402d10 <printAxes+0xb4>
		   printf ("%7d %7d %7d ", *(gyrop+2), *(gyrop+1), *(gyrop));	   
  402cfe:	f9b5 3000 	ldrsh.w	r3, [r5]
  402d02:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
  402d06:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
  402d0a:	4815      	ldr	r0, [pc, #84]	; (402d60 <printAxes+0x104>)
  402d0c:	4c15      	ldr	r4, [pc, #84]	; (402d64 <printAxes+0x108>)
  402d0e:	47a0      	blx	r4
		if (temperaturep) 
  402d10:	b146      	cbz	r6, 402d24 <printAxes+0xc8>
		   printf ("%7d %7d %7d ", *(temperaturep), *(temperaturep+1), *(temperaturep+2));
  402d12:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
  402d16:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
  402d1a:	f9b6 1000 	ldrsh.w	r1, [r6]
  402d1e:	4810      	ldr	r0, [pc, #64]	; (402d60 <printAxes+0x104>)
  402d20:	4c10      	ldr	r4, [pc, #64]	; (402d64 <printAxes+0x108>)
  402d22:	47a0      	blx	r4
		if (anythingelsep) 
  402d24:	f1b8 0f00 	cmp.w	r8, #0
  402d28:	f000 8119 	beq.w	402f5e <printAxes+0x302>
		   printf ("%04x", (uint16_t)(*anythingelsep));
  402d2c:	f8b8 1000 	ldrh.w	r1, [r8]
  402d30:	480d      	ldr	r0, [pc, #52]	; (402d68 <printAxes+0x10c>)
  402d32:	4b0c      	ldr	r3, [pc, #48]	; (402d64 <printAxes+0x108>)
  402d34:	4798      	blx	r3
  402d36:	e112      	b.n	402f5e <printAxes+0x302>
		if (accelLowresp)			printComponentHeader(Al);
  402d38:	2f00      	cmp	r7, #0
  402d3a:	d0b2      	beq.n	402ca2 <printAxes+0x46>
  402d3c:	2001      	movs	r0, #1
  402d3e:	4b04      	ldr	r3, [pc, #16]	; (402d50 <printAxes+0xf4>)
  402d40:	4798      	blx	r3
		if (accelp && accelLowresp) printComponentHeader(dA);
  402d42:	2c00      	cmp	r4, #0
  402d44:	d1aa      	bne.n	402c9c <printAxes+0x40>
  402d46:	e7ac      	b.n	402ca2 <printAxes+0x46>
  402d48:	20013ff4 	.word	0x20013ff4
  402d4c:	51eb851f 	.word	0x51eb851f
  402d50:	00402b31 	.word	0x00402b31
  402d54:	0040ec40 	.word	0x0040ec40
  402d58:	00407df1 	.word	0x00407df1
  402d5c:	20013ff8 	.word	0x20013ff8
  402d60:	0040ea68 	.word	0x0040ea68
  402d64:	00407d2d 	.word	0x00407d2d
  402d68:	0040ea78 	.word	0x0040ea78
		if (accelp) {
  402d6c:	2c00      	cmp	r4, #0
  402d6e:	d02f      	beq.n	402dd0 <printAxes+0x174>
			flAz = (float)accel2gee(*(accelp+2), false); 
  402d70:	2100      	movs	r1, #0
  402d72:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  402d76:	f8df 9240 	ldr.w	r9, [pc, #576]	; 402fb8 <printAxes+0x35c>
  402d7a:	47c8      	blx	r9
  402d7c:	f8df b204 	ldr.w	fp, [pc, #516]	; 402f84 <printAxes+0x328>
  402d80:	f8cb 0000 	str.w	r0, [fp]
			flAy = (float)accel2gee(*(accelp+1), false);
  402d84:	2100      	movs	r1, #0
  402d86:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  402d8a:	47c8      	blx	r9
  402d8c:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 402f88 <printAxes+0x32c>
  402d90:	f8ca 0000 	str.w	r0, [sl]
			flAx = (float)accel2gee(*(accelp+0), false);
  402d94:	2100      	movs	r1, #0
  402d96:	f9b4 0000 	ldrsh.w	r0, [r4]
  402d9a:	47c8      	blx	r9
  402d9c:	ee08 0a10 	vmov	s16, r0
  402da0:	4b73      	ldr	r3, [pc, #460]	; (402f70 <printAxes+0x314>)
  402da2:	6018      	str	r0, [r3, #0]
			printf(atbuf, flAz, flAy, flAx);
  402da4:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 402f80 <printAxes+0x324>
  402da8:	f8db 0000 	ldr.w	r0, [fp]
  402dac:	47c8      	blx	r9
  402dae:	e9cd 0104 	strd	r0, r1, [sp, #16]
  402db2:	ee18 0a10 	vmov	r0, s16
  402db6:	47c8      	blx	r9
  402db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402dbc:	f8da 0000 	ldr.w	r0, [sl]
  402dc0:	47c8      	blx	r9
  402dc2:	e9cd 0100 	strd	r0, r1, [sp]
  402dc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402dca:	486a      	ldr	r0, [pc, #424]	; (402f74 <printAxes+0x318>)
  402dcc:	496a      	ldr	r1, [pc, #424]	; (402f78 <printAxes+0x31c>)
  402dce:	4788      	blx	r1
		if (accelLowresp) {
  402dd0:	2f00      	cmp	r7, #0
  402dd2:	d06f      	beq.n	402eb4 <printAxes+0x258>
			frAz  = (float)accel2gee(*(accelLowresp+2), true);
  402dd4:	2101      	movs	r1, #1
  402dd6:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
  402dda:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 402fb8 <printAxes+0x35c>
  402dde:	47d8      	blx	fp
  402de0:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 402fbc <printAxes+0x360>
  402de4:	f8ca 0000 	str.w	r0, [sl]
			frAy  = (float)accel2gee(*(accelLowresp+1), true);
  402de8:	2101      	movs	r1, #1
  402dea:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
  402dee:	47d8      	blx	fp
  402df0:	f8df 9198 	ldr.w	r9, [pc, #408]	; 402f8c <printAxes+0x330>
  402df4:	f8c9 0000 	str.w	r0, [r9]
			frAx  = (float)accel2gee(*(accelLowresp+0), true);
  402df8:	2101      	movs	r1, #1
  402dfa:	f9b7 0000 	ldrsh.w	r0, [r7]
  402dfe:	47d8      	blx	fp
  402e00:	4683      	mov	fp, r0
  402e02:	4b5e      	ldr	r3, [pc, #376]	; (402f7c <printAxes+0x320>)
  402e04:	6018      	str	r0, [r3, #0]
			printf(atbuf, frAz, frAy, frAx);
  402e06:	4f5e      	ldr	r7, [pc, #376]	; (402f80 <printAxes+0x324>)
  402e08:	f8da 0000 	ldr.w	r0, [sl]
  402e0c:	47b8      	blx	r7
  402e0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
  402e12:	4658      	mov	r0, fp
  402e14:	47b8      	blx	r7
  402e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402e1a:	f8d9 0000 	ldr.w	r0, [r9]
  402e1e:	47b8      	blx	r7
  402e20:	e9cd 0100 	strd	r0, r1, [sp]
  402e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402e28:	4852      	ldr	r0, [pc, #328]	; (402f74 <printAxes+0x318>)
  402e2a:	4953      	ldr	r1, [pc, #332]	; (402f78 <printAxes+0x31c>)
  402e2c:	4788      	blx	r1
		if (accelp && accelLowresp) {
  402e2e:	2c00      	cmp	r4, #0
  402e30:	d040      	beq.n	402eb4 <printAxes+0x258>
			fdAz = floatAbs(flAz - frAz);
  402e32:	4b54      	ldr	r3, [pc, #336]	; (402f84 <printAxes+0x328>)
  402e34:	edd3 7a00 	vldr	s15, [r3]
  402e38:	ed9a 7a00 	vldr	s14, [sl]
  402e3c:	ee77 7ac7 	vsub.f32	s15, s15, s14


//* floating absolute val function . Not available from softfp lib
float floatAbs ( float f)
{
	if (f < 0.0f)  
  402e40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  402e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  return (-f);
  402e48:	bf48      	it	mi
  402e4a:	eef1 7a67 	vnegmi.f32	s15, s15
			fdAy = floatAbs(flAy - frAy);
  402e4e:	4b4e      	ldr	r3, [pc, #312]	; (402f88 <printAxes+0x32c>)
  402e50:	ed93 8a00 	vldr	s16, [r3]
  402e54:	4b4d      	ldr	r3, [pc, #308]	; (402f8c <printAxes+0x330>)
  402e56:	ed93 7a00 	vldr	s14, [r3]
  402e5a:	ee38 8a47 	vsub.f32	s16, s16, s14
	if (f < 0.0f)  
  402e5e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
  402e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  return (-f);
  402e66:	bf48      	it	mi
  402e68:	eeb1 8a48 	vnegmi.f32	s16, s16
			fdAx = floatAbs(flAx - frAx);
  402e6c:	4b40      	ldr	r3, [pc, #256]	; (402f70 <printAxes+0x314>)
  402e6e:	edd3 8a00 	vldr	s17, [r3]
  402e72:	4b42      	ldr	r3, [pc, #264]	; (402f7c <printAxes+0x320>)
  402e74:	ed93 7a00 	vldr	s14, [r3]
  402e78:	ee78 8ac7 	vsub.f32	s17, s17, s14
	if (f < 0.0f)  
  402e7c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
  402e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  return (-f);
  402e84:	bf48      	it	mi
  402e86:	eef1 8a68 	vnegmi.f32	s17, s17
			printf(atbuf, fdAz, fdAy, fdAx);
  402e8a:	4c3d      	ldr	r4, [pc, #244]	; (402f80 <printAxes+0x324>)
  402e8c:	ee17 0a90 	vmov	r0, s15
  402e90:	47a0      	blx	r4
  402e92:	4682      	mov	sl, r0
  402e94:	468b      	mov	fp, r1
  402e96:	ee18 0a90 	vmov	r0, s17
  402e9a:	47a0      	blx	r4
  402e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402ea0:	ee18 0a10 	vmov	r0, s16
  402ea4:	47a0      	blx	r4
  402ea6:	e9cd 0100 	strd	r0, r1, [sp]
  402eaa:	4652      	mov	r2, sl
  402eac:	465b      	mov	r3, fp
  402eae:	4831      	ldr	r0, [pc, #196]	; (402f74 <printAxes+0x318>)
  402eb0:	4931      	ldr	r1, [pc, #196]	; (402f78 <printAxes+0x31c>)
  402eb2:	4788      	blx	r1
		if (gyrop) {
  402eb4:	b31d      	cbz	r5, 402efe <printAxes+0x2a2>
			flGz = (float)gyro2dps(*(gyrop+2));
  402eb6:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
  402eba:	4c35      	ldr	r4, [pc, #212]	; (402f90 <printAxes+0x334>)
  402ebc:	47a0      	blx	r4
  402ebe:	f8df 9100 	ldr.w	r9, [pc, #256]	; 402fc0 <printAxes+0x364>
  402ec2:	f8c9 0000 	str.w	r0, [r9]
			flGy = (float)gyro2dps(*(gyrop+2));
  402ec6:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
  402eca:	47a0      	blx	r4
  402ecc:	4f31      	ldr	r7, [pc, #196]	; (402f94 <printAxes+0x338>)
  402ece:	6038      	str	r0, [r7, #0]
			flGx = (float)gyro2dps(*(gyrop+2));			
  402ed0:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
  402ed4:	47a0      	blx	r4
  402ed6:	4605      	mov	r5, r0
			printf(gtbuf, flGz, flGy, flGx);
  402ed8:	4c29      	ldr	r4, [pc, #164]	; (402f80 <printAxes+0x324>)
  402eda:	f8d9 0000 	ldr.w	r0, [r9]
  402ede:	47a0      	blx	r4
  402ee0:	4682      	mov	sl, r0
  402ee2:	468b      	mov	fp, r1
  402ee4:	4628      	mov	r0, r5
  402ee6:	47a0      	blx	r4
  402ee8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402eec:	6838      	ldr	r0, [r7, #0]
  402eee:	47a0      	blx	r4
  402ef0:	e9cd 0100 	strd	r0, r1, [sp]
  402ef4:	4652      	mov	r2, sl
  402ef6:	465b      	mov	r3, fp
  402ef8:	4827      	ldr	r0, [pc, #156]	; (402f98 <printAxes+0x33c>)
  402efa:	491f      	ldr	r1, [pc, #124]	; (402f78 <printAxes+0x31c>)
  402efc:	4788      	blx	r1
		if (temperaturep) {
  402efe:	b336      	cbz	r6, 402f4e <printAxes+0x2f2>
			flT1 = (float)temp2Centigrade(*(temperaturep));
  402f00:	f9b6 0000 	ldrsh.w	r0, [r6]
  402f04:	4c25      	ldr	r4, [pc, #148]	; (402f9c <printAxes+0x340>)
  402f06:	47a0      	blx	r4
  402f08:	4f25      	ldr	r7, [pc, #148]	; (402fa0 <printAxes+0x344>)
  402f0a:	6038      	str	r0, [r7, #0]
			flT2 = (float)temp2Centigrade(*(temperaturep+1));
  402f0c:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
  402f10:	47a0      	blx	r4
  402f12:	4d24      	ldr	r5, [pc, #144]	; (402fa4 <printAxes+0x348>)
  402f14:	6028      	str	r0, [r5, #0]
			fTdiff = (float)temp2Centigrade(*(temperaturep+2)) - 25.0;			
  402f16:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
  402f1a:	47a0      	blx	r4
  402f1c:	ee08 0a10 	vmov	s16, r0
			printf("%3.1f  %3.1f  %3.1f", flT1, flT2, fTdiff);
  402f20:	4c17      	ldr	r4, [pc, #92]	; (402f80 <printAxes+0x324>)
  402f22:	6838      	ldr	r0, [r7, #0]
  402f24:	47a0      	blx	r4
  402f26:	4606      	mov	r6, r0
  402f28:	460f      	mov	r7, r1
  402f2a:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
  402f2e:	ee78 7a67 	vsub.f32	s15, s16, s15
  402f32:	ee17 0a90 	vmov	r0, s15
  402f36:	47a0      	blx	r4
  402f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402f3c:	6828      	ldr	r0, [r5, #0]
  402f3e:	47a0      	blx	r4
  402f40:	e9cd 0100 	strd	r0, r1, [sp]
  402f44:	4632      	mov	r2, r6
  402f46:	463b      	mov	r3, r7
  402f48:	4817      	ldr	r0, [pc, #92]	; (402fa8 <printAxes+0x34c>)
  402f4a:	490b      	ldr	r1, [pc, #44]	; (402f78 <printAxes+0x31c>)
  402f4c:	4788      	blx	r1
		if(anythingelsep) {
  402f4e:	f1b8 0f00 	cmp.w	r8, #0
  402f52:	d004      	beq.n	402f5e <printAxes+0x302>
				printf("    %04X ", (uint16_t)(*anythingelsep));
  402f54:	f8b8 1000 	ldrh.w	r1, [r8]
  402f58:	4814      	ldr	r0, [pc, #80]	; (402fac <printAxes+0x350>)
  402f5a:	4b07      	ldr	r3, [pc, #28]	; (402f78 <printAxes+0x31c>)
  402f5c:	4798      	blx	r3
	printf("\r\n");
  402f5e:	4814      	ldr	r0, [pc, #80]	; (402fb0 <printAxes+0x354>)
  402f60:	4b14      	ldr	r3, [pc, #80]	; (402fb4 <printAxes+0x358>)
  402f62:	4798      	blx	r3
}
  402f64:	b007      	add	sp, #28
  402f66:	ecbd 8b02 	vpop	{d8}
  402f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f6e:	bf00      	nop
  402f70:	20013f64 	.word	0x20013f64
  402f74:	20013f00 	.word	0x20013f00
  402f78:	00407d2d 	.word	0x00407d2d
  402f7c:	20013f80 	.word	0x20013f80
  402f80:	00406fa1 	.word	0x00406fa1
  402f84:	20013f6c 	.word	0x20013f6c
  402f88:	20013f68 	.word	0x20013f68
  402f8c:	20013f84 	.word	0x20013f84
  402f90:	00402489 	.word	0x00402489
  402f94:	20013f70 	.word	0x20013f70
  402f98:	20013f8c 	.word	0x20013f8c
  402f9c:	004024ed 	.word	0x004024ed
  402fa0:	20013f78 	.word	0x20013f78
  402fa4:	20013f7c 	.word	0x20013f7c
  402fa8:	0040ea80 	.word	0x0040ea80
  402fac:	0040ea94 	.word	0x0040ea94
  402fb0:	0040ec40 	.word	0x0040ec40
  402fb4:	00407df1 	.word	0x00407df1
  402fb8:	004023ed 	.word	0x004023ed
  402fbc:	20013f88 	.word	0x20013f88
  402fc0:	20013f74 	.word	0x20013f74

00402fc4 <floatAbs>:
{
  402fc4:	ee07 0a90 	vmov	s15, r0
	if (f < 0.0f)  
  402fc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  402fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  return (-f);
  402fd0:	bf48      	it	mi
  402fd2:	eef1 7a67 	vnegmi.f32	s15, s15
	else 
	 return f;
}
  402fd6:	ee17 0a90 	vmov	r0, s15
  402fda:	4770      	bx	lr

00402fdc <lsbSet>:
	int i;
	uint16_t retval;
	
	for (i=0; i<16; i++)
	{
		if ((v>>i)&1)
  402fdc:	f010 0f01 	tst.w	r0, #1
  402fe0:	d126      	bne.n	403030 <lsbSet+0x54>
  402fe2:	2301      	movs	r3, #1
  402fe4:	fa40 f203 	asr.w	r2, r0, r3
  402fe8:	f012 0f01 	tst.w	r2, #1
  402fec:	d117      	bne.n	40301e <lsbSet+0x42>
	for (i=0; i<16; i++)
  402fee:	3301      	adds	r3, #1
  402ff0:	2b10      	cmp	r3, #16
  402ff2:	d1f7      	bne.n	402fe4 <lsbSet+0x8>
{
  402ff4:	b510      	push	{r4, lr}
		break;
	}
	if (i==16)
	{  printf("bitfield is empty\r\n");  printf("Press any key to continue \r\n"); getchar(); }
  402ff6:	480f      	ldr	r0, [pc, #60]	; (403034 <lsbSet+0x58>)
  402ff8:	4c0f      	ldr	r4, [pc, #60]	; (403038 <lsbSet+0x5c>)
  402ffa:	47a0      	blx	r4
  402ffc:	480f      	ldr	r0, [pc, #60]	; (40303c <lsbSet+0x60>)
  402ffe:	47a0      	blx	r4
  403000:	4b0f      	ldr	r3, [pc, #60]	; (403040 <lsbSet+0x64>)
  403002:	6818      	ldr	r0, [r3, #0]
  403004:	6842      	ldr	r2, [r0, #4]
  403006:	6853      	ldr	r3, [r2, #4]
  403008:	3b01      	subs	r3, #1
  40300a:	6053      	str	r3, [r2, #4]
  40300c:	2b00      	cmp	r3, #0
  40300e:	db0a      	blt.n	403026 <lsbSet+0x4a>
  403010:	6842      	ldr	r2, [r0, #4]
  403012:	6813      	ldr	r3, [r2, #0]
  403014:	3301      	adds	r3, #1
  403016:	6013      	str	r3, [r2, #0]
  403018:	2310      	movs	r3, #16
	
	retval	= i;
	return i;
  40301a:	b298      	uxth	r0, r3
  40301c:	bd10      	pop	{r4, pc}
	if (i==16)
  40301e:	2b10      	cmp	r3, #16
  403020:	d0e8      	beq.n	402ff4 <lsbSet+0x18>
  403022:	b298      	uxth	r0, r3
  403024:	4770      	bx	lr
	{  printf("bitfield is empty\r\n");  printf("Press any key to continue \r\n"); getchar(); }
  403026:	6841      	ldr	r1, [r0, #4]
  403028:	4b06      	ldr	r3, [pc, #24]	; (403044 <lsbSet+0x68>)
  40302a:	4798      	blx	r3
  40302c:	2310      	movs	r3, #16
  40302e:	e7f4      	b.n	40301a <lsbSet+0x3e>
	for (i=0; i<16; i++)
  403030:	2300      	movs	r3, #0
  403032:	e7f6      	b.n	403022 <lsbSet+0x46>
  403034:	0040e5f4 	.word	0x0040e5f4
  403038:	00407df1 	.word	0x00407df1
  40303c:	0040e608 	.word	0x0040e608
  403040:	20000378 	.word	0x20000378
  403044:	00407e01 	.word	0x00407e01

00403048 <IAM20685_chipunlock_PRM>:
	spi_master_write_register(0x00, 3, value);
	delay_us(10);
}

void IAM20685_chipunlock_PRM()
{
  403048:	b538      	push	{r3, r4, r5, lr}
	LKUNLKWrite(0x00, 0x193247);  //CMD:00193247
  40304a:	4911      	ldr	r1, [pc, #68]	; (403090 <IAM20685_chipunlock_PRM+0x48>)
  40304c:	2000      	movs	r0, #0
  40304e:	4c11      	ldr	r4, [pc, #68]	; (403094 <IAM20685_chipunlock_PRM+0x4c>)
  403050:	47a0      	blx	r4
	LKUNLKWrite(0x00, 0x02334C);  //CMD:0002334C
  403052:	4911      	ldr	r1, [pc, #68]	; (403098 <IAM20685_chipunlock_PRM+0x50>)
  403054:	2000      	movs	r0, #0
  403056:	47a0      	blx	r4
	LKUNLKWrite(0x00, 0x01334F);  //CMD:0001334F
  403058:	4d10      	ldr	r5, [pc, #64]	; (40309c <IAM20685_chipunlock_PRM+0x54>)
  40305a:	4629      	mov	r1, r5
  40305c:	2000      	movs	r0, #0
  40305e:	47a0      	blx	r4
	LKUNLKWrite(0x00, 0x04334A);  //CMD:0004334A
  403060:	490f      	ldr	r1, [pc, #60]	; (4030a0 <IAM20685_chipunlock_PRM+0x58>)
  403062:	2000      	movs	r0, #0
  403064:	47a0      	blx	r4
	LKUNLKWrite(0x03, 0x00334D);  //CMD:0300334D
  403066:	f243 314d 	movw	r1, #13133	; 0x334d
  40306a:	2003      	movs	r0, #3
  40306c:	47a0      	blx	r4
	LKUNLKWrite(0x01, 0x803347);  //CMD:01803347
  40306e:	490d      	ldr	r1, [pc, #52]	; (4030a4 <IAM20685_chipunlock_PRM+0x5c>)
  403070:	2001      	movs	r0, #1
  403072:	47a0      	blx	r4
	LKUNLKWrite(0x02, 0x803344);  //CMD:02803344
  403074:	490c      	ldr	r1, [pc, #48]	; (4030a8 <IAM20685_chipunlock_PRM+0x60>)
  403076:	2002      	movs	r0, #2
  403078:	47a0      	blx	r4
	LKUNLKWrite(0x00, 0x923244);  //CMD:00923244
  40307a:	490c      	ldr	r1, [pc, #48]	; (4030ac <IAM20685_chipunlock_PRM+0x64>)
  40307c:	2000      	movs	r0, #0
  40307e:	47a0      	blx	r4
	LKUNLKWrite(0x00, 0x01334F);  //CMD:0001334F
  403080:	4629      	mov	r1, r5
  403082:	2000      	movs	r0, #0
  403084:	47a0      	blx	r4
	delay_us(15);
  403086:	2081      	movs	r0, #129	; 0x81
  403088:	4b09      	ldr	r3, [pc, #36]	; (4030b0 <IAM20685_chipunlock_PRM+0x68>)
  40308a:	4798      	blx	r3
  40308c:	bd38      	pop	{r3, r4, r5, pc}
  40308e:	bf00      	nop
  403090:	00193247 	.word	0x00193247
  403094:	004037e5 	.word	0x004037e5
  403098:	0002334c 	.word	0x0002334c
  40309c:	0001334f 	.word	0x0001334f
  4030a0:	0004334a 	.word	0x0004334a
  4030a4:	00803347 	.word	0x00803347
  4030a8:	00803344 	.word	0x00803344
  4030ac:	00923244 	.word	0x00923244
  4030b0:	20000001 	.word	0x20000001

004030b4 <IAM20685_writeunlock_PRM>:
	spi_master_write_register(0x02, 2, value);
	delay_us(10);
}

void IAM20685_writeunlock_PRM() //Crystal-2 chip unlock, if locked
{
  4030b4:	b510      	push	{r4, lr}
	regAddrType r = 0x19;
	indirectWrite(r, 0x0002);
  4030b6:	2102      	movs	r1, #2
  4030b8:	2019      	movs	r0, #25
  4030ba:	4c0c      	ldr	r4, [pc, #48]	; (4030ec <IAM20685_writeunlock_PRM+0x38>)
  4030bc:	47a0      	blx	r4
	indirectWrite(r, 0x0001);
  4030be:	2101      	movs	r1, #1
  4030c0:	2019      	movs	r0, #25
  4030c2:	47a0      	blx	r4
	indirectWrite(r, 0x0004);
  4030c4:	2104      	movs	r1, #4
  4030c6:	2019      	movs	r0, #25
  4030c8:	47a0      	blx	r4
	
	indirectWrite(r, 0x0300);
  4030ca:	f44f 7140 	mov.w	r1, #768	; 0x300
  4030ce:	2019      	movs	r0, #25
  4030d0:	47a0      	blx	r4
	indirectWrite(r, 0x0180);
  4030d2:	f44f 71c0 	mov.w	r1, #384	; 0x180
  4030d6:	2019      	movs	r0, #25
  4030d8:	47a0      	blx	r4
	indirectWrite(r, 0x0280);
  4030da:	f44f 7120 	mov.w	r1, #640	; 0x280
  4030de:	2019      	movs	r0, #25
  4030e0:	47a0      	blx	r4
	delay_us(15);
  4030e2:	2081      	movs	r0, #129	; 0x81
  4030e4:	4b02      	ldr	r3, [pc, #8]	; (4030f0 <IAM20685_writeunlock_PRM+0x3c>)
  4030e6:	4798      	blx	r3
  4030e8:	bd10      	pop	{r4, pc}
  4030ea:	bf00      	nop
  4030ec:	00403d09 	.word	0x00403d09
  4030f0:	20000001 	.word	0x20000001

004030f4 <IAM20685Original>:
#endif



void IAM20685Original() //command=5, Crystal-2
{
  4030f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4030f8:	b091      	sub	sp, #68	; 0x44
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4030fa:	4b20      	ldr	r3, [pc, #128]	; (40317c <IAM20685Original+0x88>)
  4030fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  403100:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403102:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403106:	631a      	str	r2, [r3, #48]	; 0x30
	int gx, gy, gz, ax, ay, az, t1, t2 ;
	
	ioport_set_pin_dir(CRYSTAL_RST, IOPORT_DIR_OUTPUT); //
	ioport_set_pin_level(CRYSTAL_RST, IOPORT_PIN_LEVEL_HIGH); //
	
	ext_int_initialize(ext_interrupt_handler);
  403108:	481d      	ldr	r0, [pc, #116]	; (403180 <IAM20685Original+0x8c>)
  40310a:	4b1e      	ldr	r3, [pc, #120]	; (403184 <IAM20685Original+0x90>)
  40310c:	4798      	blx	r3
	
	spi_master_init1(); //for ver-B and D+ board EVB
  40310e:	4b1e      	ldr	r3, [pc, #120]	; (403188 <IAM20685Original+0x94>)
  403110:	4798      	blx	r3
	//spi_master_init(); //for ver-A board EVB and on board sensor
	
	IAM20685_chipunlock_PRM();	
  403112:	4b1e      	ldr	r3, [pc, #120]	; (40318c <IAM20685Original+0x98>)
  403114:	4798      	blx	r3
	
	value[0] = 0x00; //	CMD:2C0000F3
  403116:	2300      	movs	r3, #0
  403118:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	value[1] = 0x00;
  40311c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	value[2] = 0xF3;
  403120:	23f3      	movs	r3, #243	; 0xf3
  403122:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	spi_master_write_register(0x2C, 3, value);
  403126:	aa0b      	add	r2, sp, #44	; 0x2c
  403128:	2103      	movs	r1, #3
  40312a:	202c      	movs	r0, #44	; 0x2c
  40312c:	4b18      	ldr	r3, [pc, #96]	; (403190 <IAM20685Original+0x9c>)
  40312e:	4798      	blx	r3
	delay_us(10);
  403130:	2056      	movs	r0, #86	; 0x56
  403132:	4c18      	ldr	r4, [pc, #96]	; (403194 <IAM20685Original+0xa0>)
  403134:	47a0      	blx	r4
	spi_master_read_register(0x2c, 2, value);
  403136:	aa0b      	add	r2, sp, #44	; 0x2c
  403138:	2102      	movs	r1, #2
  40313a:	202c      	movs	r0, #44	; 0x2c
  40313c:	4b16      	ldr	r3, [pc, #88]	; (403198 <IAM20685Original+0xa4>)
  40313e:	4798      	blx	r3
	delay_us(10);			
  403140:	2056      	movs	r0, #86	; 0x56
  403142:	47a0      	blx	r4
	
	uint16_t whoami = (short)((value[0] << 8 | value[1]) & 0x0000FFFF); //!PRM
  403144:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
  403148:	021b      	lsls	r3, r3, #8
  40314a:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
  40314e:	ea43 0201 	orr.w	r2, r3, r1
	if (whoami != 0xAA55)
  403152:	b212      	sxth	r2, r2
  403154:	4811      	ldr	r0, [pc, #68]	; (40319c <IAM20685Original+0xa8>)
  403156:	4282      	cmp	r2, r0
  403158:	d02b      	beq.n	4031b2 <IAM20685Original+0xbe>
	{
		printf("IAM20685 WHOAMI = %04x\r\n", (value[0] << 8 | value[1]));
  40315a:	4319      	orrs	r1, r3
  40315c:	4810      	ldr	r0, [pc, #64]	; (4031a0 <IAM20685Original+0xac>)
  40315e:	4b11      	ldr	r3, [pc, #68]	; (4031a4 <IAM20685Original+0xb0>)
  403160:	4798      	blx	r3
        getchar();
  403162:	4b11      	ldr	r3, [pc, #68]	; (4031a8 <IAM20685Original+0xb4>)
  403164:	6818      	ldr	r0, [r3, #0]
  403166:	6842      	ldr	r2, [r0, #4]
  403168:	6853      	ldr	r3, [r2, #4]
  40316a:	3b01      	subs	r3, #1
  40316c:	6053      	str	r3, [r2, #4]
  40316e:	2b00      	cmp	r3, #0
  403170:	db1c      	blt.n	4031ac <IAM20685Original+0xb8>
  403172:	6842      	ldr	r2, [r0, #4]
  403174:	6813      	ldr	r3, [r2, #0]
  403176:	3301      	adds	r3, #1
  403178:	6013      	str	r3, [r2, #0]
  40317a:	e01a      	b.n	4031b2 <IAM20685Original+0xbe>
  40317c:	400e0e00 	.word	0x400e0e00
  403180:	00401f35 	.word	0x00401f35
  403184:	00401f51 	.word	0x00401f51
  403188:	00403e51 	.word	0x00403e51
  40318c:	00403049 	.word	0x00403049
  403190:	00403f89 	.word	0x00403f89
  403194:	20000001 	.word	0x20000001
  403198:	004040b5 	.word	0x004040b5
  40319c:	ffffaa55 	.word	0xffffaa55
  4031a0:	0040ec6c 	.word	0x0040ec6c
  4031a4:	00407d2d 	.word	0x00407d2d
  4031a8:	20000378 	.word	0x20000378
  4031ac:	6841      	ldr	r1, [r0, #4]
  4031ae:	4bb1      	ldr	r3, [pc, #708]	; (403474 <IAM20685Original+0x380>)
  4031b0:	4798      	blx	r3
	}
	
	//while(1){};
	
	
	IAM20685_writeunlock_PRM();	
  4031b2:	4bb1      	ldr	r3, [pc, #708]	; (403478 <IAM20685Original+0x384>)
  4031b4:	4798      	blx	r3
	
	spi_master_read_register(0xB0, 0, value);//CMD:B0 00 00 F9, G and A YZ filter 60hz/60hz
  4031b6:	aa0b      	add	r2, sp, #44	; 0x2c
  4031b8:	2100      	movs	r1, #0
  4031ba:	20b0      	movs	r0, #176	; 0xb0
  4031bc:	4faf      	ldr	r7, [pc, #700]	; (40347c <IAM20685Original+0x388>)
  4031be:	47b8      	blx	r7
	value[0] = v0;
  4031c0:	2341      	movs	r3, #65	; 0x41
  4031c2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	value[1] = v1;
  4031c6:	23a1      	movs	r3, #161	; 0xa1
  4031c8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	spi_master_write_register(a0, 2, value);
  4031cc:	aa0b      	add	r2, sp, #44	; 0x2c
  4031ce:	2102      	movs	r1, #2
  4031d0:	2037      	movs	r0, #55	; 0x37
  4031d2:	4eab      	ldr	r6, [pc, #684]	; (403480 <IAM20685Original+0x38c>)
  4031d4:	47b0      	blx	r6
	delay_us(10);
  4031d6:	2056      	movs	r0, #86	; 0x56
  4031d8:	4daa      	ldr	r5, [pc, #680]	; (403484 <IAM20685Original+0x390>)
  4031da:	47a8      	blx	r5
	
	spi_master_read_register(0xB8, 0, value);//CMD:B8 00 00 A3, G and A X filter 60hz/60hz
  4031dc:	aa0b      	add	r2, sp, #44	; 0x2c
  4031de:	2100      	movs	r1, #0
  4031e0:	20b8      	movs	r0, #184	; 0xb8
  4031e2:	47b8      	blx	r7
	value[0] = g0;
  4031e4:	2400      	movs	r4, #0
  4031e6:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	value[1] = g1;
  4031ea:	230f      	movs	r3, #15
  4031ec:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	spi_master_write_register(a1, 2, value);
  4031f0:	aa0b      	add	r2, sp, #44	; 0x2c
  4031f2:	2102      	movs	r1, #2
  4031f4:	2079      	movs	r0, #121	; 0x79
  4031f6:	47b0      	blx	r6
	delay_us(10);
  4031f8:	2056      	movs	r0, #86	; 0x56
  4031fa:	47a8      	blx	r5
		
	//set accel FSR=2.048g
	spi_master_read_register(0xFC, 0, value);//CMD:FC 00 06 62 change to bank6
  4031fc:	aa0b      	add	r2, sp, #44	; 0x2c
  4031fe:	4621      	mov	r1, r4
  403200:	20fc      	movs	r0, #252	; 0xfc
  403202:	47b8      	blx	r7
	value[0] = 0x06;
  403204:	2306      	movs	r3, #6
  403206:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	value[1] = 0x62;
  40320a:	f04f 0862 	mov.w	r8, #98	; 0x62
  40320e:	f88d 802d 	strb.w	r8, [sp, #45]	; 0x2d
	spi_master_write_register(0x00, 2, value);
  403212:	aa0b      	add	r2, sp, #44	; 0x2c
  403214:	2102      	movs	r1, #2
  403216:	4620      	mov	r0, r4
  403218:	47b0      	blx	r6
	delay_us(10);
  40321a:	2056      	movs	r0, #86	; 0x56
  40321c:	47a8      	blx	r5
	
	#if 1
	spi_master_read_register(0xD0, 0, value);//CMD:D0 00 04 62
  40321e:	aa0b      	add	r2, sp, #44	; 0x2c
  403220:	4621      	mov	r1, r4
  403222:	20d0      	movs	r0, #208	; 0xd0
  403224:	47b8      	blx	r7
	value[0] = 0x04;
  403226:	2304      	movs	r3, #4
  403228:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	value[1] = 0x62;
  40322c:	f88d 802d 	strb.w	r8, [sp, #45]	; 0x2d
	spi_master_write_register(0x00, 2, value);
  403230:	aa0b      	add	r2, sp, #44	; 0x2c
  403232:	2102      	movs	r1, #2
  403234:	4620      	mov	r0, r4
  403236:	47b0      	blx	r6
	delay_us(10);	
  403238:	2056      	movs	r0, #86	; 0x56
  40323a:	47a8      	blx	r5
		value[1] = 0x61;
		spi_master_write_register(0x00, 2, &value);
		delay_us(10);
	#endif
	//set gyro FSR=1966dps
	spi_master_read_register(0xFC, 0, value);//CMD:FC 00 07 63 change to bank7
  40323c:	aa0b      	add	r2, sp, #44	; 0x2c
  40323e:	4621      	mov	r1, r4
  403240:	20fc      	movs	r0, #252	; 0xfc
  403242:	47b8      	blx	r7
	value[0] = 0x07;
  403244:	2307      	movs	r3, #7
  403246:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	value[1] = 0x63;
  40324a:	2363      	movs	r3, #99	; 0x63
  40324c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	spi_master_write_register(0x00, 2, value);
  403250:	aa0b      	add	r2, sp, #44	; 0x2c
  403252:	2102      	movs	r1, #2
  403254:	4620      	mov	r0, r4
  403256:	47b0      	blx	r6
	delay_us(10);
  403258:	2056      	movs	r0, #86	; 0x56
  40325a:	47a8      	blx	r5
	
	spi_master_read_register(0xD0, 0, value);//CMD:D0 00 02 64
  40325c:	aa0b      	add	r2, sp, #44	; 0x2c
  40325e:	4621      	mov	r1, r4
  403260:	20d0      	movs	r0, #208	; 0xd0
  403262:	47b8      	blx	r7
	value[0] = 0x02;
  403264:	f04f 0802 	mov.w	r8, #2
  403268:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
	value[1] = 0x64;
  40326c:	f04f 0964 	mov.w	r9, #100	; 0x64
  403270:	f88d 902d 	strb.w	r9, [sp, #45]	; 0x2d
	spi_master_write_register(0x00, 2, value);
  403274:	aa0b      	add	r2, sp, #44	; 0x2c
  403276:	4641      	mov	r1, r8
  403278:	4620      	mov	r0, r4
  40327a:	47b0      	blx	r6
	delay_us(10);	
  40327c:	2056      	movs	r0, #86	; 0x56
  40327e:	47a8      	blx	r5
	
	spi_master_read_register(0xFC, 0, value);//CMD:FC 00 00 64 change back to bank0
  403280:	aa0b      	add	r2, sp, #44	; 0x2c
  403282:	4621      	mov	r1, r4
  403284:	20fc      	movs	r0, #252	; 0xfc
  403286:	47b8      	blx	r7
	value[0] = 0x00;
  403288:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	value[1] = 0x64;
  40328c:	f88d 902d 	strb.w	r9, [sp, #45]	; 0x2d
	spi_master_write_register(0x00, 2, value);
  403290:	aa0b      	add	r2, sp, #44	; 0x2c
  403292:	4641      	mov	r1, r8
  403294:	4620      	mov	r0, r4
  403296:	47b0      	blx	r6
	delay_us(10);	
  403298:	2056      	movs	r0, #86	; 0x56
  40329a:	47a8      	blx	r5

	while(1)
	{		
	delay_us(10);
  40329c:	46a8      	mov	r8, r5
  40329e:	2056      	movs	r0, #86	; 0x56
  4032a0:	47c0      	blx	r8
	if (1){
	//if (int_trigger){

	value[0] = 0x00; //	CMD:000000F1
  4032a2:	2400      	movs	r4, #0
  4032a4:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	value[1] = 0x00;
  4032a8:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
	value[2] = 0xF1;
  4032ac:	23f1      	movs	r3, #241	; 0xf1
  4032ae:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	spi_master_write_register(0x00, 3, value);
  4032b2:	aa0b      	add	r2, sp, #44	; 0x2c
  4032b4:	2103      	movs	r1, #3
  4032b6:	4620      	mov	r0, r4
  4032b8:	4e71      	ldr	r6, [pc, #452]	; (403480 <IAM20685Original+0x38c>)
  4032ba:	47b0      	blx	r6
	delay_us(5);
  4032bc:	202b      	movs	r0, #43	; 0x2b
  4032be:	47c0      	blx	r8
//	spi_master_read_register(0x00, 2, value);
	spi_master_read_register(0x00, 3, value); //!PRM
  4032c0:	aa0b      	add	r2, sp, #44	; 0x2c
  4032c2:	2103      	movs	r1, #3
  4032c4:	4620      	mov	r0, r4
  4032c6:	4d6d      	ldr	r5, [pc, #436]	; (40347c <IAM20685Original+0x388>)
  4032c8:	47a8      	blx	r5
	gx = (short)(value[0] << 8 | value[1]);
  4032ca:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  4032ce:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
  4032d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4032d6:	b21b      	sxth	r3, r3
  4032d8:	9307      	str	r3, [sp, #28]
	delay_us(5);	
  4032da:	202b      	movs	r0, #43	; 0x2b
  4032dc:	47c0      	blx	r8
	
	value[0] = 0x00; //	CMD:040000DC
  4032de:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	value[1] = 0x00;
  4032e2:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
	value[2] = 0xDC;
  4032e6:	23dc      	movs	r3, #220	; 0xdc
  4032e8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	spi_master_write_register(0x04, 3, value);
  4032ec:	aa0b      	add	r2, sp, #44	; 0x2c
  4032ee:	2103      	movs	r1, #3
  4032f0:	2004      	movs	r0, #4
  4032f2:	47b0      	blx	r6
	delay_us(5);
  4032f4:	202b      	movs	r0, #43	; 0x2b
  4032f6:	47c0      	blx	r8
	spi_master_read_register(0x04, 3, value);
  4032f8:	aa0b      	add	r2, sp, #44	; 0x2c
  4032fa:	2103      	movs	r1, #3
  4032fc:	2004      	movs	r0, #4
  4032fe:	47a8      	blx	r5
	gy = (short)(value[0] << 8 | value[1]);
  403300:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
  403304:	f89d a02d 	ldrb.w	sl, [sp, #45]	; 0x2d
  403308:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
  40330c:	fa0f fa8a 	sxth.w	sl, sl
	delay_us(5);
  403310:	202b      	movs	r0, #43	; 0x2b
  403312:	47c0      	blx	r8
	
	value[0] = 0x00; //	CMD:080000AB
  403314:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	value[1] = 0x00;
  403318:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
	value[2] = 0xAB;
  40331c:	23ab      	movs	r3, #171	; 0xab
  40331e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	spi_master_write_register(0x08, 3, value);
  403322:	aa0b      	add	r2, sp, #44	; 0x2c
  403324:	2103      	movs	r1, #3
  403326:	2008      	movs	r0, #8
  403328:	47b0      	blx	r6
	delay_us(5);
  40332a:	202b      	movs	r0, #43	; 0x2b
  40332c:	47c0      	blx	r8
	spi_master_read_register(0x08, 3, value);
  40332e:	aa0b      	add	r2, sp, #44	; 0x2c
  403330:	2103      	movs	r1, #3
  403332:	2008      	movs	r0, #8
  403334:	47a8      	blx	r5
	gz = (short)(value[0] << 8 | value[1]);
  403336:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
  40333a:	f89d b02d 	ldrb.w	fp, [sp, #45]	; 0x2d
  40333e:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
  403342:	fa0f fb8b 	sxth.w	fp, fp
	delay_us(5);
  403346:	202b      	movs	r0, #43	; 0x2b
  403348:	47c0      	blx	r8
	
	value[0] = 0x00; //	CMD:0C000086
  40334a:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	value[1] = 0x00;
  40334e:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
	value[2] = 0x86;
  403352:	2386      	movs	r3, #134	; 0x86
  403354:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	spi_master_write_register(0x0C, 3, value);
  403358:	aa0b      	add	r2, sp, #44	; 0x2c
  40335a:	2103      	movs	r1, #3
  40335c:	200c      	movs	r0, #12
  40335e:	47b0      	blx	r6
	delay_us(5);
  403360:	202b      	movs	r0, #43	; 0x2b
  403362:	47c0      	blx	r8
	spi_master_read_register(0x0C, 3, value);
  403364:	aa0b      	add	r2, sp, #44	; 0x2c
  403366:	2103      	movs	r1, #3
  403368:	200c      	movs	r0, #12
  40336a:	47a8      	blx	r5
	t1 = (short)(value[0] << 8 | value[1]);
  40336c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  403370:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
  403374:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403378:	b219      	sxth	r1, r3
  40337a:	9108      	str	r1, [sp, #32]
	delay_us(5);
  40337c:	202b      	movs	r0, #43	; 0x2b
  40337e:	47c0      	blx	r8

	value[0] = 0x00; //	CMD:10000045
  403380:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	value[1] = 0x00;
  403384:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
	value[2] = 0x45;
  403388:	2345      	movs	r3, #69	; 0x45
  40338a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	spi_master_write_register(0x10, 3, value);	
  40338e:	aa0b      	add	r2, sp, #44	; 0x2c
  403390:	2103      	movs	r1, #3
  403392:	2010      	movs	r0, #16
  403394:	47b0      	blx	r6
	delay_us(5);	
  403396:	202b      	movs	r0, #43	; 0x2b
  403398:	47c0      	blx	r8
	spi_master_read_register(0x10, 3, value);
  40339a:	aa0b      	add	r2, sp, #44	; 0x2c
  40339c:	2103      	movs	r1, #3
  40339e:	2010      	movs	r0, #16
  4033a0:	47a8      	blx	r5
	ax = (short)(value[0] << 8 | value[1]);
  4033a2:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  4033a6:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
  4033aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4033ae:	b218      	sxth	r0, r3
  4033b0:	9009      	str	r0, [sp, #36]	; 0x24
	delay_us(5);
  4033b2:	202b      	movs	r0, #43	; 0x2b
  4033b4:	47c0      	blx	r8
	
	value[0] = 0x00; //	CMD:14000068
  4033b6:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	value[1] = 0x00;
  4033ba:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
	value[2] = 0x68;
  4033be:	2368      	movs	r3, #104	; 0x68
  4033c0:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	spi_master_write_register(0x14, 3, value);	
  4033c4:	aa0b      	add	r2, sp, #44	; 0x2c
  4033c6:	2103      	movs	r1, #3
  4033c8:	2014      	movs	r0, #20
  4033ca:	47b0      	blx	r6
	delay_us(5);	
  4033cc:	202b      	movs	r0, #43	; 0x2b
  4033ce:	47c0      	blx	r8
	spi_master_read_register(0x14, 3, value);
  4033d0:	aa0b      	add	r2, sp, #44	; 0x2c
  4033d2:	2103      	movs	r1, #3
  4033d4:	2014      	movs	r0, #20
  4033d6:	47a8      	blx	r5
	ay = (short)(value[0] << 8 | value[1]);
  4033d8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
  4033dc:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
  4033e0:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  4033e4:	b23f      	sxth	r7, r7
	delay_us(5);
  4033e6:	202b      	movs	r0, #43	; 0x2b
  4033e8:	47c0      	blx	r8
		
	value[0] = 0x00; //	CMD:1800001F
  4033ea:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	value[1] = 0x00;
  4033ee:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
	value[2] = 0x1F;
  4033f2:	231f      	movs	r3, #31
  4033f4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	spi_master_write_register(0x18, 3, value);	
  4033f8:	aa0b      	add	r2, sp, #44	; 0x2c
  4033fa:	2103      	movs	r1, #3
  4033fc:	2018      	movs	r0, #24
  4033fe:	47b0      	blx	r6
	delay_us(5);	
  403400:	202b      	movs	r0, #43	; 0x2b
  403402:	47c0      	blx	r8
	spi_master_read_register(0x18, 3, value);
  403404:	aa0b      	add	r2, sp, #44	; 0x2c
  403406:	2103      	movs	r1, #3
  403408:	2018      	movs	r0, #24
  40340a:	47a8      	blx	r5
	az = (short)(value[0] << 8 | value[1]);	
  40340c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
  403410:	f89d 902d 	ldrb.w	r9, [sp, #45]	; 0x2d
  403414:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
  403418:	fa0f f989 	sxth.w	r9, r9
	delay_us(5);	
  40341c:	202b      	movs	r0, #43	; 0x2b
  40341e:	47c0      	blx	r8
		
	value[0] = 0x00; //	CMD:1C000032
  403420:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	value[1] = 0x00;
  403424:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
	value[2] = 0x32;
  403428:	2332      	movs	r3, #50	; 0x32
  40342a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	spi_master_write_register(0x1C, 3, value);
  40342e:	aa0b      	add	r2, sp, #44	; 0x2c
  403430:	2103      	movs	r1, #3
  403432:	201c      	movs	r0, #28
  403434:	47b0      	blx	r6
	delay_us(5);
  403436:	202b      	movs	r0, #43	; 0x2b
  403438:	47c0      	blx	r8
	spi_master_read_register(0x1C, 3, value);
  40343a:	aa0b      	add	r2, sp, #44	; 0x2c
  40343c:	2103      	movs	r1, #3
  40343e:	201c      	movs	r0, #28
  403440:	47a8      	blx	r5
	t2 = (short)(value[0] << 8 | value[1]);
  403442:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
  403446:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
  40344a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  40344e:	b224      	sxth	r4, r4
	delay_us(5);
  403450:	202b      	movs	r0, #43	; 0x2b
  403452:	47c0      	blx	r8
	
	printf("%d,%d,  %d,%d,%d,  %d,%d,%d\r\n", t1, t2, ax, ay, az, gx, gy, gz);
  403454:	f8cd b010 	str.w	fp, [sp, #16]
  403458:	f8cd a00c 	str.w	sl, [sp, #12]
  40345c:	9a07      	ldr	r2, [sp, #28]
  40345e:	9202      	str	r2, [sp, #8]
  403460:	f8cd 9004 	str.w	r9, [sp, #4]
  403464:	9700      	str	r7, [sp, #0]
  403466:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403468:	4622      	mov	r2, r4
  40346a:	9908      	ldr	r1, [sp, #32]
  40346c:	4806      	ldr	r0, [pc, #24]	; (403488 <IAM20685Original+0x394>)
  40346e:	4c07      	ldr	r4, [pc, #28]	; (40348c <IAM20685Original+0x398>)
  403470:	47a0      	blx	r4
  403472:	e714      	b.n	40329e <IAM20685Original+0x1aa>
  403474:	00407e01 	.word	0x00407e01
  403478:	004030b5 	.word	0x004030b5
  40347c:	004040b5 	.word	0x004040b5
  403480:	00403f89 	.word	0x00403f89
  403484:	20000001 	.word	0x20000001
  403488:	0040ec88 	.word	0x0040ec88
  40348c:	00407d2d 	.word	0x00407d2d

00403490 <IAM20685>:




void IAM20685() //command=5, Crystal-2
{
  403490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403494:	b097      	sub	sp, #92	; 0x5c
	uint8_t value[20];
	//uint8_t result = 0;
	//int gx, gy, gz, ax, ay, az, t1, t2;
	int16_t readArr[20] , whoami;
	
	printf("Original\r\n");
  403496:	4870      	ldr	r0, [pc, #448]	; (403658 <IAM20685+0x1c8>)
  403498:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403698 <IAM20685+0x208>
  40349c:	47c0      	blx	r8
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40349e:	4b6f      	ldr	r3, [pc, #444]	; (40365c <IAM20685+0x1cc>)
  4034a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4034a4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4034a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4034aa:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_dir(CRYSTAL_RST, IOPORT_DIR_OUTPUT); //
	ioport_set_pin_level(CRYSTAL_RST, IOPORT_PIN_LEVEL_HIGH); //
	
	ext_int_initialize(ext_interrupt_handler);
  4034ac:	486c      	ldr	r0, [pc, #432]	; (403660 <IAM20685+0x1d0>)
  4034ae:	4b6d      	ldr	r3, [pc, #436]	; (403664 <IAM20685+0x1d4>)
  4034b0:	4798      	blx	r3
	
	spi_master_init1(); //for ver-B and D+ board EVB
  4034b2:	4b6d      	ldr	r3, [pc, #436]	; (403668 <IAM20685+0x1d8>)
  4034b4:	4798      	blx	r3
	//spi_master_init(); //for ver-A board EVB and on board sensor
	
	//spiSpy(true);
	IAM20685_chipunlock_PRM();
  4034b6:	4b6d      	ldr	r3, [pc, #436]	; (40366c <IAM20685+0x1dc>)
  4034b8:	4798      	blx	r3
	//spiSpy(false);
	//printf("Unlock done: \r\n");
	//getchar();
	
	value[0] = 0x00; //	CMD:2C0000F3
  4034ba:	f04f 0900 	mov.w	r9, #0
  4034be:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
	value[1] = 0x00;
  4034c2:	f88d 9045 	strb.w	r9, [sp, #69]	; 0x45
	value[2] = 0xF3;
  4034c6:	23f3      	movs	r3, #243	; 0xf3
  4034c8:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
	spi_master_write_register(0x2C, 3, value);
  4034cc:	aa11      	add	r2, sp, #68	; 0x44
  4034ce:	2103      	movs	r1, #3
  4034d0:	202c      	movs	r0, #44	; 0x2c
  4034d2:	4d67      	ldr	r5, [pc, #412]	; (403670 <IAM20685+0x1e0>)
  4034d4:	47a8      	blx	r5
	delay_us(10);
  4034d6:	2056      	movs	r0, #86	; 0x56
  4034d8:	4c66      	ldr	r4, [pc, #408]	; (403674 <IAM20685+0x1e4>)
  4034da:	47a0      	blx	r4
	spi_master_read_register(0x2c, 2, value);
  4034dc:	aa11      	add	r2, sp, #68	; 0x44
  4034de:	2102      	movs	r1, #2
  4034e0:	202c      	movs	r0, #44	; 0x2c
  4034e2:	4e65      	ldr	r6, [pc, #404]	; (403678 <IAM20685+0x1e8>)
  4034e4:	47b0      	blx	r6
	delay_us(10);
  4034e6:	2056      	movs	r0, #86	; 0x56
  4034e8:	47a0      	blx	r4
	printf("IAM20685 WHOAMI = %04x\r\n", (value[0] << 8 | value[1]));
  4034ea:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
  4034ee:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
  4034f2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  4034f6:	4861      	ldr	r0, [pc, #388]	; (40367c <IAM20685+0x1ec>)
  4034f8:	4f61      	ldr	r7, [pc, #388]	; (403680 <IAM20685+0x1f0>)
  4034fa:	47b8      	blx	r7
	//spiSpy(true);
	#if 0
	printf("current write unlock ");
	IAM20685_writeunlock();
	#else
	printf("API write unlock ");
  4034fc:	4861      	ldr	r0, [pc, #388]	; (403684 <IAM20685+0x1f4>)
  4034fe:	47b8      	blx	r7
	IAM20685_writeunlock_PRM();
  403500:	4b61      	ldr	r3, [pc, #388]	; (403688 <IAM20685+0x1f8>)
  403502:	4798      	blx	r3
	#endif
	//spiSpy(false);
	
	spi_master_read_register(0xB0, 0, value);//CMD:B0 00 00 F9, G and A YZ filter 60hz/60hz
  403504:	aa11      	add	r2, sp, #68	; 0x44
  403506:	4649      	mov	r1, r9
  403508:	20b0      	movs	r0, #176	; 0xb0
  40350a:	47b0      	blx	r6
	value[0] = 0x00;
  40350c:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
	value[1] = 0xF9;
  403510:	23f9      	movs	r3, #249	; 0xf9
  403512:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
	spi_master_write_register(0x00, 2, value);
  403516:	aa11      	add	r2, sp, #68	; 0x44
  403518:	2102      	movs	r1, #2
  40351a:	4648      	mov	r0, r9
  40351c:	47a8      	blx	r5
	delay_us(10);
  40351e:	2056      	movs	r0, #86	; 0x56
  403520:	47a0      	blx	r4
	

	spi_master_read_register(0xB8, 0, value);//CMD:B8 00 00 A3, G and A X filter 60hz/60hz
  403522:	aa11      	add	r2, sp, #68	; 0x44
  403524:	4649      	mov	r1, r9
  403526:	20b8      	movs	r0, #184	; 0xb8
  403528:	47b0      	blx	r6
	value[0] = 0x00;
  40352a:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
	value[1] = 0xA3;
  40352e:	23a3      	movs	r3, #163	; 0xa3
  403530:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
	spi_master_write_register(0x00, 2, value);
  403534:	aa11      	add	r2, sp, #68	; 0x44
  403536:	2102      	movs	r1, #2
  403538:	4648      	mov	r0, r9
  40353a:	47a8      	blx	r5
	delay_us(10);
  40353c:	2056      	movs	r0, #86	; 0x56
  40353e:	47a0      	blx	r4
	
	//set accel FSR=2.048g

	spi_master_read_register(0xFC, 0, value);//CMD:FC 00 06 62 change to bank6
  403540:	aa11      	add	r2, sp, #68	; 0x44
  403542:	4649      	mov	r1, r9
  403544:	20fc      	movs	r0, #252	; 0xfc
  403546:	47b0      	blx	r6
	value[0] = 0x06;
  403548:	2306      	movs	r3, #6
  40354a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	value[1] = 0x62;
  40354e:	2762      	movs	r7, #98	; 0x62
  403550:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
	spi_master_write_register(0x00, 2, value);
  403554:	aa11      	add	r2, sp, #68	; 0x44
  403556:	2102      	movs	r1, #2
  403558:	4648      	mov	r0, r9
  40355a:	47a8      	blx	r5
	delay_us(10);
  40355c:	2056      	movs	r0, #86	; 0x56
  40355e:	47a0      	blx	r4
	
	#if 1
	spi_master_read_register(0xD0, 0, value);//CMD:D0 00 04 62
  403560:	aa11      	add	r2, sp, #68	; 0x44
  403562:	4649      	mov	r1, r9
  403564:	20d0      	movs	r0, #208	; 0xd0
  403566:	47b0      	blx	r6
	value[0] = 0x04;
  403568:	2304      	movs	r3, #4
  40356a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	value[1] = 0x62;
  40356e:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
	spi_master_write_register(0x00, 2, value);
  403572:	aa11      	add	r2, sp, #68	; 0x44
  403574:	2102      	movs	r1, #2
  403576:	4648      	mov	r0, r9
  403578:	47a8      	blx	r5
	delay_us(10);
  40357a:	2056      	movs	r0, #86	; 0x56
  40357c:	47a0      	blx	r4
	delay_us(10);
	#endif


	//set gyro FSR=1966dps
	spi_master_read_register(0xFC, 0, value);//CMD:FC 00 07 63 change to bank7
  40357e:	aa11      	add	r2, sp, #68	; 0x44
  403580:	4649      	mov	r1, r9
  403582:	20fc      	movs	r0, #252	; 0xfc
  403584:	47b0      	blx	r6
	value[0] = 0x07;
  403586:	2307      	movs	r3, #7
  403588:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	value[1] = 0x63;
  40358c:	2363      	movs	r3, #99	; 0x63
  40358e:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
	spi_master_write_register(0x00, 2, value);
  403592:	aa11      	add	r2, sp, #68	; 0x44
  403594:	2102      	movs	r1, #2
  403596:	4648      	mov	r0, r9
  403598:	47a8      	blx	r5
	delay_us(10);
  40359a:	2056      	movs	r0, #86	; 0x56
  40359c:	47a0      	blx	r4
	
	spi_master_read_register(0xD0, 0, value);//CMD:D0 00 02 64
  40359e:	aa11      	add	r2, sp, #68	; 0x44
  4035a0:	4649      	mov	r1, r9
  4035a2:	20d0      	movs	r0, #208	; 0xd0
  4035a4:	47b0      	blx	r6
	value[0] = 0x02;
  4035a6:	2702      	movs	r7, #2
  4035a8:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
	value[1] = 0x64;
  4035ac:	f04f 0a64 	mov.w	sl, #100	; 0x64
  4035b0:	f88d a045 	strb.w	sl, [sp, #69]	; 0x45
	spi_master_write_register(0x00, 2, value);
  4035b4:	aa11      	add	r2, sp, #68	; 0x44
  4035b6:	4639      	mov	r1, r7
  4035b8:	4648      	mov	r0, r9
  4035ba:	47a8      	blx	r5
	delay_us(10);
  4035bc:	2056      	movs	r0, #86	; 0x56
  4035be:	47a0      	blx	r4
	
	spi_master_read_register(0xFC, 0, value);//CMD:FC 00 00 64 change back to bank0
  4035c0:	aa11      	add	r2, sp, #68	; 0x44
  4035c2:	4649      	mov	r1, r9
  4035c4:	20fc      	movs	r0, #252	; 0xfc
  4035c6:	47b0      	blx	r6
	value[0] = 0x00;
  4035c8:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
	value[1] = 0x64;
  4035cc:	f88d a045 	strb.w	sl, [sp, #69]	; 0x45
	spi_master_write_register(0x00, 2, value);
  4035d0:	aa11      	add	r2, sp, #68	; 0x44
  4035d2:	4639      	mov	r1, r7
  4035d4:	4648      	mov	r0, r9
  4035d6:	47a8      	blx	r5
	delay_us(10);
  4035d8:	2056      	movs	r0, #86	; 0x56
  4035da:	47a0      	blx	r4

regAddrType reg;

	printf("$$$ \r\n");
  4035dc:	482b      	ldr	r0, [pc, #172]	; (40368c <IAM20685+0x1fc>)
  4035de:	47c0      	blx	r8
	for(int i = 0; !userexit(); i++)  // forever
  4035e0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 40369c <IAM20685+0x20c>
	{
		//    if (i==0) spiSpy(true);
		//   else if (i==1) { spiSpy(false); getchar(); }
		printHdr(i);
  4035e4:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 4036a0 <IAM20685+0x210>
		for (reg=Gx; reg<=T2; reg++)
		{
			readArr[reg] = readReg(0, reg);
  4035e8:	4f29      	ldr	r7, [pc, #164]	; (403690 <IAM20685+0x200>)
	for(int i = 0; !userexit(); i++)  // forever
  4035ea:	e01c      	b.n	403626 <IAM20685+0x196>
			whoami = readReg(0, Fxd);
		}
		printf("%7d %7d %7d %7d %7d %7d %4d %4d %04x\r\n",	 readArr[Az], readArr[Ay], readArr[Ax]
  4035ec:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  4035f0:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
  4035f4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
  4035f8:	f9bd 0042 	ldrsh.w	r0, [sp, #66]	; 0x42
  4035fc:	9005      	str	r0, [sp, #20]
  4035fe:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
  403602:	9004      	str	r0, [sp, #16]
  403604:	f9bd 0022 	ldrsh.w	r0, [sp, #34]	; 0x22
  403608:	9003      	str	r0, [sp, #12]
  40360a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
  40360e:	9002      	str	r0, [sp, #8]
  403610:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
  403614:	9001      	str	r0, [sp, #4]
  403616:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
  40361a:	9000      	str	r0, [sp, #0]
  40361c:	481d      	ldr	r0, [pc, #116]	; (403694 <IAM20685+0x204>)
  40361e:	4c18      	ldr	r4, [pc, #96]	; (403680 <IAM20685+0x1f0>)
  403620:	47a0      	blx	r4
	for(int i = 0; !userexit(); i++)  // forever
  403622:	f109 0901 	add.w	r9, r9, #1
  403626:	47d0      	blx	sl
  403628:	b998      	cbnz	r0, 403652 <IAM20685+0x1c2>
		printHdr(i);
  40362a:	4648      	mov	r0, r9
  40362c:	47d8      	blx	fp
  40362e:	f10d 061a 	add.w	r6, sp, #26
  403632:	2400      	movs	r4, #0
			readArr[reg] = readReg(0, reg);
  403634:	4625      	mov	r5, r4
			whoami = readReg(0, Fxd);
  403636:	f04f 080b 	mov.w	r8, #11
			readArr[reg] = readReg(0, reg);
  40363a:	b2e1      	uxtb	r1, r4
  40363c:	4628      	mov	r0, r5
  40363e:	47b8      	blx	r7
  403640:	f826 0f02 	strh.w	r0, [r6, #2]!
			whoami = readReg(0, Fxd);
  403644:	4641      	mov	r1, r8
  403646:	4628      	mov	r0, r5
  403648:	47b8      	blx	r7
  40364a:	3401      	adds	r4, #1
		for (reg=Gx; reg<=T2; reg++)
  40364c:	2c08      	cmp	r4, #8
  40364e:	d1f4      	bne.n	40363a <IAM20685+0x1aa>
  403650:	e7cc      	b.n	4035ec <IAM20685+0x15c>
		,readArr[Gz], readArr[Gy], readArr[Gx]
		,readArr[T1], readArr[T2], readArr[FXDARRINDEX]
		);
	}
			
}
  403652:	b017      	add	sp, #92	; 0x5c
  403654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403658:	0040ec1c 	.word	0x0040ec1c
  40365c:	400e0e00 	.word	0x400e0e00
  403660:	00401f35 	.word	0x00401f35
  403664:	00401f51 	.word	0x00401f51
  403668:	00403e51 	.word	0x00403e51
  40366c:	00403049 	.word	0x00403049
  403670:	00403f89 	.word	0x00403f89
  403674:	20000001 	.word	0x20000001
  403678:	004040b5 	.word	0x004040b5
  40367c:	0040ec6c 	.word	0x0040ec6c
  403680:	00407d2d 	.word	0x00407d2d
  403684:	0040ec28 	.word	0x0040ec28
  403688:	004030b5 	.word	0x004030b5
  40368c:	0040ec3c 	.word	0x0040ec3c
  403690:	00403cdd 	.word	0x00403cdd
  403694:	0040ec44 	.word	0x0040ec44
  403698:	00407df1 	.word	0x00407df1
  40369c:	00402069 	.word	0x00402069
  4036a0:	00402a05 	.word	0x00402a05

004036a4 <IAM20685_crc_calculatefast>:
{
	uint32_t crc;
	uint32_t stepzor = 0x000E8000;
	uint32_t msb = 0x00800000;

	data ^= 0x00C40000;  //steps 24 to 16
  4036a4:	f480 0344 	eor.w	r3, r0, #12845056	; 0xc40000
	if((data & (msb)) !=0)
  4036a8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
	data ^= stepzor;   // step 15
  4036ac:	bf1c      	itt	ne
  4036ae:	f480 034a 	eorne.w	r3, r0, #13238272	; 0xca0000
  4036b2:	f483 4300 	eorne.w	r3, r3, #32768	; 0x8000
	#if 0
	printcrc(data, 15);
	#endif
	if ((data & (msb>>1)) != 0)
  4036b6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
	data ^= (stepzor >> 1);  //step 14
  4036ba:	bf18      	it	ne
  4036bc:	f483 23e8 	eorne.w	r3, r3, #475136	; 0x74000
	#if 0
	printcrc(data, 14);
	#endif

	if ((data & (msb>>2)) != 0)
  4036c0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
	data ^= (stepzor >> 2);  //step 13
  4036c4:	bf18      	it	ne
  4036c6:	f483 3368 	eorne.w	r3, r3, #237568	; 0x3a000
	#if 0
	printcrc(data, 13);
	#endif

	if ((data & (msb >> 3)) != 0)
  4036ca:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
	data ^= (stepzor >> 3);  //step 12
  4036ce:	bf18      	it	ne
  4036d0:	f483 33e8 	eorne.w	r3, r3, #118784	; 0x1d000
	#if 0
	printcrc(data, 12);
	#endif

	if ((data & (msb >> 4)) != 0)
  4036d4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
	data ^= (stepzor >> 4);  //step 11
  4036d8:	bf18      	it	ne
  4036da:	f483 4368 	eorne.w	r3, r3, #59392	; 0xe800
	#if 0
	printcrc(data, 11);
	#endif
	if ((data & (msb >> 5)) != 0)
  4036de:	f413 2f80 	tst.w	r3, #262144	; 0x40000
	data ^= (stepzor >> 5);  //step 10
  4036e2:	bf18      	it	ne
  4036e4:	f483 43e8 	eorne.w	r3, r3, #29696	; 0x7400
	#if 0
	printcrc(data, 10);
	#endif
	if ((data & (msb >> 6)) != 0)
  4036e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
	data ^= (stepzor >> 6);  //step 9
  4036ec:	bf18      	it	ne
  4036ee:	f483 5368 	eorne.w	r3, r3, #14848	; 0x3a00
	#if 0
	printcrc(data, 9);
	#endif

	if ((data & (msb >> 7)) != 0)
  4036f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
	data ^= (stepzor >> 7);  //step 8
  4036f6:	bf18      	it	ne
  4036f8:	f483 53e8 	eorne.w	r3, r3, #7424	; 0x1d00
	#if 0
	printcrc(data, 8);
	#endif
	if ((data & (msb >> 8)) != 0)
  4036fc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
	data ^= (stepzor >> 8);  //step 7
  403700:	bf18      	it	ne
  403702:	f483 6368 	eorne.w	r3, r3, #3712	; 0xe80
	#if 0
	printcrc(data, 7);
	#endif

	if ((data & (msb >> 9)) != 0)
  403706:	f413 4f80 	tst.w	r3, #16384	; 0x4000
	data ^= (stepzor >> 9);  //step 6
  40370a:	bf18      	it	ne
  40370c:	f483 63e8 	eorne.w	r3, r3, #1856	; 0x740
	#if 0
	printcrc(data, 6);
	#endif

	if ((data & (msb >> 10)) != 0)
  403710:	f413 5f00 	tst.w	r3, #8192	; 0x2000
	data ^= (stepzor >> 10);  //step 5
  403714:	bf18      	it	ne
  403716:	f483 7368 	eorne.w	r3, r3, #928	; 0x3a0
	#if 0
	printcrc(data, 5);
	#endif

	if ((data & (msb >> 11)) != 0)
  40371a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
	data ^= (stepzor >> 11);  //step 4
  40371e:	bf18      	it	ne
  403720:	f483 73e8 	eorne.w	r3, r3, #464	; 0x1d0
	#if 0
	printcrc(data, 4);
	#endif

	if ((data & (msb >> 12)) != 0)
  403724:	f413 6f00 	tst.w	r3, #2048	; 0x800
	data ^= (stepzor >> 12);  //step 3
  403728:	bf18      	it	ne
  40372a:	f083 03e8 	eorne.w	r3, r3, #232	; 0xe8
	#if 0
	printcrc(data, 3);
	#endif

	if ((data & (msb >> 13)) != 0)
  40372e:	f413 6f80 	tst.w	r3, #1024	; 0x400
	data ^= (stepzor >> 13);  //step 2
  403732:	bf18      	it	ne
  403734:	f083 0374 	eorne.w	r3, r3, #116	; 0x74
	#if 0
	printcrc(data, 2);
	#endif

	if ((data & (msb >> 14)) != 0)
  403738:	f413 7f00 	tst.w	r3, #512	; 0x200
	data ^= (stepzor >> 14);  //step 1
  40373c:	bf18      	it	ne
  40373e:	f083 033a 	eorne.w	r3, r3, #58	; 0x3a
	#if 0
	printcrc(data, 1);
	#endif

	if ((data & (msb >> 15)) != 0)
  403742:	f413 7f80 	tst.w	r3, #256	; 0x100
	data ^= (stepzor >> 15);  //step 0
  403746:	bf18      	it	ne
  403748:	f083 031d 	eorne.w	r3, r3, #29
	printcrc(data, 0);
	#endif



	crc = (data ^ 0x000000FF);
  40374c:	f083 00ff 	eor.w	r0, r3, #255	; 0xff
	return (Byte)crc;
}
  403750:	b2c0      	uxtb	r0, r0
  403752:	4770      	bx	lr

00403754 <IAM20685_crc_calculate1>:
	//printf("CRCCalculate: 0x%x\n", crc_old);
	return (crc_old ^ 0xff);
}

unsigned char IAM20685_crc_calculate1(unsigned long data)
{
  403754:	b470      	push	{r4, r5, r6}
  403756:	2117      	movs	r1, #23
	unsigned char temp_calc1;
	unsigned char temp_calc2;
	unsigned long temp_calc3;
	signed char i;

	crc_old = 0xFF;
  403758:	24ff      	movs	r4, #255	; 0xff
		temp_calc3 = data >> i;
		temp_calc2 = (unsigned char)temp_calc3;
		temp_calc2 &= 0x01;
		if (temp_calc1)
		{
			temp_calc1 = 0x0E;
  40375a:	260e      	movs	r6, #14
			temp_calc2 ^= 0x01;
		}
		else temp_calc1 = 0;
  40375c:	2500      	movs	r5, #0
  40375e:	e00c      	b.n	40377a <IAM20685_crc_calculate1+0x26>
  403760:	43d2      	mvns	r2, r2
			temp_calc2 ^= 0x01;
  403762:	f002 0201 	and.w	r2, r2, #1
			temp_calc1 = 0x0E;
  403766:	4633      	mov	r3, r6

		crc_old ^= temp_calc1;
  403768:	4063      	eors	r3, r4
		crc_new = crc_old << 1;
		crc_new += (unsigned long)temp_calc2;
  40376a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  40376e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
  403772:	3901      	subs	r1, #1
	for (i = 23; i >= 0; i--)
  403774:	f1b1 3fff 	cmp.w	r1, #4294967295
  403778:	d009      	beq.n	40378e <IAM20685_crc_calculate1+0x3a>
		temp_calc3 = data >> i;
  40377a:	fa20 f201 	lsr.w	r2, r0, r1
		temp_calc2 = (unsigned char)temp_calc3;
  40377e:	b2d2      	uxtb	r2, r2
		if (temp_calc1)
  403780:	f014 0f80 	tst.w	r4, #128	; 0x80
  403784:	d1ec      	bne.n	403760 <IAM20685_crc_calculate1+0xc>
		temp_calc2 &= 0x01;
  403786:	f002 0201 	and.w	r2, r2, #1
		else temp_calc1 = 0;
  40378a:	462b      	mov	r3, r5
  40378c:	e7ec      	b.n	403768 <IAM20685_crc_calculate1+0x14>
		crc_old = crc_new;
	}

	//printf("CRCCalculate: 0x%x\n", crc_old);
	return (crc_old ^ 0xff);
  40378e:	43e0      	mvns	r0, r4
}
  403790:	b2c0      	uxtb	r0, r0
  403792:	bc70      	pop	{r4, r5, r6}
  403794:	4770      	bx	lr

00403796 <numRegArray>:

uint16_t numRegArray()
{
	int i = sizeof(regArray)/sizeof(regArray[0]);
	return i;	
}
  403796:	2036      	movs	r0, #54	; 0x36
  403798:	4770      	bx	lr
	...

0040379c <yamRead>:
										}; */

static const  writeBitmask = 0x80000000;  
//**********************************
int16_t yamRead(regBankType b, regAddrType a)
{
  40379c:	b510      	push	{r4, lr}
  40379e:	b082      	sub	sp, #8
	uint16_t v;
	uint8_t value[3];
   {
	  uint32_t temp;
      temp = (uint32_t) ((a<<2) |  READ_BIT_MASK );
  4037a0:	008c      	lsls	r4, r1, #2
	  temp <<= 16;
  4037a2:	0489      	lsls	r1, r1, #18
	  uint8_t crc = IAM20685_crc_calculatefast(temp);
  4037a4:	f441 0000 	orr.w	r0, r1, #8388608	; 0x800000
  4037a8:	4b0b      	ldr	r3, [pc, #44]	; (4037d8 <yamRead+0x3c>)
  4037aa:	4798      	blx	r3
      value[0] = crc;
  4037ac:	aa02      	add	r2, sp, #8
  4037ae:	f802 0d04 	strb.w	r0, [r2, #-4]!
   }
	
//	spi_master_read_register(a<<2, 2, value);
	spi_master_read_register(a<<2, 3, value);
  4037b2:	2103      	movs	r1, #3
  4037b4:	f004 00fc 	and.w	r0, r4, #252	; 0xfc
  4037b8:	4b08      	ldr	r3, [pc, #32]	; (4037dc <yamRead+0x40>)
  4037ba:	4798      	blx	r3
	
	v= value[0]<<8 | value[1];
  4037bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4037c0:	f89d 4005 	ldrb.w	r4, [sp, #5]
  4037c4:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  4037c8:	b224      	sxth	r4, r4
	
	delay_us(DELAYrw);
  4037ca:	2056      	movs	r0, #86	; 0x56
  4037cc:	4b04      	ldr	r3, [pc, #16]	; (4037e0 <yamRead+0x44>)
  4037ce:	4798      	blx	r3
	return v;
	
}
  4037d0:	4620      	mov	r0, r4
  4037d2:	b002      	add	sp, #8
  4037d4:	bd10      	pop	{r4, pc}
  4037d6:	bf00      	nop
  4037d8:	004036a5 	.word	0x004036a5
  4037dc:	004040b5 	.word	0x004040b5
  4037e0:	20000001 	.word	0x20000001

004037e4 <LKUNLKWrite>:
//**********************************
void LKUNLKWrite(regAddrType a, uint32_t v)
{
  4037e4:	b500      	push	{lr}
  4037e6:	b083      	sub	sp, #12
	//uint8_t crc;
	uint8_t value[3];

	writeVal = v;
	
	value[0] = (writeVal>>16) & LOWER8Of32;
  4037e8:	0c0b      	lsrs	r3, r1, #16
  4037ea:	f88d 3004 	strb.w	r3, [sp, #4]
	value[1] = (writeVal>>8) & LOWER8Of32;
  4037ee:	0a0b      	lsrs	r3, r1, #8
  4037f0:	f88d 3005 	strb.w	r3, [sp, #5]
	value[2] = writeVal & LOWER8Of32;
  4037f4:	f88d 1006 	strb.w	r1, [sp, #6]
	
    spi_master_write_register((a), 3, value); // to do err checking
  4037f8:	aa01      	add	r2, sp, #4
  4037fa:	2103      	movs	r1, #3
  4037fc:	4b03      	ldr	r3, [pc, #12]	; (40380c <LKUNLKWrite+0x28>)
  4037fe:	4798      	blx	r3
	   
	delay_us(DELAYrw);
  403800:	2056      	movs	r0, #86	; 0x56
  403802:	4b03      	ldr	r3, [pc, #12]	; (403810 <LKUNLKWrite+0x2c>)
  403804:	4798      	blx	r3
}
  403806:	b003      	add	sp, #12
  403808:	f85d fb04 	ldr.w	pc, [sp], #4
  40380c:	00403f89 	.word	0x00403f89
  403810:	20000001 	.word	0x20000001

00403814 <yamWrite>:

// if preservebits == false, *a=(v*f)  else, do a rmw
// if f == 0, only write the cmd/addr
Bool yamWrite(regBankType b, regAddrType a, uint32_t v, uint32_t f, bitpreserveType preservebits)
{
  403814:	b530      	push	{r4, r5, lr}
  403816:	b083      	sub	sp, #12
  403818:	460d      	mov	r5, r1
	uint32_t writeVal;
	uint32_t readVal;
	uint8_t crc;
	uint8_t value[3];

	writeVal = v & f;
  40381a:	ea02 0003 	and.w	r0, r2, r3
	}
	
	  
	//spi_master_read_register(a<<2, 0, value);
	
	writeVal = (((uint32_t)a)<<18 | writeVal) & ~(writeBitmask>>8);
  40381e:	ea40 4081 	orr.w	r0, r0, r1, lsl #18
  403822:	f3c0 0416 	ubfx	r4, r0, #0, #23
	crc = IAM20685_crc_calculate1(writeVal);
  403826:	4620      	mov	r0, r4
  403828:	4b0f      	ldr	r3, [pc, #60]	; (403868 <yamWrite+0x54>)
  40382a:	4798      	blx	r3
	writeVal = (writeVal <<8) | (((uint32_t) crc) & LOWER8Of32);
  40382c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
	value[0] = (writeVal>>16) & LOWER8Of32;
  403830:	0c03      	lsrs	r3, r0, #16
  403832:	f88d 3004 	strb.w	r3, [sp, #4]
	value[1] = (writeVal>>8) & LOWER8Of32;
  403836:	0a03      	lsrs	r3, r0, #8
  403838:	f88d 3005 	strb.w	r3, [sp, #5]
	value[2] = writeVal & LOWER8Of32;
  40383c:	b2c0      	uxtb	r0, r0
  40383e:	f88d 0006 	strb.w	r0, [sp, #6]
	if(value[2] == 0)
  403842:	b160      	cbz	r0, 40385e <yamWrite+0x4a>
	  printf("CRC = 0 \r\n");
    spi_master_write_register((a<<2), 3, value); // to do err checking
  403844:	00a8      	lsls	r0, r5, #2
  403846:	aa01      	add	r2, sp, #4
  403848:	2103      	movs	r1, #3
  40384a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  40384e:	4b07      	ldr	r3, [pc, #28]	; (40386c <yamWrite+0x58>)
  403850:	4798      	blx	r3
	   
	delay_us(DELAYrw);
  403852:	2056      	movs	r0, #86	; 0x56
  403854:	4b06      	ldr	r3, [pc, #24]	; (403870 <yamWrite+0x5c>)
  403856:	4798      	blx	r3
	return err;
}
  403858:	2000      	movs	r0, #0
  40385a:	b003      	add	sp, #12
  40385c:	bd30      	pop	{r4, r5, pc}
	  printf("CRC = 0 \r\n");
  40385e:	4805      	ldr	r0, [pc, #20]	; (403874 <yamWrite+0x60>)
  403860:	4b05      	ldr	r3, [pc, #20]	; (403878 <yamWrite+0x64>)
  403862:	4798      	blx	r3
  403864:	e7ee      	b.n	403844 <yamWrite+0x30>
  403866:	bf00      	nop
  403868:	00403755 	.word	0x00403755
  40386c:	00403f89 	.word	0x00403f89
  403870:	20000001 	.word	0x20000001
  403874:	0040eef8 	.word	0x0040eef8
  403878:	00407df1 	.word	0x00407df1

0040387c <appendcrcRegaddrData>:
       // delay_us(DELAYrw);
}


uint32_t appendcrcRegaddrData(regAddrType a, uint16_t v)
{
  40387c:	b510      	push	{r4, lr}
	uint8_t crc;
	uint32_t temp, protocolValue;
	
	temp = (uint32_t)  (  a<<16 | (v&LOWER16Of32));
  40387e:	ea41 4400 	orr.w	r4, r1, r0, lsl #16
 	crc = IAM20685_crc_calculatefast(temp);
  403882:	4620      	mov	r0, r4
  403884:	4b02      	ldr	r3, [pc, #8]	; (403890 <appendcrcRegaddrData+0x14>)
  403886:	4798      	blx	r3
	protocolValue =  temp<<8 | ((uint32_t) crc & LOWER8Of32);
    return protocolValue;
}
  403888:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
  40388c:	bd10      	pop	{r4, pc}
  40388e:	bf00      	nop
  403890:	004036a5 	.word	0x004036a5

00403894 <logCmdRespHist>:
//static uint32_t rsphist[CMDRESPHISTDEPTH+2] = {0,};



void logCmdRespHist(uint32_t cmd, uint32_t rsp)
{
  403894:	b410      	push	{r4}
	uint32_t * buffp;
	
	uint32_t i = protocolHist[CMDRESPindex].cmd;  
  403896:	4a0d      	ldr	r2, [pc, #52]	; (4038cc <logCmdRespHist+0x38>)
  403898:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	uint32_t d = protocolHist[CMDRESPindex].rsp;
  40389c:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
	
	protocolHist[i].cmd = cmd;
  4038a0:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
	protocolHist[i].rsp = rsp;	
  4038a4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4038a8:	6051      	str	r1, [r2, #4]
	i++;
  4038aa:	3301      	adds	r3, #1
	i =  i == CMDRESPHISTDEPTH ? 0: i;	
  4038ac:	2b10      	cmp	r3, #16
  4038ae:	bf08      	it	eq
  4038b0:	2300      	moveq	r3, #0
	protocolHist[CMDRESPindex].cmd = i;
  4038b2:	4a06      	ldr	r2, [pc, #24]	; (4038cc <logCmdRespHist+0x38>)
  4038b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	d = d == CMDRESPHISTDEPTH ? CMDRESPHISTDEPTH : d+1;
  4038b8:	2c10      	cmp	r4, #16
  4038ba:	bf14      	ite	ne
  4038bc:	3401      	addne	r4, #1
  4038be:	2410      	moveq	r4, #16
	protocolHist[CMDRESPindex].rsp = d;
  4038c0:	4b02      	ldr	r3, [pc, #8]	; (4038cc <logCmdRespHist+0x38>)
  4038c2:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

}
  4038c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4038ca:	4770      	bx	lr
  4038cc:	20013ffc 	.word	0x20013ffc

004038d0 <parseprintproto>:


static char sts[5][5] = {"Rsvd", "Succ", "WIP ", "ERR ", " OK "};

void parseprintproto (uint32_t proto, uint32_t iter, bool Cmd_resp, bool eol)
{
  4038d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4038d4:	4605      	mov	r5, r0
  4038d6:	461e      	mov	r6, r3
	uint8_t adr;
	uint16_t data;
	uint8_t crc;
	uint32_t stsval;
	
	stsval = (proto >> 24) & 3;
  4038d8:	f3c0 6401 	ubfx	r4, r0, #24, #2
	if (Cmd_resp && stsval == 0)  stsval=4;  // Succ instead of Rsvd for Cmd.
  4038dc:	4617      	mov	r7, r2
  4038de:	b112      	cbz	r2, 4038e6 <parseprintproto+0x16>
  4038e0:	2c00      	cmp	r4, #0
  4038e2:	bf08      	it	eq
  4038e4:	2404      	moveq	r4, #4
	
	rw = proto & Bit31 ? 'W' : 'R';		  	
  4038e6:	2d00      	cmp	r5, #0
  4038e8:	bfb4      	ite	lt
  4038ea:	f04f 0a57 	movlt.w	sl, #87	; 0x57
  4038ee:	f04f 0a52 	movge.w	sl, #82	; 0x52
	adr = (proto >> 26) & 0x0000001F;		  	
  4038f2:	f3c5 6984 	ubfx	r9, r5, #26, #5
	data = (proto >> 8) & LOWER16Of32;		  	
  4038f6:	ea4f 2815 	mov.w	r8, r5, lsr #8
	crc = proto & LOWER8Of32;
		  	
	if (!eol) { printf("%03d", iter);   printf(", "); }
  4038fa:	b33e      	cbz	r6, 40394c <parseprintproto+0x7c>
	if (Cmd_resp) { printf("%08X", proto); printf(", "); }
  4038fc:	2f00      	cmp	r7, #0
  4038fe:	d12c      	bne.n	40395a <parseprintproto+0x8a>
	printf("%s", sts[stsval]); printf(", ");
  403900:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403904:	491e      	ldr	r1, [pc, #120]	; (403980 <parseprintproto+0xb0>)
  403906:	4421      	add	r1, r4
  403908:	481e      	ldr	r0, [pc, #120]	; (403984 <parseprintproto+0xb4>)
  40390a:	4c1f      	ldr	r4, [pc, #124]	; (403988 <parseprintproto+0xb8>)
  40390c:	47a0      	blx	r4
  40390e:	f8df b088 	ldr.w	fp, [pc, #136]	; 403998 <parseprintproto+0xc8>
  403912:	4658      	mov	r0, fp
  403914:	47a0      	blx	r4
	printf("%2c", rw);  printf(", ");
  403916:	4651      	mov	r1, sl
  403918:	481c      	ldr	r0, [pc, #112]	; (40398c <parseprintproto+0xbc>)
  40391a:	47a0      	blx	r4
  40391c:	4658      	mov	r0, fp
  40391e:	47a0      	blx	r4
	printf("%02X", adr);  printf(", ");
  403920:	f8df a084 	ldr.w	sl, [pc, #132]	; 4039a8 <parseprintproto+0xd8>
  403924:	4649      	mov	r1, r9
  403926:	4650      	mov	r0, sl
  403928:	47a0      	blx	r4
  40392a:	4658      	mov	r0, fp
  40392c:	47a0      	blx	r4
	printf("%04X", data);  printf(", ");
  40392e:	fa1f f188 	uxth.w	r1, r8
  403932:	4817      	ldr	r0, [pc, #92]	; (403990 <parseprintproto+0xc0>)
  403934:	47a0      	blx	r4
  403936:	4658      	mov	r0, fp
  403938:	47a0      	blx	r4
	printf("%02X", crc);  printf(", ");
  40393a:	b2e9      	uxtb	r1, r5
  40393c:	4650      	mov	r0, sl
  40393e:	47a0      	blx	r4
  403940:	4658      	mov	r0, fp
  403942:	47a0      	blx	r4
    if (!Cmd_resp) { printf("%08X", proto); printf(", "); }
  403944:	b18f      	cbz	r7, 40396a <parseprintproto+0x9a>
		//else printf("|");

	if (eol) printf("\r\n");
  403946:	b9b6      	cbnz	r6, 403976 <parseprintproto+0xa6>
  403948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!eol) { printf("%03d", iter);   printf(", "); }
  40394c:	4811      	ldr	r0, [pc, #68]	; (403994 <parseprintproto+0xc4>)
  40394e:	f8df b038 	ldr.w	fp, [pc, #56]	; 403988 <parseprintproto+0xb8>
  403952:	47d8      	blx	fp
  403954:	4810      	ldr	r0, [pc, #64]	; (403998 <parseprintproto+0xc8>)
  403956:	47d8      	blx	fp
  403958:	e7d0      	b.n	4038fc <parseprintproto+0x2c>
	if (Cmd_resp) { printf("%08X", proto); printf(", "); }
  40395a:	4629      	mov	r1, r5
  40395c:	480f      	ldr	r0, [pc, #60]	; (40399c <parseprintproto+0xcc>)
  40395e:	f8df b028 	ldr.w	fp, [pc, #40]	; 403988 <parseprintproto+0xb8>
  403962:	47d8      	blx	fp
  403964:	480c      	ldr	r0, [pc, #48]	; (403998 <parseprintproto+0xc8>)
  403966:	47d8      	blx	fp
  403968:	e7ca      	b.n	403900 <parseprintproto+0x30>
    if (!Cmd_resp) { printf("%08X", proto); printf(", "); }
  40396a:	4629      	mov	r1, r5
  40396c:	480b      	ldr	r0, [pc, #44]	; (40399c <parseprintproto+0xcc>)
  40396e:	47a0      	blx	r4
  403970:	4658      	mov	r0, fp
  403972:	47a0      	blx	r4
  403974:	e7e7      	b.n	403946 <parseprintproto+0x76>
	if (eol) printf("\r\n");
  403976:	480a      	ldr	r0, [pc, #40]	; (4039a0 <parseprintproto+0xd0>)
  403978:	4b0a      	ldr	r3, [pc, #40]	; (4039a4 <parseprintproto+0xd4>)
  40397a:	4798      	blx	r3

	
}
  40397c:	e7e4      	b.n	403948 <parseprintproto+0x78>
  40397e:	bf00      	nop
  403980:	200002e8 	.word	0x200002e8
  403984:	0040e754 	.word	0x0040e754
  403988:	00407d2d 	.word	0x00407d2d
  40398c:	0040ed20 	.word	0x0040ed20
  403990:	0040e74c 	.word	0x0040e74c
  403994:	0040ed0c 	.word	0x0040ed0c
  403998:	0040ed14 	.word	0x0040ed14
  40399c:	0040ed18 	.word	0x0040ed18
  4039a0:	0040ec40 	.word	0x0040ec40
  4039a4:	00407df1 	.word	0x00407df1
  4039a8:	0040ed24 	.word	0x0040ed24

004039ac <printCmdRespHistory>:
void printCmdRespHistory ()
{
  4039ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i, ibuf, dpth;
  uint32_t cmd, rsp;
  
  dpth = protocolHist[CMDRESPindex].rsp;
  4039b0:	4c17      	ldr	r4, [pc, #92]	; (403a10 <printCmdRespHistory+0x64>)
  4039b2:	f8d4 b084 	ldr.w	fp, [r4, #132]	; 0x84

  printf ("Printing %d items: \r\n", dpth);
  4039b6:	4659      	mov	r1, fp
  4039b8:	4816      	ldr	r0, [pc, #88]	; (403a14 <printCmdRespHistory+0x68>)
  4039ba:	4b17      	ldr	r3, [pc, #92]	; (403a18 <printCmdRespHistory+0x6c>)
  4039bc:	4798      	blx	r3
  printf ("Indx, CMDWord, STS, RW, Adr, Data, CRC,STS,  RW, Adr,Data,CRC, RespWord\r\n");
  4039be:	4817      	ldr	r0, [pc, #92]	; (403a1c <printCmdRespHistory+0x70>)
  4039c0:	4b17      	ldr	r3, [pc, #92]	; (403a20 <printCmdRespHistory+0x74>)
  4039c2:	4798      	blx	r3
  
  ibuf = protocolHist[CMDRESPindex].cmd; // print backwards
  4039c4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
  for (i=0; i<dpth; i++)
  4039c8:	f1bb 0f00 	cmp.w	fp, #0
  4039cc:	d01d      	beq.n	403a0a <printCmdRespHistory+0x5e>
  4039ce:	2400      	movs	r4, #0
  {
	  ibuf = ibuf == 0 ? CMDRESPHISTDEPTH-1 : ibuf-1;	  
	  cmd = protocolHist[ibuf].cmd;
	  rsp = protocolHist[ibuf].rsp;	  
  4039d0:	f8df 903c 	ldr.w	r9, [pc, #60]	; 403a10 <printCmdRespHistory+0x64>

      parseprintproto (cmd, i, true, false);
  4039d4:	46a0      	mov	r8, r4
  4039d6:	2701      	movs	r7, #1
  4039d8:	e013      	b.n	403a02 <printCmdRespHistory+0x56>
	  ibuf = ibuf == 0 ? CMDRESPHISTDEPTH-1 : ibuf-1;	  
  4039da:	250f      	movs	r5, #15
	  rsp = protocolHist[ibuf].rsp;	  
  4039dc:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
  4039e0:	f8d3 a004 	ldr.w	sl, [r3, #4]
      parseprintproto (cmd, i, true, false);
  4039e4:	4643      	mov	r3, r8
  4039e6:	463a      	mov	r2, r7
  4039e8:	4621      	mov	r1, r4
  4039ea:	f859 0035 	ldr.w	r0, [r9, r5, lsl #3]
  4039ee:	4e0d      	ldr	r6, [pc, #52]	; (403a24 <printCmdRespHistory+0x78>)
  4039f0:	47b0      	blx	r6
      parseprintproto (rsp, i, false, true);	    
  4039f2:	463b      	mov	r3, r7
  4039f4:	4642      	mov	r2, r8
  4039f6:	4621      	mov	r1, r4
  4039f8:	4650      	mov	r0, sl
  4039fa:	47b0      	blx	r6
  for (i=0; i<dpth; i++)
  4039fc:	3401      	adds	r4, #1
  4039fe:	45a3      	cmp	fp, r4
  403a00:	d003      	beq.n	403a0a <printCmdRespHistory+0x5e>
	  ibuf = ibuf == 0 ? CMDRESPHISTDEPTH-1 : ibuf-1;	  
  403a02:	2d00      	cmp	r5, #0
  403a04:	d0e9      	beq.n	4039da <printCmdRespHistory+0x2e>
  403a06:	3d01      	subs	r5, #1
  403a08:	e7e8      	b.n	4039dc <printCmdRespHistory+0x30>
  403a0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a0e:	bf00      	nop
  403a10:	20013ffc 	.word	0x20013ffc
  403a14:	0040ed2c 	.word	0x0040ed2c
  403a18:	00407d2d 	.word	0x00407d2d
  403a1c:	0040ed44 	.word	0x0040ed44
  403a20:	00407df1 	.word	0x00407df1
  403a24:	004038d1 	.word	0x004038d1

00403a28 <enableProtocolHistory>:
  	
}
#endif

static bool enableLogCmdRespHist = false;
void enableProtocolHistory(bool En_dis) { enableLogCmdRespHist = En_dis; }
  403a28:	4b01      	ldr	r3, [pc, #4]	; (403a30 <enableProtocolHistory+0x8>)
  403a2a:	7018      	strb	r0, [r3, #0]
  403a2c:	4770      	bx	lr
  403a2e:	bf00      	nop
  403a30:	20013ff9 	.word	0x20013ff9

00403a34 <logprotocmdresp>:
bool isEnabledCmdRespHist () { return enableLogCmdRespHist; }
void logprotocmdresp(uint32_t cmd, uint32_t resp)    {lastCmdsent	= cmd; lastRespReceived = resp;    if(isEnabledCmdRespHist()) logCmdRespHist(cmd, resp);  }
  403a34:	b508      	push	{r3, lr}
  403a36:	4b05      	ldr	r3, [pc, #20]	; (403a4c <logprotocmdresp+0x18>)
  403a38:	6018      	str	r0, [r3, #0]
  403a3a:	4b05      	ldr	r3, [pc, #20]	; (403a50 <logprotocmdresp+0x1c>)
  403a3c:	6019      	str	r1, [r3, #0]
bool isEnabledCmdRespHist () { return enableLogCmdRespHist; }
  403a3e:	4b05      	ldr	r3, [pc, #20]	; (403a54 <logprotocmdresp+0x20>)
void logprotocmdresp(uint32_t cmd, uint32_t resp)    {lastCmdsent	= cmd; lastRespReceived = resp;    if(isEnabledCmdRespHist()) logCmdRespHist(cmd, resp);  }
  403a40:	781b      	ldrb	r3, [r3, #0]
  403a42:	b903      	cbnz	r3, 403a46 <logprotocmdresp+0x12>
  403a44:	bd08      	pop	{r3, pc}
  403a46:	4b04      	ldr	r3, [pc, #16]	; (403a58 <logprotocmdresp+0x24>)
  403a48:	4798      	blx	r3
  403a4a:	e7fb      	b.n	403a44 <logprotocmdresp+0x10>
  403a4c:	2000019c 	.word	0x2000019c
  403a50:	200001a0 	.word	0x200001a0
  403a54:	20013ff9 	.word	0x20013ff9
  403a58:	00403895 	.word	0x00403895

00403a5c <reportProtErr>:
//void logprotoresp( uint32_t resp) {lastRespReceived = resp;	   if(isEnabledCmdRespHist()) logCmdRespHist(resp, rsphist); }

// protocol handling
void reportProtErr(enum errWriteType e)
{
  403a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*resp = lastRespReceived;
  403a5e:	4b21      	ldr	r3, [pc, #132]	; (403ae4 <reportProtErr+0x88>)
  403a60:	681b      	ldr	r3, [r3, #0]
	*cmd  = lastCmdsent;
  403a62:	4a21      	ldr	r2, [pc, #132]	; (403ae8 <reportProtErr+0x8c>)
  403a64:	6812      	ldr	r2, [r2, #0]
    uint32_t c, r;
	bool errhist = true;
	getlastcmdresp(&c, &r);  
	switch (e)
  403a66:	2804      	cmp	r0, #4
  403a68:	d829      	bhi.n	403abe <reportProtErr+0x62>
  403a6a:	e8df f000 	tbb	[pc, r0]
  403a6e:	2b03      	.short	0x2b03
  403a70:	1a30      	.short	0x1a30
  403a72:	35          	.byte	0x35
  403a73:	00          	.byte	0x00
	{  
	   case noProtocolErr:  sprintf(tbuf, "No Protocol Error, handler should not have been called ");  errhist=false;
  403a74:	4c1d      	ldr	r4, [pc, #116]	; (403aec <reportProtErr+0x90>)
  403a76:	4d1e      	ldr	r5, [pc, #120]	; (403af0 <reportProtErr+0x94>)
  403a78:	f104 0730 	add.w	r7, r4, #48	; 0x30
  403a7c:	4626      	mov	r6, r4
  403a7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403a80:	6028      	str	r0, [r5, #0]
  403a82:	6069      	str	r1, [r5, #4]
  403a84:	60aa      	str	r2, [r5, #8]
  403a86:	60eb      	str	r3, [r5, #12]
  403a88:	4634      	mov	r4, r6
  403a8a:	3510      	adds	r5, #16
  403a8c:	42be      	cmp	r6, r7
  403a8e:	d1f5      	bne.n	403a7c <reportProtErr+0x20>
  403a90:	cc03      	ldmia	r4!, {r0, r1}
  403a92:	6028      	str	r0, [r5, #0]
  403a94:	6069      	str	r1, [r5, #4]
	   default:
	   break;
	}	
	
	//{ uint16_t temp;  getWhoAmI(&temp); }
	if (errhist) printCmdRespHistory(); else yamMsg(tbuf, keepgoin, e);
  403a96:	2200      	movs	r2, #0
  403a98:	2102      	movs	r1, #2
  403a9a:	4815      	ldr	r0, [pc, #84]	; (403af0 <reportProtErr+0x94>)
  403a9c:	4b15      	ldr	r3, [pc, #84]	; (403af4 <reportProtErr+0x98>)
  403a9e:	4798      	blx	r3
  403aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   case stsProtoWIP: sprintf(tbuf, "YAM read/Write in progress");
  403aa2:	4d13      	ldr	r5, [pc, #76]	; (403af0 <reportProtErr+0x94>)
  403aa4:	4c14      	ldr	r4, [pc, #80]	; (403af8 <reportProtErr+0x9c>)
  403aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  403aa8:	6028      	str	r0, [r5, #0]
  403aaa:	6069      	str	r1, [r5, #4]
  403aac:	60aa      	str	r2, [r5, #8]
  403aae:	60eb      	str	r3, [r5, #12]
  403ab0:	cc03      	ldmia	r4!, {r0, r1}
  403ab2:	6128      	str	r0, [r5, #16]
  403ab4:	6169      	str	r1, [r5, #20]
  403ab6:	8822      	ldrh	r2, [r4, #0]
  403ab8:	78a3      	ldrb	r3, [r4, #2]
  403aba:	832a      	strh	r2, [r5, #24]
  403abc:	76ab      	strb	r3, [r5, #26]
	if (errhist) printCmdRespHistory(); else yamMsg(tbuf, keepgoin, e);
  403abe:	4b0f      	ldr	r3, [pc, #60]	; (403afc <reportProtErr+0xa0>)
  403ac0:	4798      	blx	r3
  403ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   case crcProtoErr:  sprintf(tbuf, "CRC Error, last command %08x, last response %08x", c, r);
  403ac4:	490e      	ldr	r1, [pc, #56]	; (403b00 <reportProtErr+0xa4>)
  403ac6:	480a      	ldr	r0, [pc, #40]	; (403af0 <reportProtErr+0x94>)
  403ac8:	4c0e      	ldr	r4, [pc, #56]	; (403b04 <reportProtErr+0xa8>)
  403aca:	47a0      	blx	r4
	   break;
  403acc:	e7f7      	b.n	403abe <reportProtErr+0x62>
	   case stsProtoRsvd: sprintf(tbuf, "YAM protocol Status Reserved, last command %08x, last response %08x", c, r);
  403ace:	490e      	ldr	r1, [pc, #56]	; (403b08 <reportProtErr+0xac>)
  403ad0:	4807      	ldr	r0, [pc, #28]	; (403af0 <reportProtErr+0x94>)
  403ad2:	4c0c      	ldr	r4, [pc, #48]	; (403b04 <reportProtErr+0xa8>)
  403ad4:	47a0      	blx	r4
	   break;
  403ad6:	e7f2      	b.n	403abe <reportProtErr+0x62>
	   case stsProtoErr: sprintf(tbuf, "YAM protocol Status Error,  last command %08x, last response %08x", c, r);
  403ad8:	490c      	ldr	r1, [pc, #48]	; (403b0c <reportProtErr+0xb0>)
  403ada:	4805      	ldr	r0, [pc, #20]	; (403af0 <reportProtErr+0x94>)
  403adc:	4c09      	ldr	r4, [pc, #36]	; (403b04 <reportProtErr+0xa8>)
  403ade:	47a0      	blx	r4
	   break;
  403ae0:	e7ed      	b.n	403abe <reportProtErr+0x62>
  403ae2:	bf00      	nop
  403ae4:	200001a0 	.word	0x200001a0
  403ae8:	2000019c 	.word	0x2000019c
  403aec:	0040ed90 	.word	0x0040ed90
  403af0:	2001a178 	.word	0x2001a178
  403af4:	00404f71 	.word	0x00404f71
  403af8:	0040edc8 	.word	0x0040edc8
  403afc:	004039ad 	.word	0x004039ad
  403b00:	0040ede4 	.word	0x0040ede4
  403b04:	00407fd5 	.word	0x00407fd5
  403b08:	0040ee18 	.word	0x0040ee18
  403b0c:	0040ee5c 	.word	0x0040ee5c

00403b10 <checkProtocolErrors>:
	
}

#define CHECK_CRC 1
enum errWriteType checkProtocolErrors( uint32_t proto)
{
  403b10:	b570      	push	{r4, r5, r6, lr}
  403b12:	b082      	sub	sp, #8
  403b14:	4604      	mov	r4, r0
	*cmd  = lastCmdsent;
  403b16:	4b1d      	ldr	r3, [pc, #116]	; (403b8c <checkProtocolErrors+0x7c>)
  403b18:	681e      	ldr	r6, [r3, #0]
	uint32_t  c, r;
	uint32_t rxerr;
	
	getlastcmdresp(&c, &r);

	rxerr = proto & PROTOSTATUSMASK;
  403b1a:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
	switch (rxerr)
  403b1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
  403b22:	d028      	beq.n	403b76 <checkProtocolErrors+0x66>
  403b24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
  403b28:	d02d      	beq.n	403b86 <checkProtocolErrors+0x76>
  403b2a:	b14b      	cbz	r3, 403b40 <checkProtocolErrors+0x30>
	}

	#if (CHECK_CRC == 1)
	uint32_t addrdata=0;
	addrdata =  (proto >> 8) & 0x00FFFFFFL;
	crcCalc = IAM20685_crc_calculatefast (addrdata);
  403b2c:	0a00      	lsrs	r0, r0, #8
  403b2e:	4b18      	ldr	r3, [pc, #96]	; (403b90 <checkProtocolErrors+0x80>)
  403b30:	4798      	blx	r3
	crcRx = proto & LOWER8Of32;
	if (crcRx != crcCalc) {
  403b32:	b2e3      	uxtb	r3, r4
  403b34:	4298      	cmp	r0, r3
  403b36:	d10a      	bne.n	403b4e <checkProtocolErrors+0x3e>
	  case PROTOSTATUSSUCC:  err=noProtocolErr;  break;
  403b38:	2500      	movs	r5, #0
	}
	#endif
	if (err) 
	  reportProtErr(err);
	return err;
}
  403b3a:	4628      	mov	r0, r5
  403b3c:	b002      	add	sp, #8
  403b3e:	bd70      	pop	{r4, r5, r6, pc}
	  case PROTOSTATUSRSV:  err=stsProtoRsvd;  break;
  403b40:	2502      	movs	r5, #2
	crcCalc = IAM20685_crc_calculatefast (addrdata);
  403b42:	0a20      	lsrs	r0, r4, #8
  403b44:	4b12      	ldr	r3, [pc, #72]	; (403b90 <checkProtocolErrors+0x80>)
  403b46:	4798      	blx	r3
	if (crcRx != crcCalc) {
  403b48:	b2e3      	uxtb	r3, r4
  403b4a:	4298      	cmp	r0, r3
  403b4c:	d00f      	beq.n	403b6e <checkProtocolErrors+0x5e>
	    sprintf(tbuf, "Yam sends bad CRC. {lastCmd sent, Rx response} = { %08X, %08x }, {RxCRC, calccrc} = %02X, %02x", c, proto, crcRx, crcCalc);
  403b4e:	4d11      	ldr	r5, [pc, #68]	; (403b94 <checkProtocolErrors+0x84>)
  403b50:	9001      	str	r0, [sp, #4]
  403b52:	b2e3      	uxtb	r3, r4
  403b54:	9300      	str	r3, [sp, #0]
  403b56:	4623      	mov	r3, r4
  403b58:	4632      	mov	r2, r6
  403b5a:	490f      	ldr	r1, [pc, #60]	; (403b98 <checkProtocolErrors+0x88>)
  403b5c:	4628      	mov	r0, r5
  403b5e:	4c0f      	ldr	r4, [pc, #60]	; (403b9c <checkProtocolErrors+0x8c>)
  403b60:	47a0      	blx	r4
	    yamMsg(tbuf, yamwait, err);
  403b62:	2201      	movs	r2, #1
  403b64:	4611      	mov	r1, r2
  403b66:	4628      	mov	r0, r5
  403b68:	4b0d      	ldr	r3, [pc, #52]	; (403ba0 <checkProtocolErrors+0x90>)
  403b6a:	4798      	blx	r3
		err=crcProtoErr;
  403b6c:	2501      	movs	r5, #1
	  reportProtErr(err);
  403b6e:	4628      	mov	r0, r5
  403b70:	4b0c      	ldr	r3, [pc, #48]	; (403ba4 <checkProtocolErrors+0x94>)
  403b72:	4798      	blx	r3
  403b74:	e7e1      	b.n	403b3a <checkProtocolErrors+0x2a>
	crcCalc = IAM20685_crc_calculatefast (addrdata);
  403b76:	0a00      	lsrs	r0, r0, #8
  403b78:	4b05      	ldr	r3, [pc, #20]	; (403b90 <checkProtocolErrors+0x80>)
  403b7a:	4798      	blx	r3
	if (crcRx != crcCalc) {
  403b7c:	b2e3      	uxtb	r3, r4
  403b7e:	4298      	cmp	r0, r3
  403b80:	d1e5      	bne.n	403b4e <checkProtocolErrors+0x3e>
	  case PROTOSTATUSWIP:  err=stsProtoWIP;   break;		 
  403b82:	2503      	movs	r5, #3
  403b84:	e7f3      	b.n	403b6e <checkProtocolErrors+0x5e>
	  case PROTOSTATUSERR:  err=stsProtoErr;   break;
  403b86:	2504      	movs	r5, #4
  403b88:	e7db      	b.n	403b42 <checkProtocolErrors+0x32>
  403b8a:	bf00      	nop
  403b8c:	2000019c 	.word	0x2000019c
  403b90:	004036a5 	.word	0x004036a5
  403b94:	2001a178 	.word	0x2001a178
  403b98:	0040ecac 	.word	0x0040ecac
  403b9c:	00407fd5 	.word	0x00407fd5
  403ba0:	00404f71 	.word	0x00404f71
  403ba4:	00403a5d 	.word	0x00403a5d

00403ba8 <assembleWord>:
{
	int i, shift;
	uint32_t v;
	for (i=0, v=0; i<4; i++) {
		shift=8*(3-i);
		v |=  ((uint32_t)inp[i] << shift) & (LOWER8Of32<<shift)  ;
  403ba8:	8843      	ldrh	r3, [r0, #2]
  403baa:	041b      	lsls	r3, r3, #16
  403bac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  403bb0:	8882      	ldrh	r2, [r0, #4]
  403bb2:	0212      	lsls	r2, r2, #8
  403bb4:	b292      	uxth	r2, r2
  403bb6:	4313      	orrs	r3, r2
  403bb8:	8802      	ldrh	r2, [r0, #0]
  403bba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  403bbe:	7980      	ldrb	r0, [r0, #6]
	}
	return v;
}
  403bc0:	4318      	orrs	r0, r3
  403bc2:	4770      	bx	lr

00403bc4 <Send4Rcv4bytes>:

void Send4Rcv4bytes (uint16_t * inp, uint16_t *outp)
{
  403bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403bc8:	b083      	sub	sp, #12
	int i;
	uint8_t uc_pcs=0;
  403bca:	2300      	movs	r3, #0
  403bcc:	f88d 3007 	strb.w	r3, [sp, #7]
  403bd0:	1e86      	subs	r6, r0, #2
  403bd2:	460d      	mov	r5, r1
  403bd4:	1d87      	adds	r7, r0, #6
	for (i=0; i<4; i++) {
		spi_write(SPI_MASTER_BASE, inp[i], 0, 0); /* write to generate clock: but protocol needs good addrss and crc */
  403bd6:	4c0d      	ldr	r4, [pc, #52]	; (403c0c <Send4Rcv4bytes+0x48>)
  403bd8:	f8df 9034 	ldr.w	r9, [pc, #52]	; 403c10 <Send4Rcv4bytes+0x4c>
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_TDRE) == 0); /* Wait transfer data reg done. */
		spi_read(SPI_MASTER_BASE, &outp[i], &uc_pcs); /* read actual register data */
  403bdc:	f8df 8034 	ldr.w	r8, [pc, #52]	; 403c14 <Send4Rcv4bytes+0x50>
		spi_write(SPI_MASTER_BASE, inp[i], 0, 0); /* write to generate clock: but protocol needs good addrss and crc */
  403be0:	2300      	movs	r3, #0
  403be2:	461a      	mov	r2, r3
  403be4:	f836 1f02 	ldrh.w	r1, [r6, #2]!
  403be8:	4620      	mov	r0, r4
  403bea:	47c8      	blx	r9
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
  403bec:	6923      	ldr	r3, [r4, #16]
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_TDRE) == 0); /* Wait transfer data reg done. */
  403bee:	f013 0f02 	tst.w	r3, #2
  403bf2:	d0fb      	beq.n	403bec <Send4Rcv4bytes+0x28>
		spi_read(SPI_MASTER_BASE, &outp[i], &uc_pcs); /* read actual register data */
  403bf4:	f10d 0207 	add.w	r2, sp, #7
  403bf8:	4629      	mov	r1, r5
  403bfa:	4620      	mov	r0, r4
  403bfc:	47c0      	blx	r8
  403bfe:	3502      	adds	r5, #2
	for (i=0; i<4; i++) {
  403c00:	42be      	cmp	r6, r7
  403c02:	d1ed      	bne.n	403be0 <Send4Rcv4bytes+0x1c>
	}

}
  403c04:	b003      	add	sp, #12
  403c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403c0a:	bf00      	nop
  403c0c:	40008400 	.word	0x40008400
  403c10:	00400517 	.word	0x00400517
  403c14:	004004e7 	.word	0x004004e7

00403c18 <word2byteArr>:

void word2byteArr(uint32_t inVal, uint16_t *outp)
{
	outp[0] = inVal >> 24 & LOWER8Of32;
  403c18:	0e03      	lsrs	r3, r0, #24
  403c1a:	800b      	strh	r3, [r1, #0]
	outp[1] = inVal >> 16 & LOWER8Of32;
  403c1c:	f3c0 4307 	ubfx	r3, r0, #16, #8
  403c20:	804b      	strh	r3, [r1, #2]
	outp[2] = inVal >>  8 & LOWER8Of32;
  403c22:	f3c0 2307 	ubfx	r3, r0, #8, #8
  403c26:	808b      	strh	r3, [r1, #4]
	outp[3] = inVal >>  0 & LOWER8Of32;
  403c28:	b2c0      	uxtb	r0, r0
  403c2a:	80c8      	strh	r0, [r1, #6]
  403c2c:	4770      	bx	lr
	...

00403c30 <sendaddrdata>:
}


enum errWriteType sendaddrdata(regAddrType areg, uint16_t v,  uint32_t *readBack)
{
  403c30:	b570      	push	{r4, r5, r6, lr}
  403c32:	b084      	sub	sp, #16
  403c34:	4616      	mov	r6, r2
	enum errWriteType err= noProtocolErr;
	uint32_t writeVal, readVal;
	uint16_t wrarr[4];
	uint16_t rdarr[4];
	
	writeVal = appendcrcRegaddrData(areg, v);
  403c36:	4b0e      	ldr	r3, [pc, #56]	; (403c70 <sendaddrdata+0x40>)
  403c38:	4798      	blx	r3
  403c3a:	4605      	mov	r5, r0
	word2byteArr(writeVal, wrarr);
  403c3c:	a902      	add	r1, sp, #8
  403c3e:	4b0d      	ldr	r3, [pc, #52]	; (403c74 <sendaddrdata+0x44>)
  403c40:	4798      	blx	r3
	Send4Rcv4bytes (wrarr, rdarr);
  403c42:	4669      	mov	r1, sp
  403c44:	a802      	add	r0, sp, #8
  403c46:	4b0c      	ldr	r3, [pc, #48]	; (403c78 <sendaddrdata+0x48>)
  403c48:	4798      	blx	r3
	readVal = assembleWord(rdarr);
  403c4a:	4668      	mov	r0, sp
  403c4c:	4b0b      	ldr	r3, [pc, #44]	; (403c7c <sendaddrdata+0x4c>)
  403c4e:	4798      	blx	r3
  403c50:	4604      	mov	r4, r0
    logprotocmdresp(writeVal, readVal);
  403c52:	4601      	mov	r1, r0
  403c54:	4628      	mov	r0, r5
  403c56:	4b0a      	ldr	r3, [pc, #40]	; (403c80 <sendaddrdata+0x50>)
  403c58:	4798      	blx	r3

	
	err = checkProtocolErrors(readVal);
  403c5a:	4620      	mov	r0, r4
  403c5c:	4b09      	ldr	r3, [pc, #36]	; (403c84 <sendaddrdata+0x54>)
  403c5e:	4798      	blx	r3
  403c60:	4605      	mov	r5, r0

	
	*readBack = readVal;
  403c62:	6034      	str	r4, [r6, #0]
	delay_us(DELAYrw);
  403c64:	2056      	movs	r0, #86	; 0x56
  403c66:	4b08      	ldr	r3, [pc, #32]	; (403c88 <sendaddrdata+0x58>)
  403c68:	4798      	blx	r3

    return err;
}
  403c6a:	4628      	mov	r0, r5
  403c6c:	b004      	add	sp, #16
  403c6e:	bd70      	pop	{r4, r5, r6, pc}
  403c70:	0040387d 	.word	0x0040387d
  403c74:	00403c19 	.word	0x00403c19
  403c78:	00403bc5 	.word	0x00403bc5
  403c7c:	00403ba9 	.word	0x00403ba9
  403c80:	00403a35 	.word	0x00403a35
  403c84:	00403b11 	.word	0x00403b11
  403c88:	20000001 	.word	0x20000001

00403c8c <WriteReg>:
//*****************
enum errWriteType WriteReg(regAddrType a, uint16_t v)
{
  403c8c:	b500      	push	{lr}
  403c8e:	b083      	sub	sp, #12
	uint32_t writeVal;
    regAddrType aw, ar;
	uint32_t readval;
	int i;
	
	aw = (a<<2) | READ_BIT_MASK;
  403c90:	0080      	lsls	r0, r0, #2
  403c92:	f060 007f 	orn	r0, r0, #127	; 0x7f
	err = sendaddrdata(aw, v,  &readval);
  403c96:	aa01      	add	r2, sp, #4
  403c98:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  403c9c:	4b02      	ldr	r3, [pc, #8]	; (403ca8 <WriteReg+0x1c>)
  403c9e:	4798      	blx	r3
	return err;
}
  403ca0:	b003      	add	sp, #12
  403ca2:	f85d fb04 	ldr.w	pc, [sp], #4
  403ca6:	bf00      	nop
  403ca8:	00403c31 	.word	0x00403c31

00403cac <ReadReg>:

//**********************
uint32_t ReadReg(regAddrType a, enum errWriteType *e)
{
  403cac:	b570      	push	{r4, r5, r6, lr}
  403cae:	b082      	sub	sp, #8
  403cb0:	460e      	mov	r6, r1
	enum errWriteType err = noProtocolErr;
	uint32_t writeVal = 0, readval, dataRed;
	uint32_t aw, ar;
   
    // write address first
    aw= (a<<2) & WRITE_BIT_MASK;
  403cb2:	0080      	lsls	r0, r0, #2
	err = sendaddrdata(aw, 0,  &readval);
  403cb4:	f000 047c 	and.w	r4, r0, #124	; 0x7c
  403cb8:	aa01      	add	r2, sp, #4
  403cba:	2100      	movs	r1, #0
  403cbc:	4620      	mov	r0, r4
  403cbe:	4d06      	ldr	r5, [pc, #24]	; (403cd8 <ReadReg+0x2c>)
  403cc0:	47a8      	blx	r5
 
	// Now issue read command and collect the data 
	ar =  aw; //(a<<2) | READ_BIT_MASK;
	err = sendaddrdata(ar, 0,  &readval);
  403cc2:	aa01      	add	r2, sp, #4
  403cc4:	2100      	movs	r1, #0
  403cc6:	4620      	mov	r0, r4
  403cc8:	47a8      	blx	r5
	*e = err;
  403cca:	7030      	strb	r0, [r6, #0]
	
	dataRed = (readval >> 8) & LOWER16Of32;
    return dataRed;
}
  403ccc:	9801      	ldr	r0, [sp, #4]
  403cce:	f3c0 200f 	ubfx	r0, r0, #8, #16
  403cd2:	b002      	add	sp, #8
  403cd4:	bd70      	pop	{r4, r5, r6, pc}
  403cd6:	bf00      	nop
  403cd8:	00403c31 	.word	0x00403c31

00403cdc <readReg>:

//**********************************
int16_t readReg(regBankType b, regAddrType a)
{
  403cdc:	b570      	push	{r4, r5, r6, lr}
  403cde:	b082      	sub	sp, #8
  403ce0:	460d      	mov	r5, r1
	
	//spi_master_read_register(a<<2, 0, &result);
	//delay_us(DELAYrw);
	// select bank 
	//bankselect(b);
	yamWrite(0, a, 0, ALLREGBITS, overwrite);
  403ce2:	2400      	movs	r4, #0
  403ce4:	9400      	str	r4, [sp, #0]
  403ce6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403cea:	4622      	mov	r2, r4
  403cec:	4620      	mov	r0, r4
  403cee:	4e04      	ldr	r6, [pc, #16]	; (403d00 <readReg+0x24>)
  403cf0:	47b0      	blx	r6
	result = yamRead(0, a);
  403cf2:	4629      	mov	r1, r5
  403cf4:	4620      	mov	r0, r4
  403cf6:	4b03      	ldr	r3, [pc, #12]	; (403d04 <readReg+0x28>)
  403cf8:	4798      	blx	r3

    return result;
}
  403cfa:	b002      	add	sp, #8
  403cfc:	bd70      	pop	{r4, r5, r6, pc}
  403cfe:	bf00      	nop
  403d00:	00403815 	.word	0x00403815
  403d04:	0040379d 	.word	0x0040379d

00403d08 <indirectWrite>:
}

uint32_t gtemp;
//**********************************
Bool indirectWrite(regAddrType a, uint32_t v)
{
  403d08:	b530      	push	{r4, r5, lr}
  403d0a:	b083      	sub	sp, #12
  403d0c:	4605      	mov	r5, r0
	uint32_t	writeVal;

	uint8_t		crc;
	uint8_t		value[3];

 	writeVal = (a<<18 | (v&LOWER16Of32)) | (writeBitmask>>8);
  403d0e:	b289      	uxth	r1, r1
  403d10:	ea6f 2141 	mvn.w	r1, r1, lsl #9
  403d14:	ea6f 2151 	mvn.w	r1, r1, lsr #9
  403d18:	ea41 4480 	orr.w	r4, r1, r0, lsl #18
 	crc = IAM20685_crc_calculatefast(writeVal);
  403d1c:	4620      	mov	r0, r4
  403d1e:	4b0f      	ldr	r3, [pc, #60]	; (403d5c <indirectWrite+0x54>)
  403d20:	4798      	blx	r3
 	writeVal = (writeVal << 8) | (((uint32_t)crc & LOWER8Of32));
  403d22:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
 	
 	value[2] = (uint8_t)((writeVal>>16) & 0x000000FF);
  403d26:	0c23      	lsrs	r3, r4, #16
  403d28:	f88d 3006 	strb.w	r3, [sp, #6]
 	value[0] = (uint8_t) ((writeVal>>8) & 0x000000FF);
  403d2c:	0a23      	lsrs	r3, r4, #8
  403d2e:	f88d 3004 	strb.w	r3, [sp, #4]
 	value[1] = (uint8_t) (writeVal & 0x000000FF);
  403d32:	f88d 4005 	strb.w	r4, [sp, #5]
   	    spi_master_set_read_register_cmd(a<<2)	;
  403d36:	00a8      	lsls	r0, r5, #2
  403d38:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  403d3c:	4b08      	ldr	r3, [pc, #32]	; (403d60 <indirectWrite+0x58>)
  403d3e:	4798      	blx	r3
	 
	yamWriteCmdAddr(0, a);

	spi_master_write_register(value[2], 2, value); // to do err checking
  403d40:	aa01      	add	r2, sp, #4
  403d42:	2102      	movs	r1, #2
  403d44:	f89d 0006 	ldrb.w	r0, [sp, #6]
  403d48:	4b06      	ldr	r3, [pc, #24]	; (403d64 <indirectWrite+0x5c>)
  403d4a:	4798      	blx	r3
	
	gtemp = writeVal;  // to prevent being optimized-out
  403d4c:	4b06      	ldr	r3, [pc, #24]	; (403d68 <indirectWrite+0x60>)
  403d4e:	601c      	str	r4, [r3, #0]

	delay_us(DELAYrw);
  403d50:	2056      	movs	r0, #86	; 0x56
  403d52:	4b06      	ldr	r3, [pc, #24]	; (403d6c <indirectWrite+0x64>)
  403d54:	4798      	blx	r3
	return err;
}
  403d56:	2000      	movs	r0, #0
  403d58:	b003      	add	sp, #12
  403d5a:	bd30      	pop	{r4, r5, pc}
  403d5c:	004036a5 	.word	0x004036a5
  403d60:	00404051 	.word	0x00404051
  403d64:	00403f89 	.word	0x00403f89
  403d68:	2001a174 	.word	0x2001a174
  403d6c:	20000001 	.word	0x20000001

00403d70 <bankselect>:
}

regBankType oldBank = 0;
//**********************************
void bankselect(regBankType banknum)
{
  403d70:	b508      	push	{r3, lr}
	enum errWriteType err=noProtocolErr;
	//uint16_t v;
	       //to do:  send tcode for new chips
	err = WriteReg(Bank, banknum);
  403d72:	b281      	uxth	r1, r0
  403d74:	201f      	movs	r0, #31
  403d76:	4b01      	ldr	r3, [pc, #4]	; (403d7c <bankselect+0xc>)
  403d78:	4798      	blx	r3
  403d7a:	bd08      	pop	{r3, pc}
  403d7c:	00403c8d 	.word	0x00403c8d

00403d80 <currentBank>:
}

//******** return current bank selected
uint16_t currentBank()
{
  403d80:	b500      	push	{lr}
  403d82:	b083      	sub	sp, #12
	enum errWriteType err;
	uint16_t cb = ReadReg(Bank, &err);
  403d84:	f10d 0107 	add.w	r1, sp, #7
  403d88:	201f      	movs	r0, #31
  403d8a:	4b03      	ldr	r3, [pc, #12]	; (403d98 <currentBank+0x18>)
  403d8c:	4798      	blx	r3
	return cb;
}
  403d8e:	b280      	uxth	r0, r0
  403d90:	b003      	add	sp, #12
  403d92:	f85d fb04 	ldr.w	pc, [sp], #4
  403d96:	bf00      	nop
  403d98:	00403cad 	.word	0x00403cad

00403d9c <resetChip>:


//*** bitmask with hard and soft reset OR-ed
void resetChip( chipResetType r)
{
  403d9c:	b508      	push	{r3, lr}
	uint16_t v=0;
	if (r&HARD_RESET)  v|= fRsth;
  403d9e:	f000 0101 	and.w	r1, r0, #1
  403da2:	0089      	lsls	r1, r1, #2
	if (r&SOFT_RESET)  v|= fRsts;
  403da4:	f010 0f02 	tst.w	r0, #2
  403da8:	bf18      	it	ne
  403daa:	f041 0102 	orrne.w	r1, r1, #2
	
	WriteReg(Rsts, v);    // soft and hard reset share same register
  403dae:	2018      	movs	r0, #24
  403db0:	4b01      	ldr	r3, [pc, #4]	; (403db8 <resetChip+0x1c>)
  403db2:	4798      	blx	r3
  403db4:	bd08      	pop	{r3, pc}
  403db6:	bf00      	nop
  403db8:	00403c8d 	.word	0x00403c8d

00403dbc <selfteststart>:
}

void selfteststart()
{
  403dbc:	b508      	push	{r3, lr}
	uint16_t v=fMonSt;
	WriteReg(MonSt, v);  // soft and hard reset share same register
  403dbe:	2108      	movs	r1, #8
  403dc0:	2018      	movs	r0, #24
  403dc2:	4b01      	ldr	r3, [pc, #4]	; (403dc8 <selfteststart+0xc>)
  403dc4:	4798      	blx	r3
  403dc6:	bd08      	pop	{r3, pc}
  403dc8:	00403c8d 	.word	0x00403c8d

00403dcc <selftestDisable>:
}


void selftestDisable(bool Dis_en)
{
  403dcc:	b530      	push	{r4, r5, lr}
  403dce:	b083      	sub	sp, #12
  403dd0:	4605      	mov	r5, r0
	uint16_t selfTestRegVal;
	enum errWriteType err=noProtocolErr;
  403dd2:	a902      	add	r1, sp, #8
  403dd4:	2300      	movs	r3, #0
  403dd6:	f801 3d01 	strb.w	r3, [r1, #-1]!
	
	selfTestRegVal = ReadReg(St_dis, &err);
  403dda:	200e      	movs	r0, #14
  403ddc:	4b15      	ldr	r3, [pc, #84]	; (403e34 <selftestDisable+0x68>)
  403dde:	4798      	blx	r3
  403de0:	b284      	uxth	r4, r0
	printf(" ST Disable Before: press any key %04X \r\n", selfTestRegVal); 
  403de2:	4621      	mov	r1, r4
  403de4:	4814      	ldr	r0, [pc, #80]	; (403e38 <selftestDisable+0x6c>)
  403de6:	4b15      	ldr	r3, [pc, #84]	; (403e3c <selftestDisable+0x70>)
  403de8:	4798      	blx	r3
	if (Dis_en)
  403dea:	b1dd      	cbz	r5, 403e24 <selftestDisable+0x58>
	  selfTestRegVal |=  fSt_dis;
  403dec:	f444 4180 	orr.w	r1, r4, #16384	; 0x4000
	else
	  selfTestRegVal &= ~fSt_dis;
	    
	WriteReg(St_dis, selfTestRegVal);
  403df0:	200e      	movs	r0, #14
  403df2:	4b13      	ldr	r3, [pc, #76]	; (403e40 <selftestDisable+0x74>)
  403df4:	4798      	blx	r3
	selfTestRegVal = ReadReg(St_dis, &err);
  403df6:	f10d 0107 	add.w	r1, sp, #7
  403dfa:	200e      	movs	r0, #14
  403dfc:	4b0d      	ldr	r3, [pc, #52]	; (403e34 <selftestDisable+0x68>)
  403dfe:	4798      	blx	r3
	printf(" ST Disable After: press any key %04X \r\n", selfTestRegVal); getchar();
  403e00:	b281      	uxth	r1, r0
  403e02:	4810      	ldr	r0, [pc, #64]	; (403e44 <selftestDisable+0x78>)
  403e04:	4b0d      	ldr	r3, [pc, #52]	; (403e3c <selftestDisable+0x70>)
  403e06:	4798      	blx	r3
  403e08:	4b0f      	ldr	r3, [pc, #60]	; (403e48 <selftestDisable+0x7c>)
  403e0a:	6818      	ldr	r0, [r3, #0]
  403e0c:	6842      	ldr	r2, [r0, #4]
  403e0e:	6853      	ldr	r3, [r2, #4]
  403e10:	3b01      	subs	r3, #1
  403e12:	6053      	str	r3, [r2, #4]
  403e14:	2b00      	cmp	r3, #0
  403e16:	db09      	blt.n	403e2c <selftestDisable+0x60>
  403e18:	6842      	ldr	r2, [r0, #4]
  403e1a:	6813      	ldr	r3, [r2, #0]
  403e1c:	3301      	adds	r3, #1
  403e1e:	6013      	str	r3, [r2, #0]

}
  403e20:	b003      	add	sp, #12
  403e22:	bd30      	pop	{r4, r5, pc}
	  selfTestRegVal &= ~fSt_dis;
  403e24:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
  403e28:	b2a1      	uxth	r1, r4
  403e2a:	e7e1      	b.n	403df0 <selftestDisable+0x24>
	printf(" ST Disable After: press any key %04X \r\n", selfTestRegVal); getchar();
  403e2c:	6841      	ldr	r1, [r0, #4]
  403e2e:	4b07      	ldr	r3, [pc, #28]	; (403e4c <selftestDisable+0x80>)
  403e30:	4798      	blx	r3
  403e32:	e7f5      	b.n	403e20 <selftestDisable+0x54>
  403e34:	00403cad 	.word	0x00403cad
  403e38:	0040eea0 	.word	0x0040eea0
  403e3c:	00407d2d 	.word	0x00407d2d
  403e40:	00403c8d 	.word	0x00403c8d
  403e44:	0040eecc 	.word	0x0040eecc
  403e48:	20000378 	.word	0x20000378
  403e4c:	00407e01 	.word	0x00407e01

00403e50 <spi_master_init1>:
void spiSpy(bool On_off)
{
  spiPrint = On_off ? true : false;
}
void spi_master_init1(void)
{
  403e50:	b538      	push	{r3, r4, r5, lr}
	/* Enable the peripheral and set SPI mode. */
	
	flexcom_enable(BOARD_FLEXCOM_SPI);
  403e52:	4c1d      	ldr	r4, [pc, #116]	; (403ec8 <spi_master_init1+0x78>)
  403e54:	4620      	mov	r0, r4
  403e56:	4b1d      	ldr	r3, [pc, #116]	; (403ecc <spi_master_init1+0x7c>)
  403e58:	4798      	blx	r3
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
  403e5a:	2102      	movs	r1, #2
  403e5c:	4620      	mov	r0, r4
  403e5e:	4b1c      	ldr	r3, [pc, #112]	; (403ed0 <spi_master_init1+0x80>)
  403e60:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  403e62:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  403e66:	2302      	movs	r3, #2
  403e68:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  403e6a:	2380      	movs	r3, #128	; 0x80
  403e6c:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  403e6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  403e72:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  403e74:	6863      	ldr	r3, [r4, #4]
  403e76:	f043 0301 	orr.w	r3, r3, #1
  403e7a:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  403e7c:	6863      	ldr	r3, [r4, #4]
  403e7e:	f043 0310 	orr.w	r3, r3, #16
  403e82:	6063      	str	r3, [r4, #4]
	spi_disable(SPI_MASTER_BASE);
	spi_reset(SPI_MASTER_BASE);
	spi_set_lastxfer(SPI_MASTER_BASE);
	spi_set_master_mode(SPI_MASTER_BASE);
	spi_disable_mode_fault_detect(SPI_MASTER_BASE);
	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_SEL1);
  403e84:	2100      	movs	r1, #0
  403e86:	4620      	mov	r0, r4
  403e88:	4b12      	ldr	r3, [pc, #72]	; (403ed4 <spi_master_init1+0x84>)
  403e8a:	4798      	blx	r3
	
	spi_set_clock_polarity(SPI_MASTER_BASE, SPI_CHIP_SEL1, SPI_CLK_POLARITY);
  403e8c:	2200      	movs	r2, #0
  403e8e:	4611      	mov	r1, r2
  403e90:	4620      	mov	r0, r4
  403e92:	4b11      	ldr	r3, [pc, #68]	; (403ed8 <spi_master_init1+0x88>)
  403e94:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, SPI_CHIP_SEL1, SPI_CLK_PHASE);
  403e96:	2201      	movs	r2, #1
  403e98:	2100      	movs	r1, #0
  403e9a:	4620      	mov	r0, r4
  403e9c:	4b0f      	ldr	r3, [pc, #60]	; (403edc <spi_master_init1+0x8c>)
  403e9e:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_MASTER_BASE, SPI_CHIP_SEL1, SPI_CSR_BITS_8_BIT);
  403ea0:	2200      	movs	r2, #0
  403ea2:	4611      	mov	r1, r2
  403ea4:	4620      	mov	r0, r4
  403ea6:	4b0e      	ldr	r3, [pc, #56]	; (403ee0 <spi_master_init1+0x90>)
  403ea8:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, SPI_CHIP_SEL1, (sysclk_get_peripheral_hz() / SPI_CLK_SPEED));
  403eaa:	22ef      	movs	r2, #239	; 0xef
  403eac:	2100      	movs	r1, #0
  403eae:	4620      	mov	r0, r4
  403eb0:	4b0c      	ldr	r3, [pc, #48]	; (403ee4 <spi_master_init1+0x94>)
  403eb2:	4798      	blx	r3
	spi_set_transfer_delay(SPI_MASTER_BASE, SPI_CHIP_SEL1, SPI_DLYBS, SPI_DLYBCT);
  403eb4:	2310      	movs	r3, #16
  403eb6:	2240      	movs	r2, #64	; 0x40
  403eb8:	2100      	movs	r1, #0
  403eba:	4620      	mov	r0, r4
  403ebc:	4d0a      	ldr	r5, [pc, #40]	; (403ee8 <spi_master_init1+0x98>)
  403ebe:	47a8      	blx	r5
	p_spi->SPI_CR = SPI_CR_SPIEN;
  403ec0:	2301      	movs	r3, #1
  403ec2:	6023      	str	r3, [r4, #0]
  403ec4:	bd38      	pop	{r3, r4, r5, pc}
  403ec6:	bf00      	nop
  403ec8:	40008000 	.word	0x40008000
  403ecc:	0040457d 	.word	0x0040457d
  403ed0:	00404709 	.word	0x00404709
  403ed4:	004004d1 	.word	0x004004d1
  403ed8:	0040054b 	.word	0x0040054b
  403edc:	00400569 	.word	0x00400569
  403ee0:	00400587 	.word	0x00400587
  403ee4:	0040059b 	.word	0x0040059b
  403ee8:	004005c3 	.word	0x004005c3

00403eec <spi_master_init>:

	spi_enable(SPI_MASTER_BASE);
}

void spi_master_init(void)
{
  403eec:	b538      	push	{r3, r4, r5, lr}
	/* Enable the peripheral and set SPI mode. */
	
	flexcom_enable(BOARD_FLEXCOM_SPI);
  403eee:	4c1d      	ldr	r4, [pc, #116]	; (403f64 <spi_master_init+0x78>)
  403ef0:	4620      	mov	r0, r4
  403ef2:	4b1d      	ldr	r3, [pc, #116]	; (403f68 <spi_master_init+0x7c>)
  403ef4:	4798      	blx	r3
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
  403ef6:	2102      	movs	r1, #2
  403ef8:	4620      	mov	r0, r4
  403efa:	4b1c      	ldr	r3, [pc, #112]	; (403f6c <spi_master_init+0x80>)
  403efc:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  403efe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  403f02:	2302      	movs	r3, #2
  403f04:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  403f06:	2380      	movs	r3, #128	; 0x80
  403f08:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  403f0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  403f0e:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  403f10:	6863      	ldr	r3, [r4, #4]
  403f12:	f043 0301 	orr.w	r3, r3, #1
  403f16:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  403f18:	6863      	ldr	r3, [r4, #4]
  403f1a:	f043 0310 	orr.w	r3, r3, #16
  403f1e:	6063      	str	r3, [r4, #4]
	spi_disable(SPI_MASTER_BASE);
	spi_reset(SPI_MASTER_BASE);
	spi_set_lastxfer(SPI_MASTER_BASE);
	spi_set_master_mode(SPI_MASTER_BASE);
	spi_disable_mode_fault_detect(SPI_MASTER_BASE);
	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_SEL);
  403f20:	2101      	movs	r1, #1
  403f22:	4620      	mov	r0, r4
  403f24:	4b12      	ldr	r3, [pc, #72]	; (403f70 <spi_master_init+0x84>)
  403f26:	4798      	blx	r3
	
	spi_set_clock_polarity(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  403f28:	2200      	movs	r2, #0
  403f2a:	2101      	movs	r1, #1
  403f2c:	4620      	mov	r0, r4
  403f2e:	4b11      	ldr	r3, [pc, #68]	; (403f74 <spi_master_init+0x88>)
  403f30:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
  403f32:	2201      	movs	r2, #1
  403f34:	4611      	mov	r1, r2
  403f36:	4620      	mov	r0, r4
  403f38:	4b0f      	ldr	r3, [pc, #60]	; (403f78 <spi_master_init+0x8c>)
  403f3a:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CSR_BITS_8_BIT);
  403f3c:	2200      	movs	r2, #0
  403f3e:	2101      	movs	r1, #1
  403f40:	4620      	mov	r0, r4
  403f42:	4b0e      	ldr	r3, [pc, #56]	; (403f7c <spi_master_init+0x90>)
  403f44:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, SPI_CHIP_SEL, (sysclk_get_peripheral_hz() / SPI_CLK_SPEED));
  403f46:	22ef      	movs	r2, #239	; 0xef
  403f48:	2101      	movs	r1, #1
  403f4a:	4620      	mov	r0, r4
  403f4c:	4b0c      	ldr	r3, [pc, #48]	; (403f80 <spi_master_init+0x94>)
  403f4e:	4798      	blx	r3
	spi_set_transfer_delay(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_DLYBS, SPI_DLYBCT);
  403f50:	2310      	movs	r3, #16
  403f52:	2240      	movs	r2, #64	; 0x40
  403f54:	2101      	movs	r1, #1
  403f56:	4620      	mov	r0, r4
  403f58:	4d0a      	ldr	r5, [pc, #40]	; (403f84 <spi_master_init+0x98>)
  403f5a:	47a8      	blx	r5
	p_spi->SPI_CR = SPI_CR_SPIEN;
  403f5c:	2301      	movs	r3, #1
  403f5e:	6023      	str	r3, [r4, #0]
  403f60:	bd38      	pop	{r3, r4, r5, pc}
  403f62:	bf00      	nop
  403f64:	40008000 	.word	0x40008000
  403f68:	0040457d 	.word	0x0040457d
  403f6c:	00404709 	.word	0x00404709
  403f70:	004004d1 	.word	0x004004d1
  403f74:	0040054b 	.word	0x0040054b
  403f78:	00400569 	.word	0x00400569
  403f7c:	00400587 	.word	0x00400587
  403f80:	0040059b 	.word	0x0040059b
  403f84:	004005c3 	.word	0x004005c3

00403f88 <spi_master_write_register>:

	spi_enable(SPI_MASTER_BASE);
}

void spi_master_write_register(uint8_t register_addr, uint32_t len, uint8_t * value)
{
  403f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403f8c:	b082      	sub	sp, #8
  403f8e:	460f      	mov	r7, r1
  403f90:	4616      	mov	r6, r2
	uint8_t reg	= register_addr; 
	const uint8_t *p_rbuf = value; 
	uint32_t rsize = len;
	uint32_t i;
	uint8_t uc_pcs = 0;
  403f92:	2300      	movs	r3, #0
  403f94:	f88d 3007 	strb.w	r3, [sp, #7]
	uint16_t data = 0;
  403f98:	f8ad 3004 	strh.w	r3, [sp, #4]
//	uint16_t data1 = 0;
//	uint8_t p_wbuf[200];

	reg &= WRITE_BIT_MASK;
  403f9c:	f000 0a7f 	and.w	sl, r0, #127	; 0x7f
if (spiPrint) {		
  403fa0:	4b22      	ldr	r3, [pc, #136]	; (40402c <spi_master_write_register+0xa4>)
  403fa2:	781b      	ldrb	r3, [r3, #0]
  403fa4:	bb63      	cbnz	r3, 404000 <spi_master_write_register+0x78>
    int j;
	printf("write: 0x%02x ", reg);
	for (j = 0; j < len; j++) printf("%02x ", value[j]);
	printf("\r\n");
}
	spi_write(SPI_MASTER_BASE, reg, uc_pcs, 0); /* write cmd/reg-addr */
  403fa6:	2300      	movs	r3, #0
  403fa8:	f89d 2007 	ldrb.w	r2, [sp, #7]
  403fac:	4651      	mov	r1, sl
  403fae:	4820      	ldr	r0, [pc, #128]	; (404030 <spi_master_write_register+0xa8>)
  403fb0:	4c20      	ldr	r4, [pc, #128]	; (404034 <spi_master_write_register+0xac>)
  403fb2:	47a0      	blx	r4
	return p_spi->SPI_SR;
  403fb4:	4a1e      	ldr	r2, [pc, #120]	; (404030 <spi_master_write_register+0xa8>)
  403fb6:	6913      	ldr	r3, [r2, #16]
	while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_TDRE) == 0); /* Wait transfer data reg done */
  403fb8:	f013 0f02 	tst.w	r3, #2
  403fbc:	d0fb      	beq.n	403fb6 <spi_master_write_register+0x2e>
    spi_read(SPI_MASTER_BASE, &data, &uc_pcs); /* dummy read */
  403fbe:	f10d 0207 	add.w	r2, sp, #7
  403fc2:	a901      	add	r1, sp, #4
  403fc4:	481a      	ldr	r0, [pc, #104]	; (404030 <spi_master_write_register+0xa8>)
  403fc6:	4b1c      	ldr	r3, [pc, #112]	; (404038 <spi_master_write_register+0xb0>)
  403fc8:	4798      	blx	r3

	for (i = 0; i < rsize; i++) {
  403fca:	b1b7      	cbz	r7, 403ffa <spi_master_write_register+0x72>
  403fcc:	4635      	mov	r5, r6
  403fce:	443e      	add	r6, r7

		spi_write(SPI_MASTER_BASE, p_rbuf[i], 0, 0); /* dummy write to generate clock */
  403fd0:	4c17      	ldr	r4, [pc, #92]	; (404030 <spi_master_write_register+0xa8>)
  403fd2:	f8df 8060 	ldr.w	r8, [pc, #96]	; 404034 <spi_master_write_register+0xac>
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_TDRE) == 0); /* Wait transfer data reg done. */
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs); /* read actual register data */
  403fd6:	4f18      	ldr	r7, [pc, #96]	; (404038 <spi_master_write_register+0xb0>)
		spi_write(SPI_MASTER_BASE, p_rbuf[i], 0, 0); /* dummy write to generate clock */
  403fd8:	2300      	movs	r3, #0
  403fda:	461a      	mov	r2, r3
  403fdc:	f815 1b01 	ldrb.w	r1, [r5], #1
  403fe0:	4620      	mov	r0, r4
  403fe2:	47c0      	blx	r8
  403fe4:	6923      	ldr	r3, [r4, #16]
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_TDRE) == 0); /* Wait transfer data reg done. */
  403fe6:	f013 0f02 	tst.w	r3, #2
  403fea:	d0fb      	beq.n	403fe4 <spi_master_write_register+0x5c>
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs); /* read actual register data */
  403fec:	f10d 0207 	add.w	r2, sp, #7
  403ff0:	a901      	add	r1, sp, #4
  403ff2:	4620      	mov	r0, r4
  403ff4:	47b8      	blx	r7
	for (i = 0; i < rsize; i++) {
  403ff6:	42ae      	cmp	r6, r5
  403ff8:	d1ee      	bne.n	403fd8 <spi_master_write_register+0x50>
	for (int j = 0; j < 3; j++) printf("%02x", p_wbuf[j]);
	printf("\r\n");*/
	
	return;
	getchar();
}
  403ffa:	b002      	add	sp, #8
  403ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	printf("write: 0x%02x ", reg);
  404000:	4651      	mov	r1, sl
  404002:	480e      	ldr	r0, [pc, #56]	; (40403c <spi_master_write_register+0xb4>)
  404004:	4b0e      	ldr	r3, [pc, #56]	; (404040 <spi_master_write_register+0xb8>)
  404006:	4798      	blx	r3
	for (j = 0; j < len; j++) printf("%02x ", value[j]);
  404008:	b15f      	cbz	r7, 404022 <spi_master_write_register+0x9a>
  40400a:	4634      	mov	r4, r6
  40400c:	eb06 0907 	add.w	r9, r6, r7
  404010:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40404c <spi_master_write_register+0xc4>
  404014:	4d0a      	ldr	r5, [pc, #40]	; (404040 <spi_master_write_register+0xb8>)
  404016:	f814 1b01 	ldrb.w	r1, [r4], #1
  40401a:	4640      	mov	r0, r8
  40401c:	47a8      	blx	r5
  40401e:	454c      	cmp	r4, r9
  404020:	d1f9      	bne.n	404016 <spi_master_write_register+0x8e>
	printf("\r\n");
  404022:	4808      	ldr	r0, [pc, #32]	; (404044 <spi_master_write_register+0xbc>)
  404024:	4b08      	ldr	r3, [pc, #32]	; (404048 <spi_master_write_register+0xc0>)
  404026:	4798      	blx	r3
  404028:	e7bd      	b.n	403fa6 <spi_master_write_register+0x1e>
  40402a:	bf00      	nop
  40402c:	20014084 	.word	0x20014084
  404030:	40008400 	.word	0x40008400
  404034:	00400517 	.word	0x00400517
  404038:	004004e7 	.word	0x004004e7
  40403c:	0040ef48 	.word	0x0040ef48
  404040:	00407d2d 	.word	0x00407d2d
  404044:	0040ec40 	.word	0x0040ec40
  404048:	00407df1 	.word	0x00407df1
  40404c:	0040ef58 	.word	0x0040ef58

00404050 <spi_master_set_read_register_cmd>:

void spi_master_set_read_register_cmd(uint8_t register_addr)
{
  404050:	b510      	push	{r4, lr}
  404052:	b082      	sub	sp, #8
		uint8_t reg	= register_addr;
		uint8_t uc_pcs = 0;//SPI_CHIP_PCS;
  404054:	2300      	movs	r3, #0
  404056:	f88d 3007 	strb.w	r3, [sp, #7]
		uint16_t data = 0;
  40405a:	f8ad 3004 	strh.w	r3, [sp, #4]

		reg |= READ_BIT_MASK;
  40405e:	f040 0480 	orr.w	r4, r0, #128	; 0x80
if (spiPrint) {printf("Set Rd: Addr: %02X \r\n", reg)	;}
  404062:	4b0e      	ldr	r3, [pc, #56]	; (40409c <spi_master_set_read_register_cmd+0x4c>)
  404064:	781b      	ldrb	r3, [r3, #0]
  404066:	b99b      	cbnz	r3, 404090 <spi_master_set_read_register_cmd+0x40>

		spi_write(SPI_MASTER_BASE, reg, uc_pcs, 0); /* write cmd/reg-addr */
  404068:	2300      	movs	r3, #0
  40406a:	f89d 2007 	ldrb.w	r2, [sp, #7]
  40406e:	4621      	mov	r1, r4
  404070:	480b      	ldr	r0, [pc, #44]	; (4040a0 <spi_master_set_read_register_cmd+0x50>)
  404072:	4c0c      	ldr	r4, [pc, #48]	; (4040a4 <spi_master_set_read_register_cmd+0x54>)
  404074:	47a0      	blx	r4
  404076:	4a0a      	ldr	r2, [pc, #40]	; (4040a0 <spi_master_set_read_register_cmd+0x50>)
  404078:	6913      	ldr	r3, [r2, #16]
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_TDRE) == 0); /* Wait transfer data reg done */
  40407a:	f013 0f02 	tst.w	r3, #2
  40407e:	d0fb      	beq.n	404078 <spi_master_set_read_register_cmd+0x28>
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs); /* dummy read */
  404080:	f10d 0207 	add.w	r2, sp, #7
  404084:	a901      	add	r1, sp, #4
  404086:	4806      	ldr	r0, [pc, #24]	; (4040a0 <spi_master_set_read_register_cmd+0x50>)
  404088:	4b07      	ldr	r3, [pc, #28]	; (4040a8 <spi_master_set_read_register_cmd+0x58>)
  40408a:	4798      	blx	r3
}
  40408c:	b002      	add	sp, #8
  40408e:	bd10      	pop	{r4, pc}
if (spiPrint) {printf("Set Rd: Addr: %02X \r\n", reg)	;}
  404090:	4621      	mov	r1, r4
  404092:	4806      	ldr	r0, [pc, #24]	; (4040ac <spi_master_set_read_register_cmd+0x5c>)
  404094:	4b06      	ldr	r3, [pc, #24]	; (4040b0 <spi_master_set_read_register_cmd+0x60>)
  404096:	4798      	blx	r3
  404098:	e7e6      	b.n	404068 <spi_master_set_read_register_cmd+0x18>
  40409a:	bf00      	nop
  40409c:	20014084 	.word	0x20014084
  4040a0:	40008400 	.word	0x40008400
  4040a4:	00400517 	.word	0x00400517
  4040a8:	004004e7 	.word	0x004004e7
  4040ac:	0040ef30 	.word	0x0040ef30
  4040b0:	00407d2d 	.word	0x00407d2d

004040b4 <spi_master_read_register>:

void spi_master_read_register(uint8_t register_addr, uint32_t len, uint8_t * value)
{
  4040b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4040b8:	b08c      	sub	sp, #48	; 0x30
  4040ba:	4605      	mov	r5, r0
  4040bc:	4688      	mov	r8, r1
  4040be:	4617      	mov	r7, r2
	uint8_t reg	= register_addr; 
	uint8_t *p_rbuf	= value; 
	uint32_t rsize	= len;
	uint32_t i;
	uint8_t uc_pcs = 0;//SPI_CHIP_PCS;
  4040c0:	2100      	movs	r1, #0
  4040c2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	uint16_t data = 0;
  4040c6:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    uint16_t val[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };  // for future expansion
  4040ca:	2226      	movs	r2, #38	; 0x26
  4040cc:	a801      	add	r0, sp, #4
  4040ce:	4b2e      	ldr	r3, [pc, #184]	; (404188 <spi_master_read_register+0xd4>)
  4040d0:	4798      	blx	r3
    val[2] = value[0];  // crc passed in
  4040d2:	783b      	ldrb	r3, [r7, #0]
  4040d4:	f8ad 3008 	strh.w	r3, [sp, #8]

	reg |= READ_BIT_MASK;
  4040d8:	f045 0580 	orr.w	r5, r5, #128	; 0x80

if (spiPrint) {
  4040dc:	4b2b      	ldr	r3, [pc, #172]	; (40418c <spi_master_read_register+0xd8>)
  4040de:	781b      	ldrb	r3, [r3, #0]
  4040e0:	2b00      	cmp	r3, #0
  4040e2:	d138      	bne.n	404156 <spi_master_read_register+0xa2>
	for (i=0; i<len; i++)
	printf(" Val:  %02X ", (uint) (value[i]));
	printf("\r\n");
}	

	spi_write(SPI_MASTER_BASE, reg, uc_pcs, 0); /* write cmd/reg-addr */
  4040e4:	2300      	movs	r3, #0
  4040e6:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
  4040ea:	4629      	mov	r1, r5
  4040ec:	4828      	ldr	r0, [pc, #160]	; (404190 <spi_master_read_register+0xdc>)
  4040ee:	4c29      	ldr	r4, [pc, #164]	; (404194 <spi_master_read_register+0xe0>)
  4040f0:	47a0      	blx	r4
  4040f2:	4a27      	ldr	r2, [pc, #156]	; (404190 <spi_master_read_register+0xdc>)
  4040f4:	6913      	ldr	r3, [r2, #16]
	while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_TDRE) == 0); /* Wait transfer data reg done */
  4040f6:	f013 0f02 	tst.w	r3, #2
  4040fa:	d0fb      	beq.n	4040f4 <spi_master_read_register+0x40>
	spi_read(SPI_MASTER_BASE, &data, &uc_pcs); /* dummy read */
  4040fc:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
  404100:	a90b      	add	r1, sp, #44	; 0x2c
  404102:	4823      	ldr	r0, [pc, #140]	; (404190 <spi_master_read_register+0xdc>)
  404104:	4b24      	ldr	r3, [pc, #144]	; (404198 <spi_master_read_register+0xe4>)
  404106:	4798      	blx	r3

	for (i = 0; i < rsize; i++) {
  404108:	f1b8 0f00 	cmp.w	r8, #0
  40410c:	d020      	beq.n	404150 <spi_master_read_register+0x9c>
  40410e:	f10d 0602 	add.w	r6, sp, #2
  404112:	1e7d      	subs	r5, r7, #1
  404114:	f108 38ff 	add.w	r8, r8, #4294967295
  404118:	4447      	add	r7, r8
		spi_write(SPI_MASTER_BASE, val[i], uc_pcs, 0); /* dummy write to generate clock */
  40411a:	4c1d      	ldr	r4, [pc, #116]	; (404190 <spi_master_read_register+0xdc>)
  40411c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 404194 <spi_master_read_register+0xe0>
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_TDRE) == 0); /* Wait transfer data reg done. */
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs); /* read actual register data */
  404120:	f8df 8074 	ldr.w	r8, [pc, #116]	; 404198 <spi_master_read_register+0xe4>
		spi_write(SPI_MASTER_BASE, val[i], uc_pcs, 0); /* dummy write to generate clock */
  404124:	2300      	movs	r3, #0
  404126:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
  40412a:	f836 1f02 	ldrh.w	r1, [r6, #2]!
  40412e:	4620      	mov	r0, r4
  404130:	47c8      	blx	r9
  404132:	6923      	ldr	r3, [r4, #16]
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_TDRE) == 0); /* Wait transfer data reg done. */
  404134:	f013 0f02 	tst.w	r3, #2
  404138:	d0fb      	beq.n	404132 <spi_master_read_register+0x7e>
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs); /* read actual register data */
  40413a:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
  40413e:	a90b      	add	r1, sp, #44	; 0x2c
  404140:	4620      	mov	r0, r4
  404142:	47c0      	blx	r8
		p_rbuf[i] = (uint8_t)(data & 0xFF);
  404144:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
  404148:	f805 3f01 	strb.w	r3, [r5, #1]!
	for (i = 0; i < rsize; i++) {
  40414c:	42bd      	cmp	r5, r7
  40414e:	d1e9      	bne.n	404124 <spi_master_read_register+0x70>
	}
	return;
}
  404150:	b00c      	add	sp, #48	; 0x30
  404152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	printf("Rd: Addr: %02X, length: %d ", reg, len);
  404156:	4642      	mov	r2, r8
  404158:	4629      	mov	r1, r5
  40415a:	4810      	ldr	r0, [pc, #64]	; (40419c <spi_master_read_register+0xe8>)
  40415c:	4b10      	ldr	r3, [pc, #64]	; (4041a0 <spi_master_read_register+0xec>)
  40415e:	4798      	blx	r3
	for (i=0; i<len; i++)
  404160:	f1b8 0f00 	cmp.w	r8, #0
  404164:	d00b      	beq.n	40417e <spi_master_read_register+0xca>
  404166:	463c      	mov	r4, r7
  404168:	eb07 0a08 	add.w	sl, r7, r8
	printf(" Val:  %02X ", (uint) (value[i]));
  40416c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 4041ac <spi_master_read_register+0xf8>
  404170:	4e0b      	ldr	r6, [pc, #44]	; (4041a0 <spi_master_read_register+0xec>)
  404172:	f814 1b01 	ldrb.w	r1, [r4], #1
  404176:	4648      	mov	r0, r9
  404178:	47b0      	blx	r6
	for (i=0; i<len; i++)
  40417a:	4554      	cmp	r4, sl
  40417c:	d1f9      	bne.n	404172 <spi_master_read_register+0xbe>
	printf("\r\n");
  40417e:	4809      	ldr	r0, [pc, #36]	; (4041a4 <spi_master_read_register+0xf0>)
  404180:	4b09      	ldr	r3, [pc, #36]	; (4041a8 <spi_master_read_register+0xf4>)
  404182:	4798      	blx	r3
  404184:	e7ae      	b.n	4040e4 <spi_master_read_register+0x30>
  404186:	bf00      	nop
  404188:	00407c91 	.word	0x00407c91
  40418c:	20014084 	.word	0x20014084
  404190:	40008400 	.word	0x40008400
  404194:	00400517 	.word	0x00400517
  404198:	004004e7 	.word	0x004004e7
  40419c:	0040ef04 	.word	0x0040ef04
  4041a0:	00407d2d 	.word	0x00407d2d
  4041a4:	0040ec40 	.word	0x0040ec40
  4041a8:	00407df1 	.word	0x00407df1
  4041ac:	0040ef20 	.word	0x0040ef20

004041b0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4041b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4041b2:	b083      	sub	sp, #12
  4041b4:	4604      	mov	r4, r0
  4041b6:	460e      	mov	r6, r1
	uint32_t val = 0;
  4041b8:	2300      	movs	r3, #0
  4041ba:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4041bc:	4b34      	ldr	r3, [pc, #208]	; (404290 <usart_serial_getchar+0xe0>)
  4041be:	4298      	cmp	r0, r3
  4041c0:	d016      	beq.n	4041f0 <usart_serial_getchar+0x40>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4041c2:	4b34      	ldr	r3, [pc, #208]	; (404294 <usart_serial_getchar+0xe4>)
  4041c4:	4298      	cmp	r0, r3
  4041c6:	d01d      	beq.n	404204 <usart_serial_getchar+0x54>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4041c8:	4b33      	ldr	r3, [pc, #204]	; (404298 <usart_serial_getchar+0xe8>)
  4041ca:	4298      	cmp	r0, r3
  4041cc:	d024      	beq.n	404218 <usart_serial_getchar+0x68>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  4041ce:	4b33      	ldr	r3, [pc, #204]	; (40429c <usart_serial_getchar+0xec>)
  4041d0:	429c      	cmp	r4, r3
  4041d2:	d02b      	beq.n	40422c <usart_serial_getchar+0x7c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  4041d4:	4b32      	ldr	r3, [pc, #200]	; (4042a0 <usart_serial_getchar+0xf0>)
  4041d6:	429c      	cmp	r4, r3
  4041d8:	d032      	beq.n	404240 <usart_serial_getchar+0x90>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  4041da:	4b32      	ldr	r3, [pc, #200]	; (4042a4 <usart_serial_getchar+0xf4>)
  4041dc:	429c      	cmp	r4, r3
  4041de:	d039      	beq.n	404254 <usart_serial_getchar+0xa4>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  4041e0:	4b31      	ldr	r3, [pc, #196]	; (4042a8 <usart_serial_getchar+0xf8>)
  4041e2:	429c      	cmp	r4, r3
  4041e4:	d040      	beq.n	404268 <usart_serial_getchar+0xb8>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  4041e6:	4b31      	ldr	r3, [pc, #196]	; (4042ac <usart_serial_getchar+0xfc>)
  4041e8:	429c      	cmp	r4, r3
  4041ea:	d047      	beq.n	40427c <usart_serial_getchar+0xcc>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4041ec:	b003      	add	sp, #12
  4041ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (usart_read(p_usart, &val));
  4041f0:	461f      	mov	r7, r3
  4041f2:	4d2f      	ldr	r5, [pc, #188]	; (4042b0 <usart_serial_getchar+0x100>)
  4041f4:	a901      	add	r1, sp, #4
  4041f6:	4638      	mov	r0, r7
  4041f8:	47a8      	blx	r5
  4041fa:	2800      	cmp	r0, #0
  4041fc:	d1fa      	bne.n	4041f4 <usart_serial_getchar+0x44>
		*data = (uint8_t)(val & 0xFF);
  4041fe:	9b01      	ldr	r3, [sp, #4]
  404200:	7033      	strb	r3, [r6, #0]
  404202:	e7e4      	b.n	4041ce <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
  404204:	461f      	mov	r7, r3
  404206:	4d2a      	ldr	r5, [pc, #168]	; (4042b0 <usart_serial_getchar+0x100>)
  404208:	a901      	add	r1, sp, #4
  40420a:	4638      	mov	r0, r7
  40420c:	47a8      	blx	r5
  40420e:	2800      	cmp	r0, #0
  404210:	d1fa      	bne.n	404208 <usart_serial_getchar+0x58>
		*data = (uint8_t)(val & 0xFF);
  404212:	9b01      	ldr	r3, [sp, #4]
  404214:	7033      	strb	r3, [r6, #0]
  404216:	e7dd      	b.n	4041d4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  404218:	461f      	mov	r7, r3
  40421a:	4d25      	ldr	r5, [pc, #148]	; (4042b0 <usart_serial_getchar+0x100>)
  40421c:	a901      	add	r1, sp, #4
  40421e:	4638      	mov	r0, r7
  404220:	47a8      	blx	r5
  404222:	2800      	cmp	r0, #0
  404224:	d1fa      	bne.n	40421c <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  404226:	9b01      	ldr	r3, [sp, #4]
  404228:	7033      	strb	r3, [r6, #0]
  40422a:	e7d6      	b.n	4041da <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
  40422c:	461f      	mov	r7, r3
  40422e:	4d20      	ldr	r5, [pc, #128]	; (4042b0 <usart_serial_getchar+0x100>)
  404230:	a901      	add	r1, sp, #4
  404232:	4638      	mov	r0, r7
  404234:	47a8      	blx	r5
  404236:	2800      	cmp	r0, #0
  404238:	d1fa      	bne.n	404230 <usart_serial_getchar+0x80>
		*data = (uint8_t)(val & 0xFF);
  40423a:	9b01      	ldr	r3, [sp, #4]
  40423c:	7033      	strb	r3, [r6, #0]
  40423e:	e7cf      	b.n	4041e0 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  404240:	461f      	mov	r7, r3
  404242:	4d1b      	ldr	r5, [pc, #108]	; (4042b0 <usart_serial_getchar+0x100>)
  404244:	a901      	add	r1, sp, #4
  404246:	4638      	mov	r0, r7
  404248:	47a8      	blx	r5
  40424a:	2800      	cmp	r0, #0
  40424c:	d1fa      	bne.n	404244 <usart_serial_getchar+0x94>
		*data = (uint8_t)(val & 0xFF);
  40424e:	9b01      	ldr	r3, [sp, #4]
  404250:	7033      	strb	r3, [r6, #0]
  404252:	e7c8      	b.n	4041e6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  404254:	461d      	mov	r5, r3
  404256:	4c16      	ldr	r4, [pc, #88]	; (4042b0 <usart_serial_getchar+0x100>)
  404258:	a901      	add	r1, sp, #4
  40425a:	4628      	mov	r0, r5
  40425c:	47a0      	blx	r4
  40425e:	2800      	cmp	r0, #0
  404260:	d1fa      	bne.n	404258 <usart_serial_getchar+0xa8>
		*data = (uint8_t)(val & 0xFF);
  404262:	9b01      	ldr	r3, [sp, #4]
  404264:	7033      	strb	r3, [r6, #0]
  404266:	e7c1      	b.n	4041ec <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
  404268:	461d      	mov	r5, r3
  40426a:	4c11      	ldr	r4, [pc, #68]	; (4042b0 <usart_serial_getchar+0x100>)
  40426c:	a901      	add	r1, sp, #4
  40426e:	4628      	mov	r0, r5
  404270:	47a0      	blx	r4
  404272:	2800      	cmp	r0, #0
  404274:	d1fa      	bne.n	40426c <usart_serial_getchar+0xbc>
		*data = (uint8_t)(val & 0xFF);
  404276:	9b01      	ldr	r3, [sp, #4]
  404278:	7033      	strb	r3, [r6, #0]
  40427a:	e7b7      	b.n	4041ec <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
  40427c:	461d      	mov	r5, r3
  40427e:	4c0c      	ldr	r4, [pc, #48]	; (4042b0 <usart_serial_getchar+0x100>)
  404280:	a901      	add	r1, sp, #4
  404282:	4628      	mov	r0, r5
  404284:	47a0      	blx	r4
  404286:	2800      	cmp	r0, #0
  404288:	d1fa      	bne.n	404280 <usart_serial_getchar+0xd0>
		*data = (uint8_t)(val & 0xFF);
  40428a:	9b01      	ldr	r3, [sp, #4]
  40428c:	7033      	strb	r3, [r6, #0]
}
  40428e:	e7ad      	b.n	4041ec <usart_serial_getchar+0x3c>
  404290:	4000c200 	.word	0x4000c200
  404294:	40020200 	.word	0x40020200
  404298:	40024200 	.word	0x40024200
  40429c:	40018200 	.word	0x40018200
  4042a0:	4001c200 	.word	0x4001c200
  4042a4:	40008200 	.word	0x40008200
  4042a8:	40040200 	.word	0x40040200
  4042ac:	40034200 	.word	0x40034200
  4042b0:	004006e1 	.word	0x004006e1

004042b4 <usart_serial_putchar>:
{
  4042b4:	b570      	push	{r4, r5, r6, lr}
  4042b6:	460c      	mov	r4, r1
	if (USART0 == p_usart) {
  4042b8:	4b30      	ldr	r3, [pc, #192]	; (40437c <usart_serial_putchar+0xc8>)
  4042ba:	4298      	cmp	r0, r3
  4042bc:	d016      	beq.n	4042ec <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
  4042be:	4b30      	ldr	r3, [pc, #192]	; (404380 <usart_serial_putchar+0xcc>)
  4042c0:	4298      	cmp	r0, r3
  4042c2:	d01c      	beq.n	4042fe <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
  4042c4:	4b2f      	ldr	r3, [pc, #188]	; (404384 <usart_serial_putchar+0xd0>)
  4042c6:	4298      	cmp	r0, r3
  4042c8:	d022      	beq.n	404310 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
  4042ca:	4b2f      	ldr	r3, [pc, #188]	; (404388 <usart_serial_putchar+0xd4>)
  4042cc:	4298      	cmp	r0, r3
  4042ce:	d028      	beq.n	404322 <usart_serial_putchar+0x6e>
	if (USART4 == p_usart) {
  4042d0:	4b2e      	ldr	r3, [pc, #184]	; (40438c <usart_serial_putchar+0xd8>)
  4042d2:	4298      	cmp	r0, r3
  4042d4:	d02e      	beq.n	404334 <usart_serial_putchar+0x80>
	if (USART5 == p_usart) {
  4042d6:	4b2e      	ldr	r3, [pc, #184]	; (404390 <usart_serial_putchar+0xdc>)
  4042d8:	4298      	cmp	r0, r3
  4042da:	d034      	beq.n	404346 <usart_serial_putchar+0x92>
	if (USART6 == p_usart) {
  4042dc:	4b2d      	ldr	r3, [pc, #180]	; (404394 <usart_serial_putchar+0xe0>)
  4042de:	4298      	cmp	r0, r3
  4042e0:	d03a      	beq.n	404358 <usart_serial_putchar+0xa4>
	if (USART7 == p_usart) {
  4042e2:	4b2d      	ldr	r3, [pc, #180]	; (404398 <usart_serial_putchar+0xe4>)
  4042e4:	4298      	cmp	r0, r3
  4042e6:	d040      	beq.n	40436a <usart_serial_putchar+0xb6>
	return 0;
  4042e8:	2000      	movs	r0, #0
}
  4042ea:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4042ec:	461e      	mov	r6, r3
  4042ee:	4d2b      	ldr	r5, [pc, #172]	; (40439c <usart_serial_putchar+0xe8>)
  4042f0:	4621      	mov	r1, r4
  4042f2:	4630      	mov	r0, r6
  4042f4:	47a8      	blx	r5
  4042f6:	2800      	cmp	r0, #0
  4042f8:	d1fa      	bne.n	4042f0 <usart_serial_putchar+0x3c>
		return 1;
  4042fa:	2001      	movs	r0, #1
  4042fc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4042fe:	461e      	mov	r6, r3
  404300:	4d26      	ldr	r5, [pc, #152]	; (40439c <usart_serial_putchar+0xe8>)
  404302:	4621      	mov	r1, r4
  404304:	4630      	mov	r0, r6
  404306:	47a8      	blx	r5
  404308:	2800      	cmp	r0, #0
  40430a:	d1fa      	bne.n	404302 <usart_serial_putchar+0x4e>
		return 1;
  40430c:	2001      	movs	r0, #1
  40430e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404310:	461e      	mov	r6, r3
  404312:	4d22      	ldr	r5, [pc, #136]	; (40439c <usart_serial_putchar+0xe8>)
  404314:	4621      	mov	r1, r4
  404316:	4630      	mov	r0, r6
  404318:	47a8      	blx	r5
  40431a:	2800      	cmp	r0, #0
  40431c:	d1fa      	bne.n	404314 <usart_serial_putchar+0x60>
		return 1;
  40431e:	2001      	movs	r0, #1
  404320:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404322:	461e      	mov	r6, r3
  404324:	4d1d      	ldr	r5, [pc, #116]	; (40439c <usart_serial_putchar+0xe8>)
  404326:	4621      	mov	r1, r4
  404328:	4630      	mov	r0, r6
  40432a:	47a8      	blx	r5
  40432c:	2800      	cmp	r0, #0
  40432e:	d1fa      	bne.n	404326 <usart_serial_putchar+0x72>
		return 1;
  404330:	2001      	movs	r0, #1
  404332:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404334:	461e      	mov	r6, r3
  404336:	4d19      	ldr	r5, [pc, #100]	; (40439c <usart_serial_putchar+0xe8>)
  404338:	4621      	mov	r1, r4
  40433a:	4630      	mov	r0, r6
  40433c:	47a8      	blx	r5
  40433e:	2800      	cmp	r0, #0
  404340:	d1fa      	bne.n	404338 <usart_serial_putchar+0x84>
		return 1;
  404342:	2001      	movs	r0, #1
  404344:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404346:	461e      	mov	r6, r3
  404348:	4d14      	ldr	r5, [pc, #80]	; (40439c <usart_serial_putchar+0xe8>)
  40434a:	4621      	mov	r1, r4
  40434c:	4630      	mov	r0, r6
  40434e:	47a8      	blx	r5
  404350:	2800      	cmp	r0, #0
  404352:	d1fa      	bne.n	40434a <usart_serial_putchar+0x96>
		return 1;
  404354:	2001      	movs	r0, #1
  404356:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404358:	461e      	mov	r6, r3
  40435a:	4d10      	ldr	r5, [pc, #64]	; (40439c <usart_serial_putchar+0xe8>)
  40435c:	4621      	mov	r1, r4
  40435e:	4630      	mov	r0, r6
  404360:	47a8      	blx	r5
  404362:	2800      	cmp	r0, #0
  404364:	d1fa      	bne.n	40435c <usart_serial_putchar+0xa8>
		return 1;
  404366:	2001      	movs	r0, #1
  404368:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40436a:	461e      	mov	r6, r3
  40436c:	4d0b      	ldr	r5, [pc, #44]	; (40439c <usart_serial_putchar+0xe8>)
  40436e:	4621      	mov	r1, r4
  404370:	4630      	mov	r0, r6
  404372:	47a8      	blx	r5
  404374:	2800      	cmp	r0, #0
  404376:	d1fa      	bne.n	40436e <usart_serial_putchar+0xba>
		return 1;
  404378:	2001      	movs	r0, #1
  40437a:	bd70      	pop	{r4, r5, r6, pc}
  40437c:	4000c200 	.word	0x4000c200
  404380:	40020200 	.word	0x40020200
  404384:	40024200 	.word	0x40024200
  404388:	40018200 	.word	0x40018200
  40438c:	4001c200 	.word	0x4001c200
  404390:	40008200 	.word	0x40008200
  404394:	40040200 	.word	0x40040200
  404398:	40034200 	.word	0x40034200
  40439c:	004006cd 	.word	0x004006cd

004043a0 <configure_console>:
extern uint8_t main_tx_buf[MAXDATABUF];

uint8_t main_rx_buf_ind = 0;

void configure_console(void)
{
  4043a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4043a4:	b087      	sub	sp, #28
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4043a6:	2008      	movs	r0, #8
  4043a8:	4b30      	ldr	r3, [pc, #192]	; (40446c <configure_console+0xcc>)
  4043aa:	4798      	blx	r3
	usart_settings.baudrate = opt->baudrate;
  4043ac:	f44f 2b61 	mov.w	fp, #921600	; 0xe1000
  4043b0:	f8cd b000 	str.w	fp, [sp]
	usart_settings.char_length = opt->charlength;
  4043b4:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
  4043b8:	f8cd a004 	str.w	sl, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  4043bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4043c0:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  4043c2:	2500      	movs	r5, #0
  4043c4:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4043c6:	9504      	str	r5, [sp, #16]
		flexcom_enable(FLEXCOM0);
  4043c8:	4829      	ldr	r0, [pc, #164]	; (404470 <configure_console+0xd0>)
  4043ca:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 4044a4 <configure_console+0x104>
  4043ce:	47c0      	blx	r8
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
  4043d0:	2101      	movs	r1, #1
  4043d2:	4827      	ldr	r0, [pc, #156]	; (404470 <configure_console+0xd0>)
  4043d4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 4044a8 <configure_console+0x108>
  4043d8:	47c8      	blx	r9
		usart_init_rs232(p_usart, &usart_settings,
  4043da:	4a26      	ldr	r2, [pc, #152]	; (404474 <configure_console+0xd4>)
  4043dc:	4669      	mov	r1, sp
  4043de:	4826      	ldr	r0, [pc, #152]	; (404478 <configure_console+0xd8>)
  4043e0:	4c26      	ldr	r4, [pc, #152]	; (40447c <configure_console+0xdc>)
  4043e2:	47a0      	blx	r4
		usart_enable_tx(p_usart);
  4043e4:	4824      	ldr	r0, [pc, #144]	; (404478 <configure_console+0xd8>)
  4043e6:	4e26      	ldr	r6, [pc, #152]	; (404480 <configure_console+0xe0>)
  4043e8:	47b0      	blx	r6
		usart_enable_rx(p_usart);
  4043ea:	4823      	ldr	r0, [pc, #140]	; (404478 <configure_console+0xd8>)
  4043ec:	4f25      	ldr	r7, [pc, #148]	; (404484 <configure_console+0xe4>)
  4043ee:	47b8      	blx	r7
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4043f0:	4b25      	ldr	r3, [pc, #148]	; (404488 <configure_console+0xe8>)
  4043f2:	4a21      	ldr	r2, [pc, #132]	; (404478 <configure_console+0xd8>)
  4043f4:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4043f6:	4a25      	ldr	r2, [pc, #148]	; (40448c <configure_console+0xec>)
  4043f8:	4b25      	ldr	r3, [pc, #148]	; (404490 <configure_console+0xf0>)
  4043fa:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4043fc:	4a25      	ldr	r2, [pc, #148]	; (404494 <configure_console+0xf4>)
  4043fe:	4b26      	ldr	r3, [pc, #152]	; (404498 <configure_console+0xf8>)
  404400:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  404402:	f8cd b000 	str.w	fp, [sp]
	usart_settings.char_length = opt->charlength;
  404406:	f8cd a004 	str.w	sl, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  40440a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40440e:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  404410:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  404412:	9504      	str	r5, [sp, #16]
		flexcom_enable(FLEXCOM0);
  404414:	4816      	ldr	r0, [pc, #88]	; (404470 <configure_console+0xd0>)
  404416:	47c0      	blx	r8
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
  404418:	2101      	movs	r1, #1
  40441a:	4815      	ldr	r0, [pc, #84]	; (404470 <configure_console+0xd0>)
  40441c:	47c8      	blx	r9
		usart_init_rs232(p_usart, &usart_settings,
  40441e:	4a15      	ldr	r2, [pc, #84]	; (404474 <configure_console+0xd4>)
  404420:	4669      	mov	r1, sp
  404422:	4815      	ldr	r0, [pc, #84]	; (404478 <configure_console+0xd8>)
  404424:	47a0      	blx	r4
		usart_enable_tx(p_usart);
  404426:	4814      	ldr	r0, [pc, #80]	; (404478 <configure_console+0xd8>)
  404428:	47b0      	blx	r6
		usart_enable_rx(p_usart);
  40442a:	4813      	ldr	r0, [pc, #76]	; (404478 <configure_console+0xd8>)
  40442c:	47b8      	blx	r7
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40442e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 4044ac <configure_console+0x10c>
  404432:	f8d9 3000 	ldr.w	r3, [r9]
  404436:	4629      	mov	r1, r5
  404438:	6898      	ldr	r0, [r3, #8]
  40443a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4044b0 <configure_console+0x110>
  40443e:	47c0      	blx	r8
	setbuf(stdin, NULL);
  404440:	f8d9 3000 	ldr.w	r3, [r9]
  404444:	4629      	mov	r1, r5
  404446:	6858      	ldr	r0, [r3, #4]
  404448:	47c0      	blx	r8
	sysclk_enable_peripheral_clock(CONF_UART_ID);
	usart_serial_init(CONF_UART, (usart_serial_options_t *)&uart_serial_options);

	stdio_serial_init(CONF_UART, &uart_serial_options);

	usart_enable_rx(CONF_UART);
  40444a:	480b      	ldr	r0, [pc, #44]	; (404478 <configure_console+0xd8>)
  40444c:	47b8      	blx	r7
	usart_enable_tx(CONF_UART);
  40444e:	480a      	ldr	r0, [pc, #40]	; (404478 <configure_console+0xd8>)
  404450:	47b0      	blx	r6

	/* Enable UART IRQ */
	//usart_enable_interrupt(CONF_UART, (US_IER_RXRDY | US_IER_ENDTX));
	usart_enable_interrupt(CONF_UART, US_IER_RXRDY );
  404452:	2101      	movs	r1, #1
  404454:	4808      	ldr	r0, [pc, #32]	; (404478 <configure_console+0xd8>)
  404456:	4b11      	ldr	r3, [pc, #68]	; (40449c <configure_console+0xfc>)
  404458:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40445a:	4b11      	ldr	r3, [pc, #68]	; (4044a0 <configure_console+0x100>)
  40445c:	f883 5308 	strb.w	r5, [r3, #776]	; 0x308
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404460:	f44f 7280 	mov.w	r2, #256	; 0x100
  404464:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(CONSOLE_UART_IRQn, 0);

	/* Enable UART interrupt */
	NVIC_EnableIRQ(CONSOLE_UART_IRQn);

}
  404466:	b007      	add	sp, #28
  404468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40446c:	00404a99 	.word	0x00404a99
  404470:	4000c000 	.word	0x4000c000
  404474:	07270000 	.word	0x07270000
  404478:	4000c200 	.word	0x4000c200
  40447c:	00400665 	.word	0x00400665
  404480:	004006b9 	.word	0x004006b9
  404484:	004006bf 	.word	0x004006bf
  404488:	2001a1e0 	.word	0x2001a1e0
  40448c:	004042b5 	.word	0x004042b5
  404490:	2001a1dc 	.word	0x2001a1dc
  404494:	004041b1 	.word	0x004041b1
  404498:	2001a16c 	.word	0x2001a16c
  40449c:	004006c5 	.word	0x004006c5
  4044a0:	e000e100 	.word	0xe000e100
  4044a4:	0040457d 	.word	0x0040457d
  4044a8:	00404709 	.word	0x00404709
  4044ac:	20000378 	.word	0x20000378
  4044b0:	00407e35 	.word	0x00407e35

004044b4 <FLEXCOM0_Handler>:
bool gpio_level_0 = false;
/**
 * \brief Interrupt handler for USART interrupt.
 */
void console_uart_irq_handler(void)
{
  4044b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4044b6:	b083      	sub	sp, #12
	uint32_t ul_status;
	
	/* Read USART Status. */
	ul_status = usart_get_status(CONF_UART);
  4044b8:	4815      	ldr	r0, [pc, #84]	; (404510 <FLEXCOM0_Handler+0x5c>)
  4044ba:	4b16      	ldr	r3, [pc, #88]	; (404514 <FLEXCOM0_Handler+0x60>)
  4044bc:	4798      	blx	r3
  4044be:	4607      	mov	r7, r0

	if((ul_status &  US_CSR_RXRDY ))
  4044c0:	f010 0f01 	tst.w	r0, #1
  4044c4:	d104      	bne.n	4044d0 <FLEXCOM0_Handler+0x1c>
			//main_rx_buf_ind = 0;
		//}
		//else
			//main_rx_buf_ind++;
	}
	if((ul_status &  US_CSR_ENDTX ))
  4044c6:	f017 0f10 	tst.w	r7, #16
  4044ca:	d118      	bne.n	4044fe <FLEXCOM0_Handler+0x4a>
	{
		xSemaphoreGive(sema_main_tx_uart);
	}
}
  4044cc:	b003      	add	sp, #12
  4044ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t val = 0;
  4044d0:	ac02      	add	r4, sp, #8
  4044d2:	2300      	movs	r3, #0
  4044d4:	f844 3d04 	str.w	r3, [r4, #-4]!
		while (usart_read(p_usart, &val));
  4044d8:	4e0d      	ldr	r6, [pc, #52]	; (404510 <FLEXCOM0_Handler+0x5c>)
  4044da:	4d0f      	ldr	r5, [pc, #60]	; (404518 <FLEXCOM0_Handler+0x64>)
  4044dc:	4621      	mov	r1, r4
  4044de:	4630      	mov	r0, r6
  4044e0:	47a8      	blx	r5
  4044e2:	2800      	cmp	r0, #0
  4044e4:	d1fa      	bne.n	4044dc <FLEXCOM0_Handler+0x28>
		*data = (uint8_t)(val & 0xFF);
  4044e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
		main_rx_buf[0] = rxbyte;
  4044ea:	4b0c      	ldr	r3, [pc, #48]	; (40451c <FLEXCOM0_Handler+0x68>)
  4044ec:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(sema_main_rx_uart);
  4044ee:	2300      	movs	r3, #0
  4044f0:	461a      	mov	r2, r3
  4044f2:	4619      	mov	r1, r3
  4044f4:	480a      	ldr	r0, [pc, #40]	; (404520 <FLEXCOM0_Handler+0x6c>)
  4044f6:	6800      	ldr	r0, [r0, #0]
  4044f8:	4c0a      	ldr	r4, [pc, #40]	; (404524 <FLEXCOM0_Handler+0x70>)
  4044fa:	47a0      	blx	r4
  4044fc:	e7e3      	b.n	4044c6 <FLEXCOM0_Handler+0x12>
		xSemaphoreGive(sema_main_tx_uart);
  4044fe:	2300      	movs	r3, #0
  404500:	461a      	mov	r2, r3
  404502:	4619      	mov	r1, r3
  404504:	4808      	ldr	r0, [pc, #32]	; (404528 <FLEXCOM0_Handler+0x74>)
  404506:	6800      	ldr	r0, [r0, #0]
  404508:	4c06      	ldr	r4, [pc, #24]	; (404524 <FLEXCOM0_Handler+0x70>)
  40450a:	47a0      	blx	r4
}
  40450c:	e7de      	b.n	4044cc <FLEXCOM0_Handler+0x18>
  40450e:	bf00      	nop
  404510:	4000c200 	.word	0x4000c200
  404514:	004006c9 	.word	0x004006c9
  404518:	004006e1 	.word	0x004006e1
  40451c:	2001a24c 	.word	0x2001a24c
  404520:	2001a240 	.word	0x2001a240
  404524:	00400e4d 	.word	0x00400e4d
  404528:	2001a244 	.word	0x2001a244

0040452c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  40452c:	3801      	subs	r0, #1
  40452e:	2802      	cmp	r0, #2
  404530:	d815      	bhi.n	40455e <_write+0x32>
{
  404532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404536:	460e      	mov	r6, r1
  404538:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40453a:	b19a      	cbz	r2, 404564 <_write+0x38>
  40453c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40453e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 404578 <_write+0x4c>
  404542:	4f0c      	ldr	r7, [pc, #48]	; (404574 <_write+0x48>)
  404544:	f8d8 0000 	ldr.w	r0, [r8]
  404548:	f815 1b01 	ldrb.w	r1, [r5], #1
  40454c:	683b      	ldr	r3, [r7, #0]
  40454e:	4798      	blx	r3
  404550:	2800      	cmp	r0, #0
  404552:	db0a      	blt.n	40456a <_write+0x3e>
  404554:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  404556:	3c01      	subs	r4, #1
  404558:	d1f4      	bne.n	404544 <_write+0x18>
  40455a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40455e:	f04f 30ff 	mov.w	r0, #4294967295
  404562:	4770      	bx	lr
	for (; len != 0; --len) {
  404564:	4610      	mov	r0, r2
  404566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40456a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40456e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404572:	bf00      	nop
  404574:	2001a1dc 	.word	0x2001a1dc
  404578:	2001a1e0 	.word	0x2001a1e0

0040457c <flexcom_enable>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40457c:	4b54      	ldr	r3, [pc, #336]	; (4046d0 <flexcom_enable+0x154>)
  40457e:	781b      	ldrb	r3, [r3, #0]
  404580:	2bff      	cmp	r3, #255	; 0xff
  404582:	d034      	beq.n	4045ee <flexcom_enable+0x72>
 *
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 *
 */
void flexcom_enable(Flexcom *p_flexcom)
{
  404584:	b500      	push	{lr}
  404586:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404588:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40458c:	fab3 f383 	clz	r3, r3
  404590:	095b      	lsrs	r3, r3, #5
  404592:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404594:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  404596:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40459a:	2200      	movs	r2, #0
  40459c:	4b4d      	ldr	r3, [pc, #308]	; (4046d4 <flexcom_enable+0x158>)
  40459e:	701a      	strb	r2, [r3, #0]
	return flags;
  4045a0:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4045a2:	4a4b      	ldr	r2, [pc, #300]	; (4046d0 <flexcom_enable+0x154>)
  4045a4:	7813      	ldrb	r3, [r2, #0]
  4045a6:	3301      	adds	r3, #1
  4045a8:	7013      	strb	r3, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4045aa:	b129      	cbz	r1, 4045b8 <flexcom_enable+0x3c>
		cpu_irq_enable();
  4045ac:	2201      	movs	r2, #1
  4045ae:	4b49      	ldr	r3, [pc, #292]	; (4046d4 <flexcom_enable+0x158>)
  4045b0:	701a      	strb	r2, [r3, #0]
  4045b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4045b6:	b662      	cpsie	i
#endif

	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);
	/* Enable PMC clock for FLEXCOM */
#ifdef ID_FLEXCOM7
	 if (p_flexcom == FLEXCOM7) {
  4045b8:	4a47      	ldr	r2, [pc, #284]	; (4046d8 <flexcom_enable+0x15c>)
  4045ba:	4290      	cmp	r0, r2
  4045bc:	d018      	beq.n	4045f0 <flexcom_enable+0x74>
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_7);
	} else
#endif
#ifdef ID_FLEXCOM6
	if (p_flexcom == FLEXCOM6) {
  4045be:	4a47      	ldr	r2, [pc, #284]	; (4046dc <flexcom_enable+0x160>)
  4045c0:	4290      	cmp	r0, r2
  4045c2:	d023      	beq.n	40460c <flexcom_enable+0x90>
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_7);
	} else
#endif
#ifdef ID_FLEXCOM5
	if (p_flexcom == FLEXCOM5) {
  4045c4:	4a46      	ldr	r2, [pc, #280]	; (4046e0 <flexcom_enable+0x164>)
  4045c6:	4290      	cmp	r0, r2
  4045c8:	d02e      	beq.n	404628 <flexcom_enable+0xac>
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_7);
	} else
#endif
#ifdef ID_FLEXCOM4
	if (p_flexcom == FLEXCOM4) {
  4045ca:	4a46      	ldr	r2, [pc, #280]	; (4046e4 <flexcom_enable+0x168>)
  4045cc:	4290      	cmp	r0, r2
  4045ce:	d039      	beq.n	404644 <flexcom_enable+0xc8>
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_7);
	} else
#endif
#ifdef ID_FLEXCOM3
	if (p_flexcom == FLEXCOM3) {
  4045d0:	4a45      	ldr	r2, [pc, #276]	; (4046e8 <flexcom_enable+0x16c>)
  4045d2:	4290      	cmp	r0, r2
  4045d4:	d044      	beq.n	404660 <flexcom_enable+0xe4>
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_6);
	} else
#endif
#ifdef ID_FLEXCOM2
	if (p_flexcom == FLEXCOM2) {
  4045d6:	4a45      	ldr	r2, [pc, #276]	; (4046ec <flexcom_enable+0x170>)
  4045d8:	4290      	cmp	r0, r2
  4045da:	d04f      	beq.n	40467c <flexcom_enable+0x100>
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_6);
	} else
#endif
#ifdef ID_FLEXCOM1
	if (p_flexcom == FLEXCOM1) {
  4045dc:	4a44      	ldr	r2, [pc, #272]	; (4046f0 <flexcom_enable+0x174>)
  4045de:	4290      	cmp	r0, r2
  4045e0:	d05a      	beq.n	404698 <flexcom_enable+0x11c>
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_6);
	} else
#endif
#ifdef ID_FLEXCOM0
	if (p_flexcom == FLEXCOM0) {
  4045e2:	4a44      	ldr	r2, [pc, #272]	; (4046f4 <flexcom_enable+0x178>)
  4045e4:	4290      	cmp	r0, r2
  4045e6:	d065      	beq.n	4046b4 <flexcom_enable+0x138>
	} else
#endif
	{
		Assert(false);
	}
}
  4045e8:	b003      	add	sp, #12
  4045ea:	f85d fb04 	ldr.w	pc, [sp], #4
  4045ee:	e7fe      	b.n	4045ee <flexcom_enable+0x72>
  4045f0:	2007      	movs	r0, #7
  4045f2:	4b41      	ldr	r3, [pc, #260]	; (4046f8 <flexcom_enable+0x17c>)
  4045f4:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  4045f6:	2007      	movs	r0, #7
  4045f8:	4b40      	ldr	r3, [pc, #256]	; (4046fc <flexcom_enable+0x180>)
  4045fa:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  4045fc:	2100      	movs	r1, #0
  4045fe:	2007      	movs	r0, #7
  404600:	4b3f      	ldr	r3, [pc, #252]	; (404700 <flexcom_enable+0x184>)
  404602:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  404604:	2007      	movs	r0, #7
  404606:	4b3f      	ldr	r3, [pc, #252]	; (404704 <flexcom_enable+0x188>)
  404608:	4798      	blx	r3
  40460a:	e7ed      	b.n	4045e8 <flexcom_enable+0x6c>
  40460c:	2016      	movs	r0, #22
  40460e:	4b3a      	ldr	r3, [pc, #232]	; (4046f8 <flexcom_enable+0x17c>)
  404610:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  404612:	2007      	movs	r0, #7
  404614:	4b39      	ldr	r3, [pc, #228]	; (4046fc <flexcom_enable+0x180>)
  404616:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  404618:	2100      	movs	r1, #0
  40461a:	2007      	movs	r0, #7
  40461c:	4b38      	ldr	r3, [pc, #224]	; (404700 <flexcom_enable+0x184>)
  40461e:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  404620:	2007      	movs	r0, #7
  404622:	4b38      	ldr	r3, [pc, #224]	; (404704 <flexcom_enable+0x188>)
  404624:	4798      	blx	r3
  404626:	e7df      	b.n	4045e8 <flexcom_enable+0x6c>
  404628:	2015      	movs	r0, #21
  40462a:	4b33      	ldr	r3, [pc, #204]	; (4046f8 <flexcom_enable+0x17c>)
  40462c:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  40462e:	2007      	movs	r0, #7
  404630:	4b32      	ldr	r3, [pc, #200]	; (4046fc <flexcom_enable+0x180>)
  404632:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  404634:	2100      	movs	r1, #0
  404636:	2007      	movs	r0, #7
  404638:	4b31      	ldr	r3, [pc, #196]	; (404700 <flexcom_enable+0x184>)
  40463a:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  40463c:	2007      	movs	r0, #7
  40463e:	4b31      	ldr	r3, [pc, #196]	; (404704 <flexcom_enable+0x188>)
  404640:	4798      	blx	r3
  404642:	e7d1      	b.n	4045e8 <flexcom_enable+0x6c>
  404644:	2014      	movs	r0, #20
  404646:	4b2c      	ldr	r3, [pc, #176]	; (4046f8 <flexcom_enable+0x17c>)
  404648:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  40464a:	2007      	movs	r0, #7
  40464c:	4b2b      	ldr	r3, [pc, #172]	; (4046fc <flexcom_enable+0x180>)
  40464e:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  404650:	2100      	movs	r1, #0
  404652:	2007      	movs	r0, #7
  404654:	4b2a      	ldr	r3, [pc, #168]	; (404700 <flexcom_enable+0x184>)
  404656:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  404658:	2007      	movs	r0, #7
  40465a:	4b2a      	ldr	r3, [pc, #168]	; (404704 <flexcom_enable+0x188>)
  40465c:	4798      	blx	r3
  40465e:	e7c3      	b.n	4045e8 <flexcom_enable+0x6c>
  404660:	2013      	movs	r0, #19
  404662:	4b25      	ldr	r3, [pc, #148]	; (4046f8 <flexcom_enable+0x17c>)
  404664:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  404666:	2006      	movs	r0, #6
  404668:	4b24      	ldr	r3, [pc, #144]	; (4046fc <flexcom_enable+0x180>)
  40466a:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40466c:	2100      	movs	r1, #0
  40466e:	2006      	movs	r0, #6
  404670:	4b23      	ldr	r3, [pc, #140]	; (404700 <flexcom_enable+0x184>)
  404672:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  404674:	2006      	movs	r0, #6
  404676:	4b23      	ldr	r3, [pc, #140]	; (404704 <flexcom_enable+0x188>)
  404678:	4798      	blx	r3
  40467a:	e7b5      	b.n	4045e8 <flexcom_enable+0x6c>
  40467c:	200e      	movs	r0, #14
  40467e:	4b1e      	ldr	r3, [pc, #120]	; (4046f8 <flexcom_enable+0x17c>)
  404680:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  404682:	2006      	movs	r0, #6
  404684:	4b1d      	ldr	r3, [pc, #116]	; (4046fc <flexcom_enable+0x180>)
  404686:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  404688:	2100      	movs	r1, #0
  40468a:	2006      	movs	r0, #6
  40468c:	4b1c      	ldr	r3, [pc, #112]	; (404700 <flexcom_enable+0x184>)
  40468e:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  404690:	2006      	movs	r0, #6
  404692:	4b1c      	ldr	r3, [pc, #112]	; (404704 <flexcom_enable+0x188>)
  404694:	4798      	blx	r3
  404696:	e7a7      	b.n	4045e8 <flexcom_enable+0x6c>
  404698:	2009      	movs	r0, #9
  40469a:	4b17      	ldr	r3, [pc, #92]	; (4046f8 <flexcom_enable+0x17c>)
  40469c:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  40469e:	2006      	movs	r0, #6
  4046a0:	4b16      	ldr	r3, [pc, #88]	; (4046fc <flexcom_enable+0x180>)
  4046a2:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  4046a4:	2100      	movs	r1, #0
  4046a6:	2006      	movs	r0, #6
  4046a8:	4b15      	ldr	r3, [pc, #84]	; (404700 <flexcom_enable+0x184>)
  4046aa:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  4046ac:	2006      	movs	r0, #6
  4046ae:	4b15      	ldr	r3, [pc, #84]	; (404704 <flexcom_enable+0x188>)
  4046b0:	4798      	blx	r3
  4046b2:	e799      	b.n	4045e8 <flexcom_enable+0x6c>
  4046b4:	2008      	movs	r0, #8
  4046b6:	4b10      	ldr	r3, [pc, #64]	; (4046f8 <flexcom_enable+0x17c>)
  4046b8:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  4046ba:	2006      	movs	r0, #6
  4046bc:	4b0f      	ldr	r3, [pc, #60]	; (4046fc <flexcom_enable+0x180>)
  4046be:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  4046c0:	2100      	movs	r1, #0
  4046c2:	2006      	movs	r0, #6
  4046c4:	4b0e      	ldr	r3, [pc, #56]	; (404700 <flexcom_enable+0x184>)
  4046c6:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  4046c8:	2006      	movs	r0, #6
  4046ca:	4b0e      	ldr	r3, [pc, #56]	; (404704 <flexcom_enable+0x188>)
  4046cc:	4798      	blx	r3
}
  4046ce:	e78b      	b.n	4045e8 <flexcom_enable+0x6c>
  4046d0:	2001a164 	.word	0x2001a164
  4046d4:	20000301 	.word	0x20000301
  4046d8:	40034000 	.word	0x40034000
  4046dc:	40040000 	.word	0x40040000
  4046e0:	40008000 	.word	0x40008000
  4046e4:	4001c000 	.word	0x4001c000
  4046e8:	40018000 	.word	0x40018000
  4046ec:	40024000 	.word	0x40024000
  4046f0:	40020000 	.word	0x40020000
  4046f4:	4000c000 	.word	0x4000c000
  4046f8:	00404a99 	.word	0x00404a99
  4046fc:	00404b3d 	.word	0x00404b3d
  404700:	00404aed 	.word	0x00404aed
  404704:	00404b29 	.word	0x00404b29

00404708 <flexcom_set_opmode>:
 * \param opmode  Opration mode.
 *
 */
void flexcom_set_opmode(Flexcom *p_flexcom, enum flexcom_opmode opmode)
{
	p_flexcom->FLEXCOM_MR = opmode;
  404708:	6001      	str	r1, [r0, #0]
  40470a:	4770      	bx	lr

0040470c <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
  40470c:	b510      	push	{r4, lr}
  40470e:	b0a2      	sub	sp, #136	; 0x88
	uint32_t unique_id[32];
	uint32_t trim_value;
#endif

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  404710:	4818      	ldr	r0, [pc, #96]	; (404774 <sysclk_init+0x68>)
  404712:	4b19      	ldr	r3, [pc, #100]	; (404778 <sysclk_init+0x6c>)
  404714:	4798      	blx	r3
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  404716:	2000      	movs	r0, #0
  404718:	4b18      	ldr	r3, [pc, #96]	; (40477c <sysclk_init+0x70>)
  40471a:	4798      	blx	r3
	case OSC_SLCK_32K_RC:
		return 1;

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40471c:	4c18      	ldr	r4, [pc, #96]	; (404780 <sysclk_init+0x74>)
  40471e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  404720:	2800      	cmp	r0, #0
  404722:	d0fc      	beq.n	40471e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  404724:	4b17      	ldr	r3, [pc, #92]	; (404784 <sysclk_init+0x78>)
  404726:	4798      	blx	r3
		PMC->CKGR_PLLAR = p_cfg->ctrl;
  404728:	4a17      	ldr	r2, [pc, #92]	; (404788 <sysclk_init+0x7c>)
  40472a:	4b18      	ldr	r3, [pc, #96]	; (40478c <sysclk_init+0x80>)
  40472c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40472e:	4c18      	ldr	r4, [pc, #96]	; (404790 <sysclk_init+0x84>)
  404730:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  404732:	2800      	cmp	r0, #0
  404734:	d0fc      	beq.n	404730 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  404736:	2000      	movs	r0, #0
  404738:	4b16      	ldr	r3, [pc, #88]	; (404794 <sysclk_init+0x88>)
  40473a:	4798      	blx	r3
	}
#endif
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40473c:	4b16      	ldr	r3, [pc, #88]	; (404798 <sysclk_init+0x8c>)
  40473e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  404740:	4816      	ldr	r0, [pc, #88]	; (40479c <sysclk_init+0x90>)
  404742:	4b0d      	ldr	r3, [pc, #52]	; (404778 <sysclk_init+0x6c>)
  404744:	4798      	blx	r3
	}
#endif

#if SAMG55
	/* Set the trim value when system run near 120M */
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
  404746:	4b16      	ldr	r3, [pc, #88]	; (4047a0 <sysclk_init+0x94>)
  404748:	681a      	ldr	r2, [r3, #0]
  40474a:	4b16      	ldr	r3, [pc, #88]	; (4047a4 <sysclk_init+0x98>)
  40474c:	4413      	add	r3, r2
  40474e:	4a16      	ldr	r2, [pc, #88]	; (4047a8 <sysclk_init+0x9c>)
  404750:	4293      	cmp	r3, r2
  404752:	d901      	bls.n	404758 <sysclk_init+0x4c>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  404754:	b022      	add	sp, #136	; 0x88
  404756:	bd10      	pop	{r4, pc}
		efc_perform_read_sequence(EFC, EFC_FCMD_STUI, EFC_FCMD_SPUI,
  404758:	2320      	movs	r3, #32
  40475a:	9300      	str	r3, [sp, #0]
  40475c:	ab02      	add	r3, sp, #8
  40475e:	220f      	movs	r2, #15
  404760:	210e      	movs	r1, #14
  404762:	4812      	ldr	r0, [pc, #72]	; (4047ac <sysclk_init+0xa0>)
  404764:	4c12      	ldr	r4, [pc, #72]	; (4047b0 <sysclk_init+0xa4>)
  404766:	47a0      	blx	r4
		supc_set_regulator_trim_user(SUPC, trim_value);
  404768:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
  40476c:	4811      	ldr	r0, [pc, #68]	; (4047b4 <sysclk_init+0xa8>)
  40476e:	4b12      	ldr	r3, [pc, #72]	; (4047b8 <sysclk_init+0xac>)
  404770:	4798      	blx	r3
}
  404772:	e7ef      	b.n	404754 <sysclk_init+0x48>
  404774:	07270e00 	.word	0x07270e00
  404778:	00404d31 	.word	0x00404d31
  40477c:	00404a39 	.word	0x00404a39
  404780:	00404a5d 	.word	0x00404a5d
  404784:	00404a7d 	.word	0x00404a7d
  404788:	0e4d3f01 	.word	0x0e4d3f01
  40478c:	400e0400 	.word	0x400e0400
  404790:	00404a89 	.word	0x00404a89
  404794:	004049d5 	.word	0x004049d5
  404798:	00404c49 	.word	0x00404c49
  40479c:	07270000 	.word	0x07270000
  4047a0:	20000304 	.word	0x20000304
  4047a4:	f9bdd3c0 	.word	0xf9bdd3c0
  4047a8:	01c9c380 	.word	0x01c9c380
  4047ac:	400e0a00 	.word	0x400e0a00
  4047b0:	2000000d 	.word	0x2000000d
  4047b4:	400e1410 	.word	0x400e1410
  4047b8:	00404b51 	.word	0x00404b51

004047bc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
  4047bc:	b538      	push	{r3, r4, r5, lr}

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  4047be:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  4047c2:	4b80      	ldr	r3, [pc, #512]	; (4049c4 <system_board_init+0x208>)
  4047c4:	605c      	str	r4, [r3, #4]
  4047c6:	200b      	movs	r0, #11
  4047c8:	4d7f      	ldr	r5, [pc, #508]	; (4049c8 <system_board_init+0x20c>)
  4047ca:	47a8      	blx	r5
  4047cc:	200c      	movs	r0, #12
  4047ce:	47a8      	blx	r5
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4047d0:	4a7e      	ldr	r2, [pc, #504]	; (4049cc <system_board_init+0x210>)
  4047d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4047d6:	6110      	str	r0, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4047d8:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4047dc:	6310      	str	r0, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4047de:	4b7c      	ldr	r3, [pc, #496]	; (4049d0 <system_board_init+0x214>)
  4047e0:	2104      	movs	r1, #4
  4047e2:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4047e4:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4047e8:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4047ea:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4047ee:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4047f0:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4047f2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4047f6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4047f8:	f021 0104 	bic.w	r1, r1, #4
  4047fc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4047fe:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404800:	f021 0104 	bic.w	r1, r1, #4
  404804:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404806:	2102      	movs	r1, #2
  404808:	6319      	str	r1, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40480a:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40480c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  404814:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404816:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404818:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40481c:	6314      	str	r4, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40481e:	6114      	str	r4, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404820:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
		base->PIO_PUDR = mask;
  404824:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  404828:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40482a:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40482e:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404830:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404832:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404836:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  404838:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  40483c:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40483e:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  404840:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  404844:	675d      	str	r5, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404846:	605c      	str	r4, [r3, #4]
		base->PIO_PUDR = mask;
  404848:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40484a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40484e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404850:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404852:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404856:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  404858:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  40485c:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40485e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  404860:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  404864:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404866:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  404868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  40486c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40486e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404872:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404874:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404876:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40487a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40487c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
  404880:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404882:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  404884:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
  404888:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40488a:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40488c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  404890:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404892:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404896:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404898:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40489a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40489e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4048a0:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  4048a4:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4048a6:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4048a8:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  4048ac:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4048ae:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4048b0:	2120      	movs	r1, #32
  4048b2:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4048b4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4048b8:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4048ba:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4048bc:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4048c0:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4048c2:	430c      	orrs	r4, r1
  4048c4:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4048c6:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4048c8:	f024 0420 	bic.w	r4, r4, #32
  4048cc:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4048ce:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4048d0:	f44f 7180 	mov.w	r1, #256	; 0x100
  4048d4:	6611      	str	r1, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4048d6:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4048da:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4048dc:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4048de:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4048e2:	6f14      	ldr	r4, [r2, #112]	; 0x70
  4048e4:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  4048e8:	6714      	str	r4, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4048ea:	6f54      	ldr	r4, [r2, #116]	; 0x74
  4048ec:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  4048f0:	6754      	str	r4, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4048f2:	6051      	str	r1, [r2, #4]
		base->PIO_PUDR = mask;
  4048f4:	f44f 7100 	mov.w	r1, #512	; 0x200
  4048f8:	6611      	str	r1, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4048fa:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4048fe:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  404900:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404902:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404906:	6f14      	ldr	r4, [r2, #112]	; 0x70
  404908:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  40490c:	6714      	str	r4, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40490e:	6f54      	ldr	r4, [r2, #116]	; 0x74
  404910:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  404914:	6754      	str	r4, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404916:	6051      	str	r1, [r2, #4]
		base->PIO_PUDR = mask;
  404918:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40491a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40491e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404920:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404922:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404926:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  404928:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  40492c:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40492e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  404930:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  404934:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404936:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  404938:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40493a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40493e:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404940:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404942:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404946:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404948:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  40494c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40494e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404950:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  404954:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404956:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  404958:	2101      	movs	r1, #1
  40495a:	6611      	str	r1, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40495c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  404960:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  404962:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404964:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404968:	6f10      	ldr	r0, [r2, #112]	; 0x70
  40496a:	f020 0001 	bic.w	r0, r0, #1
  40496e:	6710      	str	r0, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404970:	6f50      	ldr	r0, [r2, #116]	; 0x74
  404972:	f020 0001 	bic.w	r0, r0, #1
  404976:	6750      	str	r0, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404978:	6051      	str	r1, [r2, #4]
		base->PIO_PUDR = mask;
  40497a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40497e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404980:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404984:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404986:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40498c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40498e:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
  404992:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404994:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404996:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
  40499a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40499c:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40499e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4049a2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4049a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4049a8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4049aa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4049ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4049b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4049b2:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
  4049b6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4049b8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4049ba:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
  4049be:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4049c0:	605a      	str	r2, [r3, #4]
  4049c2:	bd38      	pop	{r3, r4, r5, pc}
  4049c4:	400e1450 	.word	0x400e1450
  4049c8:	00404a99 	.word	0x00404a99
  4049cc:	400e1000 	.word	0x400e1000
  4049d0:	400e0e00 	.word	0x400e0e00

004049d4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4049d4:	4a17      	ldr	r2, [pc, #92]	; (404a34 <pmc_switch_mck_to_pllack+0x60>)
  4049d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4049d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4049dc:	4318      	orrs	r0, r3
  4049de:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4049e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4049e2:	f013 0f08 	tst.w	r3, #8
  4049e6:	d10a      	bne.n	4049fe <pmc_switch_mck_to_pllack+0x2a>
  4049e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4049ec:	4911      	ldr	r1, [pc, #68]	; (404a34 <pmc_switch_mck_to_pllack+0x60>)
  4049ee:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4049f0:	f012 0f08 	tst.w	r2, #8
  4049f4:	d103      	bne.n	4049fe <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4049f6:	3b01      	subs	r3, #1
  4049f8:	d1f9      	bne.n	4049ee <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4049fa:	2001      	movs	r0, #1
  4049fc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4049fe:	4a0d      	ldr	r2, [pc, #52]	; (404a34 <pmc_switch_mck_to_pllack+0x60>)
  404a00:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404a02:	f023 0303 	bic.w	r3, r3, #3
  404a06:	f043 0302 	orr.w	r3, r3, #2
  404a0a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404a0c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404a0e:	f013 0f08 	tst.w	r3, #8
  404a12:	d10a      	bne.n	404a2a <pmc_switch_mck_to_pllack+0x56>
  404a14:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404a18:	4906      	ldr	r1, [pc, #24]	; (404a34 <pmc_switch_mck_to_pllack+0x60>)
  404a1a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  404a1c:	f012 0f08 	tst.w	r2, #8
  404a20:	d105      	bne.n	404a2e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404a22:	3b01      	subs	r3, #1
  404a24:	d1f9      	bne.n	404a1a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  404a26:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  404a28:	4770      	bx	lr
	return 0;
  404a2a:	2000      	movs	r0, #0
  404a2c:	4770      	bx	lr
  404a2e:	2000      	movs	r0, #0
  404a30:	4770      	bx	lr
  404a32:	bf00      	nop
  404a34:	400e0400 	.word	0x400e0400

00404a38 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  404a38:	2801      	cmp	r0, #1
  404a3a:	d003      	beq.n	404a44 <pmc_switch_sclk_to_32kxtal+0xc>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  404a3c:	4a05      	ldr	r2, [pc, #20]	; (404a54 <pmc_switch_sclk_to_32kxtal+0x1c>)
  404a3e:	4b06      	ldr	r3, [pc, #24]	; (404a58 <pmc_switch_sclk_to_32kxtal+0x20>)
  404a40:	601a      	str	r2, [r3, #0]
  404a42:	4770      	bx	lr
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  404a44:	4a04      	ldr	r2, [pc, #16]	; (404a58 <pmc_switch_sclk_to_32kxtal+0x20>)
  404a46:	6893      	ldr	r3, [r2, #8]
  404a48:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  404a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404a50:	6093      	str	r3, [r2, #8]
  404a52:	e7f3      	b.n	404a3c <pmc_switch_sclk_to_32kxtal+0x4>
  404a54:	a5000008 	.word	0xa5000008
  404a58:	400e1410 	.word	0x400e1410

00404a5c <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  404a5c:	4b05      	ldr	r3, [pc, #20]	; (404a74 <pmc_osc_is_ready_32kxtal+0x18>)
  404a5e:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  404a60:	f013 0f80 	tst.w	r3, #128	; 0x80
  404a64:	bf1d      	ittte	ne
  404a66:	4b04      	ldrne	r3, [pc, #16]	; (404a78 <pmc_osc_is_ready_32kxtal+0x1c>)
  404a68:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  404a6a:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  404a6e:	2000      	moveq	r0, #0
}
  404a70:	4770      	bx	lr
  404a72:	bf00      	nop
  404a74:	400e1410 	.word	0x400e1410
  404a78:	400e0400 	.word	0x400e0400

00404a7c <pmc_disable_pllack>:
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
  404a7c:	2200      	movs	r2, #0
  404a7e:	4b01      	ldr	r3, [pc, #4]	; (404a84 <pmc_disable_pllack+0x8>)
  404a80:	629a      	str	r2, [r3, #40]	; 0x28
  404a82:	4770      	bx	lr
  404a84:	400e0400 	.word	0x400e0400

00404a88 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  404a88:	4b02      	ldr	r3, [pc, #8]	; (404a94 <pmc_is_locked_pllack+0xc>)
  404a8a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  404a8c:	f000 0002 	and.w	r0, r0, #2
  404a90:	4770      	bx	lr
  404a92:	bf00      	nop
  404a94:	400e0400 	.word	0x400e0400

00404a98 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  404a98:	2832      	cmp	r0, #50	; 0x32
  404a9a:	d81e      	bhi.n	404ada <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  404a9c:	281f      	cmp	r0, #31
  404a9e:	d80c      	bhi.n	404aba <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  404aa0:	4b11      	ldr	r3, [pc, #68]	; (404ae8 <pmc_enable_periph_clk+0x50>)
  404aa2:	699a      	ldr	r2, [r3, #24]
  404aa4:	2301      	movs	r3, #1
  404aa6:	4083      	lsls	r3, r0
  404aa8:	4393      	bics	r3, r2
  404aaa:	d018      	beq.n	404ade <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  404aac:	2301      	movs	r3, #1
  404aae:	fa03 f000 	lsl.w	r0, r3, r0
  404ab2:	4b0d      	ldr	r3, [pc, #52]	; (404ae8 <pmc_enable_periph_clk+0x50>)
  404ab4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  404ab6:	2000      	movs	r0, #0
  404ab8:	4770      	bx	lr
		ul_id -= 32;
  404aba:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  404abc:	4b0a      	ldr	r3, [pc, #40]	; (404ae8 <pmc_enable_periph_clk+0x50>)
  404abe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  404ac2:	2301      	movs	r3, #1
  404ac4:	4083      	lsls	r3, r0
  404ac6:	4393      	bics	r3, r2
  404ac8:	d00b      	beq.n	404ae2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  404aca:	2301      	movs	r3, #1
  404acc:	fa03 f000 	lsl.w	r0, r3, r0
  404ad0:	4b05      	ldr	r3, [pc, #20]	; (404ae8 <pmc_enable_periph_clk+0x50>)
  404ad2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  404ad6:	2000      	movs	r0, #0
  404ad8:	4770      	bx	lr
		return 1;
  404ada:	2001      	movs	r0, #1
  404adc:	4770      	bx	lr
	return 0;
  404ade:	2000      	movs	r0, #0
  404ae0:	4770      	bx	lr
  404ae2:	2000      	movs	r0, #0
}
  404ae4:	4770      	bx	lr
  404ae6:	bf00      	nop
  404ae8:	400e0400 	.word	0x400e0400

00404aec <pmc_switch_pck_to_mck>:
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
  404aec:	f041 0104 	orr.w	r1, r1, #4
  404af0:	4b0c      	ldr	r3, [pc, #48]	; (404b24 <pmc_switch_pck_to_mck+0x38>)
  404af2:	f100 0210 	add.w	r2, r0, #16
  404af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  404afa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  404afc:	f44f 7380 	mov.w	r3, #256	; 0x100
  404b00:	fa03 f000 	lsl.w	r0, r3, r0
	for (ul_timeout = PMC_TIMEOUT;
  404b04:	4202      	tst	r2, r0
  404b06:	d109      	bne.n	404b1c <pmc_switch_pck_to_mck+0x30>
  404b08:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  404b0c:	4905      	ldr	r1, [pc, #20]	; (404b24 <pmc_switch_pck_to_mck+0x38>)
  404b0e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
  404b10:	4202      	tst	r2, r0
  404b12:	d105      	bne.n	404b20 <pmc_switch_pck_to_mck+0x34>
		if (ul_timeout == 0) {
  404b14:	3b01      	subs	r3, #1
  404b16:	d1fa      	bne.n	404b0e <pmc_switch_pck_to_mck+0x22>
			return 1;
  404b18:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  404b1a:	4770      	bx	lr
	return 0;
  404b1c:	2000      	movs	r0, #0
  404b1e:	4770      	bx	lr
  404b20:	2000      	movs	r0, #0
  404b22:	4770      	bx	lr
  404b24:	400e0400 	.word	0x400e0400

00404b28 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  404b28:	f44f 7380 	mov.w	r3, #256	; 0x100
  404b2c:	fa03 f000 	lsl.w	r0, r3, r0
  404b30:	4b01      	ldr	r3, [pc, #4]	; (404b38 <pmc_enable_pck+0x10>)
  404b32:	6018      	str	r0, [r3, #0]
  404b34:	4770      	bx	lr
  404b36:	bf00      	nop
  404b38:	400e0400 	.word	0x400e0400

00404b3c <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  404b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
  404b40:	fa03 f000 	lsl.w	r0, r3, r0
  404b44:	4b01      	ldr	r3, [pc, #4]	; (404b4c <pmc_disable_pck+0x10>)
  404b46:	6058      	str	r0, [r3, #4]
  404b48:	4770      	bx	lr
  404b4a:	bf00      	nop
  404b4c:	400e0400 	.word	0x400e0400

00404b50 <supc_set_regulator_trim_user>:
#if SAMG54
	uint32_t ul_mr = p_supc->SUPC_MR & (~SUPC_MR_VRVDD_Msk);
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_VDDSEL_USER_VRVDD
		 | SUPC_MR_VRVDD(value);
#else
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
  404b50:	69c3      	ldr	r3, [r0, #28]
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
		| ((value & 0xFu) << 9);
  404b52:	0249      	lsls	r1, r1, #9
  404b54:	f401 51f0 	and.w	r1, r1, #7680	; 0x1e00
  404b58:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
  404b5c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
  404b60:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
		| ((value & 0xFu) << 9);
  404b64:	4319      	orrs	r1, r3
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
  404b66:	61c1      	str	r1, [r0, #28]
  404b68:	4770      	bx	lr

00404b6a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  404b6a:	e7fe      	b.n	404b6a <Dummy_Handler>

00404b6c <Reset_Handler>:
{
  404b6c:	b500      	push	{lr}
  404b6e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  404b70:	4b2a      	ldr	r3, [pc, #168]	; (404c1c <Reset_Handler+0xb0>)
  404b72:	4a2b      	ldr	r2, [pc, #172]	; (404c20 <Reset_Handler+0xb4>)
  404b74:	429a      	cmp	r2, r3
  404b76:	d010      	beq.n	404b9a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  404b78:	4b2a      	ldr	r3, [pc, #168]	; (404c24 <Reset_Handler+0xb8>)
  404b7a:	4a28      	ldr	r2, [pc, #160]	; (404c1c <Reset_Handler+0xb0>)
  404b7c:	429a      	cmp	r2, r3
  404b7e:	d20c      	bcs.n	404b9a <Reset_Handler+0x2e>
  404b80:	3b01      	subs	r3, #1
  404b82:	1a9b      	subs	r3, r3, r2
  404b84:	f023 0303 	bic.w	r3, r3, #3
  404b88:	3304      	adds	r3, #4
  404b8a:	4413      	add	r3, r2
  404b8c:	4924      	ldr	r1, [pc, #144]	; (404c20 <Reset_Handler+0xb4>)
                        *pDest++ = *pSrc++;
  404b8e:	f851 0b04 	ldr.w	r0, [r1], #4
  404b92:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  404b96:	429a      	cmp	r2, r3
  404b98:	d1f9      	bne.n	404b8e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  404b9a:	4b23      	ldr	r3, [pc, #140]	; (404c28 <Reset_Handler+0xbc>)
  404b9c:	4a23      	ldr	r2, [pc, #140]	; (404c2c <Reset_Handler+0xc0>)
  404b9e:	429a      	cmp	r2, r3
  404ba0:	d20a      	bcs.n	404bb8 <Reset_Handler+0x4c>
  404ba2:	3b01      	subs	r3, #1
  404ba4:	1a9b      	subs	r3, r3, r2
  404ba6:	f023 0303 	bic.w	r3, r3, #3
  404baa:	3304      	adds	r3, #4
  404bac:	4413      	add	r3, r2
                *pDest++ = 0;
  404bae:	2100      	movs	r1, #0
  404bb0:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  404bb4:	4293      	cmp	r3, r2
  404bb6:	d1fb      	bne.n	404bb0 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  404bb8:	4a1d      	ldr	r2, [pc, #116]	; (404c30 <Reset_Handler+0xc4>)
  404bba:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
  404bbe:	4b1d      	ldr	r3, [pc, #116]	; (404c34 <Reset_Handler+0xc8>)
  404bc0:	6099      	str	r1, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404bc2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404bc6:	fab3 f383 	clz	r3, r3
  404bca:	095b      	lsrs	r3, r3, #5
  404bcc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404bce:	b672      	cpsid	i
  404bd0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404bd4:	2100      	movs	r1, #0
  404bd6:	4b18      	ldr	r3, [pc, #96]	; (404c38 <Reset_Handler+0xcc>)
  404bd8:	7019      	strb	r1, [r3, #0]
	return flags;
  404bda:	9801      	ldr	r0, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  404bdc:	4917      	ldr	r1, [pc, #92]	; (404c3c <Reset_Handler+0xd0>)
  404bde:	680b      	ldr	r3, [r1, #0]
  404be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  404be4:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  404be6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404bea:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  404bee:	b128      	cbz	r0, 404bfc <Reset_Handler+0x90>
		cpu_irq_enable();
  404bf0:	2101      	movs	r1, #1
  404bf2:	4b11      	ldr	r3, [pc, #68]	; (404c38 <Reset_Handler+0xcc>)
  404bf4:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb");
  404bf6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404bfa:	b662      	cpsie	i
	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  404bfc:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
  404c00:	f5b2 3f20 	cmp.w	r2, #163840	; 0x28000
  404c04:	d204      	bcs.n	404c10 <Reset_Handler+0xa4>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  404c06:	4a0b      	ldr	r2, [pc, #44]	; (404c34 <Reset_Handler+0xc8>)
  404c08:	6893      	ldr	r3, [r2, #8]
  404c0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  404c0e:	6093      	str	r3, [r2, #8]
	__libc_init_array();
  404c10:	4b0b      	ldr	r3, [pc, #44]	; (404c40 <Reset_Handler+0xd4>)
  404c12:	4798      	blx	r3
        main();
  404c14:	4b0b      	ldr	r3, [pc, #44]	; (404c44 <Reset_Handler+0xd8>)
  404c16:	4798      	blx	r3
  404c18:	e7fe      	b.n	404c18 <Reset_Handler+0xac>
  404c1a:	bf00      	nop
  404c1c:	20000000 	.word	0x20000000
  404c20:	0040fd0c 	.word	0x0040fd0c
  404c24:	20000d28 	.word	0x20000d28
  404c28:	20022278 	.word	0x20022278
  404c2c:	20000d28 	.word	0x20000d28
  404c30:	00400000 	.word	0x00400000
  404c34:	e000ed00 	.word	0xe000ed00
  404c38:	20000301 	.word	0x20000301
  404c3c:	e000ed88 	.word	0xe000ed88
  404c40:	00407b0d 	.word	0x00407b0d
  404c44:	00406ad9 	.word	0x00406ad9

00404c48 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  404c48:	4b31      	ldr	r3, [pc, #196]	; (404d10 <SystemCoreClockUpdate+0xc8>)
  404c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404c4c:	f003 0303 	and.w	r3, r3, #3
  404c50:	2b01      	cmp	r3, #1
  404c52:	d01d      	beq.n	404c90 <SystemCoreClockUpdate+0x48>
  404c54:	b183      	cbz	r3, 404c78 <SystemCoreClockUpdate+0x30>
  404c56:	2b02      	cmp	r3, #2
  404c58:	d036      	beq.n	404cc8 <SystemCoreClockUpdate+0x80>
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  404c5a:	4b2d      	ldr	r3, [pc, #180]	; (404d10 <SystemCoreClockUpdate+0xc8>)
  404c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404c62:	2b70      	cmp	r3, #112	; 0x70
  404c64:	d04b      	beq.n	404cfe <SystemCoreClockUpdate+0xb6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  404c66:	4b2a      	ldr	r3, [pc, #168]	; (404d10 <SystemCoreClockUpdate+0xc8>)
  404c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  404c6a:	492a      	ldr	r1, [pc, #168]	; (404d14 <SystemCoreClockUpdate+0xcc>)
  404c6c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  404c70:	680b      	ldr	r3, [r1, #0]
  404c72:	40d3      	lsrs	r3, r2
  404c74:	600b      	str	r3, [r1, #0]
  404c76:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  404c78:	4b27      	ldr	r3, [pc, #156]	; (404d18 <SystemCoreClockUpdate+0xd0>)
  404c7a:	695b      	ldr	r3, [r3, #20]
  404c7c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  404c80:	bf14      	ite	ne
  404c82:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  404c86:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  404c8a:	4b22      	ldr	r3, [pc, #136]	; (404d14 <SystemCoreClockUpdate+0xcc>)
  404c8c:	601a      	str	r2, [r3, #0]
  404c8e:	e7e4      	b.n	404c5a <SystemCoreClockUpdate+0x12>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  404c90:	4b1f      	ldr	r3, [pc, #124]	; (404d10 <SystemCoreClockUpdate+0xc8>)
  404c92:	6a1b      	ldr	r3, [r3, #32]
  404c94:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404c98:	d003      	beq.n	404ca2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  404c9a:	4a20      	ldr	r2, [pc, #128]	; (404d1c <SystemCoreClockUpdate+0xd4>)
  404c9c:	4b1d      	ldr	r3, [pc, #116]	; (404d14 <SystemCoreClockUpdate+0xcc>)
  404c9e:	601a      	str	r2, [r3, #0]
  404ca0:	e7db      	b.n	404c5a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  404ca2:	4a1f      	ldr	r2, [pc, #124]	; (404d20 <SystemCoreClockUpdate+0xd8>)
  404ca4:	4b1b      	ldr	r3, [pc, #108]	; (404d14 <SystemCoreClockUpdate+0xcc>)
  404ca6:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  404ca8:	4b19      	ldr	r3, [pc, #100]	; (404d10 <SystemCoreClockUpdate+0xc8>)
  404caa:	6a1b      	ldr	r3, [r3, #32]
  404cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404cb0:	2b10      	cmp	r3, #16
  404cb2:	d005      	beq.n	404cc0 <SystemCoreClockUpdate+0x78>
  404cb4:	2b20      	cmp	r3, #32
  404cb6:	d1d0      	bne.n	404c5a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  404cb8:	4a1a      	ldr	r2, [pc, #104]	; (404d24 <SystemCoreClockUpdate+0xdc>)
  404cba:	4b16      	ldr	r3, [pc, #88]	; (404d14 <SystemCoreClockUpdate+0xcc>)
  404cbc:	601a      	str	r2, [r3, #0]
				break;
  404cbe:	e7cc      	b.n	404c5a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  404cc0:	4a19      	ldr	r2, [pc, #100]	; (404d28 <SystemCoreClockUpdate+0xe0>)
  404cc2:	4b14      	ldr	r3, [pc, #80]	; (404d14 <SystemCoreClockUpdate+0xcc>)
  404cc4:	601a      	str	r2, [r3, #0]
				break;
  404cc6:	e7c8      	b.n	404c5a <SystemCoreClockUpdate+0x12>
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  404cc8:	4b13      	ldr	r3, [pc, #76]	; (404d18 <SystemCoreClockUpdate+0xd0>)
  404cca:	695b      	ldr	r3, [r3, #20]
  404ccc:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  404cd0:	bf14      	ite	ne
  404cd2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  404cd6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  404cda:	4b0e      	ldr	r3, [pc, #56]	; (404d14 <SystemCoreClockUpdate+0xcc>)
  404cdc:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  404cde:	4b0c      	ldr	r3, [pc, #48]	; (404d10 <SystemCoreClockUpdate+0xc8>)
  404ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404ce2:	f003 0303 	and.w	r3, r3, #3
  404ce6:	2b02      	cmp	r3, #2
  404ce8:	d1b7      	bne.n	404c5a <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  404cea:	4b09      	ldr	r3, [pc, #36]	; (404d10 <SystemCoreClockUpdate+0xc8>)
  404cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  404cee:	4909      	ldr	r1, [pc, #36]	; (404d14 <SystemCoreClockUpdate+0xcc>)
  404cf0:	f3c2 420c 	ubfx	r2, r2, #16, #13
  404cf4:	680b      	ldr	r3, [r1, #0]
  404cf6:	fb02 3303 	mla	r3, r2, r3, r3
  404cfa:	600b      	str	r3, [r1, #0]
  404cfc:	e7ad      	b.n	404c5a <SystemCoreClockUpdate+0x12>
		SystemCoreClock /= 3U;
  404cfe:	4a05      	ldr	r2, [pc, #20]	; (404d14 <SystemCoreClockUpdate+0xcc>)
  404d00:	6813      	ldr	r3, [r2, #0]
  404d02:	490a      	ldr	r1, [pc, #40]	; (404d2c <SystemCoreClockUpdate+0xe4>)
  404d04:	fba1 1303 	umull	r1, r3, r1, r3
  404d08:	085b      	lsrs	r3, r3, #1
  404d0a:	6013      	str	r3, [r2, #0]
  404d0c:	4770      	bx	lr
  404d0e:	bf00      	nop
  404d10:	400e0400 	.word	0x400e0400
  404d14:	20000304 	.word	0x20000304
  404d18:	400e1410 	.word	0x400e1410
  404d1c:	00b71b00 	.word	0x00b71b00
  404d20:	007a1200 	.word	0x007a1200
  404d24:	016e3600 	.word	0x016e3600
  404d28:	00f42400 	.word	0x00f42400
  404d2c:	aaaaaaab 	.word	0xaaaaaaab

00404d30 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  404d30:	4b12      	ldr	r3, [pc, #72]	; (404d7c <system_init_flash+0x4c>)
  404d32:	4298      	cmp	r0, r3
  404d34:	d911      	bls.n	404d5a <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  404d36:	4b12      	ldr	r3, [pc, #72]	; (404d80 <system_init_flash+0x50>)
  404d38:	4298      	cmp	r0, r3
  404d3a:	d913      	bls.n	404d64 <system_init_flash+0x34>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  404d3c:	4b11      	ldr	r3, [pc, #68]	; (404d84 <system_init_flash+0x54>)
  404d3e:	4298      	cmp	r0, r3
  404d40:	d914      	bls.n	404d6c <system_init_flash+0x3c>
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
  404d42:	4b11      	ldr	r3, [pc, #68]	; (404d88 <system_init_flash+0x58>)
  404d44:	4298      	cmp	r0, r3
  404d46:	d915      	bls.n	404d74 <system_init_flash+0x44>
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
  404d48:	4b10      	ldr	r3, [pc, #64]	; (404d8c <system_init_flash+0x5c>)
  404d4a:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  404d4c:	bf94      	ite	ls
  404d4e:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  404d52:	4a0f      	ldrhi	r2, [pc, #60]	; (404d90 <system_init_flash+0x60>)
  404d54:	4b0f      	ldr	r3, [pc, #60]	; (404d94 <system_init_flash+0x64>)
  404d56:	601a      	str	r2, [r3, #0]
  404d58:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  404d5a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  404d5e:	4b0d      	ldr	r3, [pc, #52]	; (404d94 <system_init_flash+0x64>)
  404d60:	601a      	str	r2, [r3, #0]
  404d62:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  404d64:	4a0c      	ldr	r2, [pc, #48]	; (404d98 <system_init_flash+0x68>)
  404d66:	4b0b      	ldr	r3, [pc, #44]	; (404d94 <system_init_flash+0x64>)
  404d68:	601a      	str	r2, [r3, #0]
  404d6a:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  404d6c:	4a0b      	ldr	r2, [pc, #44]	; (404d9c <system_init_flash+0x6c>)
  404d6e:	4b09      	ldr	r3, [pc, #36]	; (404d94 <system_init_flash+0x64>)
  404d70:	601a      	str	r2, [r3, #0]
  404d72:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  404d74:	4a0a      	ldr	r2, [pc, #40]	; (404da0 <system_init_flash+0x70>)
  404d76:	4b07      	ldr	r3, [pc, #28]	; (404d94 <system_init_flash+0x64>)
  404d78:	601a      	str	r2, [r3, #0]
  404d7a:	4770      	bx	lr
  404d7c:	01312cff 	.word	0x01312cff
  404d80:	026259ff 	.word	0x026259ff
  404d84:	039386ff 	.word	0x039386ff
  404d88:	04c4b3ff 	.word	0x04c4b3ff
  404d8c:	05f5e0ff 	.word	0x05f5e0ff
  404d90:	04000500 	.word	0x04000500
  404d94:	400e0a00 	.word	0x400e0a00
  404d98:	04000100 	.word	0x04000100
  404d9c:	04000200 	.word	0x04000200
  404da0:	04000300 	.word	0x04000300

00404da4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  404da4:	4b0a      	ldr	r3, [pc, #40]	; (404dd0 <_sbrk+0x2c>)
  404da6:	681b      	ldr	r3, [r3, #0]
  404da8:	b153      	cbz	r3, 404dc0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  404daa:	4b09      	ldr	r3, [pc, #36]	; (404dd0 <_sbrk+0x2c>)
  404dac:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  404dae:	181a      	adds	r2, r3, r0
  404db0:	4908      	ldr	r1, [pc, #32]	; (404dd4 <_sbrk+0x30>)
  404db2:	4291      	cmp	r1, r2
  404db4:	db08      	blt.n	404dc8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  404db6:	4610      	mov	r0, r2
  404db8:	4a05      	ldr	r2, [pc, #20]	; (404dd0 <_sbrk+0x2c>)
  404dba:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  404dbc:	4618      	mov	r0, r3
  404dbe:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  404dc0:	4a05      	ldr	r2, [pc, #20]	; (404dd8 <_sbrk+0x34>)
  404dc2:	4b03      	ldr	r3, [pc, #12]	; (404dd0 <_sbrk+0x2c>)
  404dc4:	601a      	str	r2, [r3, #0]
  404dc6:	e7f0      	b.n	404daa <_sbrk+0x6>
		return (caddr_t) -1;	
  404dc8:	f04f 30ff 	mov.w	r0, #4294967295
}
  404dcc:	4770      	bx	lr
  404dce:	bf00      	nop
  404dd0:	20014088 	.word	0x20014088
  404dd4:	20027ffc 	.word	0x20027ffc
  404dd8:	20025278 	.word	0x20025278

00404ddc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  404ddc:	f04f 30ff 	mov.w	r0, #4294967295
  404de0:	4770      	bx	lr

00404de2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  404de2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  404de6:	604b      	str	r3, [r1, #4]

	return 0;
}
  404de8:	2000      	movs	r0, #0
  404dea:	4770      	bx	lr

00404dec <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  404dec:	2001      	movs	r0, #1
  404dee:	4770      	bx	lr

00404df0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  404df0:	2000      	movs	r0, #0
  404df2:	4770      	bx	lr

00404df4 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
  404df4:	be00      	bkpt	0x0000
  404df6:	e7fe      	b.n	404df6 <_exit+0x2>

00404df8 <boardAndChipInit>:
const GyroFSRtype   gyroFSRdefault  = gfsr1966;


// poll keyboard to check for ctrl-c  : dont know how to do this yet
void boardAndChipInit( bool boardRev)
{
  404df8:	b508      	push	{r3, lr}

			initBSP(boardRev);
  404dfa:	4b02      	ldr	r3, [pc, #8]	; (404e04 <boardAndChipInit+0xc>)
  404dfc:	4798      	blx	r3
			
			IAM20685_chipunlock_PRM();
  404dfe:	4b02      	ldr	r3, [pc, #8]	; (404e08 <boardAndChipInit+0x10>)
  404e00:	4798      	blx	r3
  404e02:	bd08      	pop	{r3, pc}
  404e04:	00401fb1 	.word	0x00401fb1
  404e08:	00403049 	.word	0x00403049

00404e0c <IAM20685_PRM>:

}


void IAM20685_PRM()//command=9
{
  404e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404e10:	b08e      	sub	sp, #56	; 0x38
		int fsrindx;

		//uint16_t temp, temp1, temp2;


       boardAndChipInit(boardSPIRev);
  404e12:	2001      	movs	r0, #1
  404e14:	4b40      	ldr	r3, [pc, #256]	; (404f18 <IAM20685_PRM+0x10c>)
  404e16:	4798      	blx	r3
		
		WhoAmIType okNok =	getWhoAmI(&whoami);
  404e18:	f10d 000e 	add.w	r0, sp, #14
  404e1c:	4b3f      	ldr	r3, [pc, #252]	; (404f1c <IAM20685_PRM+0x110>)
  404e1e:	4798      	blx	r3
		if (okNok == YamNotOK) { printf("Yam identity crisis: %04X  :(   press any key to continue: ",  whoami);  getchar(); printf("..thanks \r\n");  }
  404e20:	b340      	cbz	r0, 404e74 <IAM20685_PRM+0x68>
		
		IAM20685_writeunlock_PRM();
  404e22:	4b3f      	ldr	r3, [pc, #252]	; (404f20 <IAM20685_PRM+0x114>)
  404e24:	4798      	blx	r3
		
		SetFilter(Z, g60hz, a60hz);
  404e26:	2202      	movs	r2, #2
  404e28:	2105      	movs	r1, #5
  404e2a:	4610      	mov	r0, r2
  404e2c:	4c3d      	ldr	r4, [pc, #244]	; (404f24 <IAM20685_PRM+0x118>)
  404e2e:	47a0      	blx	r4
		SetFilter(Y, g60hz, a60hz);
  404e30:	2202      	movs	r2, #2
  404e32:	2105      	movs	r1, #5
  404e34:	2001      	movs	r0, #1
  404e36:	47a0      	blx	r4
		SetFilter(X, g60hz, a60hz);
  404e38:	2202      	movs	r2, #2
  404e3a:	2105      	movs	r1, #5
  404e3c:	2000      	movs	r0, #0
  404e3e:	47a0      	blx	r4

		AccelFSRset(accelFSRdefault, flr4);
  404e40:	2100      	movs	r1, #0
  404e42:	2002      	movs	r0, #2
  404e44:	4b38      	ldr	r3, [pc, #224]	; (404f28 <IAM20685_PRM+0x11c>)
  404e46:	4798      	blx	r3
		GyroFSRset(gyroFSRdefault);
  404e48:	2002      	movs	r0, #2
  404e4a:	4b38      	ldr	r3, [pc, #224]	; (404f2c <IAM20685_PRM+0x120>)
  404e4c:	4798      	blx	r3

		bankselect(bFxd);
  404e4e:	2000      	movs	r0, #0
  404e50:	4b37      	ldr	r3, [pc, #220]	; (404f30 <IAM20685_PRM+0x124>)
  404e52:	4798      	blx	r3

		setPrintUnits(rawbits);
  404e54:	2000      	movs	r0, #0
  404e56:	4b37      	ldr	r3, [pc, #220]	; (404f34 <IAM20685_PRM+0x128>)
  404e58:	4798      	blx	r3
		resetPrintHdrCount();
  404e5a:	4b37      	ldr	r3, [pc, #220]	; (404f38 <IAM20685_PRM+0x12c>)
  404e5c:	4798      	blx	r3
		printf("\r\n");
  404e5e:	4837      	ldr	r0, [pc, #220]	; (404f3c <IAM20685_PRM+0x130>)
  404e60:	4b37      	ldr	r3, [pc, #220]	; (404f40 <IAM20685_PRM+0x134>)
  404e62:	4798      	blx	r3
		fsrindx=0;
		for (int i=0;  !userexit();i++)
  404e64:	2400      	movs	r4, #0
		fsrindx=0;
  404e66:	4626      	mov	r6, r4
		for (int i=0;  !userexit();i++)
  404e68:	4f36      	ldr	r7, [pc, #216]	; (404f44 <IAM20685_PRM+0x138>)
		{
			//printHdr(i);
			if (i%100 == 99)
  404e6a:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 404f64 <IAM20685_PRM+0x158>
				AccelFsrtype  setfsr;
				AccellRestype setflr;

				fsrindx = (fsrindx+1)%8;
				setfsr = accelAllowedFSRcombo[fsrindx].afsr;
				setflr = accelAllowedFSRcombo[fsrindx].alrfsr;
  404e6e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 404f68 <IAM20685_PRM+0x15c>
		for (int i=0;  !userexit();i++)
  404e72:	e02e      	b.n	404ed2 <IAM20685_PRM+0xc6>
		if (okNok == YamNotOK) { printf("Yam identity crisis: %04X  :(   press any key to continue: ",  whoami);  getchar(); printf("..thanks \r\n");  }
  404e74:	f8bd 100e 	ldrh.w	r1, [sp, #14]
  404e78:	4833      	ldr	r0, [pc, #204]	; (404f48 <IAM20685_PRM+0x13c>)
  404e7a:	4b34      	ldr	r3, [pc, #208]	; (404f4c <IAM20685_PRM+0x140>)
  404e7c:	4798      	blx	r3
  404e7e:	4b34      	ldr	r3, [pc, #208]	; (404f50 <IAM20685_PRM+0x144>)
  404e80:	6818      	ldr	r0, [r3, #0]
  404e82:	6842      	ldr	r2, [r0, #4]
  404e84:	6853      	ldr	r3, [r2, #4]
  404e86:	3b01      	subs	r3, #1
  404e88:	6053      	str	r3, [r2, #4]
  404e8a:	2b00      	cmp	r3, #0
  404e8c:	db07      	blt.n	404e9e <IAM20685_PRM+0x92>
  404e8e:	6842      	ldr	r2, [r0, #4]
  404e90:	6813      	ldr	r3, [r2, #0]
  404e92:	3301      	adds	r3, #1
  404e94:	6013      	str	r3, [r2, #0]
  404e96:	482f      	ldr	r0, [pc, #188]	; (404f54 <IAM20685_PRM+0x148>)
  404e98:	4b29      	ldr	r3, [pc, #164]	; (404f40 <IAM20685_PRM+0x134>)
  404e9a:	4798      	blx	r3
  404e9c:	e7c1      	b.n	404e22 <IAM20685_PRM+0x16>
  404e9e:	6841      	ldr	r1, [r0, #4]
  404ea0:	4b2d      	ldr	r3, [pc, #180]	; (404f58 <IAM20685_PRM+0x14c>)
  404ea2:	4798      	blx	r3
  404ea4:	e7f7      	b.n	404e96 <IAM20685_PRM+0x8a>
			
				AccelFSRset (setfsr, setflr);
			}
			ReadAxesAndTemp(readArr, readArr+3, readArr+6, readArr+9, readArr+FXDARRINDEX);
  404ea6:	f10d 0536 	add.w	r5, sp, #54	; 0x36
  404eaa:	9500      	str	r5, [sp, #0]
  404eac:	f10d 0322 	add.w	r3, sp, #34	; 0x22
  404eb0:	aa07      	add	r2, sp, #28
  404eb2:	f10d 0116 	add.w	r1, sp, #22
  404eb6:	a804      	add	r0, sp, #16
  404eb8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 404f6c <IAM20685_PRM+0x160>
  404ebc:	47d0      	blx	sl
			printAxes(readArr, readArr+3, readArr+6, readArr+9, readArr+FXDARRINDEX);
  404ebe:	9500      	str	r5, [sp, #0]
  404ec0:	f10d 0322 	add.w	r3, sp, #34	; 0x22
  404ec4:	aa07      	add	r2, sp, #28
  404ec6:	f10d 0116 	add.w	r1, sp, #22
  404eca:	a804      	add	r0, sp, #16
  404ecc:	4d23      	ldr	r5, [pc, #140]	; (404f5c <IAM20685_PRM+0x150>)
  404ece:	47a8      	blx	r5
		for (int i=0;  !userexit();i++)
  404ed0:	3401      	adds	r4, #1
  404ed2:	47b8      	blx	r7
  404ed4:	b9c8      	cbnz	r0, 404f0a <IAM20685_PRM+0xfe>
			if (i%100 == 99)
  404ed6:	fb88 2304 	smull	r2, r3, r8, r4
  404eda:	17e2      	asrs	r2, r4, #31
  404edc:	ebc2 1363 	rsb	r3, r2, r3, asr #5
  404ee0:	2264      	movs	r2, #100	; 0x64
  404ee2:	fb02 4313 	mls	r3, r2, r3, r4
  404ee6:	2b63      	cmp	r3, #99	; 0x63
  404ee8:	d1dd      	bne.n	404ea6 <IAM20685_PRM+0x9a>
				fsrindx = (fsrindx+1)%8;
  404eea:	3601      	adds	r6, #1
  404eec:	4273      	negs	r3, r6
  404eee:	f006 0607 	and.w	r6, r6, #7
  404ef2:	f003 0307 	and.w	r3, r3, #7
  404ef6:	bf58      	it	pl
  404ef8:	425e      	negpl	r6, r3
				setflr = accelAllowedFSRcombo[fsrindx].alrfsr;
  404efa:	eb09 0346 	add.w	r3, r9, r6, lsl #1
				AccelFSRset (setfsr, setflr);
  404efe:	7859      	ldrb	r1, [r3, #1]
  404f00:	f819 0016 	ldrb.w	r0, [r9, r6, lsl #1]
  404f04:	4b08      	ldr	r3, [pc, #32]	; (404f28 <IAM20685_PRM+0x11c>)
  404f06:	4798      	blx	r3
  404f08:	e7cd      	b.n	404ea6 <IAM20685_PRM+0x9a>
		}
		
		printf("User Ctrl-X, exited test \r\n");
  404f0a:	4815      	ldr	r0, [pc, #84]	; (404f60 <IAM20685_PRM+0x154>)
  404f0c:	4b0c      	ldr	r3, [pc, #48]	; (404f40 <IAM20685_PRM+0x134>)
  404f0e:	4798      	blx	r3
}
  404f10:	b00e      	add	sp, #56	; 0x38
  404f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404f16:	bf00      	nop
  404f18:	00404df9 	.word	0x00404df9
  404f1c:	004021f5 	.word	0x004021f5
  404f20:	004030b5 	.word	0x004030b5
  404f24:	004022f5 	.word	0x004022f5
  404f28:	004020e5 	.word	0x004020e5
  404f2c:	00402145 	.word	0x00402145
  404f30:	00403d71 	.word	0x00403d71
  404f34:	0040294d 	.word	0x0040294d
  404f38:	004029f9 	.word	0x004029f9
  404f3c:	0040ec40 	.word	0x0040ec40
  404f40:	00407df1 	.word	0x00407df1
  404f44:	00402069 	.word	0x00402069
  404f48:	0040ef60 	.word	0x0040ef60
  404f4c:	00407d2d 	.word	0x00407d2d
  404f50:	20000378 	.word	0x20000378
  404f54:	0040ef9c 	.word	0x0040ef9c
  404f58:	00407e01 	.word	0x00407e01
  404f5c:	00402c5d 	.word	0x00402c5d
  404f60:	0040efa8 	.word	0x0040efa8
  404f64:	51eb851f 	.word	0x51eb851f
  404f68:	2000030c 	.word	0x2000030c
  404f6c:	00402221 	.word	0x00402221

00404f70 <yamMsg>:
	printf("IAM 20685, the Auto Chiiiip\n");
	getchar();
}

void yamMsg (char * s, yErrType next, uint32_t err)
{
  404f70:	b538      	push	{r3, r4, r5, lr}
  404f72:	460c      	mov	r4, r1
  404f74:	4615      	mov	r5, r2
	printf("%s ", s); 
  404f76:	4601      	mov	r1, r0
  404f78:	4814      	ldr	r0, [pc, #80]	; (404fcc <yamMsg+0x5c>)
  404f7a:	4b15      	ldr	r3, [pc, #84]	; (404fd0 <yamMsg+0x60>)
  404f7c:	4798      	blx	r3
	if (err) { printf("got Error %d", err);}
  404f7e:	b935      	cbnz	r5, 404f8e <yamMsg+0x1e>
	printf("\r\n");
  404f80:	4814      	ldr	r0, [pc, #80]	; (404fd4 <yamMsg+0x64>)
  404f82:	4b15      	ldr	r3, [pc, #84]	; (404fd8 <yamMsg+0x68>)
  404f84:	4798      	blx	r3

	if (next==xit)
  404f86:	b13c      	cbz	r4, 404f98 <yamMsg+0x28>
	  exit(0);
	if (next == yamwait){
  404f88:	2c01      	cmp	r4, #1
  404f8a:	d008      	beq.n	404f9e <yamMsg+0x2e>
  404f8c:	bd38      	pop	{r3, r4, r5, pc}
	if (err) { printf("got Error %d", err);}
  404f8e:	4629      	mov	r1, r5
  404f90:	4812      	ldr	r0, [pc, #72]	; (404fdc <yamMsg+0x6c>)
  404f92:	4b0f      	ldr	r3, [pc, #60]	; (404fd0 <yamMsg+0x60>)
  404f94:	4798      	blx	r3
  404f96:	e7f3      	b.n	404f80 <yamMsg+0x10>
	  exit(0);
  404f98:	2000      	movs	r0, #0
  404f9a:	4b11      	ldr	r3, [pc, #68]	; (404fe0 <yamMsg+0x70>)
  404f9c:	4798      	blx	r3
	  printf(" Press any key.. : "); getchar(); printf(".. thanks\r\n");
  404f9e:	4811      	ldr	r0, [pc, #68]	; (404fe4 <yamMsg+0x74>)
  404fa0:	4b0b      	ldr	r3, [pc, #44]	; (404fd0 <yamMsg+0x60>)
  404fa2:	4798      	blx	r3
  404fa4:	4b10      	ldr	r3, [pc, #64]	; (404fe8 <yamMsg+0x78>)
  404fa6:	6818      	ldr	r0, [r3, #0]
  404fa8:	6842      	ldr	r2, [r0, #4]
  404faa:	6853      	ldr	r3, [r2, #4]
  404fac:	3b01      	subs	r3, #1
  404fae:	6053      	str	r3, [r2, #4]
  404fb0:	2b00      	cmp	r3, #0
  404fb2:	db07      	blt.n	404fc4 <yamMsg+0x54>
  404fb4:	6842      	ldr	r2, [r0, #4]
  404fb6:	6813      	ldr	r3, [r2, #0]
  404fb8:	3301      	adds	r3, #1
  404fba:	6013      	str	r3, [r2, #0]
  404fbc:	480b      	ldr	r0, [pc, #44]	; (404fec <yamMsg+0x7c>)
  404fbe:	4b06      	ldr	r3, [pc, #24]	; (404fd8 <yamMsg+0x68>)
  404fc0:	4798      	blx	r3
	}
}
  404fc2:	e7e3      	b.n	404f8c <yamMsg+0x1c>
	  printf(" Press any key.. : "); getchar(); printf(".. thanks\r\n");
  404fc4:	6841      	ldr	r1, [r0, #4]
  404fc6:	4b0a      	ldr	r3, [pc, #40]	; (404ff0 <yamMsg+0x80>)
  404fc8:	4798      	blx	r3
  404fca:	e7f7      	b.n	404fbc <yamMsg+0x4c>
  404fcc:	0040f9a8 	.word	0x0040f9a8
  404fd0:	00407d2d 	.word	0x00407d2d
  404fd4:	0040ec40 	.word	0x0040ec40
  404fd8:	00407df1 	.word	0x00407df1
  404fdc:	0040f9ac 	.word	0x0040f9ac
  404fe0:	00407aed 	.word	0x00407aed
  404fe4:	0040f9bc 	.word	0x0040f9bc
  404fe8:	20000378 	.word	0x20000378
  404fec:	0040f9d0 	.word	0x0040f9d0
  404ff0:	00407e01 	.word	0x00407e01

00404ff4 <testIterControl>:
//extern char tbuf[];
//static	int i;
static uint16_t temp;

bool testIterControl (uint16_t iter, char *p)
{
  404ff4:	b510      	push	{r4, lr}
  404ff6:	460a      	mov	r2, r1
	bool runtest;
	if (iter == 0) { runtest = false; sprintf (tbuf, "Skipping Test: %s", p); yamMsg(tbuf, keepgoin, 0);}
  404ff8:	b158      	cbz	r0, 405012 <testIterControl+0x1e>
	else		   { runtest = true;  sprintf (tbuf, "Running Test: %s", p); yamMsg(tbuf, keepgoin, 0);}
  404ffa:	4c0c      	ldr	r4, [pc, #48]	; (40502c <testIterControl+0x38>)
  404ffc:	490c      	ldr	r1, [pc, #48]	; (405030 <testIterControl+0x3c>)
  404ffe:	4620      	mov	r0, r4
  405000:	4b0c      	ldr	r3, [pc, #48]	; (405034 <testIterControl+0x40>)
  405002:	4798      	blx	r3
  405004:	2200      	movs	r2, #0
  405006:	2102      	movs	r1, #2
  405008:	4620      	mov	r0, r4
  40500a:	4b0b      	ldr	r3, [pc, #44]	; (405038 <testIterControl+0x44>)
  40500c:	4798      	blx	r3
  40500e:	2001      	movs	r0, #1
	return runtest;
}
  405010:	bd10      	pop	{r4, pc}
	if (iter == 0) { runtest = false; sprintf (tbuf, "Skipping Test: %s", p); yamMsg(tbuf, keepgoin, 0);}
  405012:	4c06      	ldr	r4, [pc, #24]	; (40502c <testIterControl+0x38>)
  405014:	4909      	ldr	r1, [pc, #36]	; (40503c <testIterControl+0x48>)
  405016:	4620      	mov	r0, r4
  405018:	4b06      	ldr	r3, [pc, #24]	; (405034 <testIterControl+0x40>)
  40501a:	4798      	blx	r3
  40501c:	2200      	movs	r2, #0
  40501e:	2102      	movs	r1, #2
  405020:	4620      	mov	r0, r4
  405022:	4b05      	ldr	r3, [pc, #20]	; (405038 <testIterControl+0x44>)
  405024:	4798      	blx	r3
  405026:	2000      	movs	r0, #0
  405028:	bd10      	pop	{r4, pc}
  40502a:	bf00      	nop
  40502c:	2001a0ac 	.word	0x2001a0ac
  405030:	0040f66c 	.word	0x0040f66c
  405034:	00407fd5 	.word	0x00407fd5
  405038:	00404f71 	.word	0x00404f71
  40503c:	0040f658 	.word	0x0040f658

00405040 <TestTestReg>:

const breakIter = 65535;
uint16_t TestTestReg( int iter)
{
  405040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405044:	b083      	sub	sp, #12
  405046:	4683      	mov	fp, r0
	enum errWriteType err = 0;
	int i;
	int16_t anothertemp;
	uint32_t protoresponse;
	enum errWriteType  protoErr=noProtocolErr; 
  405048:	2300      	movs	r3, #0
  40504a:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if (!testIterControl(iter, "TestTestReg")) return 0;
  40504e:	493d      	ldr	r1, [pc, #244]	; (405144 <TestTestReg+0x104>)
  405050:	b280      	uxth	r0, r0
  405052:	4b3d      	ldr	r3, [pc, #244]	; (405148 <TestTestReg+0x108>)
  405054:	4798      	blx	r3
  405056:	2800      	cmp	r0, #0
  405058:	d06f      	beq.n	40513a <TestTestReg+0xfa>
  40505a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40505e:	2600      	movs	r6, #0

	for (;iter--;)
	{
		sprintf(tbuf, "iter: %d ", iter);
  405060:	f8df 8118 	ldr.w	r8, [pc, #280]	; 40517c <TestTestReg+0x13c>

		for (i= 0; i <= 0xFFFF; i++)
		{
			if (i==breakIter)
			  printf("Start Salae capture \r\n");
			if (i%20000  == 1) printf ("testing value %d\r\n", i);
  405064:	f8df 9118 	ldr.w	r9, [pc, #280]	; 405180 <TestTestReg+0x140>
  405068:	f8df a118 	ldr.w	sl, [pc, #280]	; 405184 <TestTestReg+0x144>
  40506c:	e047      	b.n	4050fe <TestTestReg+0xbe>
			  printf("Start Salae capture \r\n");
  40506e:	4837      	ldr	r0, [pc, #220]	; (40514c <TestTestReg+0x10c>)
  405070:	4b37      	ldr	r3, [pc, #220]	; (405150 <TestTestReg+0x110>)
  405072:	4798      	blx	r3
  405074:	e01b      	b.n	4050ae <TestTestReg+0x6e>
			if (i%20000  == 1) printf ("testing value %d\r\n", i);
  405076:	4621      	mov	r1, r4
  405078:	4650      	mov	r0, sl
  40507a:	4b36      	ldr	r3, [pc, #216]	; (405154 <TestTestReg+0x114>)
  40507c:	4798      	blx	r3
  40507e:	e016      	b.n	4050ae <TestTestReg+0x6e>
//			regWrite(Tr, i);
//WriteReg(Arev, 0x1234);  // intervening write
            temp = ReadReg(Tr, &protoErr);
			if (protoErr) { uint16_t wmi;
			  //printf ("Read PrtoError: %d\r\n", protoErr);
			  getWhoAmI(&wmi) ;
  405080:	a801      	add	r0, sp, #4
  405082:	4b35      	ldr	r3, [pc, #212]	; (405158 <TestTestReg+0x118>)
  405084:	4798      	blx	r3
  405086:	e026      	b.n	4050d6 <TestTestReg+0x96>
		for (i= 0; i <= 0xFFFF; i++)
  405088:	3401      	adds	r4, #1
  40508a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
  40508e:	d034      	beq.n	4050fa <TestTestReg+0xba>
			if (i==breakIter)
  405090:	f64f 73ff 	movw	r3, #65535	; 0xffff
  405094:	429c      	cmp	r4, r3
  405096:	d0ea      	beq.n	40506e <TestTestReg+0x2e>
			if (i%20000  == 1) printf ("testing value %d\r\n", i);
  405098:	fb89 2304 	smull	r2, r3, r9, r4
  40509c:	17e2      	asrs	r2, r4, #31
  40509e:	ebc2 3363 	rsb	r3, r2, r3, asr #13
  4050a2:	f644 6220 	movw	r2, #20000	; 0x4e20
  4050a6:	fb02 4313 	mls	r3, r2, r3, r4
  4050aa:	2b01      	cmp	r3, #1
  4050ac:	d0e3      	beq.n	405076 <TestTestReg+0x36>
WriteReg(Arev, 0x1234);  // intervening write
  4050ae:	f241 2134 	movw	r1, #4660	; 0x1234
  4050b2:	201b      	movs	r0, #27
  4050b4:	4f29      	ldr	r7, [pc, #164]	; (40515c <TestTestReg+0x11c>)
  4050b6:	47b8      	blx	r7
			protoErr = WriteReg(Tr, 0x5678);
  4050b8:	f245 6178 	movw	r1, #22136	; 0x5678
  4050bc:	2017      	movs	r0, #23
  4050be:	47b8      	blx	r7
  4050c0:	a902      	add	r1, sp, #8
  4050c2:	f801 0d01 	strb.w	r0, [r1, #-1]!
            temp = ReadReg(Tr, &protoErr);
  4050c6:	2017      	movs	r0, #23
  4050c8:	4b25      	ldr	r3, [pc, #148]	; (405160 <TestTestReg+0x120>)
  4050ca:	4798      	blx	r3
  4050cc:	8028      	strh	r0, [r5, #0]
			if (protoErr) { uint16_t wmi;
  4050ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4050d2:	2b00      	cmp	r3, #0
  4050d4:	d1d4      	bne.n	405080 <TestTestReg+0x40>
//			temp = readReg(0, Tr);
//anothertemp = ReadReg(Z_flt, &protoErr);
//			if (protoErr)
//			printf ("Read PrtoError: %d\r\n", protoErr);
		    
			if (0x5678 != temp) //(i != temp)
  4050d6:	882b      	ldrh	r3, [r5, #0]
  4050d8:	f245 6278 	movw	r2, #22136	; 0x5678
  4050dc:	4293      	cmp	r3, r2
  4050de:	d0d3      	beq.n	405088 <TestTestReg+0x48>
			{
			  sprintf(tbuf, "i: %04X  Tr: %04X \r\n", i, temp) ;
  4050e0:	4622      	mov	r2, r4
  4050e2:	4920      	ldr	r1, [pc, #128]	; (405164 <TestTestReg+0x124>)
  4050e4:	4640      	mov	r0, r8
  4050e6:	4f20      	ldr	r7, [pc, #128]	; (405168 <TestTestReg+0x128>)
  4050e8:	47b8      	blx	r7
			  err++;
  4050ea:	3601      	adds	r6, #1
  4050ec:	b2f6      	uxtb	r6, r6
			  yamMsg(tbuf, keepgoin, err);
  4050ee:	4632      	mov	r2, r6
  4050f0:	2102      	movs	r1, #2
  4050f2:	4640      	mov	r0, r8
  4050f4:	4b1d      	ldr	r3, [pc, #116]	; (40516c <TestTestReg+0x12c>)
  4050f6:	4798      	blx	r3
  4050f8:	e7c6      	b.n	405088 <TestTestReg+0x48>
  4050fa:	f10b 3bff 	add.w	fp, fp, #4294967295
	for (;iter--;)
  4050fe:	f1bb 3fff 	cmp.w	fp, #4294967295
  405102:	d00c      	beq.n	40511e <TestTestReg+0xde>
		sprintf(tbuf, "iter: %d ", iter);
  405104:	465a      	mov	r2, fp
  405106:	491a      	ldr	r1, [pc, #104]	; (405170 <TestTestReg+0x130>)
  405108:	4640      	mov	r0, r8
  40510a:	4b17      	ldr	r3, [pc, #92]	; (405168 <TestTestReg+0x128>)
  40510c:	4798      	blx	r3
		yamMsg(tbuf, keepgoin, 0);
  40510e:	2200      	movs	r2, #0
  405110:	2102      	movs	r1, #2
  405112:	4640      	mov	r0, r8
  405114:	4b15      	ldr	r3, [pc, #84]	; (40516c <TestTestReg+0x12c>)
  405116:	4798      	blx	r3
		for (i= 0; i <= 0xFFFF; i++)
  405118:	2400      	movs	r4, #0
            temp = ReadReg(Tr, &protoErr);
  40511a:	4d16      	ldr	r5, [pc, #88]	; (405174 <TestTestReg+0x134>)
  40511c:	e7b8      	b.n	405090 <TestTestReg+0x50>
			}    
		}
	}

	yamMsg("Test Register test done", (err || protoErr) ? yamwait : keepgoin, err ? err : protoErr); 
  40511e:	b976      	cbnz	r6, 40513e <TestTestReg+0xfe>
  405120:	f89d 2007 	ldrb.w	r2, [sp, #7]
  405124:	2a00      	cmp	r2, #0
  405126:	bf14      	ite	ne
  405128:	2101      	movne	r1, #1
  40512a:	2102      	moveq	r1, #2
  40512c:	4812      	ldr	r0, [pc, #72]	; (405178 <TestTestReg+0x138>)
  40512e:	4b0f      	ldr	r3, [pc, #60]	; (40516c <TestTestReg+0x12c>)
  405130:	4798      	blx	r3
	return err;
  405132:	b2b0      	uxth	r0, r6
}
  405134:	b003      	add	sp, #12
  405136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!testIterControl(iter, "TestTestReg")) return 0;
  40513a:	2000      	movs	r0, #0
  40513c:	e7fa      	b.n	405134 <TestTestReg+0xf4>
	yamMsg("Test Register test done", (err || protoErr) ? yamwait : keepgoin, err ? err : protoErr); 
  40513e:	4632      	mov	r2, r6
  405140:	2101      	movs	r1, #1
  405142:	e7f3      	b.n	40512c <TestTestReg+0xec>
  405144:	0040f500 	.word	0x0040f500
  405148:	00404ff5 	.word	0x00404ff5
  40514c:	0040f518 	.word	0x0040f518
  405150:	00407df1 	.word	0x00407df1
  405154:	00407d2d 	.word	0x00407d2d
  405158:	004021f5 	.word	0x004021f5
  40515c:	00403c8d 	.word	0x00403c8d
  405160:	00403cad 	.word	0x00403cad
  405164:	0040f544 	.word	0x0040f544
  405168:	00407fd5 	.word	0x00407fd5
  40516c:	00404f71 	.word	0x00404f71
  405170:	0040f50c 	.word	0x0040f50c
  405174:	2001a110 	.word	0x2001a110
  405178:	0040f55c 	.word	0x0040f55c
  40517c:	2001a0ac 	.word	0x2001a0ac
  405180:	68db8bad 	.word	0x68db8bad
  405184:	0040f530 	.word	0x0040f530

00405188 <TestWhoAmI>:


uint16_t TestWhoAmI(uint16_t whoYamSupposedToBe, int iter)
{
  405188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40518c:	b084      	sub	sp, #16
  40518e:	4606      	mov	r6, r0
  405190:	460c      	mov	r4, r1
	enum errWriteType err = 0;
  405192:	2300      	movs	r3, #0
  405194:	f88d 300f 	strb.w	r3, [sp, #15]
	uint16_t anotherTemp ;
	
	if (!testIterControl(iter, "TestWhoAmI")) return 0;
  405198:	4924      	ldr	r1, [pc, #144]	; (40522c <TestWhoAmI+0xa4>)
  40519a:	b2a0      	uxth	r0, r4
  40519c:	4b24      	ldr	r3, [pc, #144]	; (405230 <TestWhoAmI+0xa8>)
  40519e:	4798      	blx	r3
  4051a0:	2800      	cmp	r0, #0
  4051a2:	d041      	beq.n	405228 <TestWhoAmI+0xa0>

	 for (; iter>=0; iter--)
  4051a4:	2c00      	cmp	r4, #0
  4051a6:	db31      	blt.n	40520c <TestWhoAmI+0x84>
	 {  sprintf(tbuf, "iter: %d", iter); yamMsg(tbuf, keepgoin, 0); 
  4051a8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 405254 <TestWhoAmI+0xcc>
  4051ac:	4d21      	ldr	r5, [pc, #132]	; (405234 <TestWhoAmI+0xac>)
  4051ae:	4f22      	ldr	r7, [pc, #136]	; (405238 <TestWhoAmI+0xb0>)
  4051b0:	e003      	b.n	4051ba <TestWhoAmI+0x32>
	 for (; iter>=0; iter--)
  4051b2:	3c01      	subs	r4, #1
  4051b4:	f1b4 3fff 	cmp.w	r4, #4294967295
  4051b8:	d028      	beq.n	40520c <TestWhoAmI+0x84>
	 {  sprintf(tbuf, "iter: %d", iter); yamMsg(tbuf, keepgoin, 0); 
  4051ba:	4622      	mov	r2, r4
  4051bc:	4641      	mov	r1, r8
  4051be:	4628      	mov	r0, r5
  4051c0:	47b8      	blx	r7
  4051c2:	2200      	movs	r2, #0
  4051c4:	2102      	movs	r1, #2
  4051c6:	4628      	mov	r0, r5
  4051c8:	4b1c      	ldr	r3, [pc, #112]	; (40523c <TestWhoAmI+0xb4>)
  4051ca:	4798      	blx	r3
WriteReg(Tr, 0x1234);
  4051cc:	f241 2134 	movw	r1, #4660	; 0x1234
  4051d0:	2017      	movs	r0, #23
  4051d2:	4b1b      	ldr	r3, [pc, #108]	; (405240 <TestWhoAmI+0xb8>)
  4051d4:	4798      	blx	r3
		 temp = ReadReg(Fxd, &err);		 
  4051d6:	f10d 010f 	add.w	r1, sp, #15
  4051da:	200b      	movs	r0, #11
  4051dc:	4b19      	ldr	r3, [pc, #100]	; (405244 <TestWhoAmI+0xbc>)
  4051de:	4798      	blx	r3
  4051e0:	b282      	uxth	r2, r0
  4051e2:	4b19      	ldr	r3, [pc, #100]	; (405248 <TestWhoAmI+0xc0>)
  4051e4:	801a      	strh	r2, [r3, #0]
		 if (temp != whoYamSupposedToBe)
  4051e6:	42b2      	cmp	r2, r6
  4051e8:	d0e3      	beq.n	4051b2 <TestWhoAmI+0x2a>
		 {
			sprintf(tbuf, "Identity Crisis on iter:%d Am : %04X, should be: %04X", iter, temp, whoYamSupposedToBe);
  4051ea:	9600      	str	r6, [sp, #0]
  4051ec:	4613      	mov	r3, r2
  4051ee:	4622      	mov	r2, r4
  4051f0:	4916      	ldr	r1, [pc, #88]	; (40524c <TestWhoAmI+0xc4>)
  4051f2:	4628      	mov	r0, r5
  4051f4:	47b8      	blx	r7
			err++;
  4051f6:	f89d 200f 	ldrb.w	r2, [sp, #15]
  4051fa:	3201      	adds	r2, #1
  4051fc:	b2d2      	uxtb	r2, r2
  4051fe:	f88d 200f 	strb.w	r2, [sp, #15]
			yamMsg(tbuf, keepgoin, err);
  405202:	2102      	movs	r1, #2
  405204:	4628      	mov	r0, r5
  405206:	4b0d      	ldr	r3, [pc, #52]	; (40523c <TestWhoAmI+0xb4>)
  405208:	4798      	blx	r3
  40520a:	e7d2      	b.n	4051b2 <TestWhoAmI+0x2a>
		 }	 

	 }
	 
	 yamMsg("WhoAmI test done", err ? yamwait : keepgoin, err);
  40520c:	f89d 200f 	ldrb.w	r2, [sp, #15]
  405210:	2a00      	cmp	r2, #0
  405212:	bf14      	ite	ne
  405214:	2101      	movne	r1, #1
  405216:	2102      	moveq	r1, #2
  405218:	480d      	ldr	r0, [pc, #52]	; (405250 <TestWhoAmI+0xc8>)
  40521a:	4b08      	ldr	r3, [pc, #32]	; (40523c <TestWhoAmI+0xb4>)
  40521c:	4798      	blx	r3
	 return err;
  40521e:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
  405222:	b004      	add	sp, #16
  405224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!testIterControl(iter, "TestWhoAmI")) return 0;
  405228:	2000      	movs	r0, #0
  40522a:	e7fa      	b.n	405222 <TestWhoAmI+0x9a>
  40522c:	0040f574 	.word	0x0040f574
  405230:	00404ff5 	.word	0x00404ff5
  405234:	2001a0ac 	.word	0x2001a0ac
  405238:	00407fd5 	.word	0x00407fd5
  40523c:	00404f71 	.word	0x00404f71
  405240:	00403c8d 	.word	0x00403c8d
  405244:	00403cad 	.word	0x00403cad
  405248:	2001a110 	.word	0x2001a110
  40524c:	0040f58c 	.word	0x0040f58c
  405250:	0040f5c4 	.word	0x0040f5c4
  405254:	0040f580 	.word	0x0040f580

00405258 <TestTempSensor>:

 float spec_deltaT = 1.5f; 


uint16_t TestTempSensor(int iter)
{
  405258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40525c:	ed2d 8b04 	vpush	{d8-d9}
  405260:	b086      	sub	sp, #24
  405262:	4605      	mov	r5, r0
	uint16_t err=0;
	float t1_f, t2_f, tDiff_f, tDelta_f;

	if (!testIterControl(iter, "TestTempSensor")) return 0;
  405264:	494c      	ldr	r1, [pc, #304]	; (405398 <TestTempSensor+0x140>)
  405266:	b280      	uxth	r0, r0
  405268:	4b4c      	ldr	r3, [pc, #304]	; (40539c <TestTempSensor+0x144>)
  40526a:	4798      	blx	r3
  40526c:	2800      	cmp	r0, #0
  40526e:	f000 8091 	beq.w	405394 <TestTempSensor+0x13c>

	for ( ; iter; iter--)
  405272:	2d00      	cmp	r5, #0
  405274:	f000 808b 	beq.w	40538e <TestTempSensor+0x136>
  405278:	2600      	movs	r6, #0
	{
		ReadTempSensors(regvalArr);
  40527a:	4c49      	ldr	r4, [pc, #292]	; (4053a0 <TestTempSensor+0x148>)
  40527c:	f8df 9138 	ldr.w	r9, [pc, #312]	; 4053b8 <TestTempSensor+0x160>
		tDelta_f = temp2Centigrade(regvalArr[2]) - TEMP_SENSOR_ROOMTEMP;
        tDelta_f = floatAbs (tDelta_f);  // read diff
		
		//printf("T1,T2: %4.2f, %4.2f, tdc, tdr %4.2f, %4.2f\r\n", t1_f, t2_f, tDiff_f, tDelta_f);
		
		if (tDelta_f > spec_deltaT)
  405280:	4f48      	ldr	r7, [pc, #288]	; (4053a4 <TestTempSensor+0x14c>)
  405282:	e021      	b.n	4052c8 <TestTempSensor+0x70>
		{
		  sprintf(tbuf, "Delta-T register OOSpec %f:  Computed %f    Spec:  %f", tDelta_f, tDiff_f, spec_deltaT);
  405284:	f8df 8134 	ldr.w	r8, [pc, #308]	; 4053bc <TestTempSensor+0x164>
  405288:	47c0      	blx	r8
  40528a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40528e:	f8df a130 	ldr.w	sl, [pc, #304]	; 4053c0 <TestTempSensor+0x168>
  405292:	ee19 0a10 	vmov	r0, s18
  405296:	47c0      	blx	r8
  405298:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40529c:	ee18 0a10 	vmov	r0, s16
  4052a0:	47c0      	blx	r8
  4052a2:	e9cd 0100 	strd	r0, r1, [sp]
  4052a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4052aa:	493f      	ldr	r1, [pc, #252]	; (4053a8 <TestTempSensor+0x150>)
  4052ac:	4650      	mov	r0, sl
  4052ae:	f8df 8114 	ldr.w	r8, [pc, #276]	; 4053c4 <TestTempSensor+0x16c>
  4052b2:	47c0      	blx	r8
		  err++;
  4052b4:	3601      	adds	r6, #1
  4052b6:	b2b6      	uxth	r6, r6
		  yamMsg(tbuf, keepgoin, err);
  4052b8:	4632      	mov	r2, r6
  4052ba:	2102      	movs	r1, #2
  4052bc:	4650      	mov	r0, sl
  4052be:	4b3b      	ldr	r3, [pc, #236]	; (4053ac <TestTempSensor+0x154>)
  4052c0:	4798      	blx	r3
  4052c2:	e02d      	b.n	405320 <TestTempSensor+0xc8>
	for ( ; iter; iter--)
  4052c4:	3d01      	subs	r5, #1
  4052c6:	d054      	beq.n	405372 <TestTempSensor+0x11a>
		ReadTempSensors(regvalArr);
  4052c8:	4620      	mov	r0, r4
  4052ca:	47c8      	blx	r9
		t1_f = temp2Centigrade(regvalArr[0]);
  4052cc:	f9b4 0000 	ldrsh.w	r0, [r4]
  4052d0:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 4053c8 <TestTempSensor+0x170>
  4052d4:	47c0      	blx	r8
  4052d6:	ee08 0a10 	vmov	s16, r0
		t2_f = temp2Centigrade(regvalArr[1]);
  4052da:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  4052de:	47c0      	blx	r8
		tDiff_f = floatAbs (tDiff_f);  // computed diff
  4052e0:	ee07 0a90 	vmov	s15, r0
  4052e4:	ee78 7a67 	vsub.f32	s15, s16, s15
  4052e8:	ee17 0a90 	vmov	r0, s15
  4052ec:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 4053cc <TestTempSensor+0x174>
  4052f0:	47d0      	blx	sl
  4052f2:	ee08 0a10 	vmov	s16, r0
		tDelta_f = temp2Centigrade(regvalArr[2]) - TEMP_SENSOR_ROOMTEMP;
  4052f6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  4052fa:	47c0      	blx	r8
        tDelta_f = floatAbs (tDelta_f);  // read diff
  4052fc:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
  405300:	ee07 0a10 	vmov	s14, r0
  405304:	ee77 7a67 	vsub.f32	s15, s14, s15
  405308:	ee17 0a90 	vmov	r0, s15
  40530c:	47d0      	blx	sl
  40530e:	ee08 0a90 	vmov	s17, r0
		if (tDelta_f > spec_deltaT)
  405312:	ed97 9a00 	vldr	s18, [r7]
  405316:	eef4 8ac9 	vcmpe.f32	s17, s18
  40531a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40531e:	dcb1      	bgt.n	405284 <TestTempSensor+0x2c>
		}
		if (tDiff_f > spec_deltaT)
  405320:	ed97 9a00 	vldr	s18, [r7]
  405324:	eeb4 8ac9 	vcmpe.f32	s16, s18
  405328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40532c:	ddca      	ble.n	4052c4 <TestTempSensor+0x6c>
		{
			sprintf(tbuf, "T1-T2 OOSpec %f:  Computed %f   Spec:  %f", tDelta_f, tDiff_f, spec_deltaT);
  40532e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4053bc <TestTempSensor+0x164>
  405332:	ee18 0a90 	vmov	r0, s17
  405336:	47c0      	blx	r8
  405338:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40533c:	f8df a080 	ldr.w	sl, [pc, #128]	; 4053c0 <TestTempSensor+0x168>
  405340:	ee19 0a10 	vmov	r0, s18
  405344:	47c0      	blx	r8
  405346:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40534a:	ee18 0a10 	vmov	r0, s16
  40534e:	47c0      	blx	r8
  405350:	e9cd 0100 	strd	r0, r1, [sp]
  405354:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  405358:	4915      	ldr	r1, [pc, #84]	; (4053b0 <TestTempSensor+0x158>)
  40535a:	4650      	mov	r0, sl
  40535c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4053c4 <TestTempSensor+0x16c>
  405360:	47c0      	blx	r8
			err++;
  405362:	3601      	adds	r6, #1
  405364:	b2b6      	uxth	r6, r6
			yamMsg(tbuf, keepgoin, err);
  405366:	4632      	mov	r2, r6
  405368:	2102      	movs	r1, #2
  40536a:	4650      	mov	r0, sl
  40536c:	4b0f      	ldr	r3, [pc, #60]	; (4053ac <TestTempSensor+0x154>)
  40536e:	4798      	blx	r3
  405370:	e7a8      	b.n	4052c4 <TestTempSensor+0x6c>
		}

	}
	
	yamMsg("TestTempSensor Done", err ? yamwait : keepgoin, err); 
  405372:	2e00      	cmp	r6, #0
  405374:	bf14      	ite	ne
  405376:	2101      	movne	r1, #1
  405378:	2102      	moveq	r1, #2
  40537a:	4632      	mov	r2, r6
  40537c:	480d      	ldr	r0, [pc, #52]	; (4053b4 <TestTempSensor+0x15c>)
  40537e:	4b0b      	ldr	r3, [pc, #44]	; (4053ac <TestTempSensor+0x154>)
  405380:	4798      	blx	r3

	return err;
};
  405382:	4630      	mov	r0, r6
  405384:	b006      	add	sp, #24
  405386:	ecbd 8b04 	vpop	{d8-d9}
  40538a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for ( ; iter; iter--)
  40538e:	2600      	movs	r6, #0
	yamMsg("TestTempSensor Done", err ? yamwait : keepgoin, err); 
  405390:	2102      	movs	r1, #2
  405392:	e7f2      	b.n	40537a <TestTempSensor+0x122>
	if (!testIterControl(iter, "TestTempSensor")) return 0;
  405394:	2600      	movs	r6, #0
  405396:	e7f4      	b.n	405382 <TestTempSensor+0x12a>
  405398:	0040f478 	.word	0x0040f478
  40539c:	00404ff5 	.word	0x00404ff5
  4053a0:	2001a20c 	.word	0x2001a20c
  4053a4:	20000344 	.word	0x20000344
  4053a8:	0040f488 	.word	0x0040f488
  4053ac:	00404f71 	.word	0x00404f71
  4053b0:	0040f4c0 	.word	0x0040f4c0
  4053b4:	0040f4ec 	.word	0x0040f4ec
  4053b8:	0040216d 	.word	0x0040216d
  4053bc:	00406fa1 	.word	0x00406fa1
  4053c0:	2001a0ac 	.word	0x2001a0ac
  4053c4:	00407fd5 	.word	0x00407fd5
  4053c8:	004024ed 	.word	0x004024ed
  4053cc:	00402fc5 	.word	0x00402fc5

004053d0 <LrAccelTestbydiff>:

const float lowResTolerance = 0.015f;


uint16_t LrAccelTestbydiff(int iter)
{
  4053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4053d4:	ed2d 8b04 	vpush	{d8-d9}
  4053d8:	b08f      	sub	sp, #60	; 0x3c
  4053da:	4607      	mov	r7, r0
	float absdiff;
	int fsrRatio;
	int hinrgi[3], lonrgi[3];
	int hidiff, lodiff;
	
	if (!testIterControl(iter, "LrAccelTestbydiff")) return 0;
  4053dc:	497a      	ldr	r1, [pc, #488]	; (4055c8 <LrAccelTestbydiff+0x1f8>)
  4053de:	b280      	uxth	r0, r0
  4053e0:	4b7a      	ldr	r3, [pc, #488]	; (4055cc <LrAccelTestbydiff+0x1fc>)
  4053e2:	4798      	blx	r3
  4053e4:	b930      	cbnz	r0, 4053f4 <LrAccelTestbydiff+0x24>
  4053e6:	2600      	movs	r6, #0
			printf(" %5d" , lonrgi[axis]);		
		}	
	} // iter loop
	yamMsg("LrAccelTestbydiff Done", err ? yamwait : keepgoin, err); 
	return err;
}
  4053e8:	4630      	mov	r0, r6
  4053ea:	b00f      	add	sp, #60	; 0x3c
  4053ec:	ecbd 8b04 	vpop	{d8-d9}
  4053f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	getFSRval(&afsr, &alrfsr, &gfsr);
  4053f4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
  4053f8:	a90d      	add	r1, sp, #52	; 0x34
  4053fa:	f10d 0036 	add.w	r0, sp, #54	; 0x36
  4053fe:	4b74      	ldr	r3, [pc, #464]	; (4055d0 <LrAccelTestbydiff+0x200>)
  405400:	4798      	blx	r3
	fsrRatio = alrfsr/afsr;
  405402:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  405406:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
  40540a:	fbb3 f3f2 	udiv	r3, r3, r2
  40540e:	ee09 3a10 	vmov	s18, r3
	for ( ; iter>=0; iter--) {
  405412:	2f00      	cmp	r7, #0
  405414:	f2c0 80ce 	blt.w	4055b4 <LrAccelTestbydiff+0x1e4>
  405418:	2600      	movs	r6, #0
			ReadAxesAndTemp(regvalArr, regvalArr+3, NULL, NULL, NULL);
  40541a:	4b6e      	ldr	r3, [pc, #440]	; (4055d4 <LrAccelTestbydiff+0x204>)
  40541c:	1f9c      	subs	r4, r3, #6
			ReadAxesAndTemp(regvalArr+6, regvalArr+9, NULL, NULL, NULL);
  40541e:	f104 0312 	add.w	r3, r4, #18
			if (diff2fsr > lowResTolerance) {
  405422:	eddf 9a6d 	vldr	s19, [pc, #436]	; 4055d8 <LrAccelTestbydiff+0x208>
			   sprintf(tbuf, "%s: %5.3f Tolerance:  %5.3f", "Low Resolution Accel exceeding FSR setting tolerance", diff2fsr, lowResTolerance);
  405426:	ed9f 8b66 	vldr	d8, [pc, #408]	; 4055c0 <LrAccelTestbydiff+0x1f0>
  40542a:	9605      	str	r6, [sp, #20]
  40542c:	4698      	mov	r8, r3
  40542e:	e081      	b.n	405534 <LrAccelTestbydiff+0x164>
		for (i=LrAccelTestBatchLen; i>=0; i--) {
  405430:	3d01      	subs	r5, #1
  405432:	f1b5 3fff 	cmp.w	r5, #4294967295
  405436:	d033      	beq.n	4054a0 <LrAccelTestbydiff+0xd0>
			ReadAxesAndTemp(regvalArr, regvalArr+3, NULL, NULL, NULL);
  405438:	2600      	movs	r6, #0
  40543a:	9600      	str	r6, [sp, #0]
  40543c:	4633      	mov	r3, r6
  40543e:	4632      	mov	r2, r6
  405440:	4964      	ldr	r1, [pc, #400]	; (4055d4 <LrAccelTestbydiff+0x204>)
  405442:	4620      	mov	r0, r4
  405444:	4f65      	ldr	r7, [pc, #404]	; (4055dc <LrAccelTestbydiff+0x20c>)
  405446:	47b8      	blx	r7
			ReadAxesAndTemp(regvalArr+6, regvalArr+9, NULL, NULL, NULL);
  405448:	9600      	str	r6, [sp, #0]
  40544a:	4633      	mov	r3, r6
  40544c:	4632      	mov	r2, r6
  40544e:	4641      	mov	r1, r8
  405450:	f104 000c 	add.w	r0, r4, #12
  405454:	47b8      	blx	r7
  405456:	4620      	mov	r0, r4
  405458:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
  40545c:	ae06      	add	r6, sp, #24
  40545e:	f104 0c06 	add.w	ip, r4, #6
  405462:	4607      	mov	r7, r0
  405464:	3002      	adds	r0, #2
				lodiff = regvalArr[9+axis] - regvalArr[3+axis];
  405466:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
  40546a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  40546e:	1ad1      	subs	r1, r2, r3
				hidiff = regvalArr[6+axis] - regvalArr[0+axis];
  405470:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
  405474:	f9b7 2000 	ldrsh.w	r2, [r7]
  405478:	1a9b      	subs	r3, r3, r2
				hinrgi[axis] += abs(hidiff);
  40547a:	2b00      	cmp	r3, #0
  40547c:	bfb8      	it	lt
  40547e:	425b      	neglt	r3, r3
  405480:	f8de 2000 	ldr.w	r2, [lr]
  405484:	4413      	add	r3, r2
  405486:	f84e 3b04 	str.w	r3, [lr], #4
				lonrgi[axis] += abs(lodiff);
  40548a:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  40548e:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
  405492:	6833      	ldr	r3, [r6, #0]
  405494:	4413      	add	r3, r2
  405496:	f846 3b04 	str.w	r3, [r6], #4
			for(int axis=0; axis<3; axis++) {
  40549a:	4560      	cmp	r0, ip
  40549c:	d1e1      	bne.n	405462 <LrAccelTestbydiff+0x92>
  40549e:	e7c7      	b.n	405430 <LrAccelTestbydiff+0x60>
  4054a0:	464f      	mov	r7, r9
	for ( ; iter>=0; iter--) {
  4054a2:	2500      	movs	r5, #0
			diff2fsr = floatAbs(diff2fsr);
  4054a4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 405618 <LrAccelTestbydiff+0x248>
  4054a8:	f8dd a014 	ldr.w	sl, [sp, #20]
  4054ac:	e002      	b.n	4054b4 <LrAccelTestbydiff+0xe4>
		for (int axis=0; axis<3; axis++)
  4054ae:	3501      	adds	r5, #1
  4054b0:	2d03      	cmp	r5, #3
  4054b2:	d037      	beq.n	405524 <LrAccelTestbydiff+0x154>
			float nrgiratio = (float)hinrgi[axis] / (float) lonrgi[axis];
  4054b4:	ab09      	add	r3, sp, #36	; 0x24
  4054b6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
  4054ba:	ee07 3a10 	vmov	s14, r3
  4054be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  4054c2:	ab06      	add	r3, sp, #24
  4054c4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
  4054c8:	ee07 3a90 	vmov	s15, r3
  4054cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4054d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
			float diff2fsr = 1.0f - nrgiratio/(float)fsrRatio;
  4054d4:	eeb8 7ac9 	vcvt.f32.s32	s14, s18
  4054d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
			diff2fsr = floatAbs(diff2fsr);
  4054dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  4054e0:	ee77 7a67 	vsub.f32	s15, s14, s15
  4054e4:	ee17 0a90 	vmov	r0, s15
  4054e8:	47c8      	blx	r9
  4054ea:	ee07 0a90 	vmov	s15, r0
			if (diff2fsr > lowResTolerance) {
  4054ee:	eef4 7ae9 	vcmpe.f32	s15, s19
  4054f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4054f6:	ddda      	ble.n	4054ae <LrAccelTestbydiff+0xde>
			   err++;
  4054f8:	f10a 0601 	add.w	r6, sl, #1
  4054fc:	fa1f fa86 	uxth.w	sl, r6
			   sprintf(tbuf, "%s: %5.3f Tolerance:  %5.3f", "Low Resolution Accel exceeding FSR setting tolerance", diff2fsr, lowResTolerance);
  405500:	4e37      	ldr	r6, [pc, #220]	; (4055e0 <LrAccelTestbydiff+0x210>)
  405502:	ed8d 8b02 	vstr	d8, [sp, #8]
  405506:	4b37      	ldr	r3, [pc, #220]	; (4055e4 <LrAccelTestbydiff+0x214>)
  405508:	4798      	blx	r3
  40550a:	e9cd 0100 	strd	r0, r1, [sp]
  40550e:	4a36      	ldr	r2, [pc, #216]	; (4055e8 <LrAccelTestbydiff+0x218>)
  405510:	4936      	ldr	r1, [pc, #216]	; (4055ec <LrAccelTestbydiff+0x21c>)
  405512:	4630      	mov	r0, r6
  405514:	4b36      	ldr	r3, [pc, #216]	; (4055f0 <LrAccelTestbydiff+0x220>)
  405516:	4798      	blx	r3
			   yamMsg(tbuf, keepgoin, err);
  405518:	4652      	mov	r2, sl
  40551a:	2102      	movs	r1, #2
  40551c:	4630      	mov	r0, r6
  40551e:	4b35      	ldr	r3, [pc, #212]	; (4055f4 <LrAccelTestbydiff+0x224>)
  405520:	4798      	blx	r3
  405522:	e7c4      	b.n	4054ae <LrAccelTestbydiff+0xde>
  405524:	4653      	mov	r3, sl
  405526:	f8cd a014 	str.w	sl, [sp, #20]
		if (err)
  40552a:	b9ab      	cbnz	r3, 405558 <LrAccelTestbydiff+0x188>
	for ( ; iter>=0; iter--) {
  40552c:	3f01      	subs	r7, #1
  40552e:	f1b7 3fff 	cmp.w	r7, #4294967295
  405532:	d035      	beq.n	4055a0 <LrAccelTestbydiff+0x1d0>
		printf("Low Res Accel Test Iter: %d\r\n", iter);
  405534:	4639      	mov	r1, r7
  405536:	4830      	ldr	r0, [pc, #192]	; (4055f8 <LrAccelTestbydiff+0x228>)
  405538:	4b30      	ldr	r3, [pc, #192]	; (4055fc <LrAccelTestbydiff+0x22c>)
  40553a:	4798      	blx	r3
				hinrgi[axis] = lonrgi[axis]= 0;
  40553c:	2300      	movs	r3, #0
  40553e:	9306      	str	r3, [sp, #24]
  405540:	9309      	str	r3, [sp, #36]	; 0x24
  405542:	9307      	str	r3, [sp, #28]
  405544:	930a      	str	r3, [sp, #40]	; 0x28
  405546:	9308      	str	r3, [sp, #32]
  405548:	930b      	str	r3, [sp, #44]	; 0x2c
		for (i=LrAccelTestBatchLen; i>=0; i--) {
  40554a:	4b2d      	ldr	r3, [pc, #180]	; (405600 <LrAccelTestbydiff+0x230>)
  40554c:	f9b3 5000 	ldrsh.w	r5, [r3]
  405550:	2d00      	cmp	r5, #0
  405552:	dba6      	blt.n	4054a2 <LrAccelTestbydiff+0xd2>
  405554:	46b9      	mov	r9, r7
  405556:	e76f      	b.n	405438 <LrAccelTestbydiff+0x68>
			printf("Bit Nergi levels: \r\n");
  405558:	482a      	ldr	r0, [pc, #168]	; (405604 <LrAccelTestbydiff+0x234>)
  40555a:	4b2b      	ldr	r3, [pc, #172]	; (405608 <LrAccelTestbydiff+0x238>)
  40555c:	4798      	blx	r3
			printf("Hi: ");
  40555e:	482b      	ldr	r0, [pc, #172]	; (40560c <LrAccelTestbydiff+0x23c>)
  405560:	4b26      	ldr	r3, [pc, #152]	; (4055fc <LrAccelTestbydiff+0x22c>)
  405562:	4798      	blx	r3
  405564:	ad09      	add	r5, sp, #36	; 0x24
  405566:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
			printf(" %5d" , hinrgi[axis]);
  40556a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 40561c <LrAccelTestbydiff+0x24c>
  40556e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4055fc <LrAccelTestbydiff+0x22c>
  405572:	f855 1b04 	ldr.w	r1, [r5], #4
  405576:	4650      	mov	r0, sl
  405578:	47c8      	blx	r9
			for (int axis=0; axis<3; axis++)
  40557a:	455d      	cmp	r5, fp
  40557c:	d1f9      	bne.n	405572 <LrAccelTestbydiff+0x1a2>
			printf("\r\nLo: ");
  40557e:	4824      	ldr	r0, [pc, #144]	; (405610 <LrAccelTestbydiff+0x240>)
  405580:	4b1e      	ldr	r3, [pc, #120]	; (4055fc <LrAccelTestbydiff+0x22c>)
  405582:	4798      	blx	r3
  405584:	ad06      	add	r5, sp, #24
  405586:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
			printf(" %5d" , lonrgi[axis]);		
  40558a:	f8df a090 	ldr.w	sl, [pc, #144]	; 40561c <LrAccelTestbydiff+0x24c>
  40558e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4055fc <LrAccelTestbydiff+0x22c>
  405592:	f855 1b04 	ldr.w	r1, [r5], #4
  405596:	4650      	mov	r0, sl
  405598:	47c8      	blx	r9
			for (int axis=0; axis<3; axis++)
  40559a:	455d      	cmp	r5, fp
  40559c:	d1f9      	bne.n	405592 <LrAccelTestbydiff+0x1c2>
  40559e:	e7c5      	b.n	40552c <LrAccelTestbydiff+0x15c>
  4055a0:	9e05      	ldr	r6, [sp, #20]
	yamMsg("LrAccelTestbydiff Done", err ? yamwait : keepgoin, err); 
  4055a2:	2e00      	cmp	r6, #0
  4055a4:	bf14      	ite	ne
  4055a6:	2101      	movne	r1, #1
  4055a8:	2102      	moveq	r1, #2
  4055aa:	4632      	mov	r2, r6
  4055ac:	4819      	ldr	r0, [pc, #100]	; (405614 <LrAccelTestbydiff+0x244>)
  4055ae:	4b11      	ldr	r3, [pc, #68]	; (4055f4 <LrAccelTestbydiff+0x224>)
  4055b0:	4798      	blx	r3
	return err;
  4055b2:	e719      	b.n	4053e8 <LrAccelTestbydiff+0x18>
	uint16_t err=0;
  4055b4:	2600      	movs	r6, #0
	yamMsg("LrAccelTestbydiff Done", err ? yamwait : keepgoin, err); 
  4055b6:	2102      	movs	r1, #2
  4055b8:	e7f7      	b.n	4055aa <LrAccelTestbydiff+0x1da>
  4055ba:	bf00      	nop
  4055bc:	f3af 8000 	nop.w
  4055c0:	e0000000 	.word	0xe0000000
  4055c4:	3f8eb851 	.word	0x3f8eb851
  4055c8:	0040f2a0 	.word	0x0040f2a0
  4055cc:	00404ff5 	.word	0x00404ff5
  4055d0:	00402099 	.word	0x00402099
  4055d4:	2001a212 	.word	0x2001a212
  4055d8:	3c75c28f 	.word	0x3c75c28f
  4055dc:	00402221 	.word	0x00402221
  4055e0:	2001a0ac 	.word	0x2001a0ac
  4055e4:	00406fa1 	.word	0x00406fa1
  4055e8:	0040f2d4 	.word	0x0040f2d4
  4055ec:	0040f30c 	.word	0x0040f30c
  4055f0:	00407fd5 	.word	0x00407fd5
  4055f4:	00404f71 	.word	0x00404f71
  4055f8:	0040f2b4 	.word	0x0040f2b4
  4055fc:	00407d2d 	.word	0x00407d2d
  405600:	20000308 	.word	0x20000308
  405604:	0040f328 	.word	0x0040f328
  405608:	00407df1 	.word	0x00407df1
  40560c:	0040f33c 	.word	0x0040f33c
  405610:	0040f34c 	.word	0x0040f34c
  405614:	0040f354 	.word	0x0040f354
  405618:	00402fc5 	.word	0x00402fc5
  40561c:	0040f344 	.word	0x0040f344

00405620 <setnewAccelfsrFromTable>:
enum gyroFSRtype1 gyroFSRtbl[] = { gfsr61, gfsr92, gfsr123, gfsr184, gfsr246, gfsr328,  gfsr369, gfsr491
								   , gfsr655, gfsr737, gfsr983, gfsr1311, gfsr1966, gfsr2949
};
	
void setnewAccelfsrFromTable(int fsrTableindx )
{
  405620:	b500      	push	{lr}
  405622:	b083      	sub	sp, #12
	AccelFsrtype  setfsr;
	AccellRestype setflr;
	uint16_t afsr, alrfsr;

	setfsr = accelnormalFSRcombo[fsrTableindx].afsr;
	setflr = accelnormalFSRcombo[fsrTableindx].alrfsr;
  405624:	4b09      	ldr	r3, [pc, #36]	; (40564c <setnewAccelfsrFromTable+0x2c>)
  405626:	eb03 0240 	add.w	r2, r3, r0, lsl #1
				
	AccelFSRset (setfsr, setflr);
  40562a:	7851      	ldrb	r1, [r2, #1]
  40562c:	f813 0010 	ldrb.w	r0, [r3, r0, lsl #1]
  405630:	4b07      	ldr	r3, [pc, #28]	; (405650 <setnewAccelfsrFromTable+0x30>)
  405632:	4798      	blx	r3
	getFSRval(&afsr, &alrfsr, NULL);
  405634:	2200      	movs	r2, #0
  405636:	a901      	add	r1, sp, #4
  405638:	f10d 0006 	add.w	r0, sp, #6
  40563c:	4b05      	ldr	r3, [pc, #20]	; (405654 <setnewAccelfsrFromTable+0x34>)
  40563e:	4798      	blx	r3
//	printf("testing {Accel FSR, Lowres FSR}: %2d, %2d\r\n", afsr, alrfsr);
	
	delay_ms(200);
  405640:	4805      	ldr	r0, [pc, #20]	; (405658 <setnewAccelfsrFromTable+0x38>)
  405642:	4b06      	ldr	r3, [pc, #24]	; (40565c <setnewAccelfsrFromTable+0x3c>)
  405644:	4798      	blx	r3
				
}
  405646:	b003      	add	sp, #12
  405648:	f85d fb04 	ldr.w	pc, [sp], #4
  40564c:	20000324 	.word	0x20000324
  405650:	004020e5 	.word	0x004020e5
  405654:	00402099 	.word	0x00402099
  405658:	001a283b 	.word	0x001a283b
  40565c:	20000001 	.word	0x20000001

00405660 <sadas>:
enum gyrofilterBWType1 gyroFilters[] = {g10hz, g12_5hz, g27hz, g30hz, g46hz, g60hz};
	
#define MAXSAMPLELEN 2049
typedef struct noiseMeasure { uint32_t sad; float meanX; float meanY; float meanZ; float fnormX; float fnormY; float fnormZ; } noiseMasureType;
struct noiseMeasure sadas( int16_t *p, int sampleNum)
{
  405660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405664:	ed2d 8b02 	vpush	{d8}
  405668:	b08b      	sub	sp, #44	; 0x2c
  40566a:	4682      	mov	sl, r0
  40566c:	9201      	str	r2, [sp, #4]
	static individualNorm[3];
	int i, si;
	int16_t *pIn=p;
	struct noiseMeasure retVal = {0, 0.0f, 0.0f, 0.0f};
	
	if (!p) {
  40566e:	2900      	cmp	r1, #0
  405670:	d03c      	beq.n	4056ec <sadas+0x8c>
  405672:	4608      	mov	r0, r1
		retVal.fnormX = norm[0]; retVal.fnormY = norm[1]; retVal.fnormZ = norm[2];
		retVal.meanX = mean[0]; retVal.meanY = mean[1]; retVal.meanZ = mean[2];
		
		return retVal;
	}  
	else if (sampleNum <= MAXSAMPLELEN)  //  the rest discarded
  405674:	f640 0301 	movw	r3, #2049	; 0x801
  405678:	9d01      	ldr	r5, [sp, #4]
  40567a:	429d      	cmp	r5, r3
  40567c:	dc20      	bgt.n	4056c0 <sadas+0x60>
	{   for (pIn=p, i=0; i<3; i++) samples[i][sampleNum] = *pIn++;
  40567e:	4b68      	ldr	r3, [pc, #416]	; (405820 <sadas+0x1c0>)
  405680:	f9b1 2000 	ldrsh.w	r2, [r1]
  405684:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
  405688:	f605 0201 	addw	r2, r5, #2049	; 0x801
  40568c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
  405690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  405694:	f505 5280 	add.w	r2, r5, #4096	; 0x1000
  405698:	3202      	adds	r2, #2
  40569a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
  40569e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    if (!sampleNum) { sadass=0; for (pIn=p, i=0; i<3; i++) {sum[i] = *pIn++;} }
  4056a2:	2d00      	cmp	r5, #0
  4056a4:	f040 809a 	bne.w	4057dc <sadas+0x17c>
  4056a8:	4b5e      	ldr	r3, [pc, #376]	; (405824 <sadas+0x1c4>)
  4056aa:	601d      	str	r5, [r3, #0]
  4056ac:	4b5e      	ldr	r3, [pc, #376]	; (405828 <sadas+0x1c8>)
  4056ae:	f9b0 2000 	ldrsh.w	r2, [r0]
  4056b2:	601a      	str	r2, [r3, #0]
  4056b4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  4056b8:	605a      	str	r2, [r3, #4]
  4056ba:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  4056be:	609a      	str	r2, [r3, #8]
			 sum[i] += pIn[i];	  
		  }
		  for (pIn=p, i=0; i<3; i++) { v[i] = *pIn++; }
	    }
	}
	return retVal;
  4056c0:	2300      	movs	r3, #0
  4056c2:	f8ca 3000 	str.w	r3, [sl]
  4056c6:	2300      	movs	r3, #0
  4056c8:	f8ca 3004 	str.w	r3, [sl, #4]
  4056cc:	f8ca 3008 	str.w	r3, [sl, #8]
  4056d0:	f8ca 300c 	str.w	r3, [sl, #12]
  4056d4:	f8ca 3010 	str.w	r3, [sl, #16]
  4056d8:	f8ca 3014 	str.w	r3, [sl, #20]
  4056dc:	f8ca 3018 	str.w	r3, [sl, #24]
} 
  4056e0:	4650      	mov	r0, sl
  4056e2:	b00b      	add	sp, #44	; 0x2c
  4056e4:	ecbd 8b02 	vpop	{d8}
  4056e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		totalSamples = sampleNum > MAXSAMPLELEN ? MAXSAMPLELEN : sampleNum;
  4056ec:	f640 0801 	movw	r8, #2049	; 0x801
  4056f0:	4590      	cmp	r8, r2
  4056f2:	bfa8      	it	ge
  4056f4:	4690      	movge	r8, r2
  4056f6:	4b4c      	ldr	r3, [pc, #304]	; (405828 <sadas+0x1c8>)
  4056f8:	af04      	add	r7, sp, #16
  4056fa:	f103 010c 	add.w	r1, r3, #12
  4056fe:	463a      	mov	r2, r7
		for (i=0; i<3; i++) mean[i] = (float) sum[i]/ (float) totalSamples;
  405700:	ee07 8a90 	vmov	s15, r8
  405704:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  405708:	ecf3 7a01 	vldmia	r3!, {s15}
  40570c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  405710:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  405714:	eca2 7a01 	vstmia	r2!, {s14}
  405718:	428b      	cmp	r3, r1
  40571a:	d1f5      	bne.n	405708 <sadas+0xa8>
  40571c:	ab07      	add	r3, sp, #28
  40571e:	9302      	str	r3, [sp, #8]
  405720:	f04f 0b00 	mov.w	fp, #0
		for (i=0; i<3; i++) { norm[i]=0.0f;
  405724:	ed9f 8a41 	vldr	s16, [pc, #260]	; 40582c <sadas+0x1cc>
			  norm[i] +=  floatAbs((float) samples[i][si] - mean[i]);	
  405728:	f8df 9108 	ldr.w	r9, [pc, #264]	; 405834 <sadas+0x1d4>
  40572c:	f8cd a00c 	str.w	sl, [sp, #12]
  405730:	469a      	mov	sl, r3
  405732:	4656      	mov	r6, sl
		for (i=0; i<3; i++) { norm[i]=0.0f;
  405734:	ed8a 8a00 	vstr	s16, [sl]
			for (si=0; si<totalSamples; si++)
  405738:	f1b8 0f00 	cmp.w	r8, #0
  40573c:	dd1c      	ble.n	405778 <sadas+0x118>
  40573e:	f1ab 0504 	sub.w	r5, fp, #4
  405742:	4b37      	ldr	r3, [pc, #220]	; (405820 <sadas+0x1c0>)
  405744:	441d      	add	r5, r3
  405746:	2400      	movs	r4, #0
			  norm[i] +=  floatAbs((float) samples[i][si] - mean[i]);	
  405748:	f855 3f04 	ldr.w	r3, [r5, #4]!
  40574c:	ee07 3a90 	vmov	s15, r3
  405750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  405754:	ed97 7a00 	vldr	s14, [r7]
  405758:	ee77 7ac7 	vsub.f32	s15, s15, s14
  40575c:	ee17 0a90 	vmov	r0, s15
  405760:	47c8      	blx	r9
  405762:	edd6 7a00 	vldr	s15, [r6]
  405766:	ee07 0a10 	vmov	s14, r0
  40576a:	ee77 7a87 	vadd.f32	s15, s15, s14
  40576e:	edc6 7a00 	vstr	s15, [r6]
			for (si=0; si<totalSamples; si++)
  405772:	3401      	adds	r4, #1
  405774:	45a0      	cmp	r8, r4
  405776:	d1e7      	bne.n	405748 <sadas+0xe8>
  405778:	f10a 0a04 	add.w	sl, sl, #4
  40577c:	3704      	adds	r7, #4
  40577e:	f50b 5b00 	add.w	fp, fp, #8192	; 0x2000
  405782:	f10b 0b04 	add.w	fp, fp, #4
		for (i=0; i<3; i++) { norm[i]=0.0f;
  405786:	f246 030c 	movw	r3, #24588	; 0x600c
  40578a:	459b      	cmp	fp, r3
  40578c:	d1d1      	bne.n	405732 <sadas+0xd2>
  40578e:	f8dd a00c 	ldr.w	sl, [sp, #12]
  405792:	ab0a      	add	r3, sp, #40	; 0x28
		for (i=0; i<3; i++)  norm[i] /= (float) sampleNum;
  405794:	eddd 7a01 	vldr	s15, [sp, #4]
  405798:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  40579c:	9a02      	ldr	r2, [sp, #8]
  40579e:	ed92 7a00 	vldr	s14, [r2]
  4057a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
  4057a6:	ece2 7a01 	vstmia	r2!, {s15}
  4057aa:	429a      	cmp	r2, r3
  4057ac:	d1f7      	bne.n	40579e <sadas+0x13e>
		retVal.sad = sadass; 
  4057ae:	4b1d      	ldr	r3, [pc, #116]	; (405824 <sadas+0x1c4>)
		return retVal;
  4057b0:	681b      	ldr	r3, [r3, #0]
  4057b2:	f8ca 3000 	str.w	r3, [sl]
  4057b6:	9b04      	ldr	r3, [sp, #16]
  4057b8:	f8ca 3004 	str.w	r3, [sl, #4]
  4057bc:	9b05      	ldr	r3, [sp, #20]
  4057be:	f8ca 3008 	str.w	r3, [sl, #8]
  4057c2:	9b06      	ldr	r3, [sp, #24]
  4057c4:	f8ca 300c 	str.w	r3, [sl, #12]
  4057c8:	9b07      	ldr	r3, [sp, #28]
  4057ca:	f8ca 3010 	str.w	r3, [sl, #16]
  4057ce:	9b08      	ldr	r3, [sp, #32]
  4057d0:	f8ca 3014 	str.w	r3, [sl, #20]
  4057d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4057d6:	f8ca 3018 	str.w	r3, [sl, #24]
  4057da:	e781      	b.n	4056e0 <sadas+0x80>
  4057dc:	4b11      	ldr	r3, [pc, #68]	; (405824 <sadas+0x1c4>)
  4057de:	681d      	ldr	r5, [r3, #0]
  4057e0:	1e84      	subs	r4, r0, #2
  4057e2:	4e13      	ldr	r6, [pc, #76]	; (405830 <sadas+0x1d0>)
  4057e4:	4910      	ldr	r1, [pc, #64]	; (405828 <sadas+0x1c8>)
  4057e6:	1d07      	adds	r7, r0, #4
			 individualNorm[i] = (uint32_t) abs(pIn[i] - v[i]);  
  4057e8:	f934 2f02 	ldrsh.w	r2, [r4, #2]!
  4057ec:	f936 3b02 	ldrsh.w	r3, [r6], #2
  4057f0:	1ad3      	subs	r3, r2, r3
  4057f2:	2b00      	cmp	r3, #0
  4057f4:	bfb8      	it	lt
  4057f6:	425b      	neglt	r3, r3
			 sadass += individualNorm[i];	
  4057f8:	441d      	add	r5, r3
			 sum[i] += pIn[i];	  
  4057fa:	680b      	ldr	r3, [r1, #0]
  4057fc:	4413      	add	r3, r2
  4057fe:	f841 3b04 	str.w	r3, [r1], #4
		  for (pIn=p, i=0; i<3; i++) {
  405802:	42bc      	cmp	r4, r7
  405804:	d1f0      	bne.n	4057e8 <sadas+0x188>
  405806:	4b07      	ldr	r3, [pc, #28]	; (405824 <sadas+0x1c4>)
  405808:	601d      	str	r5, [r3, #0]
		  for (pIn=p, i=0; i<3; i++) { v[i] = *pIn++; }
  40580a:	f9b0 2000 	ldrsh.w	r2, [r0]
  40580e:	4b08      	ldr	r3, [pc, #32]	; (405830 <sadas+0x1d0>)
  405810:	801a      	strh	r2, [r3, #0]
  405812:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  405816:	805a      	strh	r2, [r3, #2]
  405818:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  40581c:	809a      	strh	r2, [r3, #4]
  40581e:	e74f      	b.n	4056c0 <sadas+0x60>
  405820:	20014094 	.word	0x20014094
  405824:	20014090 	.word	0x20014090
  405828:	2001a0a0 	.word	0x2001a0a0
  40582c:	00000000 	.word	0x00000000
  405830:	2001a128 	.word	0x2001a128
  405834:	00402fc5 	.word	0x00402fc5

00405838 <printNoise>:

void printNoise (struct noiseMeasure n, bool Accel_gyro, bool hiLores, uint32_t sampleLen)
{
  405838:	b084      	sub	sp, #16
  40583a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40583e:	ed2d 8b08 	vpush	{d8-d11}
  405842:	b097      	sub	sp, #92	; 0x5c
  405844:	ac28      	add	r4, sp, #160	; 0xa0
  405846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  40584a:	f89d b0bc 	ldrb.w	fp, [sp, #188]	; 0xbc
  40584e:	f89d 40c0 	ldrb.w	r4, [sp, #192]	; 0xc0
  405852:	9d29      	ldr	r5, [sp, #164]	; 0xa4
  405854:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
  405858:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
  40585c:	f8dd 80b0 	ldr.w	r8, [sp, #176]	; 0xb0
  405860:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
  405862:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
	float howsad;
	uint16_t afsr, gfsr, filter;
	struct filterInfoType  accelFilterInfo, gyroFilterInfo;
	char fltrStr[11];
	
	getFSRval(&afsr, &gfsr, NULL);
  405864:	2200      	movs	r2, #0
  405866:	a915      	add	r1, sp, #84	; 0x54
  405868:	f10d 0056 	add.w	r0, sp, #86	; 0x56
  40586c:	4b5c      	ldr	r3, [pc, #368]	; (4059e0 <printNoise+0x1a8>)
  40586e:	4798      	blx	r3
	getCurrFilter(&gyroFilterInfo, &accelFilterInfo, NULL);
  405870:	2200      	movs	r2, #0
  405872:	a912      	add	r1, sp, #72	; 0x48
  405874:	a80f      	add	r0, sp, #60	; 0x3c
  405876:	4b5b      	ldr	r3, [pc, #364]	; (4059e4 <printNoise+0x1ac>)
  405878:	4798      	blx	r3
	
	sprintf (fltrStr, "%s", Accel_gyro ? accelFilterInfo.str : gyroFilterInfo.str);
  40587a:	f1bb 0f00 	cmp.w	fp, #0
  40587e:	d042      	beq.n	405906 <printNoise+0xce>
  405880:	9914      	ldr	r1, [sp, #80]	; 0x50
  405882:	a80c      	add	r0, sp, #48	; 0x30
  405884:	4b58      	ldr	r3, [pc, #352]	; (4059e8 <printNoise+0x1b0>)
  405886:	4798      	blx	r3
	howsad = (float) n.sad/ (float) sampleLen;
  405888:	eddd 7a28 	vldr	s15, [sp, #160]	; 0xa0
  40588c:	eef8 7a67 	vcvt.f32.u32	s15, s15
  405890:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
  405894:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  405898:	ee87 ba87 	vdiv.f32	s22, s15, s14
	if (Accel_gyro) {
		fMeanX = faccel2gee(n.meanX, hiLores) * 1000.0;
  40589c:	4621      	mov	r1, r4
  40589e:	4628      	mov	r0, r5
  4058a0:	4d52      	ldr	r5, [pc, #328]	; (4059ec <printNoise+0x1b4>)
  4058a2:	47a8      	blx	r5
  4058a4:	ed9f 8a52 	vldr	s16, [pc, #328]	; 4059f0 <printNoise+0x1b8>
  4058a8:	ee07 0a90 	vmov	s15, r0
  4058ac:	ee67 8a88 	vmul.f32	s17, s15, s16
		fMeanY = faccel2gee(n.meanY, hiLores) * 1000.0;
  4058b0:	4621      	mov	r1, r4
  4058b2:	4650      	mov	r0, sl
  4058b4:	47a8      	blx	r5
  4058b6:	ee07 0a90 	vmov	s15, r0
  4058ba:	ee27 9a88 	vmul.f32	s18, s15, s16
		fMeanZ = faccel2gee(n.meanZ, hiLores) * 1000.0;
  4058be:	4621      	mov	r1, r4
  4058c0:	4648      	mov	r0, r9
  4058c2:	47a8      	blx	r5
  4058c4:	ee07 0a90 	vmov	s15, r0
  4058c8:	ee67 9a88 	vmul.f32	s19, s15, s16
		fnormX = faccel2gee(n.fnormX, hiLores) * 1000.0;
  4058cc:	4621      	mov	r1, r4
  4058ce:	4640      	mov	r0, r8
  4058d0:	47a8      	blx	r5
  4058d2:	ee07 0a90 	vmov	s15, r0
  4058d6:	ee27 aa88 	vmul.f32	s20, s15, s16
		fnormY = faccel2gee(n.fnormY, hiLores) * 1000.0;
  4058da:	4621      	mov	r1, r4
  4058dc:	4638      	mov	r0, r7
  4058de:	47a8      	blx	r5
  4058e0:	ee07 0a90 	vmov	s15, r0
  4058e4:	ee67 aa88 	vmul.f32	s21, s15, s16
		fnormZ = faccel2gee(n.fnormZ, hiLores) * 1000.0;
  4058e8:	4621      	mov	r1, r4
  4058ea:	4630      	mov	r0, r6
  4058ec:	47a8      	blx	r5
  4058ee:	ee07 0a90 	vmov	s15, r0
  4058f2:	ee27 8a88 	vmul.f32	s16, s15, s16
		fnormX = fgyro2dps(n.fnormX) * 1000.0;
		fnormY = fgyro2dps(n.fnormY) * 1000.0;
		fnormZ = fgyro2dps(n.fnormZ) * 1000.0;
	}
	 
	printf("[fsr, filt] = %2d ", Accel_gyro ? afsr : gfsr); 
  4058f6:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
  4058fa:	483e      	ldr	r0, [pc, #248]	; (4059f4 <printNoise+0x1bc>)
  4058fc:	4c3e      	ldr	r4, [pc, #248]	; (4059f8 <printNoise+0x1c0>)
  4058fe:	47a0      	blx	r4
	if (Accel_gyro) printf("gee "); else printf("dps ");
  405900:	483e      	ldr	r0, [pc, #248]	; (4059fc <printNoise+0x1c4>)
  405902:	47a0      	blx	r4
  405904:	e03b      	b.n	40597e <printNoise+0x146>
	sprintf (fltrStr, "%s", Accel_gyro ? accelFilterInfo.str : gyroFilterInfo.str);
  405906:	9911      	ldr	r1, [sp, #68]	; 0x44
  405908:	a80c      	add	r0, sp, #48	; 0x30
  40590a:	4b37      	ldr	r3, [pc, #220]	; (4059e8 <printNoise+0x1b0>)
  40590c:	4798      	blx	r3
	howsad = (float) n.sad/ (float) sampleLen;
  40590e:	eddd 7a28 	vldr	s15, [sp, #160]	; 0xa0
  405912:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  405916:	eddd 7a31 	vldr	s15, [sp, #196]	; 0xc4
  40591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40591e:	ee87 ba27 	vdiv.f32	s22, s14, s15
		fMeanX = fgyro2dps(n.meanX) * 1000.0;
  405922:	4628      	mov	r0, r5
  405924:	4c36      	ldr	r4, [pc, #216]	; (405a00 <printNoise+0x1c8>)
  405926:	47a0      	blx	r4
  405928:	ed9f 8a31 	vldr	s16, [pc, #196]	; 4059f0 <printNoise+0x1b8>
  40592c:	ee07 0a90 	vmov	s15, r0
  405930:	ee67 8a88 	vmul.f32	s17, s15, s16
		fMeanY = fgyro2dps(n.meanY) * 1000.0;
  405934:	4650      	mov	r0, sl
  405936:	47a0      	blx	r4
  405938:	ee07 0a90 	vmov	s15, r0
  40593c:	ee27 9a88 	vmul.f32	s18, s15, s16
		fMeanZ = fgyro2dps(n.meanZ) * 1000.0;
  405940:	4648      	mov	r0, r9
  405942:	47a0      	blx	r4
  405944:	ee07 0a90 	vmov	s15, r0
  405948:	ee67 9a88 	vmul.f32	s19, s15, s16
		fnormX = fgyro2dps(n.fnormX) * 1000.0;
  40594c:	4640      	mov	r0, r8
  40594e:	47a0      	blx	r4
  405950:	ee07 0a90 	vmov	s15, r0
  405954:	ee27 aa88 	vmul.f32	s20, s15, s16
		fnormY = fgyro2dps(n.fnormY) * 1000.0;
  405958:	4638      	mov	r0, r7
  40595a:	47a0      	blx	r4
  40595c:	ee07 0a90 	vmov	s15, r0
  405960:	ee67 aa88 	vmul.f32	s21, s15, s16
		fnormZ = fgyro2dps(n.fnormZ) * 1000.0;
  405964:	4630      	mov	r0, r6
  405966:	47a0      	blx	r4
  405968:	ee07 0a90 	vmov	s15, r0
  40596c:	ee27 8a88 	vmul.f32	s16, s15, s16
	printf("[fsr, filt] = %2d ", Accel_gyro ? afsr : gfsr); 
  405970:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
  405974:	481f      	ldr	r0, [pc, #124]	; (4059f4 <printNoise+0x1bc>)
  405976:	4c20      	ldr	r4, [pc, #128]	; (4059f8 <printNoise+0x1c0>)
  405978:	47a0      	blx	r4
	if (Accel_gyro) printf("gee "); else printf("dps ");
  40597a:	4822      	ldr	r0, [pc, #136]	; (405a04 <printNoise+0x1cc>)
  40597c:	47a0      	blx	r4
	printf("%s bw SADAS { Mean XYZ}:, { AMD XYZ}: %6.2f,  %6.2f, %6.2f, %6.2f  %6.2f, %6.2f, %6.2f  \r\n", fltrStr, howsad, fMeanX, fMeanY, fMeanZ, fnormX, fnormY, fnormZ);
  40597e:	4c22      	ldr	r4, [pc, #136]	; (405a08 <printNoise+0x1d0>)
  405980:	ee1b 0a10 	vmov	r0, s22
  405984:	47a0      	blx	r4
  405986:	4606      	mov	r6, r0
  405988:	460f      	mov	r7, r1
  40598a:	ee18 0a10 	vmov	r0, s16
  40598e:	47a0      	blx	r4
  405990:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  405994:	ee1a 0a90 	vmov	r0, s21
  405998:	47a0      	blx	r4
  40599a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40599e:	ee1a 0a10 	vmov	r0, s20
  4059a2:	47a0      	blx	r4
  4059a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4059a8:	ee19 0a90 	vmov	r0, s19
  4059ac:	47a0      	blx	r4
  4059ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4059b2:	ee19 0a10 	vmov	r0, s18
  4059b6:	47a0      	blx	r4
  4059b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4059bc:	ee18 0a90 	vmov	r0, s17
  4059c0:	47a0      	blx	r4
  4059c2:	e9cd 0100 	strd	r0, r1, [sp]
  4059c6:	4632      	mov	r2, r6
  4059c8:	463b      	mov	r3, r7
  4059ca:	a90c      	add	r1, sp, #48	; 0x30
  4059cc:	480f      	ldr	r0, [pc, #60]	; (405a0c <printNoise+0x1d4>)
  4059ce:	4c0a      	ldr	r4, [pc, #40]	; (4059f8 <printNoise+0x1c0>)
  4059d0:	47a0      	blx	r4
}
  4059d2:	b017      	add	sp, #92	; 0x5c
  4059d4:	ecbd 8b08 	vpop	{d8-d11}
  4059d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4059dc:	b004      	add	sp, #16
  4059de:	4770      	bx	lr
  4059e0:	00402099 	.word	0x00402099
  4059e4:	0040228d 	.word	0x0040228d
  4059e8:	00408021 	.word	0x00408021
  4059ec:	0040243d 	.word	0x0040243d
  4059f0:	447a0000 	.word	0x447a0000
  4059f4:	0040f5d8 	.word	0x0040f5d8
  4059f8:	00407d2d 	.word	0x00407d2d
  4059fc:	0040f5ec 	.word	0x0040f5ec
  405a00:	004024bd 	.word	0x004024bd
  405a04:	0040f5f4 	.word	0x0040f5f4
  405a08:	00406fa1 	.word	0x00406fa1
  405a0c:	0040f5fc 	.word	0x0040f5fc

00405a10 <TestAccelFilterbyNoise>:

uint16_t TestAccelFilterbyNoise( int iter)
{
  405a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a14:	b093      	sub	sp, #76	; 0x4c
  405a16:	4604      	mov	r4, r0
  405a18:	9008      	str	r0, [sp, #32]
	struct noiseMeasure	noise;
	int ai;
	int si;
#define TESTACCELFILTERBYNOISE_SAMPLESIZE 1000

	if (!testIterControl(iter, "TestAccelFilterbyNoise")) return 0;
  405a1a:	4946      	ldr	r1, [pc, #280]	; (405b34 <TestAccelFilterbyNoise+0x124>)
  405a1c:	b280      	uxth	r0, r0
  405a1e:	4b46      	ldr	r3, [pc, #280]	; (405b38 <TestAccelFilterbyNoise+0x128>)
  405a20:	4798      	blx	r3
  405a22:	b130      	cbz	r0, 405a32 <TestAccelFilterbyNoise+0x22>
	
	afsrTblLen = sizeof(accelnormalFSRcombo) / sizeof(accelnormalFSRcombo[0]);

	for ( ; iter>=0; iter--) {  //printf(" TestAccelFilterbyNoise: %d\r\n", iter);
  405a24:	2c00      	cmp	r4, #0
  405a26:	da24      	bge.n	405a72 <TestAccelFilterbyNoise+0x62>
				printNoise(noise, true, false, TESTACCELFILTERBYNOISE_SAMPLESIZE);
			}  // filter loop
		  } // Afsr loop				
	}  // iter loop
	
	yamMsg("TestAccelFilterbyNoise Done", err ? yamwait : keepgoin, err);
  405a28:	2200      	movs	r2, #0
  405a2a:	2102      	movs	r1, #2
  405a2c:	4843      	ldr	r0, [pc, #268]	; (405b3c <TestAccelFilterbyNoise+0x12c>)
  405a2e:	4b44      	ldr	r3, [pc, #272]	; (405b40 <TestAccelFilterbyNoise+0x130>)
  405a30:	4798      	blx	r3

	return err;
}
  405a32:	2000      	movs	r0, #0
  405a34:	b013      	add	sp, #76	; 0x4c
  405a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (iter%100 == 99) printf("TestAccelFilterbyNoise Iter: %d, accelfilter : %d\r\n", iter, ai);
  405a3a:	4652      	mov	r2, sl
  405a3c:	9908      	ldr	r1, [sp, #32]
  405a3e:	4841      	ldr	r0, [pc, #260]	; (405b44 <TestAccelFilterbyNoise+0x134>)
  405a40:	4b41      	ldr	r3, [pc, #260]	; (405b48 <TestAccelFilterbyNoise+0x138>)
  405a42:	4798      	blx	r3
  405a44:	e045      	b.n	405ad2 <TestAccelFilterbyNoise+0xc2>
		for (afsrindx=0; afsrindx<afsrTblLen; afsrindx++)
  405a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405a48:	3301      	adds	r3, #1
  405a4a:	9309      	str	r3, [sp, #36]	; 0x24
  405a4c:	2b04      	cmp	r3, #4
  405a4e:	d00a      	beq.n	405a66 <TestAccelFilterbyNoise+0x56>
		   setnewAccelfsrFromTable (afsrindx);		   
  405a50:	9809      	ldr	r0, [sp, #36]	; 0x24
  405a52:	4b3e      	ldr	r3, [pc, #248]	; (405b4c <TestAccelFilterbyNoise+0x13c>)
  405a54:	4798      	blx	r3
  405a56:	4f3e      	ldr	r7, [pc, #248]	; (405b50 <TestAccelFilterbyNoise+0x140>)
  405a58:	f04f 0a00 	mov.w	sl, #0
				SetFilter(X, gyroFilters[0], accelFilters[ai]);
  405a5c:	4654      	mov	r4, sl
					ReadAxesAndTemp(regvalArr, NULL, NULL, NULL, NULL);			
  405a5e:	4e3d      	ldr	r6, [pc, #244]	; (405b54 <TestAccelFilterbyNoise+0x144>)
					noise = sadas( si == TESTACCELFILTERBYNOISE_SAMPLESIZE ? NULL : regvalArr, si);
  405a60:	4d3d      	ldr	r5, [pc, #244]	; (405b58 <TestAccelFilterbyNoise+0x148>)
  405a62:	46b9      	mov	r9, r7
  405a64:	e032      	b.n	405acc <TestAccelFilterbyNoise+0xbc>
	for ( ; iter>=0; iter--) {  //printf(" TestAccelFilterbyNoise: %d\r\n", iter);
  405a66:	9b08      	ldr	r3, [sp, #32]
  405a68:	3b01      	subs	r3, #1
  405a6a:	9308      	str	r3, [sp, #32]
  405a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
  405a70:	d0da      	beq.n	405a28 <TestAccelFilterbyNoise+0x18>
				if (iter%100 == 99) printf("TestAccelFilterbyNoise Iter: %d, accelfilter : %d\r\n", iter, ai);
  405a72:	9a08      	ldr	r2, [sp, #32]
  405a74:	4939      	ldr	r1, [pc, #228]	; (405b5c <TestAccelFilterbyNoise+0x14c>)
  405a76:	fb81 1302 	smull	r1, r3, r1, r2
  405a7a:	4611      	mov	r1, r2
  405a7c:	17d2      	asrs	r2, r2, #31
  405a7e:	ebc2 1363 	rsb	r3, r2, r3, asr #5
  405a82:	461a      	mov	r2, r3
  405a84:	2364      	movs	r3, #100	; 0x64
  405a86:	4610      	mov	r0, r2
  405a88:	fb03 1310 	mls	r3, r3, r0, r1
  405a8c:	9307      	str	r3, [sp, #28]
  405a8e:	2300      	movs	r3, #0
  405a90:	9309      	str	r3, [sp, #36]	; 0x24
					ReadAxesAndTemp(regvalArr, NULL, NULL, NULL, NULL);			
  405a92:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 405b70 <TestAccelFilterbyNoise+0x160>
  405a96:	e7db      	b.n	405a50 <TestAccelFilterbyNoise+0x40>
					noise = sadas( si == TESTACCELFILTERBYNOISE_SAMPLESIZE ? NULL : regvalArr, si);
  405a98:	af0b      	add	r7, sp, #44	; 0x2c
  405a9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  405a9e:	4621      	mov	r1, r4
  405aa0:	4638      	mov	r0, r7
  405aa2:	47a8      	blx	r5
				printNoise(noise, true, false, TESTACCELFILTERBYNOISE_SAMPLESIZE);
  405aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  405aa8:	9305      	str	r3, [sp, #20]
  405aaa:	9404      	str	r4, [sp, #16]
  405aac:	2301      	movs	r3, #1
  405aae:	9303      	str	r3, [sp, #12]
  405ab0:	ab12      	add	r3, sp, #72	; 0x48
  405ab2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
  405ab6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  405aba:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
  405abe:	4f28      	ldr	r7, [pc, #160]	; (405b60 <TestAccelFilterbyNoise+0x150>)
  405ac0:	47b8      	blx	r7
		   for(ai=0; ai < (sizeof(accelFilters)/sizeof(accelFilters[0])); ai++)
  405ac2:	f10a 0a01 	add.w	sl, sl, #1
  405ac6:	f1ba 0f06 	cmp.w	sl, #6
  405aca:	d0bc      	beq.n	405a46 <TestAccelFilterbyNoise+0x36>
				if (iter%100 == 99) printf("TestAccelFilterbyNoise Iter: %d, accelfilter : %d\r\n", iter, ai);
  405acc:	9b07      	ldr	r3, [sp, #28]
  405ace:	2b63      	cmp	r3, #99	; 0x63
  405ad0:	d0b3      	beq.n	405a3a <TestAccelFilterbyNoise+0x2a>
  405ad2:	f8cd 9018 	str.w	r9, [sp, #24]
				SetFilter(X, gyroFilters[0], accelFilters[ai]);
  405ad6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 405b74 <TestAccelFilterbyNoise+0x164>
  405ada:	f899 2000 	ldrb.w	r2, [r9]
  405ade:	f898 1000 	ldrb.w	r1, [r8]
  405ae2:	4620      	mov	r0, r4
  405ae4:	4f1f      	ldr	r7, [pc, #124]	; (405b64 <TestAccelFilterbyNoise+0x154>)
  405ae6:	47b8      	blx	r7
				SetFilter(Y, gyroFilters[0], accelFilters[ai]);
  405ae8:	f819 2b01 	ldrb.w	r2, [r9], #1
  405aec:	f898 1000 	ldrb.w	r1, [r8]
  405af0:	2001      	movs	r0, #1
  405af2:	47b8      	blx	r7
				SetFilter(Z, gyroFilters[0], accelFilters[ai]);
  405af4:	9b06      	ldr	r3, [sp, #24]
  405af6:	781a      	ldrb	r2, [r3, #0]
  405af8:	f898 1000 	ldrb.w	r1, [r8]
  405afc:	2002      	movs	r0, #2
  405afe:	47b8      	blx	r7
				delay_ms(200);
  405b00:	4819      	ldr	r0, [pc, #100]	; (405b68 <TestAccelFilterbyNoise+0x158>)
  405b02:	4b1a      	ldr	r3, [pc, #104]	; (405b6c <TestAccelFilterbyNoise+0x15c>)
  405b04:	4798      	blx	r3
					ReadAxesAndTemp(regvalArr, NULL, NULL, NULL, NULL);			
  405b06:	9400      	str	r4, [sp, #0]
  405b08:	4623      	mov	r3, r4
  405b0a:	4622      	mov	r2, r4
  405b0c:	4621      	mov	r1, r4
  405b0e:	4658      	mov	r0, fp
  405b10:	47b0      	blx	r6
				for (si=0; si<TESTACCELFILTERBYNOISE_SAMPLESIZE+1; si++)
  405b12:	4627      	mov	r7, r4
					noise = sadas( si == TESTACCELFILTERBYNOISE_SAMPLESIZE ? NULL : regvalArr, si);
  405b14:	463a      	mov	r2, r7
  405b16:	4659      	mov	r1, fp
  405b18:	a80b      	add	r0, sp, #44	; 0x2c
  405b1a:	47a8      	blx	r5
				for (si=0; si<TESTACCELFILTERBYNOISE_SAMPLESIZE+1; si++)
  405b1c:	3701      	adds	r7, #1
					ReadAxesAndTemp(regvalArr, NULL, NULL, NULL, NULL);			
  405b1e:	9400      	str	r4, [sp, #0]
  405b20:	4623      	mov	r3, r4
  405b22:	4622      	mov	r2, r4
  405b24:	4621      	mov	r1, r4
  405b26:	4658      	mov	r0, fp
  405b28:	47b0      	blx	r6
					noise = sadas( si == TESTACCELFILTERBYNOISE_SAMPLESIZE ? NULL : regvalArr, si);
  405b2a:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
  405b2e:	d1f1      	bne.n	405b14 <TestAccelFilterbyNoise+0x104>
  405b30:	e7b2      	b.n	405a98 <TestAccelFilterbyNoise+0x88>
  405b32:	bf00      	nop
  405b34:	0040f36c 	.word	0x0040f36c
  405b38:	00404ff5 	.word	0x00404ff5
  405b3c:	0040f3b8 	.word	0x0040f3b8
  405b40:	00404f71 	.word	0x00404f71
  405b44:	0040f384 	.word	0x0040f384
  405b48:	00407d2d 	.word	0x00407d2d
  405b4c:	00405621 	.word	0x00405621
  405b50:	2000031c 	.word	0x2000031c
  405b54:	00402221 	.word	0x00402221
  405b58:	00405661 	.word	0x00405661
  405b5c:	51eb851f 	.word	0x51eb851f
  405b60:	00405839 	.word	0x00405839
  405b64:	004022f5 	.word	0x004022f5
  405b68:	001a283b 	.word	0x001a283b
  405b6c:	20000001 	.word	0x20000001
  405b70:	2001a20c 	.word	0x2001a20c
  405b74:	2000033c 	.word	0x2000033c

00405b78 <TestGyroFilterbyNoise>:

uint16_t TestGyroFilterbyNoise( int iter)
{
  405b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b7c:	b095      	sub	sp, #84	; 0x54
  405b7e:	4604      	mov	r4, r0
  405b80:	9009      	str	r0, [sp, #36]	; 0x24
	struct noiseMeasure	noise;
	int gi;
	int si;
	#define TESTGYROFILTERBYNOISE_SAMPLESIZE 1000

	if (!testIterControl(iter, "TestGyroFilterbyNoise")) return 0;
  405b82:	4949      	ldr	r1, [pc, #292]	; (405ca8 <TestGyroFilterbyNoise+0x130>)
  405b84:	b280      	uxth	r0, r0
  405b86:	4b49      	ldr	r3, [pc, #292]	; (405cac <TestGyroFilterbyNoise+0x134>)
  405b88:	4798      	blx	r3
  405b8a:	b130      	cbz	r0, 405b9a <TestGyroFilterbyNoise+0x22>
	gfsrTblLen = sizeof(gyroFSRtbl) / sizeof(gyroFSRtbl[0]);

	for ( ; iter>=0; iter--) {  printf(" TestGyroFilterbyNoise: %d\r\n", iter);
  405b8c:	2c00      	cmp	r4, #0
  405b8e:	da26      	bge.n	405bde <TestGyroFilterbyNoise+0x66>

			}  // filter loop
		} // Afsr loop
	}  // iter loop
	
	yamMsg("TestGyroFilterbyNoise Done", err ? yamwait : keepgoin, err);
  405b90:	2200      	movs	r2, #0
  405b92:	2102      	movs	r1, #2
  405b94:	4846      	ldr	r0, [pc, #280]	; (405cb0 <TestGyroFilterbyNoise+0x138>)
  405b96:	4b47      	ldr	r3, [pc, #284]	; (405cb4 <TestGyroFilterbyNoise+0x13c>)
  405b98:	4798      	blx	r3

	return err;
}
  405b9a:	2000      	movs	r0, #0
  405b9c:	b015      	add	sp, #84	; 0x54
  405b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (iter%100 == 99) printf("TestGyroFilterbyNoise Iter: %d, gyrofilter : %d\r\n", iter, gi);
  405ba2:	464a      	mov	r2, r9
  405ba4:	9909      	ldr	r1, [sp, #36]	; 0x24
  405ba6:	4844      	ldr	r0, [pc, #272]	; (405cb8 <TestGyroFilterbyNoise+0x140>)
  405ba8:	4b44      	ldr	r3, [pc, #272]	; (405cbc <TestGyroFilterbyNoise+0x144>)
  405baa:	4798      	blx	r3
  405bac:	e04c      	b.n	405c48 <TestGyroFilterbyNoise+0xd0>
		for (gfsrindx=0; gfsrindx<gfsrTblLen; gfsrindx++)
  405bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405bb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405bb2:	4293      	cmp	r3, r2
  405bb4:	d00d      	beq.n	405bd2 <TestGyroFilterbyNoise+0x5a>
			GyroFSRset ( gyroFSRtbl[gfsrindx]);
  405bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405bb8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  405bbc:	930a      	str	r3, [sp, #40]	; 0x28
  405bbe:	4b40      	ldr	r3, [pc, #256]	; (405cc0 <TestGyroFilterbyNoise+0x148>)
  405bc0:	4798      	blx	r3
  405bc2:	f8df a124 	ldr.w	sl, [pc, #292]	; 405ce8 <TestGyroFilterbyNoise+0x170>
  405bc6:	f04f 0900 	mov.w	r9, #0
				SetFilter(X, gyroFilters[gi], accelFilters[0]);
  405bca:	464c      	mov	r4, r9
					ReadAxesAndTemp(NULL, NULL, regvalArr, NULL, NULL);
  405bcc:	4e3d      	ldr	r6, [pc, #244]	; (405cc4 <TestGyroFilterbyNoise+0x14c>)
					noise = sadas( si == TESTGYROFILTERBYNOISE_SAMPLESIZE ? NULL : regvalArr, si);
  405bce:	4d3e      	ldr	r5, [pc, #248]	; (405cc8 <TestGyroFilterbyNoise+0x150>)
  405bd0:	e037      	b.n	405c42 <TestGyroFilterbyNoise+0xca>
	for ( ; iter>=0; iter--) {  printf(" TestGyroFilterbyNoise: %d\r\n", iter);
  405bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405bd4:	3b01      	subs	r3, #1
  405bd6:	9309      	str	r3, [sp, #36]	; 0x24
  405bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
  405bdc:	d0d8      	beq.n	405b90 <TestGyroFilterbyNoise+0x18>
  405bde:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405be0:	4629      	mov	r1, r5
  405be2:	483a      	ldr	r0, [pc, #232]	; (405ccc <TestGyroFilterbyNoise+0x154>)
  405be4:	4c35      	ldr	r4, [pc, #212]	; (405cbc <TestGyroFilterbyNoise+0x144>)
  405be6:	47a0      	blx	r4
				if (iter%100 == 99) printf("TestGyroFilterbyNoise Iter: %d, gyrofilter : %d\r\n", iter, gi);
  405be8:	4939      	ldr	r1, [pc, #228]	; (405cd0 <TestGyroFilterbyNoise+0x158>)
  405bea:	fb81 1305 	smull	r1, r3, r1, r5
  405bee:	17ea      	asrs	r2, r5, #31
  405bf0:	ebc2 1363 	rsb	r3, r2, r3, asr #5
  405bf4:	461a      	mov	r2, r3
  405bf6:	2364      	movs	r3, #100	; 0x64
  405bf8:	4610      	mov	r0, r2
  405bfa:	fb03 5310 	mls	r3, r3, r0, r5
  405bfe:	9308      	str	r3, [sp, #32]
  405c00:	4b34      	ldr	r3, [pc, #208]	; (405cd4 <TestGyroFilterbyNoise+0x15c>)
  405c02:	1e5a      	subs	r2, r3, #1
  405c04:	920a      	str	r2, [sp, #40]	; 0x28
  405c06:	330d      	adds	r3, #13
  405c08:	930b      	str	r3, [sp, #44]	; 0x2c
					ReadAxesAndTemp(NULL, NULL, regvalArr, NULL, NULL);
  405c0a:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 405cec <TestGyroFilterbyNoise+0x174>
  405c0e:	e7d2      	b.n	405bb6 <TestGyroFilterbyNoise+0x3e>
					noise = sadas( si == TESTGYROFILTERBYNOISE_SAMPLESIZE ? NULL : regvalArr, si);
  405c10:	af0d      	add	r7, sp, #52	; 0x34
  405c12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  405c16:	4621      	mov	r1, r4
  405c18:	4638      	mov	r0, r7
  405c1a:	47a8      	blx	r5
				printNoise(noise, false, false, TESTGYROFILTERBYNOISE_SAMPLESIZE);
  405c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  405c20:	9305      	str	r3, [sp, #20]
  405c22:	9404      	str	r4, [sp, #16]
  405c24:	9403      	str	r4, [sp, #12]
  405c26:	ab14      	add	r3, sp, #80	; 0x50
  405c28:	e913 0007 	ldmdb	r3, {r0, r1, r2}
  405c2c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  405c30:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
  405c34:	4f28      	ldr	r7, [pc, #160]	; (405cd8 <TestGyroFilterbyNoise+0x160>)
  405c36:	47b8      	blx	r7
			for(gi=0; gi < (sizeof(gyroFilters)/sizeof(gyroFilters[0])); gi++)
  405c38:	f109 0901 	add.w	r9, r9, #1
  405c3c:	f1b9 0f06 	cmp.w	r9, #6
  405c40:	d0b5      	beq.n	405bae <TestGyroFilterbyNoise+0x36>
				if (iter%100 == 99) printf("TestGyroFilterbyNoise Iter: %d, gyrofilter : %d\r\n", iter, gi);
  405c42:	9b08      	ldr	r3, [sp, #32]
  405c44:	2b63      	cmp	r3, #99	; 0x63
  405c46:	d0ac      	beq.n	405ba2 <TestGyroFilterbyNoise+0x2a>
  405c48:	f8cd a01c 	str.w	sl, [sp, #28]
				SetFilter(X, gyroFilters[gi], accelFilters[0]);
  405c4c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 405cf0 <TestGyroFilterbyNoise+0x178>
  405c50:	f898 2000 	ldrb.w	r2, [r8]
  405c54:	f89a 1000 	ldrb.w	r1, [sl]
  405c58:	4620      	mov	r0, r4
  405c5a:	4f20      	ldr	r7, [pc, #128]	; (405cdc <TestGyroFilterbyNoise+0x164>)
  405c5c:	47b8      	blx	r7
				SetFilter(Y, gyroFilters[gi], accelFilters[0]);
  405c5e:	f898 2000 	ldrb.w	r2, [r8]
  405c62:	f81a 1b01 	ldrb.w	r1, [sl], #1
  405c66:	2001      	movs	r0, #1
  405c68:	47b8      	blx	r7
				SetFilter(Z, gyroFilters[gi], accelFilters[0]);
  405c6a:	f898 2000 	ldrb.w	r2, [r8]
  405c6e:	9b07      	ldr	r3, [sp, #28]
  405c70:	7819      	ldrb	r1, [r3, #0]
  405c72:	2002      	movs	r0, #2
  405c74:	47b8      	blx	r7
				delay_ms(200);
  405c76:	481a      	ldr	r0, [pc, #104]	; (405ce0 <TestGyroFilterbyNoise+0x168>)
  405c78:	4b1a      	ldr	r3, [pc, #104]	; (405ce4 <TestGyroFilterbyNoise+0x16c>)
  405c7a:	4798      	blx	r3
					ReadAxesAndTemp(NULL, NULL, regvalArr, NULL, NULL);
  405c7c:	9400      	str	r4, [sp, #0]
  405c7e:	4623      	mov	r3, r4
  405c80:	465a      	mov	r2, fp
  405c82:	4621      	mov	r1, r4
  405c84:	4620      	mov	r0, r4
  405c86:	47b0      	blx	r6
				for (si=0; si<TESTACCELFILTERBYNOISE_SAMPLESIZE+1; si++)
  405c88:	4627      	mov	r7, r4
					noise = sadas( si == TESTGYROFILTERBYNOISE_SAMPLESIZE ? NULL : regvalArr, si);
  405c8a:	463a      	mov	r2, r7
  405c8c:	4659      	mov	r1, fp
  405c8e:	a80d      	add	r0, sp, #52	; 0x34
  405c90:	47a8      	blx	r5
				for (si=0; si<TESTACCELFILTERBYNOISE_SAMPLESIZE+1; si++)
  405c92:	3701      	adds	r7, #1
					ReadAxesAndTemp(NULL, NULL, regvalArr, NULL, NULL);
  405c94:	9400      	str	r4, [sp, #0]
  405c96:	4623      	mov	r3, r4
  405c98:	465a      	mov	r2, fp
  405c9a:	4621      	mov	r1, r4
  405c9c:	4620      	mov	r0, r4
  405c9e:	47b0      	blx	r6
					noise = sadas( si == TESTGYROFILTERBYNOISE_SAMPLESIZE ? NULL : regvalArr, si);
  405ca0:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
  405ca4:	d1f1      	bne.n	405c8a <TestGyroFilterbyNoise+0x112>
  405ca6:	e7b3      	b.n	405c10 <TestGyroFilterbyNoise+0x98>
  405ca8:	0040f3d4 	.word	0x0040f3d4
  405cac:	00404ff5 	.word	0x00404ff5
  405cb0:	0040f440 	.word	0x0040f440
  405cb4:	00404f71 	.word	0x00404f71
  405cb8:	0040f40c 	.word	0x0040f40c
  405cbc:	00407d2d 	.word	0x00407d2d
  405cc0:	00402145 	.word	0x00402145
  405cc4:	00402221 	.word	0x00402221
  405cc8:	00405661 	.word	0x00405661
  405ccc:	0040f3ec 	.word	0x0040f3ec
  405cd0:	51eb851f 	.word	0x51eb851f
  405cd4:	2000032c 	.word	0x2000032c
  405cd8:	00405839 	.word	0x00405839
  405cdc:	004022f5 	.word	0x004022f5
  405ce0:	001a283b 	.word	0x001a283b
  405ce4:	20000001 	.word	0x20000001
  405ce8:	2000033c 	.word	0x2000033c
  405cec:	2001a20c 	.word	0x2001a20c
  405cf0:	2000031c 	.word	0x2000031c
  405cf4:	00000000 	.word	0x00000000

00405cf8 <AccelFSRtest>:




uint16_t AccelFSRtest(int iter)
{
  405cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cfc:	ed2d 8b06 	vpush	{d8-d10}
  405d00:	b091      	sub	sp, #68	; 0x44
  405d02:	9005      	str	r0, [sp, #20]
	AccellRestype setflr;
	int32_t fsrRatio;
	float normA[3], normAlr[3];
	int i, fsrindx, fsrTblLen;
	fsrTblLen = sizeof(accelAllowedFSRcombo) / sizeof(accelAllowedFSRcombo[0]);
	if (!testIterControl(iter, "AccelFSRtest")) return 0;
  405d04:	4982      	ldr	r1, [pc, #520]	; (405f10 <AccelFSRtest+0x218>)
  405d06:	b280      	uxth	r0, r0
  405d08:	4b82      	ldr	r3, [pc, #520]	; (405f14 <AccelFSRtest+0x21c>)
  405d0a:	4798      	blx	r3
  405d0c:	9004      	str	r0, [sp, #16]
  405d0e:	b938      	cbnz	r0, 405d20 <AccelFSRtest+0x28>
  405d10:	f04f 0a00 	mov.w	sl, #0
			}
		} // fsr loop
	} // iter loop
	yamMsg("AccelFSRtest Done", err ? yamwait : keepgoin, err);
	return err;
}
  405d14:	4650      	mov	r0, sl
  405d16:	b011      	add	sp, #68	; 0x44
  405d18:	ecbd 8b06 	vpop	{d8-d10}
  405d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SetFilter (X,  g10hz, a10hz);
  405d20:	2200      	movs	r2, #0
  405d22:	4611      	mov	r1, r2
  405d24:	4610      	mov	r0, r2
  405d26:	4c7c      	ldr	r4, [pc, #496]	; (405f18 <AccelFSRtest+0x220>)
  405d28:	47a0      	blx	r4
	SetFilter (Y,  g10hz, a10hz);
  405d2a:	2200      	movs	r2, #0
  405d2c:	4611      	mov	r1, r2
  405d2e:	2001      	movs	r0, #1
  405d30:	47a0      	blx	r4
	SetFilter (Z,  g10hz, a10hz);
  405d32:	2200      	movs	r2, #0
  405d34:	4611      	mov	r1, r2
  405d36:	2002      	movs	r0, #2
  405d38:	47a0      	blx	r4
	for ( ; iter>=0; iter--) {  printf(" Accel FSR Test Iteration: %d\r\n", iter);
  405d3a:	9b05      	ldr	r3, [sp, #20]
  405d3c:	2b00      	cmp	r3, #0
  405d3e:	f2c0 80dd 	blt.w	405efc <AccelFSRtest+0x204>
			if (i%100 == 0) printf("Accel FSR Test Iter: %d\r\n", iter);
  405d42:	f04f 0900 	mov.w	r9, #0
	for ( ; iter>=0; iter--) {  printf(" Accel FSR Test Iteration: %d\r\n", iter);
  405d46:	f8df b23c 	ldr.w	fp, [pc, #572]	; 405f84 <AccelFSRtest+0x28c>
			err += normHi > (1.0f + normTolerance) ? 1 : normHi < (1.0f - normTolerance) ? 1 : 0;
  405d4a:	ed9f 9a74 	vldr	s18, [pc, #464]	; 405f1c <AccelFSRtest+0x224>
				printf("%s  Regular Accel Norm  %4.2f  LowRes Accel Norm %4.2f,  Tolerance: %4.3f", "AccelNorm OOSpec: ", normHi, normLo, normTolerance);
  405d4e:	ed9f ab6e 	vldr	d10, [pc, #440]	; 405f08 <AccelFSRtest+0x210>
  405d52:	464e      	mov	r6, r9
  405d54:	e0bb      	b.n	405ece <AccelFSRtest+0x1d6>
			if (i%100 == 0) printf("Accel FSR Test Iter: %d\r\n", iter);
  405d56:	9905      	ldr	r1, [sp, #20]
  405d58:	4871      	ldr	r0, [pc, #452]	; (405f20 <AccelFSRtest+0x228>)
  405d5a:	47d8      	blx	fp
  405d5c:	e023      	b.n	405da6 <AccelFSRtest+0xae>
  405d5e:	9b04      	ldr	r3, [sp, #16]
  405d60:	e05b      	b.n	405e1a <AccelFSRtest+0x122>
  405d62:	9a04      	ldr	r2, [sp, #16]
			err += normLo > (1.0f + normTolerance) ? 1 : normLo < (1.0f - normTolerance) ? 1 : 0;
  405d64:	4413      	add	r3, r2
  405d66:	441e      	add	r6, r3
  405d68:	b2b6      	uxth	r6, r6
			if (err) {
  405d6a:	2e00      	cmp	r6, #0
  405d6c:	d163      	bne.n	405e36 <AccelFSRtest+0x13e>
  405d6e:	f108 0802 	add.w	r8, r8, #2
		for (fsrindx=0; fsrindx<fsrTblLen; fsrindx++) 
  405d72:	4547      	cmp	r7, r8
  405d74:	f000 80a5 	beq.w	405ec2 <AccelFSRtest+0x1ca>
			AccelFSRset (setfsr, setflr);
  405d78:	f898 1001 	ldrb.w	r1, [r8, #1]
  405d7c:	f898 0000 	ldrb.w	r0, [r8]
  405d80:	4b68      	ldr	r3, [pc, #416]	; (405f24 <AccelFSRtest+0x22c>)
  405d82:	4798      	blx	r3
			getFSRval(&afsr, &alrfsr, NULL);
  405d84:	2200      	movs	r2, #0
  405d86:	a90f      	add	r1, sp, #60	; 0x3c
  405d88:	f10d 003e 	add.w	r0, sp, #62	; 0x3e
  405d8c:	4b66      	ldr	r3, [pc, #408]	; (405f28 <AccelFSRtest+0x230>)
  405d8e:	4798      	blx	r3
			fsrRatio = alrfsr/afsr;
  405d90:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  405d94:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
            printf("testing {Accel FSR, Lowres FSR, Ratio }: %2d, %2d, %2d \r\n", afsr, alrfsr, fsrRatio); 
  405d98:	fbb2 f3f1 	udiv	r3, r2, r1
  405d9c:	4863      	ldr	r0, [pc, #396]	; (405f2c <AccelFSRtest+0x234>)
  405d9e:	47d8      	blx	fp
			if (i%100 == 0) printf("Accel FSR Test Iter: %d\r\n", iter);
  405da0:	f1b9 0f00 	cmp.w	r9, #0
  405da4:	d0d7      	beq.n	405d56 <AccelFSRtest+0x5e>
			delay_ms(2000);
  405da6:	4862      	ldr	r0, [pc, #392]	; (405f30 <AccelFSRtest+0x238>)
  405da8:	4b62      	ldr	r3, [pc, #392]	; (405f34 <AccelFSRtest+0x23c>)
  405daa:	4798      	blx	r3
			ReadAxesAndTemp(regvalArr, regvalArr+3, NULL, NULL, NULL);
  405dac:	2400      	movs	r4, #0
  405dae:	9400      	str	r4, [sp, #0]
  405db0:	4623      	mov	r3, r4
  405db2:	4622      	mov	r2, r4
  405db4:	4960      	ldr	r1, [pc, #384]	; (405f38 <AccelFSRtest+0x240>)
  405db6:	4650      	mov	r0, sl
  405db8:	4d60      	ldr	r5, [pc, #384]	; (405f3c <AccelFSRtest+0x244>)
  405dba:	47a8      	blx	r5
			normHi = accelnormfloat(regvalArr[0], regvalArr[1], regvalArr[2], false, normA, normA+1, normA+2);
  405dbc:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
  405dc0:	f9ba 1002 	ldrsh.w	r1, [sl, #2]
  405dc4:	f9ba 0000 	ldrsh.w	r0, [sl]
  405dc8:	ab0e      	add	r3, sp, #56	; 0x38
  405dca:	9302      	str	r3, [sp, #8]
  405dcc:	ab0d      	add	r3, sp, #52	; 0x34
  405dce:	9301      	str	r3, [sp, #4]
  405dd0:	ab0c      	add	r3, sp, #48	; 0x30
  405dd2:	9300      	str	r3, [sp, #0]
  405dd4:	4623      	mov	r3, r4
  405dd6:	4d5a      	ldr	r5, [pc, #360]	; (405f40 <AccelFSRtest+0x248>)
  405dd8:	47a8      	blx	r5
  405dda:	4c5a      	ldr	r4, [pc, #360]	; (405f44 <AccelFSRtest+0x24c>)
  405ddc:	6020      	str	r0, [r4, #0]
			normLo = accelnormfloat(regvalArr[3], regvalArr[4], regvalArr[5], true, normAlr, normAlr+1, normAlr+2);
  405dde:	f9ba 200a 	ldrsh.w	r2, [sl, #10]
  405de2:	f9ba 1008 	ldrsh.w	r1, [sl, #8]
  405de6:	f9ba 0006 	ldrsh.w	r0, [sl, #6]
  405dea:	ab0b      	add	r3, sp, #44	; 0x2c
  405dec:	9302      	str	r3, [sp, #8]
  405dee:	ab0a      	add	r3, sp, #40	; 0x28
  405df0:	9301      	str	r3, [sp, #4]
  405df2:	ab09      	add	r3, sp, #36	; 0x24
  405df4:	9300      	str	r3, [sp, #0]
  405df6:	2301      	movs	r3, #1
  405df8:	47a8      	blx	r5
  405dfa:	ee08 0a10 	vmov	s16, r0
			err += normHi > (1.0f + normTolerance) ? 1 : normHi < (1.0f - normTolerance) ? 1 : 0;
  405dfe:	edd4 7a00 	vldr	s15, [r4]
  405e02:	eef4 7ae8 	vcmpe.f32	s15, s17
  405e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405e0a:	dca8      	bgt.n	405d5e <AccelFSRtest+0x66>
  405e0c:	eef4 7ac9 	vcmpe.f32	s15, s18
  405e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405e14:	bf4c      	ite	mi
  405e16:	2301      	movmi	r3, #1
  405e18:	2300      	movpl	r3, #0
  405e1a:	b29b      	uxth	r3, r3
			err += normLo > (1.0f + normTolerance) ? 1 : normLo < (1.0f - normTolerance) ? 1 : 0;
  405e1c:	eeb4 8ae8 	vcmpe.f32	s16, s17
  405e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405e24:	dc9d      	bgt.n	405d62 <AccelFSRtest+0x6a>
  405e26:	eeb4 8ac9 	vcmpe.f32	s16, s18
  405e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405e2e:	bf4c      	ite	mi
  405e30:	2201      	movmi	r2, #1
  405e32:	2200      	movpl	r2, #0
  405e34:	e796      	b.n	405d64 <AccelFSRtest+0x6c>
				printf("%s  Regular Accel Norm  %4.2f  LowRes Accel Norm %4.2f,  Tolerance: %4.3f", "AccelNorm OOSpec: ", normHi, normLo, normTolerance);
  405e36:	4c44      	ldr	r4, [pc, #272]	; (405f48 <AccelFSRtest+0x250>)
  405e38:	ee17 0a90 	vmov	r0, s15
  405e3c:	47a0      	blx	r4
  405e3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405e42:	ed8d ab02 	vstr	d10, [sp, #8]
  405e46:	ee18 0a10 	vmov	r0, s16
  405e4a:	47a0      	blx	r4
  405e4c:	e9cd 0100 	strd	r0, r1, [sp]
  405e50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  405e54:	493d      	ldr	r1, [pc, #244]	; (405f4c <AccelFSRtest+0x254>)
  405e56:	483e      	ldr	r0, [pc, #248]	; (405f50 <AccelFSRtest+0x258>)
  405e58:	47d8      	blx	fp
				printf("\r\n");
  405e5a:	483e      	ldr	r0, [pc, #248]	; (405f54 <AccelFSRtest+0x25c>)
  405e5c:	4d3e      	ldr	r5, [pc, #248]	; (405f58 <AccelFSRtest+0x260>)
  405e5e:	47a8      	blx	r5
				printf("%s %4.3f  %4.3f  %4.3f ", "Axes norms[Z, X, Y]: ", normA[2], normA[1], normA[0]);
  405e60:	980e      	ldr	r0, [sp, #56]	; 0x38
  405e62:	47a0      	blx	r4
  405e64:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405e68:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e6a:	47a0      	blx	r4
  405e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405e70:	980d      	ldr	r0, [sp, #52]	; 0x34
  405e72:	47a0      	blx	r4
  405e74:	e9cd 0100 	strd	r0, r1, [sp]
  405e78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  405e7c:	4937      	ldr	r1, [pc, #220]	; (405f5c <AccelFSRtest+0x264>)
  405e7e:	4838      	ldr	r0, [pc, #224]	; (405f60 <AccelFSRtest+0x268>)
  405e80:	47d8      	blx	fp
				printf("%s %4.3f  %4.3f  %4.3f ", "Axes norms[Z, X, Y]: ", normAlr[2], normAlr[1], normAlr[0]);
  405e82:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405e84:	47a0      	blx	r4
  405e86:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
  405e8c:	47a0      	blx	r4
  405e8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405e92:	980a      	ldr	r0, [sp, #40]	; 0x28
  405e94:	47a0      	blx	r4
  405e96:	e9cd 0100 	strd	r0, r1, [sp]
  405e9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  405e9e:	492f      	ldr	r1, [pc, #188]	; (405f5c <AccelFSRtest+0x264>)
  405ea0:	482f      	ldr	r0, [pc, #188]	; (405f60 <AccelFSRtest+0x268>)
  405ea2:	47d8      	blx	fp
				printf("\r\n");
  405ea4:	482b      	ldr	r0, [pc, #172]	; (405f54 <AccelFSRtest+0x25c>)
  405ea6:	47a8      	blx	r5
				sprintf(tbuf, "%s %d", "AccelFSRtest Iteration done with error count: ", err);
  405ea8:	4c2e      	ldr	r4, [pc, #184]	; (405f64 <AccelFSRtest+0x26c>)
  405eaa:	4633      	mov	r3, r6
  405eac:	4a2e      	ldr	r2, [pc, #184]	; (405f68 <AccelFSRtest+0x270>)
  405eae:	492f      	ldr	r1, [pc, #188]	; (405f6c <AccelFSRtest+0x274>)
  405eb0:	4620      	mov	r0, r4
  405eb2:	4d2f      	ldr	r5, [pc, #188]	; (405f70 <AccelFSRtest+0x278>)
  405eb4:	47a8      	blx	r5
				yamMsg(tbuf, keepgoin, err);
  405eb6:	4632      	mov	r2, r6
  405eb8:	2102      	movs	r1, #2
  405eba:	4620      	mov	r0, r4
  405ebc:	4b2d      	ldr	r3, [pc, #180]	; (405f74 <AccelFSRtest+0x27c>)
  405ebe:	4798      	blx	r3
  405ec0:	e755      	b.n	405d6e <AccelFSRtest+0x76>
	for ( ; iter>=0; iter--) {  printf(" Accel FSR Test Iteration: %d\r\n", iter);
  405ec2:	9b05      	ldr	r3, [sp, #20]
  405ec4:	3b01      	subs	r3, #1
  405ec6:	9305      	str	r3, [sp, #20]
  405ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
  405ecc:	d00c      	beq.n	405ee8 <AccelFSRtest+0x1f0>
  405ece:	9905      	ldr	r1, [sp, #20]
  405ed0:	4829      	ldr	r0, [pc, #164]	; (405f78 <AccelFSRtest+0x280>)
  405ed2:	47d8      	blx	fp
  405ed4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 405f88 <AccelFSRtest+0x290>
  405ed8:	f108 0710 	add.w	r7, r8, #16
			ReadAxesAndTemp(regvalArr, regvalArr+3, NULL, NULL, NULL);
  405edc:	4b16      	ldr	r3, [pc, #88]	; (405f38 <AccelFSRtest+0x240>)
  405ede:	f1a3 0a06 	sub.w	sl, r3, #6
			err += normHi > (1.0f + normTolerance) ? 1 : normHi < (1.0f - normTolerance) ? 1 : 0;
  405ee2:	eddf 8a26 	vldr	s17, [pc, #152]	; 405f7c <AccelFSRtest+0x284>
  405ee6:	e747      	b.n	405d78 <AccelFSRtest+0x80>
  405ee8:	46b2      	mov	sl, r6
	yamMsg("AccelFSRtest Done", err ? yamwait : keepgoin, err);
  405eea:	2e00      	cmp	r6, #0
  405eec:	bf14      	ite	ne
  405eee:	2101      	movne	r1, #1
  405ef0:	2102      	moveq	r1, #2
  405ef2:	4652      	mov	r2, sl
  405ef4:	4822      	ldr	r0, [pc, #136]	; (405f80 <AccelFSRtest+0x288>)
  405ef6:	4b1f      	ldr	r3, [pc, #124]	; (405f74 <AccelFSRtest+0x27c>)
  405ef8:	4798      	blx	r3
	return err;
  405efa:	e70b      	b.n	405d14 <AccelFSRtest+0x1c>
	uint16_t err=0;
  405efc:	f04f 0a00 	mov.w	sl, #0
	yamMsg("AccelFSRtest Done", err ? yamwait : keepgoin, err);
  405f00:	2102      	movs	r1, #2
  405f02:	e7f6      	b.n	405ef2 <AccelFSRtest+0x1fa>
  405f04:	f3af 8000 	nop.w
  405f08:	e0000000 	.word	0xe0000000
  405f0c:	3f8eb851 	.word	0x3f8eb851
  405f10:	0040efc4 	.word	0x0040efc4
  405f14:	00404ff5 	.word	0x00404ff5
  405f18:	004022f5 	.word	0x004022f5
  405f1c:	3f7c28f6 	.word	0x3f7c28f6
  405f20:	0040f030 	.word	0x0040f030
  405f24:	004020e5 	.word	0x004020e5
  405f28:	00402099 	.word	0x00402099
  405f2c:	0040eff4 	.word	0x0040eff4
  405f30:	0105924a 	.word	0x0105924a
  405f34:	20000001 	.word	0x20000001
  405f38:	2001a212 	.word	0x2001a212
  405f3c:	00402221 	.word	0x00402221
  405f40:	0040250d 	.word	0x0040250d
  405f44:	2001408c 	.word	0x2001408c
  405f48:	00406fa1 	.word	0x00406fa1
  405f4c:	0040f04c 	.word	0x0040f04c
  405f50:	0040f060 	.word	0x0040f060
  405f54:	0040ec40 	.word	0x0040ec40
  405f58:	00407df1 	.word	0x00407df1
  405f5c:	0040f0ac 	.word	0x0040f0ac
  405f60:	0040f0c4 	.word	0x0040f0c4
  405f64:	2001a0ac 	.word	0x2001a0ac
  405f68:	0040f0dc 	.word	0x0040f0dc
  405f6c:	0040f10c 	.word	0x0040f10c
  405f70:	00407fd5 	.word	0x00407fd5
  405f74:	00404f71 	.word	0x00404f71
  405f78:	0040efd4 	.word	0x0040efd4
  405f7c:	3f81eb85 	.word	0x3f81eb85
  405f80:	0040f114 	.word	0x0040f114
  405f84:	00407d2d 	.word	0x00407d2d
  405f88:	2000030c 	.word	0x2000030c
  405f8c:	00000000 	.word	0x00000000

00405f90 <AccelNormtest>:

uint16_t AccelNormtest(int iter)
{
  405f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405f94:	ed2d 8b06 	vpush	{d8-d10}
  405f98:	b091      	sub	sp, #68	; 0x44
  405f9a:	4683      	mov	fp, r0
	uint16_t afsr, alrfsr;
	int32_t fsrRatio;
	float normA[3], normAlr[3];
	int i;
	
	if (!testIterControl(iter, "AccelNormtest")) return 0;
  405f9c:	496c      	ldr	r1, [pc, #432]	; (406150 <AccelNormtest+0x1c0>)
  405f9e:	b280      	uxth	r0, r0
  405fa0:	4b6c      	ldr	r3, [pc, #432]	; (406154 <AccelNormtest+0x1c4>)
  405fa2:	4798      	blx	r3
  405fa4:	9005      	str	r0, [sp, #20]
  405fa6:	b930      	cbnz	r0, 405fb6 <AccelNormtest+0x26>
  405fa8:	2700      	movs	r7, #0
			yamMsg(tbuf, keepgoin, err); 	
		 }	
	} // iter loop
	yamMsg("AccelNormTest Done", err ? yamwait : keepgoin, err); 
	return err;
}
  405faa:	4638      	mov	r0, r7
  405fac:	b011      	add	sp, #68	; 0x44
  405fae:	ecbd 8b06 	vpop	{d8-d10}
  405fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	getFSRval(&afsr, &alrfsr, NULL);
  405fb6:	2200      	movs	r2, #0
  405fb8:	a90f      	add	r1, sp, #60	; 0x3c
  405fba:	f10d 003e 	add.w	r0, sp, #62	; 0x3e
  405fbe:	4b66      	ldr	r3, [pc, #408]	; (406158 <AccelNormtest+0x1c8>)
  405fc0:	4798      	blx	r3
	for ( ; iter>=0; iter--) {
  405fc2:	f1bb 0f00 	cmp.w	fp, #0
  405fc6:	f2c0 80b9 	blt.w	40613c <AccelNormtest+0x1ac>
		if (i%100 == 0) printf("Accel Norm Test Iter: %d\r\n", iter);
  405fca:	f04f 0a00 	mov.w	sl, #0
  405fce:	4657      	mov	r7, sl
		ReadAxesAndTemp(regvalArr, regvalArr+3, NULL, NULL, NULL);
  405fd0:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 4061ac <AccelNormtest+0x21c>
  405fd4:	f1a9 0806 	sub.w	r8, r9, #6
		 err += normHi > (1.0f + normTolerance) ? 1 : normHi < (1.0f - normTolerance) ? 1 : 0;
  405fd8:	eddf 8a60 	vldr	s17, [pc, #384]	; 40615c <AccelNormtest+0x1cc>
  405fdc:	ed9f 9a60 	vldr	s18, [pc, #384]	; 406160 <AccelNormtest+0x1d0>
			 printf("%s  Regular Accel Norm  %4.2f  LowRes Accel Norm %4.2f,  Tolerance: %4.3f", "AccelNorm OOSpec: ", normHi, normLo, normTolerance);
  405fe0:	ed9f ab59 	vldr	d10, [pc, #356]	; 406148 <AccelNormtest+0x1b8>
  405fe4:	e012      	b.n	40600c <AccelNormtest+0x7c>
		if (i%100 == 0) printf("Accel Norm Test Iter: %d\r\n", iter);
  405fe6:	4659      	mov	r1, fp
  405fe8:	485e      	ldr	r0, [pc, #376]	; (406164 <AccelNormtest+0x1d4>)
  405fea:	4b5f      	ldr	r3, [pc, #380]	; (406168 <AccelNormtest+0x1d8>)
  405fec:	4798      	blx	r3
  405fee:	e010      	b.n	406012 <AccelNormtest+0x82>
  405ff0:	9b05      	ldr	r3, [sp, #20]
  405ff2:	e045      	b.n	406080 <AccelNormtest+0xf0>
  405ff4:	9a05      	ldr	r2, [sp, #20]
		 err += normLo > (1.0f + normTolerance) ? 1 : normLo < (1.0f - normTolerance) ? 1 : 0;	 
  405ff6:	4413      	add	r3, r2
  405ff8:	441f      	add	r7, r3
  405ffa:	b2bf      	uxth	r7, r7
		 if (err) {
  405ffc:	2f00      	cmp	r7, #0
  405ffe:	d14d      	bne.n	40609c <AccelNormtest+0x10c>
	for ( ; iter>=0; iter--) {
  406000:	f10b 3bff 	add.w	fp, fp, #4294967295
  406004:	f1bb 3fff 	cmp.w	fp, #4294967295
  406008:	f000 808f 	beq.w	40612a <AccelNormtest+0x19a>
		if (i%100 == 0) printf("Accel Norm Test Iter: %d\r\n", iter);
  40600c:	f1ba 0f00 	cmp.w	sl, #0
  406010:	d0e9      	beq.n	405fe6 <AccelNormtest+0x56>
		ReadAxesAndTemp(regvalArr, regvalArr+3, NULL, NULL, NULL);
  406012:	2400      	movs	r4, #0
  406014:	9400      	str	r4, [sp, #0]
  406016:	4623      	mov	r3, r4
  406018:	4622      	mov	r2, r4
  40601a:	4649      	mov	r1, r9
  40601c:	4640      	mov	r0, r8
  40601e:	4d53      	ldr	r5, [pc, #332]	; (40616c <AccelNormtest+0x1dc>)
  406020:	47a8      	blx	r5
		normHi = accelnormfloat(regvalArr[0], regvalArr[1], regvalArr[2], false, normA, normA+1, normA+2);
  406022:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
  406026:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
  40602a:	f9b8 0000 	ldrsh.w	r0, [r8]
  40602e:	ab0e      	add	r3, sp, #56	; 0x38
  406030:	9302      	str	r3, [sp, #8]
  406032:	ab0d      	add	r3, sp, #52	; 0x34
  406034:	9301      	str	r3, [sp, #4]
  406036:	ab0c      	add	r3, sp, #48	; 0x30
  406038:	9300      	str	r3, [sp, #0]
  40603a:	4623      	mov	r3, r4
  40603c:	4d4c      	ldr	r5, [pc, #304]	; (406170 <AccelNormtest+0x1e0>)
  40603e:	47a8      	blx	r5
  406040:	4c4c      	ldr	r4, [pc, #304]	; (406174 <AccelNormtest+0x1e4>)
  406042:	6020      	str	r0, [r4, #0]
		normLo = accelnormfloat(regvalArr[3], regvalArr[4], regvalArr[5], true, normAlr, normAlr+1, normAlr+2);
  406044:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
  406048:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
  40604c:	f9b8 0006 	ldrsh.w	r0, [r8, #6]
  406050:	ab0b      	add	r3, sp, #44	; 0x2c
  406052:	9302      	str	r3, [sp, #8]
  406054:	ab0a      	add	r3, sp, #40	; 0x28
  406056:	9301      	str	r3, [sp, #4]
  406058:	ab09      	add	r3, sp, #36	; 0x24
  40605a:	9300      	str	r3, [sp, #0]
  40605c:	2301      	movs	r3, #1
  40605e:	47a8      	blx	r5
  406060:	ee08 0a10 	vmov	s16, r0
		 err += normHi > (1.0f + normTolerance) ? 1 : normHi < (1.0f - normTolerance) ? 1 : 0;
  406064:	edd4 7a00 	vldr	s15, [r4]
  406068:	eef4 7ae8 	vcmpe.f32	s15, s17
  40606c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  406070:	dcbe      	bgt.n	405ff0 <AccelNormtest+0x60>
  406072:	eef4 7ac9 	vcmpe.f32	s15, s18
  406076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40607a:	bf4c      	ite	mi
  40607c:	2301      	movmi	r3, #1
  40607e:	2300      	movpl	r3, #0
  406080:	b29b      	uxth	r3, r3
		 err += normLo > (1.0f + normTolerance) ? 1 : normLo < (1.0f - normTolerance) ? 1 : 0;	 
  406082:	eeb4 8ae8 	vcmpe.f32	s16, s17
  406086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40608a:	dcb3      	bgt.n	405ff4 <AccelNormtest+0x64>
  40608c:	eeb4 8ac9 	vcmpe.f32	s16, s18
  406090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  406094:	bf4c      	ite	mi
  406096:	2201      	movmi	r2, #1
  406098:	2200      	movpl	r2, #0
  40609a:	e7ac      	b.n	405ff6 <AccelNormtest+0x66>
			 printf("%s  Regular Accel Norm  %4.2f  LowRes Accel Norm %4.2f,  Tolerance: %4.3f", "AccelNorm OOSpec: ", normHi, normLo, normTolerance);
  40609c:	4e36      	ldr	r6, [pc, #216]	; (406178 <AccelNormtest+0x1e8>)
  40609e:	ee17 0a90 	vmov	r0, s15
  4060a2:	47b0      	blx	r6
  4060a4:	4604      	mov	r4, r0
  4060a6:	460d      	mov	r5, r1
  4060a8:	ed8d ab02 	vstr	d10, [sp, #8]
  4060ac:	ee18 0a10 	vmov	r0, s16
  4060b0:	47b0      	blx	r6
  4060b2:	e9cd 0100 	strd	r0, r1, [sp]
  4060b6:	4622      	mov	r2, r4
  4060b8:	462b      	mov	r3, r5
  4060ba:	4930      	ldr	r1, [pc, #192]	; (40617c <AccelNormtest+0x1ec>)
  4060bc:	4830      	ldr	r0, [pc, #192]	; (406180 <AccelNormtest+0x1f0>)
  4060be:	4c2a      	ldr	r4, [pc, #168]	; (406168 <AccelNormtest+0x1d8>)
  4060c0:	47a0      	blx	r4
			 printf("\r\n");
  4060c2:	4830      	ldr	r0, [pc, #192]	; (406184 <AccelNormtest+0x1f4>)
  4060c4:	4d30      	ldr	r5, [pc, #192]	; (406188 <AccelNormtest+0x1f8>)
  4060c6:	47a8      	blx	r5
			 printf("%s %4.3f  %4.3f  %4.3f ", "Axes norms[Z, X, Y]: ", normA[2], normA[1], normA[0]);			
  4060c8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4060ca:	47b0      	blx	r6
  4060cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4060d0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4060d2:	47b0      	blx	r6
  4060d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4060d8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4060da:	47b0      	blx	r6
  4060dc:	e9cd 0100 	strd	r0, r1, [sp]
  4060e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4060e4:	4929      	ldr	r1, [pc, #164]	; (40618c <AccelNormtest+0x1fc>)
  4060e6:	482a      	ldr	r0, [pc, #168]	; (406190 <AccelNormtest+0x200>)
  4060e8:	47a0      	blx	r4
			 printf("%s %4.3f  %4.3f  %4.3f ", "Axes norms[Z, X, Y]: ", normAlr[2], normAlr[1], normAlr[0]);
  4060ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4060ec:	47b0      	blx	r6
  4060ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4060f2:	9809      	ldr	r0, [sp, #36]	; 0x24
  4060f4:	47b0      	blx	r6
  4060f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4060fa:	980a      	ldr	r0, [sp, #40]	; 0x28
  4060fc:	47b0      	blx	r6
  4060fe:	e9cd 0100 	strd	r0, r1, [sp]
  406102:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  406106:	4921      	ldr	r1, [pc, #132]	; (40618c <AccelNormtest+0x1fc>)
  406108:	4821      	ldr	r0, [pc, #132]	; (406190 <AccelNormtest+0x200>)
  40610a:	47a0      	blx	r4
			 printf("\r\n");
  40610c:	481d      	ldr	r0, [pc, #116]	; (406184 <AccelNormtest+0x1f4>)
  40610e:	47a8      	blx	r5
			sprintf(tbuf, "%s %d", "AccelNormTest Iteration done with error count: ", err);
  406110:	4c20      	ldr	r4, [pc, #128]	; (406194 <AccelNormtest+0x204>)
  406112:	463b      	mov	r3, r7
  406114:	4a20      	ldr	r2, [pc, #128]	; (406198 <AccelNormtest+0x208>)
  406116:	4921      	ldr	r1, [pc, #132]	; (40619c <AccelNormtest+0x20c>)
  406118:	4620      	mov	r0, r4
  40611a:	4d21      	ldr	r5, [pc, #132]	; (4061a0 <AccelNormtest+0x210>)
  40611c:	47a8      	blx	r5
			yamMsg(tbuf, keepgoin, err); 	
  40611e:	463a      	mov	r2, r7
  406120:	2102      	movs	r1, #2
  406122:	4620      	mov	r0, r4
  406124:	4b1f      	ldr	r3, [pc, #124]	; (4061a4 <AccelNormtest+0x214>)
  406126:	4798      	blx	r3
  406128:	e76a      	b.n	406000 <AccelNormtest+0x70>
	yamMsg("AccelNormTest Done", err ? yamwait : keepgoin, err); 
  40612a:	2f00      	cmp	r7, #0
  40612c:	bf14      	ite	ne
  40612e:	2101      	movne	r1, #1
  406130:	2102      	moveq	r1, #2
  406132:	463a      	mov	r2, r7
  406134:	481c      	ldr	r0, [pc, #112]	; (4061a8 <AccelNormtest+0x218>)
  406136:	4b1b      	ldr	r3, [pc, #108]	; (4061a4 <AccelNormtest+0x214>)
  406138:	4798      	blx	r3
	return err;
  40613a:	e736      	b.n	405faa <AccelNormtest+0x1a>
	uint16_t err=0;
  40613c:	2700      	movs	r7, #0
	yamMsg("AccelNormTest Done", err ? yamwait : keepgoin, err); 
  40613e:	2102      	movs	r1, #2
  406140:	e7f7      	b.n	406132 <AccelNormtest+0x1a2>
  406142:	bf00      	nop
  406144:	f3af 8000 	nop.w
  406148:	e0000000 	.word	0xe0000000
  40614c:	3f8eb851 	.word	0x3f8eb851
  406150:	0040f128 	.word	0x0040f128
  406154:	00404ff5 	.word	0x00404ff5
  406158:	00402099 	.word	0x00402099
  40615c:	3f81eb85 	.word	0x3f81eb85
  406160:	3f7c28f6 	.word	0x3f7c28f6
  406164:	0040f138 	.word	0x0040f138
  406168:	00407d2d 	.word	0x00407d2d
  40616c:	00402221 	.word	0x00402221
  406170:	0040250d 	.word	0x0040250d
  406174:	2001408c 	.word	0x2001408c
  406178:	00406fa1 	.word	0x00406fa1
  40617c:	0040f04c 	.word	0x0040f04c
  406180:	0040f060 	.word	0x0040f060
  406184:	0040ec40 	.word	0x0040ec40
  406188:	00407df1 	.word	0x00407df1
  40618c:	0040f0ac 	.word	0x0040f0ac
  406190:	0040f0c4 	.word	0x0040f0c4
  406194:	2001a0ac 	.word	0x2001a0ac
  406198:	0040f154 	.word	0x0040f154
  40619c:	0040f10c 	.word	0x0040f10c
  4061a0:	00407fd5 	.word	0x00407fd5
  4061a4:	00404f71 	.word	0x00404f71
  4061a8:	0040f184 	.word	0x0040f184
  4061ac:	2001a212 	.word	0x2001a212

004061b0 <testPowerupResetRegTest>:



uint16_t testPowerupResetRegTest(int iter)
{
  4061b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061b4:	b087      	sub	sp, #28
  4061b6:	4604      	mov	r4, r0
	enum errWriteType err=0;
  4061b8:	2300      	movs	r3, #0
  4061ba:	f88d 3017 	strb.w	r3, [sp, #23]
	uint16_t regval, expval;
    int i;
	int testBank=0; //should start from 0 on power up
    int regBank;
	int arrlen = numRegArray();
  4061be:	4b31      	ldr	r3, [pc, #196]	; (406284 <testPowerupResetRegTest+0xd4>)
  4061c0:	4798      	blx	r3
  4061c2:	4605      	mov	r5, r0
	 
	if (!testIterControl(iter, "testPowerupResetRegTest")) return 0;
  4061c4:	4930      	ldr	r1, [pc, #192]	; (406288 <testPowerupResetRegTest+0xd8>)
  4061c6:	b2a0      	uxth	r0, r4
  4061c8:	4b30      	ldr	r3, [pc, #192]	; (40628c <testPowerupResetRegTest+0xdc>)
  4061ca:	4798      	blx	r3
  4061cc:	b918      	cbnz	r0, 4061d6 <testPowerupResetRegTest+0x26>
  4061ce:	2000      	movs	r0, #0
	}
	bankselect(0);  // restore bank 0
		
    yamMsg("testPowerupResetRegTest Done", err ? yamwait : keepgoin, err); 
    return err;
}
  4061d0:	b007      	add	sp, #28
  4061d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int arrlen = numRegArray();
  4061d6:	46ab      	mov	fp, r5
	printf ("Number of registers: %d\r\n", arrlen);
  4061d8:	4629      	mov	r1, r5
  4061da:	482d      	ldr	r0, [pc, #180]	; (406290 <testPowerupResetRegTest+0xe0>)
  4061dc:	4b2d      	ldr	r3, [pc, #180]	; (406294 <testPowerupResetRegTest+0xe4>)
  4061de:	4798      	blx	r3
    for ( ; iter; iter--)
  4061e0:	2c00      	cmp	r4, #0
  4061e2:	d040      	beq.n	406266 <testPowerupResetRegTest+0xb6>
  4061e4:	2300      	movs	r3, #0
  4061e6:	9303      	str	r3, [sp, #12]
		printf ("Power up Reset register test Iter: %d\r\n", iter);
  4061e8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 406294 <testPowerupResetRegTest+0xe4>
  4061ec:	e001      	b.n	4061f2 <testPowerupResetRegTest+0x42>
    for ( ; iter; iter--)
  4061ee:	3c01      	subs	r4, #1
  4061f0:	d039      	beq.n	406266 <testPowerupResetRegTest+0xb6>
		printf ("Power up Reset register test Iter: %d\r\n", iter);
  4061f2:	4621      	mov	r1, r4
  4061f4:	4828      	ldr	r0, [pc, #160]	; (406298 <testPowerupResetRegTest+0xe8>)
  4061f6:	47c8      	blx	r9
		for(i=0; i<arrlen; i++)
  4061f8:	f1bb 0f00 	cmp.w	fp, #0
  4061fc:	ddf7      	ble.n	4061ee <testPowerupResetRegTest+0x3e>
  4061fe:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4062b8 <testPowerupResetRegTest+0x108>
  406202:	f8dd a00c 	ldr.w	sl, [sp, #12]
  406206:	2700      	movs	r7, #0
		  printf("iter, index %d %d\r\n", iter, i);
  406208:	463a      	mov	r2, r7
  40620a:	4621      	mov	r1, r4
  40620c:	4823      	ldr	r0, [pc, #140]	; (40629c <testPowerupResetRegTest+0xec>)
  40620e:	47c8      	blx	r9
  406210:	4646      	mov	r6, r8
		  regBank = regArray[i].b;
  406212:	f998 5000 	ldrsb.w	r5, [r8]
  406216:	9503      	str	r5, [sp, #12]
		  if(regBank != testBank)
  406218:	4555      	cmp	r5, sl
  40621a:	d005      	beq.n	406228 <testPowerupResetRegTest+0x78>
			 bankselect(regBank);
  40621c:	4628      	mov	r0, r5
  40621e:	4b20      	ldr	r3, [pc, #128]	; (4062a0 <testPowerupResetRegTest+0xf0>)
  406220:	4798      	blx	r3
			 printf("Changed Bank to %d\r\n", regBank);
  406222:	4629      	mov	r1, r5
  406224:	481f      	ldr	r0, [pc, #124]	; (4062a4 <testPowerupResetRegTest+0xf4>)
  406226:	47c8      	blx	r9
		  regval = (uint32_t) ReadReg(regArray[i].r, &err);
  406228:	f10d 0117 	add.w	r1, sp, #23
  40622c:	7870      	ldrb	r0, [r6, #1]
  40622e:	4b1e      	ldr	r3, [pc, #120]	; (4062a8 <testPowerupResetRegTest+0xf8>)
  406230:	4798      	blx	r3
		  regval &= regArray[i].regfld;
  406232:	8873      	ldrh	r3, [r6, #2]
  406234:	4018      	ands	r0, r3
		  expval = regArray[i].defval & regArray[i].regfld;
  406236:	88b1      	ldrh	r1, [r6, #4]
  406238:	4019      	ands	r1, r3
		  if (regval != expval)
  40623a:	4288      	cmp	r0, r1
  40623c:	d00c      	beq.n	406258 <testPowerupResetRegTest+0xa8>
			 printf("index: %d, Register {b,o} %02X %02X reads %04X instead of %04X \r\n", i, regArray[i].b, regArray[i].r, regval, expval);  
  40623e:	7873      	ldrb	r3, [r6, #1]
  406240:	f996 2000 	ldrsb.w	r2, [r6]
  406244:	9101      	str	r1, [sp, #4]
  406246:	9000      	str	r0, [sp, #0]
  406248:	4639      	mov	r1, r7
  40624a:	4818      	ldr	r0, [pc, #96]	; (4062ac <testPowerupResetRegTest+0xfc>)
  40624c:	47c8      	blx	r9
			 err++;
  40624e:	f89d 3017 	ldrb.w	r3, [sp, #23]
  406252:	3301      	adds	r3, #1
  406254:	f88d 3017 	strb.w	r3, [sp, #23]
		for(i=0; i<arrlen; i++)
  406258:	3701      	adds	r7, #1
  40625a:	f108 0806 	add.w	r8, r8, #6
		  regBank = regArray[i].b;
  40625e:	46aa      	mov	sl, r5
		for(i=0; i<arrlen; i++)
  406260:	45bb      	cmp	fp, r7
  406262:	dcd1      	bgt.n	406208 <testPowerupResetRegTest+0x58>
  406264:	e7c3      	b.n	4061ee <testPowerupResetRegTest+0x3e>
	bankselect(0);  // restore bank 0
  406266:	2000      	movs	r0, #0
  406268:	4b0d      	ldr	r3, [pc, #52]	; (4062a0 <testPowerupResetRegTest+0xf0>)
  40626a:	4798      	blx	r3
    yamMsg("testPowerupResetRegTest Done", err ? yamwait : keepgoin, err); 
  40626c:	f89d 2017 	ldrb.w	r2, [sp, #23]
  406270:	2a00      	cmp	r2, #0
  406272:	bf14      	ite	ne
  406274:	2101      	movne	r1, #1
  406276:	2102      	moveq	r1, #2
  406278:	480d      	ldr	r0, [pc, #52]	; (4062b0 <testPowerupResetRegTest+0x100>)
  40627a:	4b0e      	ldr	r3, [pc, #56]	; (4062b4 <testPowerupResetRegTest+0x104>)
  40627c:	4798      	blx	r3
    return err;
  40627e:	f89d 0017 	ldrb.w	r0, [sp, #23]
  406282:	e7a5      	b.n	4061d0 <testPowerupResetRegTest+0x20>
  406284:	00403797 	.word	0x00403797
  406288:	0040f680 	.word	0x0040f680
  40628c:	00404ff5 	.word	0x00404ff5
  406290:	0040f698 	.word	0x0040f698
  406294:	00407d2d 	.word	0x00407d2d
  406298:	0040f6b4 	.word	0x0040f6b4
  40629c:	0040f6dc 	.word	0x0040f6dc
  4062a0:	00403d71 	.word	0x00403d71
  4062a4:	0040f6f0 	.word	0x0040f6f0
  4062a8:	00403cad 	.word	0x00403cad
  4062ac:	0040f708 	.word	0x0040f708
  4062b0:	0040f74c 	.word	0x0040f74c
  4062b4:	00404f71 	.word	0x00404f71
  4062b8:	200001a4 	.word	0x200001a4

004062bc <IDTest>:

uint16_t IDTest(int iter)
{
  4062bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4062c0:	b089      	sub	sp, #36	; 0x24
  4062c2:	4604      	mov	r4, r0
  4062c4:	9004      	str	r0, [sp, #16]
	uint16_t err=0;
	enum errWriteType rwerr=noProtocolErr;
  4062c6:	2300      	movs	r3, #0
  4062c8:	f88d 301f 	strb.w	r3, [sp, #31]
	int saved_iter;
	int16_t v1, v2, v3, v4;  // read values
	int16_t w1, w2, w3, w4;  // write values
	int16_t v1w1m, v2w2m;  // mask for valid bits
	  
	if (!testIterControl(iter, "IDTest")) return 0;
  4062cc:	495c      	ldr	r1, [pc, #368]	; (406440 <IDTest+0x184>)
  4062ce:	b280      	uxth	r0, r0
  4062d0:	4b5c      	ldr	r3, [pc, #368]	; (406444 <IDTest+0x188>)
  4062d2:	4798      	blx	r3
  4062d4:	2800      	cmp	r0, #0
  4062d6:	f000 80aa 	beq.w	40642e <IDTest+0x172>

	for (saved_iter=iter; iter; iter--) {
  4062da:	4623      	mov	r3, r4
  4062dc:	2c00      	cmp	r4, #0
  4062de:	f000 80aa 	beq.w	406436 <IDTest+0x17a>
		ReadID (&gyroRev, &accelRev, &sensorRev, &serialNum);
  4062e2:	4e59      	ldr	r6, [pc, #356]	; (406448 <IDTest+0x18c>)
		printf(" Gyro Rev: %3d, AccelRev: %3d, SensorRev: %3d, Serial# %24X = %8d (in decimal) \r\n", gyroRev, accelRev, sensorRev, serialNum, serialNum);	
  4062e4:	4d59      	ldr	r5, [pc, #356]	; (40644c <IDTest+0x190>)
  4062e6:	4c5a      	ldr	r4, [pc, #360]	; (406450 <IDTest+0x194>)
  4062e8:	461f      	mov	r7, r3
		ReadID (&gyroRev, &accelRev, &sensorRev, &serialNum);
  4062ea:	ab06      	add	r3, sp, #24
  4062ec:	aa07      	add	r2, sp, #28
  4062ee:	f10d 011d 	add.w	r1, sp, #29
  4062f2:	f10d 001e 	add.w	r0, sp, #30
  4062f6:	47b0      	blx	r6
		printf(" Gyro Rev: %3d, AccelRev: %3d, SensorRev: %3d, Serial# %24X = %8d (in decimal) \r\n", gyroRev, accelRev, sensorRev, serialNum, serialNum);	
  4062f8:	9806      	ldr	r0, [sp, #24]
  4062fa:	f89d 301c 	ldrb.w	r3, [sp, #28]
  4062fe:	f89d 201d 	ldrb.w	r2, [sp, #29]
  406302:	f89d 101e 	ldrb.w	r1, [sp, #30]
  406306:	9001      	str	r0, [sp, #4]
  406308:	9000      	str	r0, [sp, #0]
  40630a:	4628      	mov	r0, r5
  40630c:	47a0      	blx	r4
	for (saved_iter=iter; iter; iter--) {
  40630e:	3f01      	subs	r7, #1
  406310:	d1eb      	bne.n	4062ea <IDTest+0x2e>
  406312:	9705      	str	r7, [sp, #20]
  406314:	f04f 0900 	mov.w	r9, #0
			
			w1 = i;				w1 &=  v1w1m;		
			w2 = (i+1)%65536;   w2 &=  v2w2m;
			w3 = (i+2)%65536; 
			w4 = (i+3)%65536;
			rwerr = WriteReg (Arev, w1);
  406318:	f8df a15c 	ldr.w	sl, [pc, #348]	; 406478 <IDTest+0x1bc>
  40631c:	46c8      	mov	r8, r9
  40631e:	e075      	b.n	40640c <IDTest+0x150>
		for(int i=0; i<260; i++)
  406320:	f5b9 7f82 	cmp.w	r9, #260	; 0x104
  406324:	d06e      	beq.n	406404 <IDTest+0x148>
			w1 = i;				w1 &=  v1w1m;		
  406326:	fa0f f589 	sxth.w	r5, r9
  40632a:	f640 761f 	movw	r6, #3871	; 0xf1f
  40632e:	4035      	ands	r5, r6
			w2 = (i+1)%65536;   w2 &=  v2w2m;
  406330:	f109 0901 	add.w	r9, r9, #1
			w3 = (i+2)%65536; 
  406334:	f109 0701 	add.w	r7, r9, #1
  406338:	427b      	negs	r3, r7
  40633a:	b2bf      	uxth	r7, r7
  40633c:	b29b      	uxth	r3, r3
  40633e:	bf58      	it	pl
  406340:	425f      	negpl	r7, r3
  406342:	b23b      	sxth	r3, r7
  406344:	9302      	str	r3, [sp, #8]
			w4 = (i+3)%65536;
  406346:	f109 0402 	add.w	r4, r9, #2
  40634a:	4263      	negs	r3, r4
  40634c:	b2a4      	uxth	r4, r4
  40634e:	b29b      	uxth	r3, r3
  406350:	bf58      	it	pl
  406352:	425c      	negpl	r4, r3
  406354:	b223      	sxth	r3, r4
  406356:	9303      	str	r3, [sp, #12]
			rwerr = WriteReg (Arev, w1);
  406358:	4629      	mov	r1, r5
  40635a:	201b      	movs	r0, #27
  40635c:	47d0      	blx	sl
  40635e:	f88d 001f 	strb.w	r0, [sp, #31]
			//rwerr = WriteReg (Srev, w2);
			rwerr = WriteReg (SerIdmsb, w3);
  406362:	b2b9      	uxth	r1, r7
  406364:	201d      	movs	r0, #29
  406366:	47d0      	blx	sl
  406368:	f88d 001f 	strb.w	r0, [sp, #31]
			rwerr = WriteReg (SerIdlsb, w4);
  40636c:	b2a1      	uxth	r1, r4
  40636e:	201e      	movs	r0, #30
  406370:	47d0      	blx	sl
  406372:	ac08      	add	r4, sp, #32
  406374:	f804 0d01 	strb.w	r0, [r4, #-1]!
		
			v1 = ReadReg(Arev, &rwerr);  v1 &= v1w1m;
  406378:	4621      	mov	r1, r4
  40637a:	201b      	movs	r0, #27
  40637c:	4f35      	ldr	r7, [pc, #212]	; (406454 <IDTest+0x198>)
  40637e:	47b8      	blx	r7
  406380:	b200      	sxth	r0, r0
  406382:	4006      	ands	r6, r0
			//v2 = ReadReg(Srev, &rwerr);  v2 &= v2w2m;
			v3 = ReadReg(SerIdmsb, &rwerr);
  406384:	4621      	mov	r1, r4
  406386:	201d      	movs	r0, #29
  406388:	47b8      	blx	r7
  40638a:	fa0f fb80 	sxth.w	fp, r0
			v4 = ReadReg(SerIdlsb, &rwerr);
  40638e:	4621      	mov	r1, r4
  406390:	201e      	movs	r0, #30
  406392:	47b8      	blx	r7
  406394:	b204      	sxth	r4, r0
		
			if (v1 != w1)  { err++; sprintf(tbuf, "A/G Rev RW mismatch. W,R = %04x, %04x \r\n", w1, v1); yamMsg(tbuf, keepgoin, err);}
  406396:	42b5      	cmp	r5, r6
  406398:	d00f      	beq.n	4063ba <IDTest+0xfe>
  40639a:	f108 0801 	add.w	r8, r8, #1
  40639e:	fa1f f888 	uxth.w	r8, r8
  4063a2:	4f2d      	ldr	r7, [pc, #180]	; (406458 <IDTest+0x19c>)
  4063a4:	4633      	mov	r3, r6
  4063a6:	462a      	mov	r2, r5
  4063a8:	492c      	ldr	r1, [pc, #176]	; (40645c <IDTest+0x1a0>)
  4063aa:	4638      	mov	r0, r7
  4063ac:	4d2c      	ldr	r5, [pc, #176]	; (406460 <IDTest+0x1a4>)
  4063ae:	47a8      	blx	r5
  4063b0:	4642      	mov	r2, r8
  4063b2:	2102      	movs	r1, #2
  4063b4:	4638      	mov	r0, r7
  4063b6:	4b2b      	ldr	r3, [pc, #172]	; (406464 <IDTest+0x1a8>)
  4063b8:	4798      	blx	r3
			//if (v2 != w2)  { err++; sprintf(tbuf, "Sensor Rev RW mismatch. W,R = %04x, %04x \r\n", w2, v2); yamMsg(tbuf, keepgoin, err);}
			if (v3 != w3)  { err++; sprintf(tbuf, "SerialID MSB RW mismatch. W,R = %04x, %04x \r\n", w3, v3); yamMsg(tbuf, keepgoin, err);}
  4063ba:	9a02      	ldr	r2, [sp, #8]
  4063bc:	455a      	cmp	r2, fp
  4063be:	d00e      	beq.n	4063de <IDTest+0x122>
  4063c0:	f108 0801 	add.w	r8, r8, #1
  4063c4:	fa1f f888 	uxth.w	r8, r8
  4063c8:	4d23      	ldr	r5, [pc, #140]	; (406458 <IDTest+0x19c>)
  4063ca:	465b      	mov	r3, fp
  4063cc:	4926      	ldr	r1, [pc, #152]	; (406468 <IDTest+0x1ac>)
  4063ce:	4628      	mov	r0, r5
  4063d0:	4e23      	ldr	r6, [pc, #140]	; (406460 <IDTest+0x1a4>)
  4063d2:	47b0      	blx	r6
  4063d4:	4642      	mov	r2, r8
  4063d6:	2102      	movs	r1, #2
  4063d8:	4628      	mov	r0, r5
  4063da:	4b22      	ldr	r3, [pc, #136]	; (406464 <IDTest+0x1a8>)
  4063dc:	4798      	blx	r3
			if (v4 != w4)  { err++; sprintf(tbuf, "SerialID LSB RW mismatch. W,R = %04x, %04x \r\n", w4, v4); yamMsg(tbuf, keepgoin, err);}
  4063de:	9a03      	ldr	r2, [sp, #12]
  4063e0:	42a2      	cmp	r2, r4
  4063e2:	d09d      	beq.n	406320 <IDTest+0x64>
  4063e4:	f108 0801 	add.w	r8, r8, #1
  4063e8:	fa1f f888 	uxth.w	r8, r8
  4063ec:	4d1a      	ldr	r5, [pc, #104]	; (406458 <IDTest+0x19c>)
  4063ee:	4623      	mov	r3, r4
  4063f0:	491e      	ldr	r1, [pc, #120]	; (40646c <IDTest+0x1b0>)
  4063f2:	4628      	mov	r0, r5
  4063f4:	4c1a      	ldr	r4, [pc, #104]	; (406460 <IDTest+0x1a4>)
  4063f6:	47a0      	blx	r4
  4063f8:	4642      	mov	r2, r8
  4063fa:	2102      	movs	r1, #2
  4063fc:	4628      	mov	r0, r5
  4063fe:	4b19      	ldr	r3, [pc, #100]	; (406464 <IDTest+0x1a8>)
  406400:	4798      	blx	r3
  406402:	e78d      	b.n	406320 <IDTest+0x64>
	for ( iter = saved_iter; iter; iter--) {  printf("ID Test iter: %d\r\n", iter);
  406404:	9b04      	ldr	r3, [sp, #16]
  406406:	3b01      	subs	r3, #1
  406408:	9304      	str	r3, [sp, #16]
  40640a:	d006      	beq.n	40641a <IDTest+0x15e>
  40640c:	9904      	ldr	r1, [sp, #16]
  40640e:	4818      	ldr	r0, [pc, #96]	; (406470 <IDTest+0x1b4>)
  406410:	4b0f      	ldr	r3, [pc, #60]	; (406450 <IDTest+0x194>)
  406412:	4798      	blx	r3
		for(int i=0; i<260; i++)
  406414:	f8dd 9014 	ldr.w	r9, [sp, #20]
  406418:	e785      	b.n	406326 <IDTest+0x6a>
  40641a:	46c1      	mov	r9, r8
		}
	}
	
	yamMsg("IDTest Done", err ? yamwait : keepgoin, err); 
  40641c:	f1b8 0f00 	cmp.w	r8, #0
  406420:	bf14      	ite	ne
  406422:	2101      	movne	r1, #1
  406424:	2102      	moveq	r1, #2
  406426:	464a      	mov	r2, r9
  406428:	4812      	ldr	r0, [pc, #72]	; (406474 <IDTest+0x1b8>)
  40642a:	4b0e      	ldr	r3, [pc, #56]	; (406464 <IDTest+0x1a8>)
  40642c:	4798      	blx	r3
	return 0;  // there are no bad IDs
}
  40642e:	2000      	movs	r0, #0
  406430:	b009      	add	sp, #36	; 0x24
  406432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (saved_iter=iter; iter; iter--) {
  406436:	f04f 0900 	mov.w	r9, #0
	yamMsg("IDTest Done", err ? yamwait : keepgoin, err); 
  40643a:	2102      	movs	r1, #2
  40643c:	e7f3      	b.n	406426 <IDTest+0x16a>
  40643e:	bf00      	nop
  406440:	0040f198 	.word	0x0040f198
  406444:	00404ff5 	.word	0x00404ff5
  406448:	004025b1 	.word	0x004025b1
  40644c:	0040f1a0 	.word	0x0040f1a0
  406450:	00407d2d 	.word	0x00407d2d
  406454:	00403cad 	.word	0x00403cad
  406458:	2001a0ac 	.word	0x2001a0ac
  40645c:	0040f208 	.word	0x0040f208
  406460:	00407fd5 	.word	0x00407fd5
  406464:	00404f71 	.word	0x00404f71
  406468:	0040f234 	.word	0x0040f234
  40646c:	0040f264 	.word	0x0040f264
  406470:	0040f1f4 	.word	0x0040f1f4
  406474:	0040f294 	.word	0x0040f294
  406478:	00403c8d 	.word	0x00403c8d

0040647c <testpowerUpSelfTest>:

uint16_t testpowerUpSelfTest(int iter)
{
  40647c:	b538      	push	{r3, r4, r5, lr}
  40647e:	4604      	mov	r4, r0
  uint16_t err=0;


  if (!testIterControl(iter, "testpowerUpSelfTest")) return 0;
  406480:	490a      	ldr	r1, [pc, #40]	; (4064ac <testpowerUpSelfTest+0x30>)
  406482:	b280      	uxth	r0, r0
  406484:	4b0a      	ldr	r3, [pc, #40]	; (4064b0 <testpowerUpSelfTest+0x34>)
  406486:	4798      	blx	r3
  406488:	b908      	cbnz	r0, 40648e <testpowerUpSelfTest+0x12>
     getEvents();	

  yamMsg("testpowerUpSelfTest Done", err ? yamwait : keepgoin, err); 

  return err;
}
  40648a:	2000      	movs	r0, #0
  40648c:	bd38      	pop	{r3, r4, r5, pc}
  printf ("power up self test started \r\n");  
  40648e:	4809      	ldr	r0, [pc, #36]	; (4064b4 <testpowerUpSelfTest+0x38>)
  406490:	4b09      	ldr	r3, [pc, #36]	; (4064b8 <testpowerUpSelfTest+0x3c>)
  406492:	4798      	blx	r3
  for ( ; iter--; )
  406494:	b11c      	cbz	r4, 40649e <testpowerUpSelfTest+0x22>
     getEvents();	
  406496:	4d09      	ldr	r5, [pc, #36]	; (4064bc <testpowerUpSelfTest+0x40>)
  406498:	47a8      	blx	r5
  for ( ; iter--; )
  40649a:	3c01      	subs	r4, #1
  40649c:	d1fc      	bne.n	406498 <testpowerUpSelfTest+0x1c>
  yamMsg("testpowerUpSelfTest Done", err ? yamwait : keepgoin, err); 
  40649e:	2200      	movs	r2, #0
  4064a0:	2102      	movs	r1, #2
  4064a2:	4807      	ldr	r0, [pc, #28]	; (4064c0 <testpowerUpSelfTest+0x44>)
  4064a4:	4b07      	ldr	r3, [pc, #28]	; (4064c4 <testpowerUpSelfTest+0x48>)
  4064a6:	4798      	blx	r3
  return err;
  4064a8:	e7ef      	b.n	40648a <testpowerUpSelfTest+0xe>
  4064aa:	bf00      	nop
  4064ac:	0040f958 	.word	0x0040f958
  4064b0:	00404ff5 	.word	0x00404ff5
  4064b4:	0040f96c 	.word	0x0040f96c
  4064b8:	00407df1 	.word	0x00407df1
  4064bc:	00402925 	.word	0x00402925
  4064c0:	0040f98c 	.word	0x0040f98c
  4064c4:	00404f71 	.word	0x00404f71

004064c8 <testnowdoSelfTest>:

uint16_t testnowdoSelfTest(int iter)
{
  4064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4064ca:	4604      	mov	r4, r0
  uint16_t err=0;
  printf ("Software invoked self test started \r\n"); 
  4064cc:	480d      	ldr	r0, [pc, #52]	; (406504 <testnowdoSelfTest+0x3c>)
  4064ce:	4b0e      	ldr	r3, [pc, #56]	; (406508 <testnowdoSelfTest+0x40>)
  4064d0:	4798      	blx	r3

  if (!testIterControl(iter, "testnowdoSelfTest")) return 0;
  4064d2:	490e      	ldr	r1, [pc, #56]	; (40650c <testnowdoSelfTest+0x44>)
  4064d4:	b2a0      	uxth	r0, r4
  4064d6:	4b0e      	ldr	r3, [pc, #56]	; (406510 <testnowdoSelfTest+0x48>)
  4064d8:	4798      	blx	r3
  4064da:	b180      	cbz	r0, 4064fe <testnowdoSelfTest+0x36>

  for ( ; iter; iter--)  { printf("Iteration %d\r\n", iter); 
  4064dc:	b154      	cbz	r4, 4064f4 <testnowdoSelfTest+0x2c>
  4064de:	4f0d      	ldr	r7, [pc, #52]	; (406514 <testnowdoSelfTest+0x4c>)
  4064e0:	4e0d      	ldr	r6, [pc, #52]	; (406518 <testnowdoSelfTest+0x50>)
	  selfteststart(); 
  4064e2:	4d0e      	ldr	r5, [pc, #56]	; (40651c <testnowdoSelfTest+0x54>)
  for ( ; iter; iter--)  { printf("Iteration %d\r\n", iter); 
  4064e4:	4621      	mov	r1, r4
  4064e6:	4638      	mov	r0, r7
  4064e8:	47b0      	blx	r6
	  selfteststart(); 
  4064ea:	47a8      	blx	r5
	  getEvents();	
  4064ec:	4b0c      	ldr	r3, [pc, #48]	; (406520 <testnowdoSelfTest+0x58>)
  4064ee:	4798      	blx	r3
  for ( ; iter; iter--)  { printf("Iteration %d\r\n", iter); 
  4064f0:	3c01      	subs	r4, #1
  4064f2:	d1f7      	bne.n	4064e4 <testnowdoSelfTest+0x1c>
  }
  yamMsg("testnowdoSelfTest Done", err ? yamwait : keepgoin, err); 
  4064f4:	2200      	movs	r2, #0
  4064f6:	2102      	movs	r1, #2
  4064f8:	480a      	ldr	r0, [pc, #40]	; (406524 <testnowdoSelfTest+0x5c>)
  4064fa:	4b0b      	ldr	r3, [pc, #44]	; (406528 <testnowdoSelfTest+0x60>)
  4064fc:	4798      	blx	r3
  return err;
}
  4064fe:	2000      	movs	r0, #0
  406500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406502:	bf00      	nop
  406504:	0040f8f4 	.word	0x0040f8f4
  406508:	00407df1 	.word	0x00407df1
  40650c:	0040f91c 	.word	0x0040f91c
  406510:	00404ff5 	.word	0x00404ff5
  406514:	0040f930 	.word	0x0040f930
  406518:	00407d2d 	.word	0x00407d2d
  40651c:	00403dbd 	.word	0x00403dbd
  406520:	00402925 	.word	0x00402925
  406524:	0040f940 	.word	0x0040f940
  406528:	00404f71 	.word	0x00404f71

0040652c <testResetSelfTest>:


uint16_t testResetSelfTest(int iter)
{
  40652c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406530:	b082      	sub	sp, #8
  406532:	4604      	mov	r4, r0
	uint16_t err=0;
	enum errWriteType rwerr = noProtocolErr;
  406534:	2300      	movs	r3, #0
  406536:	f88d 3007 	strb.w	r3, [sp, #7]
	int savediter = iter;

    if (!testIterControl(iter, "testResetSelfTest")) return 0;
  40653a:	491c      	ldr	r1, [pc, #112]	; (4065ac <testResetSelfTest+0x80>)
  40653c:	b280      	uxth	r0, r0
  40653e:	4b1c      	ldr	r3, [pc, #112]	; (4065b0 <testResetSelfTest+0x84>)
  406540:	4798      	blx	r3
  406542:	b918      	cbnz	r0, 40654c <testResetSelfTest+0x20>
		getEvents();
	}
	
    yamMsg("testResetSelfTest Done", err ? yamwait : keepgoin, err); 
	return err;
}
  406544:	2000      	movs	r0, #0
  406546:	b002      	add	sp, #8
  406548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf ("Software invoked self test started \r\n");
  40654c:	4819      	ldr	r0, [pc, #100]	; (4065b4 <testResetSelfTest+0x88>)
  40654e:	4b1a      	ldr	r3, [pc, #104]	; (4065b8 <testResetSelfTest+0x8c>)
  406550:	4798      	blx	r3
	selftestDisable(true);
  406552:	2001      	movs	r0, #1
  406554:	4b19      	ldr	r3, [pc, #100]	; (4065bc <testResetSelfTest+0x90>)
  406556:	4798      	blx	r3
	uint16_t  test = ReadReg (0x0E, &rwerr);
  406558:	f10d 0107 	add.w	r1, sp, #7
  40655c:	200e      	movs	r0, #14
  40655e:	4b18      	ldr	r3, [pc, #96]	; (4065c0 <testResetSelfTest+0x94>)
  406560:	4798      	blx	r3
	printf(" ST Disable Register:  %04X \r\n", test);
  406562:	b281      	uxth	r1, r0
  406564:	4817      	ldr	r0, [pc, #92]	; (4065c4 <testResetSelfTest+0x98>)
  406566:	4b18      	ldr	r3, [pc, #96]	; (4065c8 <testResetSelfTest+0x9c>)
  406568:	4798      	blx	r3
	for ( ; iter; iter--)  { printf("Soft Reset Iteration %d\r\n", iter);
  40656a:	b1cc      	cbz	r4, 4065a0 <testResetSelfTest+0x74>
  40656c:	4625      	mov	r5, r4
  40656e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4065e0 <testResetSelfTest+0xb4>
  406572:	4f15      	ldr	r7, [pc, #84]	; (4065c8 <testResetSelfTest+0x9c>)
		resetChip(SOFT_RESET);
  406574:	4e15      	ldr	r6, [pc, #84]	; (4065cc <testResetSelfTest+0xa0>)
	for ( ; iter; iter--)  { printf("Soft Reset Iteration %d\r\n", iter);
  406576:	4629      	mov	r1, r5
  406578:	4640      	mov	r0, r8
  40657a:	47b8      	blx	r7
		resetChip(SOFT_RESET);
  40657c:	2002      	movs	r0, #2
  40657e:	47b0      	blx	r6
		getEvents();
  406580:	4b13      	ldr	r3, [pc, #76]	; (4065d0 <testResetSelfTest+0xa4>)
  406582:	4798      	blx	r3
	for ( ; iter; iter--)  { printf("Soft Reset Iteration %d\r\n", iter);
  406584:	3d01      	subs	r5, #1
  406586:	d1f6      	bne.n	406576 <testResetSelfTest+0x4a>
	for ( iter = savediter; iter; iter--)  { printf("Hard Reset Iteration %d\r\n", iter);
  406588:	4f12      	ldr	r7, [pc, #72]	; (4065d4 <testResetSelfTest+0xa8>)
  40658a:	4e0f      	ldr	r6, [pc, #60]	; (4065c8 <testResetSelfTest+0x9c>)
		resetChip(HARD_RESET| SOFT_RESET);
  40658c:	4d0f      	ldr	r5, [pc, #60]	; (4065cc <testResetSelfTest+0xa0>)
	for ( iter = savediter; iter; iter--)  { printf("Hard Reset Iteration %d\r\n", iter);
  40658e:	4621      	mov	r1, r4
  406590:	4638      	mov	r0, r7
  406592:	47b0      	blx	r6
		resetChip(HARD_RESET| SOFT_RESET);
  406594:	2003      	movs	r0, #3
  406596:	47a8      	blx	r5
		getEvents();
  406598:	4b0d      	ldr	r3, [pc, #52]	; (4065d0 <testResetSelfTest+0xa4>)
  40659a:	4798      	blx	r3
	for ( iter = savediter; iter; iter--)  { printf("Hard Reset Iteration %d\r\n", iter);
  40659c:	3c01      	subs	r4, #1
  40659e:	d1f6      	bne.n	40658e <testResetSelfTest+0x62>
    yamMsg("testResetSelfTest Done", err ? yamwait : keepgoin, err); 
  4065a0:	2200      	movs	r2, #0
  4065a2:	2102      	movs	r1, #2
  4065a4:	480c      	ldr	r0, [pc, #48]	; (4065d8 <testResetSelfTest+0xac>)
  4065a6:	4b0d      	ldr	r3, [pc, #52]	; (4065dc <testResetSelfTest+0xb0>)
  4065a8:	4798      	blx	r3
	return err;
  4065aa:	e7cb      	b.n	406544 <testResetSelfTest+0x18>
  4065ac:	0040f76c 	.word	0x0040f76c
  4065b0:	00404ff5 	.word	0x00404ff5
  4065b4:	0040f8f4 	.word	0x0040f8f4
  4065b8:	00407df1 	.word	0x00407df1
  4065bc:	00403dcd 	.word	0x00403dcd
  4065c0:	00403cad 	.word	0x00403cad
  4065c4:	0040f780 	.word	0x0040f780
  4065c8:	00407d2d 	.word	0x00407d2d
  4065cc:	00403d9d 	.word	0x00403d9d
  4065d0:	00402925 	.word	0x00402925
  4065d4:	0040f7bc 	.word	0x0040f7bc
  4065d8:	0040f7d8 	.word	0x0040f7d8
  4065dc:	00404f71 	.word	0x00404f71
  4065e0:	0040f7a0 	.word	0x0040f7a0

004065e4 <testSelfTestAndXfilterRegister>:

uint16_t testSelfTestAndXfilterRegister(int iter)
{
  4065e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4065e8:	b085      	sub	sp, #20
  4065ea:	4604      	mov	r4, r0
  4065ec:	9001      	str	r0, [sp, #4]
	int16_t dis=Bit14, en=0;
	uint16_t  v, yamVal, rrgval;
	uint16_t err=0;
	enum errWriteType rwerr=noProtocolErr;
  4065ee:	2300      	movs	r3, #0
  4065f0:	f88d 300f 	strb.w	r3, [sp, #15]
	uint16_t mask = fSt_dis | fX_flt;
	
    if (!testIterControl(iter, "testSelfTestAndXfilterRegister")) return 0;
  4065f4:	4924      	ldr	r1, [pc, #144]	; (406688 <testSelfTestAndXfilterRegister+0xa4>)
  4065f6:	b280      	uxth	r0, r0
  4065f8:	4b24      	ldr	r3, [pc, #144]	; (40668c <testSelfTestAndXfilterRegister+0xa8>)
  4065fa:	4798      	blx	r3
  4065fc:	2800      	cmp	r0, #0
  4065fe:	d041      	beq.n	406684 <testSelfTestAndXfilterRegister+0xa0>
	
	for (  ; iter ; iter--)
  406600:	2c00      	cmp	r4, #0
  406602:	d03c      	beq.n	40667e <testSelfTestAndXfilterRegister+0x9a>
  406604:	2700      	movs	r7, #0
	{
		printf ("Iter:  %d\r\n", iter);
  406606:	f8df b098 	ldr.w	fp, [pc, #152]	; 4066a0 <testSelfTestAndXfilterRegister+0xbc>
		for (v=0;  v<=0x7FFF; v+=0x100)
		{
			v &= mask;
			//v=0x0000;
			rwerr = WriteReg(X_flt, v);
  40660a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4066a4 <testSelfTestAndXfilterRegister+0xc0>
  40660e:	e020      	b.n	406652 <testSelfTestAndXfilterRegister+0x6e>
		for (v=0;  v<=0x7FFF; v+=0x100)
  406610:	f504 7480 	add.w	r4, r4, #256	; 0x100
  406614:	3e01      	subs	r6, #1
  406616:	d018      	beq.n	40664a <testSelfTestAndXfilterRegister+0x66>
			v &= mask;
  406618:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
			rwerr = WriteReg(X_flt, v);
  40661c:	4621      	mov	r1, r4
  40661e:	4640      	mov	r0, r8
  406620:	47c8      	blx	r9
  406622:	ad04      	add	r5, sp, #16
  406624:	f805 0d01 	strb.w	r0, [r5, #-1]!
			WriteReg(Tr, 0x1234);  //intervening write
  406628:	f241 2134 	movw	r1, #4660	; 0x1234
  40662c:	2017      	movs	r0, #23
  40662e:	47c8      	blx	r9
			yamVal = ReadReg(X_flt, &rwerr);	
  406630:	4629      	mov	r1, r5
  406632:	4640      	mov	r0, r8
  406634:	47d0      	blx	sl
			yamVal &=mask;		
  406636:	f400 42fe 	and.w	r2, r0, #32512	; 0x7f00
			//rrgval = readReg(bX_flt, X_flt);
			//rrgval &=mask;
			if (yamVal != v)
  40663a:	4294      	cmp	r4, r2
  40663c:	d0e8      	beq.n	406610 <testSelfTestAndXfilterRegister+0x2c>
			{
			  printf("[Write, Read, ReadReg]	= %04X, %04X \r\n", v, yamVal);
  40663e:	4621      	mov	r1, r4
  406640:	4813      	ldr	r0, [pc, #76]	; (406690 <testSelfTestAndXfilterRegister+0xac>)
  406642:	47d8      	blx	fp
			 if (yamVal != v) err++;
  406644:	3701      	adds	r7, #1
  406646:	b2bf      	uxth	r7, r7
  406648:	e7e2      	b.n	406610 <testSelfTestAndXfilterRegister+0x2c>
	for (  ; iter ; iter--)
  40664a:	9b01      	ldr	r3, [sp, #4]
  40664c:	3b01      	subs	r3, #1
  40664e:	9301      	str	r3, [sp, #4]
  406650:	d009      	beq.n	406666 <testSelfTestAndXfilterRegister+0x82>
		printf ("Iter:  %d\r\n", iter);
  406652:	9901      	ldr	r1, [sp, #4]
  406654:	480f      	ldr	r0, [pc, #60]	; (406694 <testSelfTestAndXfilterRegister+0xb0>)
  406656:	47d8      	blx	fp
  406658:	2680      	movs	r6, #128	; 0x80
  40665a:	2400      	movs	r4, #0
			rwerr = WriteReg(X_flt, v);
  40665c:	f04f 080e 	mov.w	r8, #14
			yamVal = ReadReg(X_flt, &rwerr);	
  406660:	f8df a044 	ldr.w	sl, [pc, #68]	; 4066a8 <testSelfTestAndXfilterRegister+0xc4>
  406664:	e7d8      	b.n	406618 <testSelfTestAndXfilterRegister+0x34>
			}			
		}		

	}	
    yamMsg("testSelfTestAndXfilterRegister Done", err ? yamwait : keepgoin, err); 
  406666:	2f00      	cmp	r7, #0
  406668:	bf14      	ite	ne
  40666a:	2101      	movne	r1, #1
  40666c:	2102      	moveq	r1, #2
  40666e:	463a      	mov	r2, r7
  406670:	4809      	ldr	r0, [pc, #36]	; (406698 <testSelfTestAndXfilterRegister+0xb4>)
  406672:	4b0a      	ldr	r3, [pc, #40]	; (40669c <testSelfTestAndXfilterRegister+0xb8>)
  406674:	4798      	blx	r3
	return err;
}
  406676:	4638      	mov	r0, r7
  406678:	b005      	add	sp, #20
  40667a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (  ; iter ; iter--)
  40667e:	2700      	movs	r7, #0
    yamMsg("testSelfTestAndXfilterRegister Done", err ? yamwait : keepgoin, err); 
  406680:	2102      	movs	r1, #2
  406682:	e7f4      	b.n	40666e <testSelfTestAndXfilterRegister+0x8a>
    if (!testIterControl(iter, "testSelfTestAndXfilterRegister")) return 0;
  406684:	2700      	movs	r7, #0
  406686:	e7f6      	b.n	406676 <testSelfTestAndXfilterRegister+0x92>
  406688:	0040f82c 	.word	0x0040f82c
  40668c:	00404ff5 	.word	0x00404ff5
  406690:	0040f858 	.word	0x0040f858
  406694:	0040f84c 	.word	0x0040f84c
  406698:	0040f880 	.word	0x0040f880
  40669c:	00404f71 	.word	0x00404f71
  4066a0:	00407d2d 	.word	0x00407d2d
  4066a4:	00403c8d 	.word	0x00403c8d
  4066a8:	00403cad 	.word	0x00403cad

004066ac <testYZfiltReg>:

uint16_t testYZfiltReg(int16_t iter)
{
  4066ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4066b0:	b083      	sub	sp, #12
	uint16_t err = 0;
	enum errWriteType rwerr = noProtocolErr;
  4066b2:	2300      	movs	r3, #0
  4066b4:	f88d 3007 	strb.w	r3, [sp, #7]
	int i;

    if (!testIterControl(iter, "testYZfiltReg")) return 0;
  4066b8:	b284      	uxth	r4, r0
  4066ba:	492b      	ldr	r1, [pc, #172]	; (406768 <testYZfiltReg+0xbc>)
  4066bc:	4620      	mov	r0, r4
  4066be:	4b2b      	ldr	r3, [pc, #172]	; (40676c <testYZfiltReg+0xc0>)
  4066c0:	4798      	blx	r3
  4066c2:	b920      	cbnz	r0, 4066ce <testYZfiltReg+0x22>
  4066c4:	2500      	movs	r5, #0

  //  printf("Test YZ Filter Register test done"); if (err) { printf ("Enter any key "); getchar(); printf("thanks \r\n"); }
//	yamMsg(tbuf, err ? yamwait : keepgoin);
	yamMsg("Test YZ Filter Register test done", err ? yamwait : keepgoin, err);
	return err;	
}
  4066c6:	4628      	mov	r0, r5
  4066c8:	b003      	add	sp, #12
  4066ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	yamMsg("Testing YZ Filter Register", keepgoin, 0);
  4066ce:	2200      	movs	r2, #0
  4066d0:	2102      	movs	r1, #2
  4066d2:	4827      	ldr	r0, [pc, #156]	; (406770 <testYZfiltReg+0xc4>)
  4066d4:	4b27      	ldr	r3, [pc, #156]	; (406774 <testYZfiltReg+0xc8>)
  4066d6:	4798      	blx	r3
  4066d8:	3c01      	subs	r4, #1
  4066da:	fa1f fb84 	uxth.w	fp, r4
	uint16_t err = 0;
  4066de:	2500      	movs	r5, #0
		sprintf(tbuf, "iter: %d ", iter);
  4066e0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 40678c <testYZfiltReg+0xe0>
  4066e4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 406790 <testYZfiltReg+0xe4>
	for (;iter--;)
  4066e8:	e020      	b.n	40672c <testYZfiltReg+0x80>
		for (i= 0; i < (int) Bit12; i++)
  4066ea:	3401      	adds	r4, #1
  4066ec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4066f0:	d018      	beq.n	406724 <testYZfiltReg+0x78>
			rwerr = WriteReg(Y_flt, i);
  4066f2:	b2a1      	uxth	r1, r4
  4066f4:	4630      	mov	r0, r6
  4066f6:	47c8      	blx	r9
  4066f8:	a902      	add	r1, sp, #8
  4066fa:	f801 0d01 	strb.w	r0, [r1, #-1]!
			temp = ReadReg(Y_flt, &rwerr);
  4066fe:	4630      	mov	r0, r6
  406700:	47b8      	blx	r7
  406702:	4b1d      	ldr	r3, [pc, #116]	; (406778 <testYZfiltReg+0xcc>)
  406704:	8018      	strh	r0, [r3, #0]
			if (i != temp)
  406706:	b283      	uxth	r3, r0
  406708:	42a3      	cmp	r3, r4
  40670a:	d0ee      	beq.n	4066ea <testYZfiltReg+0x3e>
				sprintf(tbuf, "i: %04X  Tr: %04X \r\n", i, temp) ;
  40670c:	4622      	mov	r2, r4
  40670e:	491b      	ldr	r1, [pc, #108]	; (40677c <testYZfiltReg+0xd0>)
  406710:	4640      	mov	r0, r8
  406712:	47d0      	blx	sl
				err++;
  406714:	3501      	adds	r5, #1
  406716:	b2ad      	uxth	r5, r5
				yamMsg(tbuf, keepgoin, err);
  406718:	462a      	mov	r2, r5
  40671a:	2102      	movs	r1, #2
  40671c:	4640      	mov	r0, r8
  40671e:	4b15      	ldr	r3, [pc, #84]	; (406774 <testYZfiltReg+0xc8>)
  406720:	4798      	blx	r3
  406722:	e7e2      	b.n	4066ea <testYZfiltReg+0x3e>
  406724:	f10b 3bff 	add.w	fp, fp, #4294967295
  406728:	fa1f fb8b 	uxth.w	fp, fp
	for (;iter--;)
  40672c:	fa0f f28b 	sxth.w	r2, fp
  406730:	f64f 73ff 	movw	r3, #65535	; 0xffff
  406734:	459b      	cmp	fp, r3
  406736:	d00d      	beq.n	406754 <testYZfiltReg+0xa8>
		sprintf(tbuf, "iter: %d ", iter);
  406738:	4911      	ldr	r1, [pc, #68]	; (406780 <testYZfiltReg+0xd4>)
  40673a:	4640      	mov	r0, r8
  40673c:	47d0      	blx	sl
		yamMsg(tbuf, keepgoin, 0);
  40673e:	2200      	movs	r2, #0
  406740:	2102      	movs	r1, #2
  406742:	4640      	mov	r0, r8
  406744:	4b0b      	ldr	r3, [pc, #44]	; (406774 <testYZfiltReg+0xc8>)
  406746:	4798      	blx	r3
		for (i= 0; i < (int) Bit12; i++)
  406748:	2400      	movs	r4, #0
			rwerr = WriteReg(Y_flt, i);
  40674a:	260c      	movs	r6, #12
  40674c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 406794 <testYZfiltReg+0xe8>
			temp = ReadReg(Y_flt, &rwerr);
  406750:	4f0c      	ldr	r7, [pc, #48]	; (406784 <testYZfiltReg+0xd8>)
  406752:	e7ce      	b.n	4066f2 <testYZfiltReg+0x46>
	yamMsg("Test YZ Filter Register test done", err ? yamwait : keepgoin, err);
  406754:	2d00      	cmp	r5, #0
  406756:	462a      	mov	r2, r5
  406758:	bf14      	ite	ne
  40675a:	2101      	movne	r1, #1
  40675c:	2102      	moveq	r1, #2
  40675e:	480a      	ldr	r0, [pc, #40]	; (406788 <testYZfiltReg+0xdc>)
  406760:	4b04      	ldr	r3, [pc, #16]	; (406774 <testYZfiltReg+0xc8>)
  406762:	4798      	blx	r3
	return err;	
  406764:	e7af      	b.n	4066c6 <testYZfiltReg+0x1a>
  406766:	bf00      	nop
  406768:	0040f8a4 	.word	0x0040f8a4
  40676c:	00404ff5 	.word	0x00404ff5
  406770:	0040f8b4 	.word	0x0040f8b4
  406774:	00404f71 	.word	0x00404f71
  406778:	2001a110 	.word	0x2001a110
  40677c:	0040f544 	.word	0x0040f544
  406780:	0040f50c 	.word	0x0040f50c
  406784:	00403cad 	.word	0x00403cad
  406788:	0040f8d0 	.word	0x0040f8d0
  40678c:	2001a0ac 	.word	0x2001a0ac
  406790:	00407fd5 	.word	0x00407fd5
  406794:	00403c8d 	.word	0x00403c8d

00406798 <testSMEreg>:


uint16_t testSMEreg(int16_t iter)
{
  406798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40679c:	b083      	sub	sp, #12
	uint16_t err = 0;
	enum errWriteType rwerr = noProtocolErr;
  40679e:	2300      	movs	r3, #0
  4067a0:	f88d 3007 	strb.w	r3, [sp, #7]
	uint16_t j = 1;
	int i;

    if (!testIterControl(iter, "testSMEreg")) return 0;
  4067a4:	b284      	uxth	r4, r0
  4067a6:	4940      	ldr	r1, [pc, #256]	; (4068a8 <testSMEreg+0x110>)
  4067a8:	4620      	mov	r0, r4
  4067aa:	4b40      	ldr	r3, [pc, #256]	; (4068ac <testSMEreg+0x114>)
  4067ac:	4798      	blx	r3
  4067ae:	2800      	cmp	r0, #0
  4067b0:	d075      	beq.n	40689e <testSMEreg+0x106>
  4067b2:	3c01      	subs	r4, #1
  4067b4:	fa1f f984 	uxth.w	r9, r4
	
	for (;iter--;)
	{
		sprintf(tbuf, "iter: %d ", iter);
  4067b8:	4d3d      	ldr	r5, [pc, #244]	; (4068b0 <testSMEreg+0x118>)
  4067ba:	f8df 8114 	ldr.w	r8, [pc, #276]	; 4068d0 <testSMEreg+0x138>
	for (;iter--;)
  4067be:	fa0f f289 	sxth.w	r2, r9
  4067c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4067c6:	4599      	cmp	r9, r3
  4067c8:	d061      	beq.n	40688e <testSMEreg+0xf6>
		sprintf(tbuf, "iter: %d ", iter);
  4067ca:	493a      	ldr	r1, [pc, #232]	; (4068b4 <testSMEreg+0x11c>)
  4067cc:	4628      	mov	r0, r5
  4067ce:	47c0      	blx	r8
		yamMsg(tbuf, keepgoin, 0);
  4067d0:	2200      	movs	r2, #0
  4067d2:	2102      	movs	r1, #2
  4067d4:	4628      	mov	r0, r5
  4067d6:	4b38      	ldr	r3, [pc, #224]	; (4068b8 <testSMEreg+0x120>)
  4067d8:	4798      	blx	r3

		for (i=0; i<16; i++)
  4067da:	2400      	movs	r4, #0
		{
			WriteReg(Y_flt, i);
  4067dc:	4f37      	ldr	r7, [pc, #220]	; (4068bc <testSMEreg+0x124>)
			WriteReg(X_flt, 0x1234);
			temp = ReadReg(SMen1, &rwerr);			
  4067de:	f04f 0a11 	mov.w	sl, #17
  4067e2:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 4068d4 <testSMEreg+0x13c>
			WriteReg(Y_flt, i);
  4067e6:	b2a1      	uxth	r1, r4
  4067e8:	200c      	movs	r0, #12
  4067ea:	47b8      	blx	r7
			WriteReg(X_flt, 0x1234);
  4067ec:	f241 2134 	movw	r1, #4660	; 0x1234
  4067f0:	200e      	movs	r0, #14
  4067f2:	47b8      	blx	r7
			temp = ReadReg(SMen1, &rwerr);			
  4067f4:	f10d 0107 	add.w	r1, sp, #7
  4067f8:	4650      	mov	r0, sl
  4067fa:	47d8      	blx	fp
  4067fc:	4e30      	ldr	r6, [pc, #192]	; (4068c0 <testSMEreg+0x128>)
  4067fe:	8030      	strh	r0, [r6, #0]
			sprintf(tbuf, "i: %04X  SME: %04X \r\n", i, temp) ;
  406800:	b283      	uxth	r3, r0
  406802:	4622      	mov	r2, r4
  406804:	492f      	ldr	r1, [pc, #188]	; (4068c4 <testSMEreg+0x12c>)
  406806:	4628      	mov	r0, r5
  406808:	47c0      	blx	r8
			yamMsg(tbuf, keepgoin, 0);
  40680a:	2200      	movs	r2, #0
  40680c:	2102      	movs	r1, #2
  40680e:	4628      	mov	r0, r5
  406810:	4b29      	ldr	r3, [pc, #164]	; (4068b8 <testSMEreg+0x120>)
  406812:	4798      	blx	r3
			//	err++;
			j=1<<i;
  406814:	2101      	movs	r1, #1
  406816:	fa01 f304 	lsl.w	r3, r1, r4
			temp &= (~j);
  40681a:	8831      	ldrh	r1, [r6, #0]
  40681c:	ea21 0103 	bic.w	r1, r1, r3
  406820:	8031      	strh	r1, [r6, #0]
			rwerr = WriteReg(SMen1, temp);		
  406822:	4650      	mov	r0, sl
  406824:	47b8      	blx	r7
  406826:	f88d 0007 	strb.w	r0, [sp, #7]
		for (i=0; i<16; i++)
  40682a:	3401      	adds	r4, #1
  40682c:	2c10      	cmp	r4, #16
  40682e:	d1da      	bne.n	4067e6 <testSMEreg+0x4e>
  406830:	2400      	movs	r4, #0
		}

		for (i=0, j=0; i<16; i++)
		{
			WriteReg(Y_flt, i);
  406832:	4f22      	ldr	r7, [pc, #136]	; (4068bc <testSMEreg+0x124>)
			WriteReg(X_flt, 0x1234);
			temp = ReadReg(SMen1, &rwerr);			
  406834:	f04f 0a11 	mov.w	sl, #17
  406838:	f8df b098 	ldr.w	fp, [pc, #152]	; 4068d4 <testSMEreg+0x13c>
			WriteReg(Y_flt, i);
  40683c:	b2a1      	uxth	r1, r4
  40683e:	200c      	movs	r0, #12
  406840:	47b8      	blx	r7
			WriteReg(X_flt, 0x1234);
  406842:	f241 2134 	movw	r1, #4660	; 0x1234
  406846:	200e      	movs	r0, #14
  406848:	47b8      	blx	r7
			temp = ReadReg(SMen1, &rwerr);			
  40684a:	f10d 0107 	add.w	r1, sp, #7
  40684e:	4650      	mov	r0, sl
  406850:	47d8      	blx	fp
  406852:	4e1b      	ldr	r6, [pc, #108]	; (4068c0 <testSMEreg+0x128>)
  406854:	8030      	strh	r0, [r6, #0]
			sprintf(tbuf, "i: %04X  SME: %04X \r\n", i, temp) ;
  406856:	b283      	uxth	r3, r0
  406858:	4622      	mov	r2, r4
  40685a:	491a      	ldr	r1, [pc, #104]	; (4068c4 <testSMEreg+0x12c>)
  40685c:	4628      	mov	r0, r5
  40685e:	47c0      	blx	r8
			yamMsg(tbuf, keepgoin, 0);
  406860:	2200      	movs	r2, #0
  406862:	2102      	movs	r1, #2
  406864:	4628      	mov	r0, r5
  406866:	4b14      	ldr	r3, [pc, #80]	; (4068b8 <testSMEreg+0x120>)
  406868:	4798      	blx	r3
			//	err++;
			j=1<<i;
  40686a:	2101      	movs	r1, #1
  40686c:	40a1      	lsls	r1, r4
			temp |= j;
  40686e:	8833      	ldrh	r3, [r6, #0]
  406870:	4319      	orrs	r1, r3
  406872:	b289      	uxth	r1, r1
  406874:	8031      	strh	r1, [r6, #0]
			rwerr = WriteReg(SMen1, temp);		
  406876:	4650      	mov	r0, sl
  406878:	47b8      	blx	r7
  40687a:	f88d 0007 	strb.w	r0, [sp, #7]
		for (i=0, j=0; i<16; i++)
  40687e:	3401      	adds	r4, #1
  406880:	2c10      	cmp	r4, #16
  406882:	d1db      	bne.n	40683c <testSMEreg+0xa4>
  406884:	f109 39ff 	add.w	r9, r9, #4294967295
  406888:	fa1f f989 	uxth.w	r9, r9
  40688c:	e797      	b.n	4067be <testSMEreg+0x26>
		}
	}
	
	bankselect(0);
  40688e:	2000      	movs	r0, #0
  406890:	4b0d      	ldr	r3, [pc, #52]	; (4068c8 <testSMEreg+0x130>)
  406892:	4798      	blx	r3
	yamMsg("SME Register test done", err ? yamwait : keepgoin, err);
  406894:	2200      	movs	r2, #0
  406896:	2102      	movs	r1, #2
  406898:	480c      	ldr	r0, [pc, #48]	; (4068cc <testSMEreg+0x134>)
  40689a:	4b07      	ldr	r3, [pc, #28]	; (4068b8 <testSMEreg+0x120>)
  40689c:	4798      	blx	r3

	return err;	


}
  40689e:	2000      	movs	r0, #0
  4068a0:	b003      	add	sp, #12
  4068a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4068a6:	bf00      	nop
  4068a8:	0040f7f0 	.word	0x0040f7f0
  4068ac:	00404ff5 	.word	0x00404ff5
  4068b0:	2001a0ac 	.word	0x2001a0ac
  4068b4:	0040f50c 	.word	0x0040f50c
  4068b8:	00404f71 	.word	0x00404f71
  4068bc:	00403c8d 	.word	0x00403c8d
  4068c0:	2001a110 	.word	0x2001a110
  4068c4:	0040f7fc 	.word	0x0040f7fc
  4068c8:	00403d71 	.word	0x00403d71
  4068cc:	0040f814 	.word	0x0040f814
  4068d0:	00407fd5 	.word	0x00407fd5
  4068d4:	00403cad 	.word	0x00403cad

004068d8 <TestMain>:
int testGyroFilterbyNoisecount = 1;


// Test launcher
void TestMain()
{
  4068d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err=0;
	initBSP(boardSPIRev);	
  4068dc:	2001      	movs	r0, #1
  4068de:	4b41      	ldr	r3, [pc, #260]	; (4069e4 <TestMain+0x10c>)
  4068e0:	4798      	blx	r3
	IAM20685_chipunlock_PRM();
  4068e2:	4b41      	ldr	r3, [pc, #260]	; (4069e8 <TestMain+0x110>)
  4068e4:	4798      	blx	r3
	IAM20685_writeunlock_PRM();
  4068e6:	4b41      	ldr	r3, [pc, #260]	; (4069ec <TestMain+0x114>)
  4068e8:	4798      	blx	r3
delay_ms(100);
  4068ea:	4841      	ldr	r0, [pc, #260]	; (4069f0 <TestMain+0x118>)
  4068ec:	4b41      	ldr	r3, [pc, #260]	; (4069f4 <TestMain+0x11c>)
  4068ee:	4798      	blx	r3
 
 enableProtocolHistory(true);
  4068f0:	2001      	movs	r0, #1
  4068f2:	4d41      	ldr	r5, [pc, #260]	; (4069f8 <TestMain+0x120>)
  4068f4:	47a8      	blx	r5
   err +=  TestAccelFilterbyNoise(testAccelFilterbyNoisecount);
  4068f6:	4b41      	ldr	r3, [pc, #260]	; (4069fc <TestMain+0x124>)
  4068f8:	6818      	ldr	r0, [r3, #0]
  4068fa:	4b41      	ldr	r3, [pc, #260]	; (406a00 <TestMain+0x128>)
  4068fc:	4798      	blx	r3
  4068fe:	4604      	mov	r4, r0
   err +=  TestGyroFilterbyNoise(testGyroFilterbyNoisecount);
  406900:	4b40      	ldr	r3, [pc, #256]	; (406a04 <TestMain+0x12c>)
  406902:	6818      	ldr	r0, [r3, #0]
  406904:	4b40      	ldr	r3, [pc, #256]	; (406a08 <TestMain+0x130>)
  406906:	4798      	blx	r3
  406908:	4404      	add	r4, r0
  enableProtocolHistory(false);
  40690a:	2000      	movs	r0, #0
  40690c:	47a8      	blx	r5
	
	 
	 err +=	AccelFSRtest(testAccelFSRcount);
  40690e:	4b3f      	ldr	r3, [pc, #252]	; (406a0c <TestMain+0x134>)
  406910:	6818      	ldr	r0, [r3, #0]
  406912:	4b3f      	ldr	r3, [pc, #252]	; (406a10 <TestMain+0x138>)
  406914:	4798      	blx	r3
  406916:	4404      	add	r4, r0
		 err += IDTest(testIDcount);
  406918:	f8df 8164 	ldr.w	r8, [pc, #356]	; 406a80 <TestMain+0x1a8>
  40691c:	f8d8 0000 	ldr.w	r0, [r8]
  406920:	4f3c      	ldr	r7, [pc, #240]	; (406a14 <TestMain+0x13c>)
  406922:	47b8      	blx	r7
  406924:	4404      	add	r4, r0
   err += testYZfiltReg(testYZfiltRegcount);
  406926:	f8df a15c 	ldr.w	sl, [pc, #348]	; 406a84 <TestMain+0x1ac>
  40692a:	f9ba 0000 	ldrsh.w	r0, [sl]
  40692e:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406a88 <TestMain+0x1b0>
  406932:	47c8      	blx	r9
  406934:	4404      	add	r4, r0

	err += TestTestReg(testTestRegcount);
  406936:	4e38      	ldr	r6, [pc, #224]	; (406a18 <TestMain+0x140>)
  406938:	6830      	ldr	r0, [r6, #0]
  40693a:	4d38      	ldr	r5, [pc, #224]	; (406a1c <TestMain+0x144>)
  40693c:	47a8      	blx	r5
  40693e:	4404      	add	r4, r0

err += testPowerupResetRegTest(testpowerupResetRegcount);
  406940:	4b37      	ldr	r3, [pc, #220]	; (406a20 <TestMain+0x148>)
  406942:	6818      	ldr	r0, [r3, #0]
  406944:	4b37      	ldr	r3, [pc, #220]	; (406a24 <TestMain+0x14c>)
  406946:	4798      	blx	r3
  406948:	4404      	add	r4, r0
   err += testYZfiltReg(testYZfiltRegcount);
  40694a:	f9ba 0000 	ldrsh.w	r0, [sl]
  40694e:	47c8      	blx	r9
  406950:	4404      	add	r4, r0
	err += TestTestReg(testTestRegcount);
  406952:	6830      	ldr	r0, [r6, #0]
  406954:	47a8      	blx	r5
  406956:	4404      	add	r4, r0

	err += TestWhoAmI(FIXEDYAM, testWhoAmIcount);
  406958:	4e33      	ldr	r6, [pc, #204]	; (406a28 <TestMain+0x150>)
  40695a:	6831      	ldr	r1, [r6, #0]
  40695c:	f64a 2055 	movw	r0, #43605	; 0xaa55
  406960:	4d32      	ldr	r5, [pc, #200]	; (406a2c <TestMain+0x154>)
  406962:	47a8      	blx	r5
  406964:	4404      	add	r4, r0
	err += testSMEreg(testSMEregcount);
  406966:	4b32      	ldr	r3, [pc, #200]	; (406a30 <TestMain+0x158>)
  406968:	f9b3 0000 	ldrsh.w	r0, [r3]
  40696c:	4b31      	ldr	r3, [pc, #196]	; (406a34 <TestMain+0x15c>)
  40696e:	4798      	blx	r3
  406970:	4404      	add	r4, r0
	err += IDTest(testIDcount);
  406972:	f8d8 0000 	ldr.w	r0, [r8]
  406976:	47b8      	blx	r7
  406978:	4404      	add	r4, r0
	
	err += testSelfTestAndXfilterRegister(testSelfTestAndXfilterRegistercount);
  40697a:	4b2f      	ldr	r3, [pc, #188]	; (406a38 <TestMain+0x160>)
  40697c:	6818      	ldr	r0, [r3, #0]
  40697e:	4b2f      	ldr	r3, [pc, #188]	; (406a3c <TestMain+0x164>)
  406980:	4798      	blx	r3
  406982:	4404      	add	r4, r0
	err += testpowerUpSelfTest(testpowerupSelfTestcount);
  406984:	4b2e      	ldr	r3, [pc, #184]	; (406a40 <TestMain+0x168>)
  406986:	6818      	ldr	r0, [r3, #0]
  406988:	4b2e      	ldr	r3, [pc, #184]	; (406a44 <TestMain+0x16c>)
  40698a:	4798      	blx	r3
  40698c:	4404      	add	r4, r0
	err += testnowdoSelfTest(testnowdoSelfTestcount);
  40698e:	4b2e      	ldr	r3, [pc, #184]	; (406a48 <TestMain+0x170>)
  406990:	6818      	ldr	r0, [r3, #0]
  406992:	4b2e      	ldr	r3, [pc, #184]	; (406a4c <TestMain+0x174>)
  406994:	4798      	blx	r3
  406996:	4404      	add	r4, r0
	err += testResetSelfTest(testResetSelfTestcount);
  406998:	4b2d      	ldr	r3, [pc, #180]	; (406a50 <TestMain+0x178>)
  40699a:	6818      	ldr	r0, [r3, #0]
  40699c:	4b2d      	ldr	r3, [pc, #180]	; (406a54 <TestMain+0x17c>)
  40699e:	4798      	blx	r3
  4069a0:	4404      	add	r4, r0
	err += AccelNormtest(testAccelNormcount);
  4069a2:	4b2d      	ldr	r3, [pc, #180]	; (406a58 <TestMain+0x180>)
  4069a4:	6818      	ldr	r0, [r3, #0]
  4069a6:	4b2d      	ldr	r3, [pc, #180]	; (406a5c <TestMain+0x184>)
  4069a8:	4798      	blx	r3
  4069aa:	4404      	add	r4, r0
	err += LrAccelTestbydiff(testLrAccelcount);
  4069ac:	4b2c      	ldr	r3, [pc, #176]	; (406a60 <TestMain+0x188>)
  4069ae:	6818      	ldr	r0, [r3, #0]
  4069b0:	4b2c      	ldr	r3, [pc, #176]	; (406a64 <TestMain+0x18c>)
  4069b2:	4798      	blx	r3
  4069b4:	4404      	add	r4, r0
	err += TestTempSensor(testTempSensorcount);
  4069b6:	4b2c      	ldr	r3, [pc, #176]	; (406a68 <TestMain+0x190>)
  4069b8:	6818      	ldr	r0, [r3, #0]
  4069ba:	4b2c      	ldr	r3, [pc, #176]	; (406a6c <TestMain+0x194>)
  4069bc:	4798      	blx	r3
  4069be:	4404      	add	r4, r0
	err += TestWhoAmI(FIXEDYAM, testWhoAmIcount);
  4069c0:	6831      	ldr	r1, [r6, #0]
  4069c2:	f64a 2055 	movw	r0, #43605	; 0xaa55
  4069c6:	47a8      	blx	r5
  4069c8:	4404      	add	r4, r0
	
	
	sprintf(tbuf, "Total Number of Errors:  %d", err);	
  4069ca:	4d29      	ldr	r5, [pc, #164]	; (406a70 <TestMain+0x198>)
  4069cc:	4622      	mov	r2, r4
  4069ce:	4929      	ldr	r1, [pc, #164]	; (406a74 <TestMain+0x19c>)
  4069d0:	4628      	mov	r0, r5
  4069d2:	4b29      	ldr	r3, [pc, #164]	; (406a78 <TestMain+0x1a0>)
  4069d4:	4798      	blx	r3
    yamMsg(tbuf, keepgoin, err);
  4069d6:	4622      	mov	r2, r4
  4069d8:	2102      	movs	r1, #2
  4069da:	4628      	mov	r0, r5
  4069dc:	4b27      	ldr	r3, [pc, #156]	; (406a7c <TestMain+0x1a4>)
  4069de:	4798      	blx	r3
  4069e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4069e4:	00401fb1 	.word	0x00401fb1
  4069e8:	00403049 	.word	0x00403049
  4069ec:	004030b5 	.word	0x004030b5
  4069f0:	000d141e 	.word	0x000d141e
  4069f4:	20000001 	.word	0x20000001
  4069f8:	00403a29 	.word	0x00403a29
  4069fc:	2000034c 	.word	0x2000034c
  406a00:	00405a11 	.word	0x00405a11
  406a04:	20000354 	.word	0x20000354
  406a08:	00405b79 	.word	0x00405b79
  406a0c:	20000348 	.word	0x20000348
  406a10:	00405cf9 	.word	0x00405cf9
  406a14:	004062bd 	.word	0x004062bd
  406a18:	20000368 	.word	0x20000368
  406a1c:	00405041 	.word	0x00405041
  406a20:	2001a120 	.word	0x2001a120
  406a24:	004061b1 	.word	0x004061b1
  406a28:	2000036c 	.word	0x2000036c
  406a2c:	00405189 	.word	0x00405189
  406a30:	20000360 	.word	0x20000360
  406a34:	00406799 	.word	0x00406799
  406a38:	2001a118 	.word	0x2001a118
  406a3c:	004065e5 	.word	0x004065e5
  406a40:	2001a124 	.word	0x2001a124
  406a44:	0040647d 	.word	0x0040647d
  406a48:	2001a11c 	.word	0x2001a11c
  406a4c:	004064c9 	.word	0x004064c9
  406a50:	2001a114 	.word	0x2001a114
  406a54:	0040652d 	.word	0x0040652d
  406a58:	20000350 	.word	0x20000350
  406a5c:	00405f91 	.word	0x00405f91
  406a60:	2000035c 	.word	0x2000035c
  406a64:	004053d1 	.word	0x004053d1
  406a68:	20000364 	.word	0x20000364
  406a6c:	00405259 	.word	0x00405259
  406a70:	2001a0ac 	.word	0x2001a0ac
  406a74:	0040f45c 	.word	0x0040f45c
  406a78:	00407fd5 	.word	0x00407fd5
  406a7c:	00404f71 	.word	0x00404f71
  406a80:	20000358 	.word	0x20000358
  406a84:	20000370 	.word	0x20000370
  406a88:	004066ad 	.word	0x004066ad

00406a8c <vMainTask>:
	
	vTaskStartScheduler();	
}

void vMainTask(void* pvParameters)
{
  406a8c:	b508      	push	{r3, lr}
	
	while(1)
	{
		printf("\r\n 1: Testmain 3: Original, 5: Modified,   9: PRM \r\n");
  406a8e:	4e03      	ldr	r6, [pc, #12]	; (406a9c <vMainTask+0x10>)
  406a90:	4d03      	ldr	r5, [pc, #12]	; (406aa0 <vMainTask+0x14>)
		processUartData();
  406a92:	4c04      	ldr	r4, [pc, #16]	; (406aa4 <vMainTask+0x18>)
		printf("\r\n 1: Testmain 3: Original, 5: Modified,   9: PRM \r\n");
  406a94:	4630      	mov	r0, r6
  406a96:	47a8      	blx	r5
		processUartData();
  406a98:	47a0      	blx	r4
  406a9a:	e7fb      	b.n	406a94 <vMainTask+0x8>
  406a9c:	0040f9fc 	.word	0x0040f9fc
  406aa0:	00407df1 	.word	0x00407df1
  406aa4:	00401fed 	.word	0x00401fed

00406aa8 <vSensorIntPB03Task>:
			xSemaphoreGive(sema_main_tx_uart);
	}
}

void vSensorIntPB03Task(void* pvParameters)
{
  406aa8:	b508      	push	{r3, lr}
	sema_sensor_int_pb03 = xSemaphoreCreateBinary();
  406aaa:	2203      	movs	r2, #3
  406aac:	2100      	movs	r1, #0
  406aae:	2001      	movs	r0, #1
  406ab0:	4b06      	ldr	r3, [pc, #24]	; (406acc <vSensorIntPB03Task+0x24>)
  406ab2:	4798      	blx	r3
  406ab4:	4b06      	ldr	r3, [pc, #24]	; (406ad0 <vSensorIntPB03Task+0x28>)
  406ab6:	6018      	str	r0, [r3, #0]
	while(1)
	{
		xSemaphoreTake(sema_sensor_int_pb03, portMAX_DELAY);
  406ab8:	461e      	mov	r6, r3
  406aba:	2500      	movs	r5, #0
  406abc:	4c05      	ldr	r4, [pc, #20]	; (406ad4 <vSensorIntPB03Task+0x2c>)
  406abe:	462b      	mov	r3, r5
  406ac0:	f04f 32ff 	mov.w	r2, #4294967295
  406ac4:	4629      	mov	r1, r5
  406ac6:	6830      	ldr	r0, [r6, #0]
  406ac8:	47a0      	blx	r4
  406aca:	e7f8      	b.n	406abe <vSensorIntPB03Task+0x16>
  406acc:	00400dfd 	.word	0x00400dfd
  406ad0:	2002224c 	.word	0x2002224c
  406ad4:	00401091 	.word	0x00401091

00406ad8 <main>:
{
  406ad8:	b570      	push	{r4, r5, r6, lr}
  406ada:	b084      	sub	sp, #16
	sysclk_init();
  406adc:	4b1a      	ldr	r3, [pc, #104]	; (406b48 <main+0x70>)
  406ade:	4798      	blx	r3
	board_init();
  406ae0:	4b1a      	ldr	r3, [pc, #104]	; (406b4c <main+0x74>)
  406ae2:	4798      	blx	r3
	configure_console();
  406ae4:	4b1a      	ldr	r3, [pc, #104]	; (406b50 <main+0x78>)
  406ae6:	4798      	blx	r3
	sema_main_rx_uart = xSemaphoreCreateBinary();
  406ae8:	2203      	movs	r2, #3
  406aea:	2100      	movs	r1, #0
  406aec:	2001      	movs	r0, #1
  406aee:	4c19      	ldr	r4, [pc, #100]	; (406b54 <main+0x7c>)
  406af0:	47a0      	blx	r4
  406af2:	4b19      	ldr	r3, [pc, #100]	; (406b58 <main+0x80>)
  406af4:	6018      	str	r0, [r3, #0]
	sema_main_tx_uart = xSemaphoreCreateBinary();
  406af6:	2203      	movs	r2, #3
  406af8:	2100      	movs	r1, #0
  406afa:	2001      	movs	r0, #1
  406afc:	47a0      	blx	r4
  406afe:	4b17      	ldr	r3, [pc, #92]	; (406b5c <main+0x84>)
  406b00:	6018      	str	r0, [r3, #0]
	p_pdc = usart_get_pdc_base(CONF_UART);
  406b02:	4817      	ldr	r0, [pc, #92]	; (406b60 <main+0x88>)
  406b04:	4b17      	ldr	r3, [pc, #92]	; (406b64 <main+0x8c>)
  406b06:	4798      	blx	r3
  406b08:	4b17      	ldr	r3, [pc, #92]	; (406b68 <main+0x90>)
  406b0a:	6018      	str	r0, [r3, #0]
	xTaskCreate( vMainTask  , "vMainTask"   , configMINIMAL_STACK_SIZE+1024, NULL, tskIDLE_PRIORITY+1, &xMainTask);
  406b0c:	2400      	movs	r4, #0
  406b0e:	9403      	str	r4, [sp, #12]
  406b10:	9402      	str	r4, [sp, #8]
  406b12:	4b16      	ldr	r3, [pc, #88]	; (406b6c <main+0x94>)
  406b14:	9301      	str	r3, [sp, #4]
  406b16:	2601      	movs	r6, #1
  406b18:	9600      	str	r6, [sp, #0]
  406b1a:	4623      	mov	r3, r4
  406b1c:	f240 4282 	movw	r2, #1154	; 0x482
  406b20:	4913      	ldr	r1, [pc, #76]	; (406b70 <main+0x98>)
  406b22:	4814      	ldr	r0, [pc, #80]	; (406b74 <main+0x9c>)
  406b24:	4d14      	ldr	r5, [pc, #80]	; (406b78 <main+0xa0>)
  406b26:	47a8      	blx	r5
	xTaskCreate( vSensorIntPB03Task  , "vSensorIntPB03Task"   , configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, &xSensorIntPB03Task);
  406b28:	9403      	str	r4, [sp, #12]
  406b2a:	9402      	str	r4, [sp, #8]
  406b2c:	4b13      	ldr	r3, [pc, #76]	; (406b7c <main+0xa4>)
  406b2e:	9301      	str	r3, [sp, #4]
  406b30:	9600      	str	r6, [sp, #0]
  406b32:	4623      	mov	r3, r4
  406b34:	2282      	movs	r2, #130	; 0x82
  406b36:	4912      	ldr	r1, [pc, #72]	; (406b80 <main+0xa8>)
  406b38:	4812      	ldr	r0, [pc, #72]	; (406b84 <main+0xac>)
  406b3a:	47a8      	blx	r5
	vTaskStartScheduler();	
  406b3c:	4b12      	ldr	r3, [pc, #72]	; (406b88 <main+0xb0>)
  406b3e:	4798      	blx	r3
}
  406b40:	4620      	mov	r0, r4
  406b42:	b004      	add	sp, #16
  406b44:	bd70      	pop	{r4, r5, r6, pc}
  406b46:	bf00      	nop
  406b48:	0040470d 	.word	0x0040470d
  406b4c:	004047bd 	.word	0x004047bd
  406b50:	004043a1 	.word	0x004043a1
  406b54:	00400dfd 	.word	0x00400dfd
  406b58:	2001a240 	.word	0x2001a240
  406b5c:	2001a244 	.word	0x2001a244
  406b60:	4000c200 	.word	0x4000c200
  406b64:	004006f9 	.word	0x004006f9
  406b68:	2001a238 	.word	0x2001a238
  406b6c:	2001a23c 	.word	0x2001a23c
  406b70:	0040f9dc 	.word	0x0040f9dc
  406b74:	00406a8d 	.word	0x00406a8d
  406b78:	004012e1 	.word	0x004012e1
  406b7c:	2001a234 	.word	0x2001a234
  406b80:	0040f9e8 	.word	0x0040f9e8
  406b84:	00406aa9 	.word	0x00406aa9
  406b88:	004014c9 	.word	0x004014c9

00406b8c <sqrtf>:
  406b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  406b8e:	b08b      	sub	sp, #44	; 0x2c
  406b90:	4604      	mov	r4, r0
  406b92:	f000 f84b 	bl	406c2c <__ieee754_sqrtf>
  406b96:	4b23      	ldr	r3, [pc, #140]	; (406c24 <sqrtf+0x98>)
  406b98:	f993 5000 	ldrsb.w	r5, [r3]
  406b9c:	1c6b      	adds	r3, r5, #1
  406b9e:	4606      	mov	r6, r0
  406ba0:	d00a      	beq.n	406bb8 <sqrtf+0x2c>
  406ba2:	4621      	mov	r1, r4
  406ba4:	4620      	mov	r0, r4
  406ba6:	f000 ff85 	bl	407ab4 <__aeabi_fcmpun>
  406baa:	4607      	mov	r7, r0
  406bac:	b920      	cbnz	r0, 406bb8 <sqrtf+0x2c>
  406bae:	2100      	movs	r1, #0
  406bb0:	4620      	mov	r0, r4
  406bb2:	f000 ff57 	bl	407a64 <__aeabi_fcmplt>
  406bb6:	b910      	cbnz	r0, 406bbe <sqrtf+0x32>
  406bb8:	4630      	mov	r0, r6
  406bba:	b00b      	add	sp, #44	; 0x2c
  406bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406bbe:	4b1a      	ldr	r3, [pc, #104]	; (406c28 <sqrtf+0x9c>)
  406bc0:	9708      	str	r7, [sp, #32]
  406bc2:	2201      	movs	r2, #1
  406bc4:	4620      	mov	r0, r4
  406bc6:	e88d 000c 	stmia.w	sp, {r2, r3}
  406bca:	f000 f9e9 	bl	406fa0 <__aeabi_f2d>
  406bce:	2200      	movs	r2, #0
  406bd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  406bd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406bd8:	2300      	movs	r3, #0
  406bda:	b1ad      	cbz	r5, 406c08 <sqrtf+0x7c>
  406bdc:	4610      	mov	r0, r2
  406bde:	4619      	mov	r1, r3
  406be0:	f000 fb5c 	bl	40729c <__aeabi_ddiv>
  406be4:	2d02      	cmp	r5, #2
  406be6:	e9cd 0106 	strd	r0, r1, [sp, #24]
  406bea:	d10f      	bne.n	406c0c <sqrtf+0x80>
  406bec:	f000 ff78 	bl	407ae0 <__errno>
  406bf0:	2321      	movs	r3, #33	; 0x21
  406bf2:	6003      	str	r3, [r0, #0]
  406bf4:	9b08      	ldr	r3, [sp, #32]
  406bf6:	b97b      	cbnz	r3, 406c18 <sqrtf+0x8c>
  406bf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  406bfc:	f000 fc36 	bl	40746c <__aeabi_d2f>
  406c00:	4606      	mov	r6, r0
  406c02:	4630      	mov	r0, r6
  406c04:	b00b      	add	sp, #44	; 0x2c
  406c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c08:	e9cd 2306 	strd	r2, r3, [sp, #24]
  406c0c:	4668      	mov	r0, sp
  406c0e:	f000 f861 	bl	406cd4 <matherr>
  406c12:	2800      	cmp	r0, #0
  406c14:	d1ee      	bne.n	406bf4 <sqrtf+0x68>
  406c16:	e7e9      	b.n	406bec <sqrtf+0x60>
  406c18:	f000 ff62 	bl	407ae0 <__errno>
  406c1c:	9b08      	ldr	r3, [sp, #32]
  406c1e:	6003      	str	r3, [r0, #0]
  406c20:	e7ea      	b.n	406bf8 <sqrtf+0x6c>
  406c22:	bf00      	nop
  406c24:	20000374 	.word	0x20000374
  406c28:	0040fa30 	.word	0x0040fa30

00406c2c <__ieee754_sqrtf>:
  406c2c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
  406c30:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  406c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406c36:	4604      	mov	r4, r0
  406c38:	d22e      	bcs.n	406c98 <__ieee754_sqrtf+0x6c>
  406c3a:	b362      	cbz	r2, 406c96 <__ieee754_sqrtf+0x6a>
  406c3c:	2800      	cmp	r0, #0
  406c3e:	4603      	mov	r3, r0
  406c40:	db3d      	blt.n	406cbe <__ieee754_sqrtf+0x92>
  406c42:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
  406c46:	ea4f 50e0 	mov.w	r0, r0, asr #23
  406c4a:	d32c      	bcc.n	406ca6 <__ieee754_sqrtf+0x7a>
  406c4c:	387f      	subs	r0, #127	; 0x7f
  406c4e:	f3c3 0316 	ubfx	r3, r3, #0, #23
  406c52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  406c56:	07c2      	lsls	r2, r0, #31
  406c58:	bf48      	it	mi
  406c5a:	005b      	lslmi	r3, r3, #1
  406c5c:	2600      	movs	r6, #0
  406c5e:	1047      	asrs	r7, r0, #1
  406c60:	005b      	lsls	r3, r3, #1
  406c62:	4631      	mov	r1, r6
  406c64:	2419      	movs	r4, #25
  406c66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  406c6a:	188d      	adds	r5, r1, r2
  406c6c:	429d      	cmp	r5, r3
  406c6e:	dc02      	bgt.n	406c76 <__ieee754_sqrtf+0x4a>
  406c70:	1b5b      	subs	r3, r3, r5
  406c72:	18a9      	adds	r1, r5, r2
  406c74:	4416      	add	r6, r2
  406c76:	3c01      	subs	r4, #1
  406c78:	ea4f 0343 	mov.w	r3, r3, lsl #1
  406c7c:	ea4f 0252 	mov.w	r2, r2, lsr #1
  406c80:	d1f3      	bne.n	406c6a <__ieee754_sqrtf+0x3e>
  406c82:	b113      	cbz	r3, 406c8a <__ieee754_sqrtf+0x5e>
  406c84:	3601      	adds	r6, #1
  406c86:	f026 0601 	bic.w	r6, r6, #1
  406c8a:	1070      	asrs	r0, r6, #1
  406c8c:	f100 507c 	add.w	r0, r0, #1056964608	; 0x3f000000
  406c90:	eb00 50c7 	add.w	r0, r0, r7, lsl #23
  406c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406c98:	4601      	mov	r1, r0
  406c9a:	f000 fd45 	bl	407728 <__aeabi_fmul>
  406c9e:	4621      	mov	r1, r4
  406ca0:	f000 fc3a 	bl	407518 <__addsf3>
  406ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406ca6:	f414 0200 	ands.w	r2, r4, #8388608	; 0x800000
  406caa:	d001      	beq.n	406cb0 <__ieee754_sqrtf+0x84>
  406cac:	e00e      	b.n	406ccc <__ieee754_sqrtf+0xa0>
  406cae:	460a      	mov	r2, r1
  406cb0:	005b      	lsls	r3, r3, #1
  406cb2:	021c      	lsls	r4, r3, #8
  406cb4:	f102 0101 	add.w	r1, r2, #1
  406cb8:	d5f9      	bpl.n	406cae <__ieee754_sqrtf+0x82>
  406cba:	1a80      	subs	r0, r0, r2
  406cbc:	e7c6      	b.n	406c4c <__ieee754_sqrtf+0x20>
  406cbe:	4601      	mov	r1, r0
  406cc0:	f000 fc28 	bl	407514 <__aeabi_fsub>
  406cc4:	4601      	mov	r1, r0
  406cc6:	f000 fde3 	bl	407890 <__aeabi_fdiv>
  406cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406ccc:	f04f 32ff 	mov.w	r2, #4294967295
  406cd0:	e7f3      	b.n	406cba <__ieee754_sqrtf+0x8e>
  406cd2:	bf00      	nop

00406cd4 <matherr>:
  406cd4:	2000      	movs	r0, #0
  406cd6:	4770      	bx	lr

00406cd8 <__aeabi_drsub>:
  406cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406cdc:	e002      	b.n	406ce4 <__adddf3>
  406cde:	bf00      	nop

00406ce0 <__aeabi_dsub>:
  406ce0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406ce4 <__adddf3>:
  406ce4:	b530      	push	{r4, r5, lr}
  406ce6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  406cea:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406cee:	ea94 0f05 	teq	r4, r5
  406cf2:	bf08      	it	eq
  406cf4:	ea90 0f02 	teqeq	r0, r2
  406cf8:	bf1f      	itttt	ne
  406cfa:	ea54 0c00 	orrsne.w	ip, r4, r0
  406cfe:	ea55 0c02 	orrsne.w	ip, r5, r2
  406d02:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  406d06:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406d0a:	f000 80e2 	beq.w	406ed2 <__adddf3+0x1ee>
  406d0e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  406d12:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  406d16:	bfb8      	it	lt
  406d18:	426d      	neglt	r5, r5
  406d1a:	dd0c      	ble.n	406d36 <__adddf3+0x52>
  406d1c:	442c      	add	r4, r5
  406d1e:	ea80 0202 	eor.w	r2, r0, r2
  406d22:	ea81 0303 	eor.w	r3, r1, r3
  406d26:	ea82 0000 	eor.w	r0, r2, r0
  406d2a:	ea83 0101 	eor.w	r1, r3, r1
  406d2e:	ea80 0202 	eor.w	r2, r0, r2
  406d32:	ea81 0303 	eor.w	r3, r1, r3
  406d36:	2d36      	cmp	r5, #54	; 0x36
  406d38:	bf88      	it	hi
  406d3a:	bd30      	pophi	{r4, r5, pc}
  406d3c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406d40:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406d44:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  406d48:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  406d4c:	d002      	beq.n	406d54 <__adddf3+0x70>
  406d4e:	4240      	negs	r0, r0
  406d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406d54:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  406d58:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406d5c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  406d60:	d002      	beq.n	406d68 <__adddf3+0x84>
  406d62:	4252      	negs	r2, r2
  406d64:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406d68:	ea94 0f05 	teq	r4, r5
  406d6c:	f000 80a7 	beq.w	406ebe <__adddf3+0x1da>
  406d70:	f1a4 0401 	sub.w	r4, r4, #1
  406d74:	f1d5 0e20 	rsbs	lr, r5, #32
  406d78:	db0d      	blt.n	406d96 <__adddf3+0xb2>
  406d7a:	fa02 fc0e 	lsl.w	ip, r2, lr
  406d7e:	fa22 f205 	lsr.w	r2, r2, r5
  406d82:	1880      	adds	r0, r0, r2
  406d84:	f141 0100 	adc.w	r1, r1, #0
  406d88:	fa03 f20e 	lsl.w	r2, r3, lr
  406d8c:	1880      	adds	r0, r0, r2
  406d8e:	fa43 f305 	asr.w	r3, r3, r5
  406d92:	4159      	adcs	r1, r3
  406d94:	e00e      	b.n	406db4 <__adddf3+0xd0>
  406d96:	f1a5 0520 	sub.w	r5, r5, #32
  406d9a:	f10e 0e20 	add.w	lr, lr, #32
  406d9e:	2a01      	cmp	r2, #1
  406da0:	fa03 fc0e 	lsl.w	ip, r3, lr
  406da4:	bf28      	it	cs
  406da6:	f04c 0c02 	orrcs.w	ip, ip, #2
  406daa:	fa43 f305 	asr.w	r3, r3, r5
  406dae:	18c0      	adds	r0, r0, r3
  406db0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406db4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406db8:	d507      	bpl.n	406dca <__adddf3+0xe6>
  406dba:	f04f 0e00 	mov.w	lr, #0
  406dbe:	f1dc 0c00 	rsbs	ip, ip, #0
  406dc2:	eb7e 0000 	sbcs.w	r0, lr, r0
  406dc6:	eb6e 0101 	sbc.w	r1, lr, r1
  406dca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406dce:	d31b      	bcc.n	406e08 <__adddf3+0x124>
  406dd0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406dd4:	d30c      	bcc.n	406df0 <__adddf3+0x10c>
  406dd6:	0849      	lsrs	r1, r1, #1
  406dd8:	ea5f 0030 	movs.w	r0, r0, rrx
  406ddc:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406de0:	f104 0401 	add.w	r4, r4, #1
  406de4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  406de8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406dec:	f080 809a 	bcs.w	406f24 <__adddf3+0x240>
  406df0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406df4:	bf08      	it	eq
  406df6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406dfa:	f150 0000 	adcs.w	r0, r0, #0
  406dfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406e02:	ea41 0105 	orr.w	r1, r1, r5
  406e06:	bd30      	pop	{r4, r5, pc}
  406e08:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  406e0c:	4140      	adcs	r0, r0
  406e0e:	eb41 0101 	adc.w	r1, r1, r1
  406e12:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406e16:	f1a4 0401 	sub.w	r4, r4, #1
  406e1a:	d1e9      	bne.n	406df0 <__adddf3+0x10c>
  406e1c:	f091 0f00 	teq	r1, #0
  406e20:	bf04      	itt	eq
  406e22:	4601      	moveq	r1, r0
  406e24:	2000      	moveq	r0, #0
  406e26:	fab1 f381 	clz	r3, r1
  406e2a:	bf08      	it	eq
  406e2c:	3320      	addeq	r3, #32
  406e2e:	f1a3 030b 	sub.w	r3, r3, #11
  406e32:	f1b3 0220 	subs.w	r2, r3, #32
  406e36:	da0c      	bge.n	406e52 <__adddf3+0x16e>
  406e38:	320c      	adds	r2, #12
  406e3a:	dd08      	ble.n	406e4e <__adddf3+0x16a>
  406e3c:	f102 0c14 	add.w	ip, r2, #20
  406e40:	f1c2 020c 	rsb	r2, r2, #12
  406e44:	fa01 f00c 	lsl.w	r0, r1, ip
  406e48:	fa21 f102 	lsr.w	r1, r1, r2
  406e4c:	e00c      	b.n	406e68 <__adddf3+0x184>
  406e4e:	f102 0214 	add.w	r2, r2, #20
  406e52:	bfd8      	it	le
  406e54:	f1c2 0c20 	rsble	ip, r2, #32
  406e58:	fa01 f102 	lsl.w	r1, r1, r2
  406e5c:	fa20 fc0c 	lsr.w	ip, r0, ip
  406e60:	bfdc      	itt	le
  406e62:	ea41 010c 	orrle.w	r1, r1, ip
  406e66:	4090      	lslle	r0, r2
  406e68:	1ae4      	subs	r4, r4, r3
  406e6a:	bfa2      	ittt	ge
  406e6c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  406e70:	4329      	orrge	r1, r5
  406e72:	bd30      	popge	{r4, r5, pc}
  406e74:	ea6f 0404 	mvn.w	r4, r4
  406e78:	3c1f      	subs	r4, #31
  406e7a:	da1c      	bge.n	406eb6 <__adddf3+0x1d2>
  406e7c:	340c      	adds	r4, #12
  406e7e:	dc0e      	bgt.n	406e9e <__adddf3+0x1ba>
  406e80:	f104 0414 	add.w	r4, r4, #20
  406e84:	f1c4 0220 	rsb	r2, r4, #32
  406e88:	fa20 f004 	lsr.w	r0, r0, r4
  406e8c:	fa01 f302 	lsl.w	r3, r1, r2
  406e90:	ea40 0003 	orr.w	r0, r0, r3
  406e94:	fa21 f304 	lsr.w	r3, r1, r4
  406e98:	ea45 0103 	orr.w	r1, r5, r3
  406e9c:	bd30      	pop	{r4, r5, pc}
  406e9e:	f1c4 040c 	rsb	r4, r4, #12
  406ea2:	f1c4 0220 	rsb	r2, r4, #32
  406ea6:	fa20 f002 	lsr.w	r0, r0, r2
  406eaa:	fa01 f304 	lsl.w	r3, r1, r4
  406eae:	ea40 0003 	orr.w	r0, r0, r3
  406eb2:	4629      	mov	r1, r5
  406eb4:	bd30      	pop	{r4, r5, pc}
  406eb6:	fa21 f004 	lsr.w	r0, r1, r4
  406eba:	4629      	mov	r1, r5
  406ebc:	bd30      	pop	{r4, r5, pc}
  406ebe:	f094 0f00 	teq	r4, #0
  406ec2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  406ec6:	bf06      	itte	eq
  406ec8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406ecc:	3401      	addeq	r4, #1
  406ece:	3d01      	subne	r5, #1
  406ed0:	e74e      	b.n	406d70 <__adddf3+0x8c>
  406ed2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406ed6:	bf18      	it	ne
  406ed8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406edc:	d029      	beq.n	406f32 <__adddf3+0x24e>
  406ede:	ea94 0f05 	teq	r4, r5
  406ee2:	bf08      	it	eq
  406ee4:	ea90 0f02 	teqeq	r0, r2
  406ee8:	d005      	beq.n	406ef6 <__adddf3+0x212>
  406eea:	ea54 0c00 	orrs.w	ip, r4, r0
  406eee:	bf04      	itt	eq
  406ef0:	4619      	moveq	r1, r3
  406ef2:	4610      	moveq	r0, r2
  406ef4:	bd30      	pop	{r4, r5, pc}
  406ef6:	ea91 0f03 	teq	r1, r3
  406efa:	bf1e      	ittt	ne
  406efc:	2100      	movne	r1, #0
  406efe:	2000      	movne	r0, #0
  406f00:	bd30      	popne	{r4, r5, pc}
  406f02:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  406f06:	d105      	bne.n	406f14 <__adddf3+0x230>
  406f08:	0040      	lsls	r0, r0, #1
  406f0a:	4149      	adcs	r1, r1
  406f0c:	bf28      	it	cs
  406f0e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  406f12:	bd30      	pop	{r4, r5, pc}
  406f14:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  406f18:	bf3c      	itt	cc
  406f1a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  406f1e:	bd30      	popcc	{r4, r5, pc}
  406f20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406f24:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  406f28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406f2c:	f04f 0000 	mov.w	r0, #0
  406f30:	bd30      	pop	{r4, r5, pc}
  406f32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406f36:	bf1a      	itte	ne
  406f38:	4619      	movne	r1, r3
  406f3a:	4610      	movne	r0, r2
  406f3c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  406f40:	bf1c      	itt	ne
  406f42:	460b      	movne	r3, r1
  406f44:	4602      	movne	r2, r0
  406f46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406f4a:	bf06      	itte	eq
  406f4c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  406f50:	ea91 0f03 	teqeq	r1, r3
  406f54:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  406f58:	bd30      	pop	{r4, r5, pc}
  406f5a:	bf00      	nop

00406f5c <__aeabi_ui2d>:
  406f5c:	f090 0f00 	teq	r0, #0
  406f60:	bf04      	itt	eq
  406f62:	2100      	moveq	r1, #0
  406f64:	4770      	bxeq	lr
  406f66:	b530      	push	{r4, r5, lr}
  406f68:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406f6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406f70:	f04f 0500 	mov.w	r5, #0
  406f74:	f04f 0100 	mov.w	r1, #0
  406f78:	e750      	b.n	406e1c <__adddf3+0x138>
  406f7a:	bf00      	nop

00406f7c <__aeabi_i2d>:
  406f7c:	f090 0f00 	teq	r0, #0
  406f80:	bf04      	itt	eq
  406f82:	2100      	moveq	r1, #0
  406f84:	4770      	bxeq	lr
  406f86:	b530      	push	{r4, r5, lr}
  406f88:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406f8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406f90:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406f94:	bf48      	it	mi
  406f96:	4240      	negmi	r0, r0
  406f98:	f04f 0100 	mov.w	r1, #0
  406f9c:	e73e      	b.n	406e1c <__adddf3+0x138>
  406f9e:	bf00      	nop

00406fa0 <__aeabi_f2d>:
  406fa0:	0042      	lsls	r2, r0, #1
  406fa2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  406fa6:	ea4f 0131 	mov.w	r1, r1, rrx
  406faa:	ea4f 7002 	mov.w	r0, r2, lsl #28
  406fae:	bf1f      	itttt	ne
  406fb0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  406fb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406fb8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  406fbc:	4770      	bxne	lr
  406fbe:	f092 0f00 	teq	r2, #0
  406fc2:	bf14      	ite	ne
  406fc4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406fc8:	4770      	bxeq	lr
  406fca:	b530      	push	{r4, r5, lr}
  406fcc:	f44f 7460 	mov.w	r4, #896	; 0x380
  406fd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406fd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406fd8:	e720      	b.n	406e1c <__adddf3+0x138>
  406fda:	bf00      	nop

00406fdc <__aeabi_ul2d>:
  406fdc:	ea50 0201 	orrs.w	r2, r0, r1
  406fe0:	bf08      	it	eq
  406fe2:	4770      	bxeq	lr
  406fe4:	b530      	push	{r4, r5, lr}
  406fe6:	f04f 0500 	mov.w	r5, #0
  406fea:	e00a      	b.n	407002 <__aeabi_l2d+0x16>

00406fec <__aeabi_l2d>:
  406fec:	ea50 0201 	orrs.w	r2, r0, r1
  406ff0:	bf08      	it	eq
  406ff2:	4770      	bxeq	lr
  406ff4:	b530      	push	{r4, r5, lr}
  406ff6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  406ffa:	d502      	bpl.n	407002 <__aeabi_l2d+0x16>
  406ffc:	4240      	negs	r0, r0
  406ffe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407002:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407006:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40700a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40700e:	f43f aedc 	beq.w	406dca <__adddf3+0xe6>
  407012:	f04f 0203 	mov.w	r2, #3
  407016:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40701a:	bf18      	it	ne
  40701c:	3203      	addne	r2, #3
  40701e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407022:	bf18      	it	ne
  407024:	3203      	addne	r2, #3
  407026:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40702a:	f1c2 0320 	rsb	r3, r2, #32
  40702e:	fa00 fc03 	lsl.w	ip, r0, r3
  407032:	fa20 f002 	lsr.w	r0, r0, r2
  407036:	fa01 fe03 	lsl.w	lr, r1, r3
  40703a:	ea40 000e 	orr.w	r0, r0, lr
  40703e:	fa21 f102 	lsr.w	r1, r1, r2
  407042:	4414      	add	r4, r2
  407044:	e6c1      	b.n	406dca <__adddf3+0xe6>
  407046:	bf00      	nop

00407048 <__aeabi_dmul>:
  407048:	b570      	push	{r4, r5, r6, lr}
  40704a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40704e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407052:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407056:	bf1d      	ittte	ne
  407058:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40705c:	ea94 0f0c 	teqne	r4, ip
  407060:	ea95 0f0c 	teqne	r5, ip
  407064:	f000 f8de 	bleq	407224 <__aeabi_dmul+0x1dc>
  407068:	442c      	add	r4, r5
  40706a:	ea81 0603 	eor.w	r6, r1, r3
  40706e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407072:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407076:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40707a:	bf18      	it	ne
  40707c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407080:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407088:	d038      	beq.n	4070fc <__aeabi_dmul+0xb4>
  40708a:	fba0 ce02 	umull	ip, lr, r0, r2
  40708e:	f04f 0500 	mov.w	r5, #0
  407092:	fbe1 e502 	umlal	lr, r5, r1, r2
  407096:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40709a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40709e:	f04f 0600 	mov.w	r6, #0
  4070a2:	fbe1 5603 	umlal	r5, r6, r1, r3
  4070a6:	f09c 0f00 	teq	ip, #0
  4070aa:	bf18      	it	ne
  4070ac:	f04e 0e01 	orrne.w	lr, lr, #1
  4070b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4070b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4070b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4070bc:	d204      	bcs.n	4070c8 <__aeabi_dmul+0x80>
  4070be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4070c2:	416d      	adcs	r5, r5
  4070c4:	eb46 0606 	adc.w	r6, r6, r6
  4070c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4070cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4070d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4070d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4070d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4070dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4070e0:	bf88      	it	hi
  4070e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4070e6:	d81e      	bhi.n	407126 <__aeabi_dmul+0xde>
  4070e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4070ec:	bf08      	it	eq
  4070ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4070f2:	f150 0000 	adcs.w	r0, r0, #0
  4070f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4070fa:	bd70      	pop	{r4, r5, r6, pc}
  4070fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407100:	ea46 0101 	orr.w	r1, r6, r1
  407104:	ea40 0002 	orr.w	r0, r0, r2
  407108:	ea81 0103 	eor.w	r1, r1, r3
  40710c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407110:	bfc2      	ittt	gt
  407112:	ebd4 050c 	rsbsgt	r5, r4, ip
  407116:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40711a:	bd70      	popgt	{r4, r5, r6, pc}
  40711c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407120:	f04f 0e00 	mov.w	lr, #0
  407124:	3c01      	subs	r4, #1
  407126:	f300 80ab 	bgt.w	407280 <__aeabi_dmul+0x238>
  40712a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40712e:	bfde      	ittt	le
  407130:	2000      	movle	r0, #0
  407132:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407136:	bd70      	pople	{r4, r5, r6, pc}
  407138:	f1c4 0400 	rsb	r4, r4, #0
  40713c:	3c20      	subs	r4, #32
  40713e:	da35      	bge.n	4071ac <__aeabi_dmul+0x164>
  407140:	340c      	adds	r4, #12
  407142:	dc1b      	bgt.n	40717c <__aeabi_dmul+0x134>
  407144:	f104 0414 	add.w	r4, r4, #20
  407148:	f1c4 0520 	rsb	r5, r4, #32
  40714c:	fa00 f305 	lsl.w	r3, r0, r5
  407150:	fa20 f004 	lsr.w	r0, r0, r4
  407154:	fa01 f205 	lsl.w	r2, r1, r5
  407158:	ea40 0002 	orr.w	r0, r0, r2
  40715c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407160:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407164:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407168:	fa21 f604 	lsr.w	r6, r1, r4
  40716c:	eb42 0106 	adc.w	r1, r2, r6
  407170:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407174:	bf08      	it	eq
  407176:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40717a:	bd70      	pop	{r4, r5, r6, pc}
  40717c:	f1c4 040c 	rsb	r4, r4, #12
  407180:	f1c4 0520 	rsb	r5, r4, #32
  407184:	fa00 f304 	lsl.w	r3, r0, r4
  407188:	fa20 f005 	lsr.w	r0, r0, r5
  40718c:	fa01 f204 	lsl.w	r2, r1, r4
  407190:	ea40 0002 	orr.w	r0, r0, r2
  407194:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407198:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40719c:	f141 0100 	adc.w	r1, r1, #0
  4071a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4071a4:	bf08      	it	eq
  4071a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4071aa:	bd70      	pop	{r4, r5, r6, pc}
  4071ac:	f1c4 0520 	rsb	r5, r4, #32
  4071b0:	fa00 f205 	lsl.w	r2, r0, r5
  4071b4:	ea4e 0e02 	orr.w	lr, lr, r2
  4071b8:	fa20 f304 	lsr.w	r3, r0, r4
  4071bc:	fa01 f205 	lsl.w	r2, r1, r5
  4071c0:	ea43 0302 	orr.w	r3, r3, r2
  4071c4:	fa21 f004 	lsr.w	r0, r1, r4
  4071c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4071cc:	fa21 f204 	lsr.w	r2, r1, r4
  4071d0:	ea20 0002 	bic.w	r0, r0, r2
  4071d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4071d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4071dc:	bf08      	it	eq
  4071de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4071e2:	bd70      	pop	{r4, r5, r6, pc}
  4071e4:	f094 0f00 	teq	r4, #0
  4071e8:	d10f      	bne.n	40720a <__aeabi_dmul+0x1c2>
  4071ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4071ee:	0040      	lsls	r0, r0, #1
  4071f0:	eb41 0101 	adc.w	r1, r1, r1
  4071f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4071f8:	bf08      	it	eq
  4071fa:	3c01      	subeq	r4, #1
  4071fc:	d0f7      	beq.n	4071ee <__aeabi_dmul+0x1a6>
  4071fe:	ea41 0106 	orr.w	r1, r1, r6
  407202:	f095 0f00 	teq	r5, #0
  407206:	bf18      	it	ne
  407208:	4770      	bxne	lr
  40720a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40720e:	0052      	lsls	r2, r2, #1
  407210:	eb43 0303 	adc.w	r3, r3, r3
  407214:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407218:	bf08      	it	eq
  40721a:	3d01      	subeq	r5, #1
  40721c:	d0f7      	beq.n	40720e <__aeabi_dmul+0x1c6>
  40721e:	ea43 0306 	orr.w	r3, r3, r6
  407222:	4770      	bx	lr
  407224:	ea94 0f0c 	teq	r4, ip
  407228:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40722c:	bf18      	it	ne
  40722e:	ea95 0f0c 	teqne	r5, ip
  407232:	d00c      	beq.n	40724e <__aeabi_dmul+0x206>
  407234:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407238:	bf18      	it	ne
  40723a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40723e:	d1d1      	bne.n	4071e4 <__aeabi_dmul+0x19c>
  407240:	ea81 0103 	eor.w	r1, r1, r3
  407244:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407248:	f04f 0000 	mov.w	r0, #0
  40724c:	bd70      	pop	{r4, r5, r6, pc}
  40724e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407252:	bf06      	itte	eq
  407254:	4610      	moveq	r0, r2
  407256:	4619      	moveq	r1, r3
  407258:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40725c:	d019      	beq.n	407292 <__aeabi_dmul+0x24a>
  40725e:	ea94 0f0c 	teq	r4, ip
  407262:	d102      	bne.n	40726a <__aeabi_dmul+0x222>
  407264:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407268:	d113      	bne.n	407292 <__aeabi_dmul+0x24a>
  40726a:	ea95 0f0c 	teq	r5, ip
  40726e:	d105      	bne.n	40727c <__aeabi_dmul+0x234>
  407270:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407274:	bf1c      	itt	ne
  407276:	4610      	movne	r0, r2
  407278:	4619      	movne	r1, r3
  40727a:	d10a      	bne.n	407292 <__aeabi_dmul+0x24a>
  40727c:	ea81 0103 	eor.w	r1, r1, r3
  407280:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407284:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407288:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40728c:	f04f 0000 	mov.w	r0, #0
  407290:	bd70      	pop	{r4, r5, r6, pc}
  407292:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407296:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40729a:	bd70      	pop	{r4, r5, r6, pc}

0040729c <__aeabi_ddiv>:
  40729c:	b570      	push	{r4, r5, r6, lr}
  40729e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4072a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4072a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4072aa:	bf1d      	ittte	ne
  4072ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4072b0:	ea94 0f0c 	teqne	r4, ip
  4072b4:	ea95 0f0c 	teqne	r5, ip
  4072b8:	f000 f8a7 	bleq	40740a <__aeabi_ddiv+0x16e>
  4072bc:	eba4 0405 	sub.w	r4, r4, r5
  4072c0:	ea81 0e03 	eor.w	lr, r1, r3
  4072c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4072c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4072cc:	f000 8088 	beq.w	4073e0 <__aeabi_ddiv+0x144>
  4072d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4072d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4072d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4072dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4072e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4072e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4072e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4072ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4072f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4072f4:	429d      	cmp	r5, r3
  4072f6:	bf08      	it	eq
  4072f8:	4296      	cmpeq	r6, r2
  4072fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4072fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407302:	d202      	bcs.n	40730a <__aeabi_ddiv+0x6e>
  407304:	085b      	lsrs	r3, r3, #1
  407306:	ea4f 0232 	mov.w	r2, r2, rrx
  40730a:	1ab6      	subs	r6, r6, r2
  40730c:	eb65 0503 	sbc.w	r5, r5, r3
  407310:	085b      	lsrs	r3, r3, #1
  407312:	ea4f 0232 	mov.w	r2, r2, rrx
  407316:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40731a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40731e:	ebb6 0e02 	subs.w	lr, r6, r2
  407322:	eb75 0e03 	sbcs.w	lr, r5, r3
  407326:	bf22      	ittt	cs
  407328:	1ab6      	subcs	r6, r6, r2
  40732a:	4675      	movcs	r5, lr
  40732c:	ea40 000c 	orrcs.w	r0, r0, ip
  407330:	085b      	lsrs	r3, r3, #1
  407332:	ea4f 0232 	mov.w	r2, r2, rrx
  407336:	ebb6 0e02 	subs.w	lr, r6, r2
  40733a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40733e:	bf22      	ittt	cs
  407340:	1ab6      	subcs	r6, r6, r2
  407342:	4675      	movcs	r5, lr
  407344:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407348:	085b      	lsrs	r3, r3, #1
  40734a:	ea4f 0232 	mov.w	r2, r2, rrx
  40734e:	ebb6 0e02 	subs.w	lr, r6, r2
  407352:	eb75 0e03 	sbcs.w	lr, r5, r3
  407356:	bf22      	ittt	cs
  407358:	1ab6      	subcs	r6, r6, r2
  40735a:	4675      	movcs	r5, lr
  40735c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407360:	085b      	lsrs	r3, r3, #1
  407362:	ea4f 0232 	mov.w	r2, r2, rrx
  407366:	ebb6 0e02 	subs.w	lr, r6, r2
  40736a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40736e:	bf22      	ittt	cs
  407370:	1ab6      	subcs	r6, r6, r2
  407372:	4675      	movcs	r5, lr
  407374:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407378:	ea55 0e06 	orrs.w	lr, r5, r6
  40737c:	d018      	beq.n	4073b0 <__aeabi_ddiv+0x114>
  40737e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  407382:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  407386:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40738a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40738e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  407392:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  407396:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40739a:	d1c0      	bne.n	40731e <__aeabi_ddiv+0x82>
  40739c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4073a0:	d10b      	bne.n	4073ba <__aeabi_ddiv+0x11e>
  4073a2:	ea41 0100 	orr.w	r1, r1, r0
  4073a6:	f04f 0000 	mov.w	r0, #0
  4073aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4073ae:	e7b6      	b.n	40731e <__aeabi_ddiv+0x82>
  4073b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4073b4:	bf04      	itt	eq
  4073b6:	4301      	orreq	r1, r0
  4073b8:	2000      	moveq	r0, #0
  4073ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4073be:	bf88      	it	hi
  4073c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4073c4:	f63f aeaf 	bhi.w	407126 <__aeabi_dmul+0xde>
  4073c8:	ebb5 0c03 	subs.w	ip, r5, r3
  4073cc:	bf04      	itt	eq
  4073ce:	ebb6 0c02 	subseq.w	ip, r6, r2
  4073d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4073d6:	f150 0000 	adcs.w	r0, r0, #0
  4073da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4073de:	bd70      	pop	{r4, r5, r6, pc}
  4073e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4073e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4073e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4073ec:	bfc2      	ittt	gt
  4073ee:	ebd4 050c 	rsbsgt	r5, r4, ip
  4073f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4073f6:	bd70      	popgt	{r4, r5, r6, pc}
  4073f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4073fc:	f04f 0e00 	mov.w	lr, #0
  407400:	3c01      	subs	r4, #1
  407402:	e690      	b.n	407126 <__aeabi_dmul+0xde>
  407404:	ea45 0e06 	orr.w	lr, r5, r6
  407408:	e68d      	b.n	407126 <__aeabi_dmul+0xde>
  40740a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40740e:	ea94 0f0c 	teq	r4, ip
  407412:	bf08      	it	eq
  407414:	ea95 0f0c 	teqeq	r5, ip
  407418:	f43f af3b 	beq.w	407292 <__aeabi_dmul+0x24a>
  40741c:	ea94 0f0c 	teq	r4, ip
  407420:	d10a      	bne.n	407438 <__aeabi_ddiv+0x19c>
  407422:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407426:	f47f af34 	bne.w	407292 <__aeabi_dmul+0x24a>
  40742a:	ea95 0f0c 	teq	r5, ip
  40742e:	f47f af25 	bne.w	40727c <__aeabi_dmul+0x234>
  407432:	4610      	mov	r0, r2
  407434:	4619      	mov	r1, r3
  407436:	e72c      	b.n	407292 <__aeabi_dmul+0x24a>
  407438:	ea95 0f0c 	teq	r5, ip
  40743c:	d106      	bne.n	40744c <__aeabi_ddiv+0x1b0>
  40743e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407442:	f43f aefd 	beq.w	407240 <__aeabi_dmul+0x1f8>
  407446:	4610      	mov	r0, r2
  407448:	4619      	mov	r1, r3
  40744a:	e722      	b.n	407292 <__aeabi_dmul+0x24a>
  40744c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407450:	bf18      	it	ne
  407452:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407456:	f47f aec5 	bne.w	4071e4 <__aeabi_dmul+0x19c>
  40745a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40745e:	f47f af0d 	bne.w	40727c <__aeabi_dmul+0x234>
  407462:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  407466:	f47f aeeb 	bne.w	407240 <__aeabi_dmul+0x1f8>
  40746a:	e712      	b.n	407292 <__aeabi_dmul+0x24a>

0040746c <__aeabi_d2f>:
  40746c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407470:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  407474:	bf24      	itt	cs
  407476:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40747a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40747e:	d90d      	bls.n	40749c <__aeabi_d2f+0x30>
  407480:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407484:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  407488:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40748c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  407490:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  407494:	bf08      	it	eq
  407496:	f020 0001 	biceq.w	r0, r0, #1
  40749a:	4770      	bx	lr
  40749c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4074a0:	d121      	bne.n	4074e6 <__aeabi_d2f+0x7a>
  4074a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4074a6:	bfbc      	itt	lt
  4074a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4074ac:	4770      	bxlt	lr
  4074ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4074b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4074b6:	f1c2 0218 	rsb	r2, r2, #24
  4074ba:	f1c2 0c20 	rsb	ip, r2, #32
  4074be:	fa10 f30c 	lsls.w	r3, r0, ip
  4074c2:	fa20 f002 	lsr.w	r0, r0, r2
  4074c6:	bf18      	it	ne
  4074c8:	f040 0001 	orrne.w	r0, r0, #1
  4074cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4074d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4074d4:	fa03 fc0c 	lsl.w	ip, r3, ip
  4074d8:	ea40 000c 	orr.w	r0, r0, ip
  4074dc:	fa23 f302 	lsr.w	r3, r3, r2
  4074e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4074e4:	e7cc      	b.n	407480 <__aeabi_d2f+0x14>
  4074e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4074ea:	d107      	bne.n	4074fc <__aeabi_d2f+0x90>
  4074ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4074f0:	bf1e      	ittt	ne
  4074f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4074f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4074fa:	4770      	bxne	lr
  4074fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  407500:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407504:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407508:	4770      	bx	lr
  40750a:	bf00      	nop

0040750c <__aeabi_frsub>:
  40750c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  407510:	e002      	b.n	407518 <__addsf3>
  407512:	bf00      	nop

00407514 <__aeabi_fsub>:
  407514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00407518 <__addsf3>:
  407518:	0042      	lsls	r2, r0, #1
  40751a:	bf1f      	itttt	ne
  40751c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  407520:	ea92 0f03 	teqne	r2, r3
  407524:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  407528:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40752c:	d06a      	beq.n	407604 <__addsf3+0xec>
  40752e:	ea4f 6212 	mov.w	r2, r2, lsr #24
  407532:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  407536:	bfc1      	itttt	gt
  407538:	18d2      	addgt	r2, r2, r3
  40753a:	4041      	eorgt	r1, r0
  40753c:	4048      	eorgt	r0, r1
  40753e:	4041      	eorgt	r1, r0
  407540:	bfb8      	it	lt
  407542:	425b      	neglt	r3, r3
  407544:	2b19      	cmp	r3, #25
  407546:	bf88      	it	hi
  407548:	4770      	bxhi	lr
  40754a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40754e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407552:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  407556:	bf18      	it	ne
  407558:	4240      	negne	r0, r0
  40755a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40755e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  407562:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  407566:	bf18      	it	ne
  407568:	4249      	negne	r1, r1
  40756a:	ea92 0f03 	teq	r2, r3
  40756e:	d03f      	beq.n	4075f0 <__addsf3+0xd8>
  407570:	f1a2 0201 	sub.w	r2, r2, #1
  407574:	fa41 fc03 	asr.w	ip, r1, r3
  407578:	eb10 000c 	adds.w	r0, r0, ip
  40757c:	f1c3 0320 	rsb	r3, r3, #32
  407580:	fa01 f103 	lsl.w	r1, r1, r3
  407584:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  407588:	d502      	bpl.n	407590 <__addsf3+0x78>
  40758a:	4249      	negs	r1, r1
  40758c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  407590:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  407594:	d313      	bcc.n	4075be <__addsf3+0xa6>
  407596:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40759a:	d306      	bcc.n	4075aa <__addsf3+0x92>
  40759c:	0840      	lsrs	r0, r0, #1
  40759e:	ea4f 0131 	mov.w	r1, r1, rrx
  4075a2:	f102 0201 	add.w	r2, r2, #1
  4075a6:	2afe      	cmp	r2, #254	; 0xfe
  4075a8:	d251      	bcs.n	40764e <__addsf3+0x136>
  4075aa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  4075ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4075b2:	bf08      	it	eq
  4075b4:	f020 0001 	biceq.w	r0, r0, #1
  4075b8:	ea40 0003 	orr.w	r0, r0, r3
  4075bc:	4770      	bx	lr
  4075be:	0049      	lsls	r1, r1, #1
  4075c0:	eb40 0000 	adc.w	r0, r0, r0
  4075c4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  4075c8:	f1a2 0201 	sub.w	r2, r2, #1
  4075cc:	d1ed      	bne.n	4075aa <__addsf3+0x92>
  4075ce:	fab0 fc80 	clz	ip, r0
  4075d2:	f1ac 0c08 	sub.w	ip, ip, #8
  4075d6:	ebb2 020c 	subs.w	r2, r2, ip
  4075da:	fa00 f00c 	lsl.w	r0, r0, ip
  4075de:	bfaa      	itet	ge
  4075e0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  4075e4:	4252      	neglt	r2, r2
  4075e6:	4318      	orrge	r0, r3
  4075e8:	bfbc      	itt	lt
  4075ea:	40d0      	lsrlt	r0, r2
  4075ec:	4318      	orrlt	r0, r3
  4075ee:	4770      	bx	lr
  4075f0:	f092 0f00 	teq	r2, #0
  4075f4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  4075f8:	bf06      	itte	eq
  4075fa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  4075fe:	3201      	addeq	r2, #1
  407600:	3b01      	subne	r3, #1
  407602:	e7b5      	b.n	407570 <__addsf3+0x58>
  407604:	ea4f 0341 	mov.w	r3, r1, lsl #1
  407608:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40760c:	bf18      	it	ne
  40760e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407612:	d021      	beq.n	407658 <__addsf3+0x140>
  407614:	ea92 0f03 	teq	r2, r3
  407618:	d004      	beq.n	407624 <__addsf3+0x10c>
  40761a:	f092 0f00 	teq	r2, #0
  40761e:	bf08      	it	eq
  407620:	4608      	moveq	r0, r1
  407622:	4770      	bx	lr
  407624:	ea90 0f01 	teq	r0, r1
  407628:	bf1c      	itt	ne
  40762a:	2000      	movne	r0, #0
  40762c:	4770      	bxne	lr
  40762e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  407632:	d104      	bne.n	40763e <__addsf3+0x126>
  407634:	0040      	lsls	r0, r0, #1
  407636:	bf28      	it	cs
  407638:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  40763c:	4770      	bx	lr
  40763e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  407642:	bf3c      	itt	cc
  407644:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  407648:	4770      	bxcc	lr
  40764a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40764e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  407652:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407656:	4770      	bx	lr
  407658:	ea7f 6222 	mvns.w	r2, r2, asr #24
  40765c:	bf16      	itet	ne
  40765e:	4608      	movne	r0, r1
  407660:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  407664:	4601      	movne	r1, r0
  407666:	0242      	lsls	r2, r0, #9
  407668:	bf06      	itte	eq
  40766a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40766e:	ea90 0f01 	teqeq	r0, r1
  407672:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  407676:	4770      	bx	lr

00407678 <__aeabi_ui2f>:
  407678:	f04f 0300 	mov.w	r3, #0
  40767c:	e004      	b.n	407688 <__aeabi_i2f+0x8>
  40767e:	bf00      	nop

00407680 <__aeabi_i2f>:
  407680:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  407684:	bf48      	it	mi
  407686:	4240      	negmi	r0, r0
  407688:	ea5f 0c00 	movs.w	ip, r0
  40768c:	bf08      	it	eq
  40768e:	4770      	bxeq	lr
  407690:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  407694:	4601      	mov	r1, r0
  407696:	f04f 0000 	mov.w	r0, #0
  40769a:	e01c      	b.n	4076d6 <__aeabi_l2f+0x2a>

0040769c <__aeabi_ul2f>:
  40769c:	ea50 0201 	orrs.w	r2, r0, r1
  4076a0:	bf08      	it	eq
  4076a2:	4770      	bxeq	lr
  4076a4:	f04f 0300 	mov.w	r3, #0
  4076a8:	e00a      	b.n	4076c0 <__aeabi_l2f+0x14>
  4076aa:	bf00      	nop

004076ac <__aeabi_l2f>:
  4076ac:	ea50 0201 	orrs.w	r2, r0, r1
  4076b0:	bf08      	it	eq
  4076b2:	4770      	bxeq	lr
  4076b4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  4076b8:	d502      	bpl.n	4076c0 <__aeabi_l2f+0x14>
  4076ba:	4240      	negs	r0, r0
  4076bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4076c0:	ea5f 0c01 	movs.w	ip, r1
  4076c4:	bf02      	ittt	eq
  4076c6:	4684      	moveq	ip, r0
  4076c8:	4601      	moveq	r1, r0
  4076ca:	2000      	moveq	r0, #0
  4076cc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  4076d0:	bf08      	it	eq
  4076d2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  4076d6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  4076da:	fabc f28c 	clz	r2, ip
  4076de:	3a08      	subs	r2, #8
  4076e0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  4076e4:	db10      	blt.n	407708 <__aeabi_l2f+0x5c>
  4076e6:	fa01 fc02 	lsl.w	ip, r1, r2
  4076ea:	4463      	add	r3, ip
  4076ec:	fa00 fc02 	lsl.w	ip, r0, r2
  4076f0:	f1c2 0220 	rsb	r2, r2, #32
  4076f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4076f8:	fa20 f202 	lsr.w	r2, r0, r2
  4076fc:	eb43 0002 	adc.w	r0, r3, r2
  407700:	bf08      	it	eq
  407702:	f020 0001 	biceq.w	r0, r0, #1
  407706:	4770      	bx	lr
  407708:	f102 0220 	add.w	r2, r2, #32
  40770c:	fa01 fc02 	lsl.w	ip, r1, r2
  407710:	f1c2 0220 	rsb	r2, r2, #32
  407714:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  407718:	fa21 f202 	lsr.w	r2, r1, r2
  40771c:	eb43 0002 	adc.w	r0, r3, r2
  407720:	bf08      	it	eq
  407722:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  407726:	4770      	bx	lr

00407728 <__aeabi_fmul>:
  407728:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40772c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  407730:	bf1e      	ittt	ne
  407732:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  407736:	ea92 0f0c 	teqne	r2, ip
  40773a:	ea93 0f0c 	teqne	r3, ip
  40773e:	d06f      	beq.n	407820 <__aeabi_fmul+0xf8>
  407740:	441a      	add	r2, r3
  407742:	ea80 0c01 	eor.w	ip, r0, r1
  407746:	0240      	lsls	r0, r0, #9
  407748:	bf18      	it	ne
  40774a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40774e:	d01e      	beq.n	40778e <__aeabi_fmul+0x66>
  407750:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  407754:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  407758:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  40775c:	fba0 3101 	umull	r3, r1, r0, r1
  407760:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  407764:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  407768:	bf3e      	ittt	cc
  40776a:	0049      	lslcc	r1, r1, #1
  40776c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  407770:	005b      	lslcc	r3, r3, #1
  407772:	ea40 0001 	orr.w	r0, r0, r1
  407776:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40777a:	2afd      	cmp	r2, #253	; 0xfd
  40777c:	d81d      	bhi.n	4077ba <__aeabi_fmul+0x92>
  40777e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  407782:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  407786:	bf08      	it	eq
  407788:	f020 0001 	biceq.w	r0, r0, #1
  40778c:	4770      	bx	lr
  40778e:	f090 0f00 	teq	r0, #0
  407792:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  407796:	bf08      	it	eq
  407798:	0249      	lsleq	r1, r1, #9
  40779a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40779e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  4077a2:	3a7f      	subs	r2, #127	; 0x7f
  4077a4:	bfc2      	ittt	gt
  4077a6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4077aa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4077ae:	4770      	bxgt	lr
  4077b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4077b4:	f04f 0300 	mov.w	r3, #0
  4077b8:	3a01      	subs	r2, #1
  4077ba:	dc5d      	bgt.n	407878 <__aeabi_fmul+0x150>
  4077bc:	f112 0f19 	cmn.w	r2, #25
  4077c0:	bfdc      	itt	le
  4077c2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  4077c6:	4770      	bxle	lr
  4077c8:	f1c2 0200 	rsb	r2, r2, #0
  4077cc:	0041      	lsls	r1, r0, #1
  4077ce:	fa21 f102 	lsr.w	r1, r1, r2
  4077d2:	f1c2 0220 	rsb	r2, r2, #32
  4077d6:	fa00 fc02 	lsl.w	ip, r0, r2
  4077da:	ea5f 0031 	movs.w	r0, r1, rrx
  4077de:	f140 0000 	adc.w	r0, r0, #0
  4077e2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  4077e6:	bf08      	it	eq
  4077e8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4077ec:	4770      	bx	lr
  4077ee:	f092 0f00 	teq	r2, #0
  4077f2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4077f6:	bf02      	ittt	eq
  4077f8:	0040      	lsleq	r0, r0, #1
  4077fa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4077fe:	3a01      	subeq	r2, #1
  407800:	d0f9      	beq.n	4077f6 <__aeabi_fmul+0xce>
  407802:	ea40 000c 	orr.w	r0, r0, ip
  407806:	f093 0f00 	teq	r3, #0
  40780a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40780e:	bf02      	ittt	eq
  407810:	0049      	lsleq	r1, r1, #1
  407812:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  407816:	3b01      	subeq	r3, #1
  407818:	d0f9      	beq.n	40780e <__aeabi_fmul+0xe6>
  40781a:	ea41 010c 	orr.w	r1, r1, ip
  40781e:	e78f      	b.n	407740 <__aeabi_fmul+0x18>
  407820:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  407824:	ea92 0f0c 	teq	r2, ip
  407828:	bf18      	it	ne
  40782a:	ea93 0f0c 	teqne	r3, ip
  40782e:	d00a      	beq.n	407846 <__aeabi_fmul+0x11e>
  407830:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  407834:	bf18      	it	ne
  407836:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40783a:	d1d8      	bne.n	4077ee <__aeabi_fmul+0xc6>
  40783c:	ea80 0001 	eor.w	r0, r0, r1
  407840:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  407844:	4770      	bx	lr
  407846:	f090 0f00 	teq	r0, #0
  40784a:	bf17      	itett	ne
  40784c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  407850:	4608      	moveq	r0, r1
  407852:	f091 0f00 	teqne	r1, #0
  407856:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40785a:	d014      	beq.n	407886 <__aeabi_fmul+0x15e>
  40785c:	ea92 0f0c 	teq	r2, ip
  407860:	d101      	bne.n	407866 <__aeabi_fmul+0x13e>
  407862:	0242      	lsls	r2, r0, #9
  407864:	d10f      	bne.n	407886 <__aeabi_fmul+0x15e>
  407866:	ea93 0f0c 	teq	r3, ip
  40786a:	d103      	bne.n	407874 <__aeabi_fmul+0x14c>
  40786c:	024b      	lsls	r3, r1, #9
  40786e:	bf18      	it	ne
  407870:	4608      	movne	r0, r1
  407872:	d108      	bne.n	407886 <__aeabi_fmul+0x15e>
  407874:	ea80 0001 	eor.w	r0, r0, r1
  407878:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40787c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407880:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407884:	4770      	bx	lr
  407886:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40788a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  40788e:	4770      	bx	lr

00407890 <__aeabi_fdiv>:
  407890:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407894:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  407898:	bf1e      	ittt	ne
  40789a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40789e:	ea92 0f0c 	teqne	r2, ip
  4078a2:	ea93 0f0c 	teqne	r3, ip
  4078a6:	d069      	beq.n	40797c <__aeabi_fdiv+0xec>
  4078a8:	eba2 0203 	sub.w	r2, r2, r3
  4078ac:	ea80 0c01 	eor.w	ip, r0, r1
  4078b0:	0249      	lsls	r1, r1, #9
  4078b2:	ea4f 2040 	mov.w	r0, r0, lsl #9
  4078b6:	d037      	beq.n	407928 <__aeabi_fdiv+0x98>
  4078b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4078bc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  4078c0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  4078c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4078c8:	428b      	cmp	r3, r1
  4078ca:	bf38      	it	cc
  4078cc:	005b      	lslcc	r3, r3, #1
  4078ce:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  4078d2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  4078d6:	428b      	cmp	r3, r1
  4078d8:	bf24      	itt	cs
  4078da:	1a5b      	subcs	r3, r3, r1
  4078dc:	ea40 000c 	orrcs.w	r0, r0, ip
  4078e0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  4078e4:	bf24      	itt	cs
  4078e6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  4078ea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4078ee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  4078f2:	bf24      	itt	cs
  4078f4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  4078f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4078fc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  407900:	bf24      	itt	cs
  407902:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  407906:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40790a:	011b      	lsls	r3, r3, #4
  40790c:	bf18      	it	ne
  40790e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  407912:	d1e0      	bne.n	4078d6 <__aeabi_fdiv+0x46>
  407914:	2afd      	cmp	r2, #253	; 0xfd
  407916:	f63f af50 	bhi.w	4077ba <__aeabi_fmul+0x92>
  40791a:	428b      	cmp	r3, r1
  40791c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  407920:	bf08      	it	eq
  407922:	f020 0001 	biceq.w	r0, r0, #1
  407926:	4770      	bx	lr
  407928:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40792c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  407930:	327f      	adds	r2, #127	; 0x7f
  407932:	bfc2      	ittt	gt
  407934:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  407938:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40793c:	4770      	bxgt	lr
  40793e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407942:	f04f 0300 	mov.w	r3, #0
  407946:	3a01      	subs	r2, #1
  407948:	e737      	b.n	4077ba <__aeabi_fmul+0x92>
  40794a:	f092 0f00 	teq	r2, #0
  40794e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  407952:	bf02      	ittt	eq
  407954:	0040      	lsleq	r0, r0, #1
  407956:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40795a:	3a01      	subeq	r2, #1
  40795c:	d0f9      	beq.n	407952 <__aeabi_fdiv+0xc2>
  40795e:	ea40 000c 	orr.w	r0, r0, ip
  407962:	f093 0f00 	teq	r3, #0
  407966:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40796a:	bf02      	ittt	eq
  40796c:	0049      	lsleq	r1, r1, #1
  40796e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  407972:	3b01      	subeq	r3, #1
  407974:	d0f9      	beq.n	40796a <__aeabi_fdiv+0xda>
  407976:	ea41 010c 	orr.w	r1, r1, ip
  40797a:	e795      	b.n	4078a8 <__aeabi_fdiv+0x18>
  40797c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  407980:	ea92 0f0c 	teq	r2, ip
  407984:	d108      	bne.n	407998 <__aeabi_fdiv+0x108>
  407986:	0242      	lsls	r2, r0, #9
  407988:	f47f af7d 	bne.w	407886 <__aeabi_fmul+0x15e>
  40798c:	ea93 0f0c 	teq	r3, ip
  407990:	f47f af70 	bne.w	407874 <__aeabi_fmul+0x14c>
  407994:	4608      	mov	r0, r1
  407996:	e776      	b.n	407886 <__aeabi_fmul+0x15e>
  407998:	ea93 0f0c 	teq	r3, ip
  40799c:	d104      	bne.n	4079a8 <__aeabi_fdiv+0x118>
  40799e:	024b      	lsls	r3, r1, #9
  4079a0:	f43f af4c 	beq.w	40783c <__aeabi_fmul+0x114>
  4079a4:	4608      	mov	r0, r1
  4079a6:	e76e      	b.n	407886 <__aeabi_fmul+0x15e>
  4079a8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4079ac:	bf18      	it	ne
  4079ae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4079b2:	d1ca      	bne.n	40794a <__aeabi_fdiv+0xba>
  4079b4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  4079b8:	f47f af5c 	bne.w	407874 <__aeabi_fmul+0x14c>
  4079bc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  4079c0:	f47f af3c 	bne.w	40783c <__aeabi_fmul+0x114>
  4079c4:	e75f      	b.n	407886 <__aeabi_fmul+0x15e>
  4079c6:	bf00      	nop

004079c8 <__gesf2>:
  4079c8:	f04f 3cff 	mov.w	ip, #4294967295
  4079cc:	e006      	b.n	4079dc <__cmpsf2+0x4>
  4079ce:	bf00      	nop

004079d0 <__lesf2>:
  4079d0:	f04f 0c01 	mov.w	ip, #1
  4079d4:	e002      	b.n	4079dc <__cmpsf2+0x4>
  4079d6:	bf00      	nop

004079d8 <__cmpsf2>:
  4079d8:	f04f 0c01 	mov.w	ip, #1
  4079dc:	f84d cd04 	str.w	ip, [sp, #-4]!
  4079e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
  4079e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4079e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4079ec:	bf18      	it	ne
  4079ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4079f2:	d011      	beq.n	407a18 <__cmpsf2+0x40>
  4079f4:	b001      	add	sp, #4
  4079f6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  4079fa:	bf18      	it	ne
  4079fc:	ea90 0f01 	teqne	r0, r1
  407a00:	bf58      	it	pl
  407a02:	ebb2 0003 	subspl.w	r0, r2, r3
  407a06:	bf88      	it	hi
  407a08:	17c8      	asrhi	r0, r1, #31
  407a0a:	bf38      	it	cc
  407a0c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  407a10:	bf18      	it	ne
  407a12:	f040 0001 	orrne.w	r0, r0, #1
  407a16:	4770      	bx	lr
  407a18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407a1c:	d102      	bne.n	407a24 <__cmpsf2+0x4c>
  407a1e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  407a22:	d105      	bne.n	407a30 <__cmpsf2+0x58>
  407a24:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  407a28:	d1e4      	bne.n	4079f4 <__cmpsf2+0x1c>
  407a2a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  407a2e:	d0e1      	beq.n	4079f4 <__cmpsf2+0x1c>
  407a30:	f85d 0b04 	ldr.w	r0, [sp], #4
  407a34:	4770      	bx	lr
  407a36:	bf00      	nop

00407a38 <__aeabi_cfrcmple>:
  407a38:	4684      	mov	ip, r0
  407a3a:	4608      	mov	r0, r1
  407a3c:	4661      	mov	r1, ip
  407a3e:	e7ff      	b.n	407a40 <__aeabi_cfcmpeq>

00407a40 <__aeabi_cfcmpeq>:
  407a40:	b50f      	push	{r0, r1, r2, r3, lr}
  407a42:	f7ff ffc9 	bl	4079d8 <__cmpsf2>
  407a46:	2800      	cmp	r0, #0
  407a48:	bf48      	it	mi
  407a4a:	f110 0f00 	cmnmi.w	r0, #0
  407a4e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00407a50 <__aeabi_fcmpeq>:
  407a50:	f84d ed08 	str.w	lr, [sp, #-8]!
  407a54:	f7ff fff4 	bl	407a40 <__aeabi_cfcmpeq>
  407a58:	bf0c      	ite	eq
  407a5a:	2001      	moveq	r0, #1
  407a5c:	2000      	movne	r0, #0
  407a5e:	f85d fb08 	ldr.w	pc, [sp], #8
  407a62:	bf00      	nop

00407a64 <__aeabi_fcmplt>:
  407a64:	f84d ed08 	str.w	lr, [sp, #-8]!
  407a68:	f7ff ffea 	bl	407a40 <__aeabi_cfcmpeq>
  407a6c:	bf34      	ite	cc
  407a6e:	2001      	movcc	r0, #1
  407a70:	2000      	movcs	r0, #0
  407a72:	f85d fb08 	ldr.w	pc, [sp], #8
  407a76:	bf00      	nop

00407a78 <__aeabi_fcmple>:
  407a78:	f84d ed08 	str.w	lr, [sp, #-8]!
  407a7c:	f7ff ffe0 	bl	407a40 <__aeabi_cfcmpeq>
  407a80:	bf94      	ite	ls
  407a82:	2001      	movls	r0, #1
  407a84:	2000      	movhi	r0, #0
  407a86:	f85d fb08 	ldr.w	pc, [sp], #8
  407a8a:	bf00      	nop

00407a8c <__aeabi_fcmpge>:
  407a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407a90:	f7ff ffd2 	bl	407a38 <__aeabi_cfrcmple>
  407a94:	bf94      	ite	ls
  407a96:	2001      	movls	r0, #1
  407a98:	2000      	movhi	r0, #0
  407a9a:	f85d fb08 	ldr.w	pc, [sp], #8
  407a9e:	bf00      	nop

00407aa0 <__aeabi_fcmpgt>:
  407aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
  407aa4:	f7ff ffc8 	bl	407a38 <__aeabi_cfrcmple>
  407aa8:	bf34      	ite	cc
  407aaa:	2001      	movcc	r0, #1
  407aac:	2000      	movcs	r0, #0
  407aae:	f85d fb08 	ldr.w	pc, [sp], #8
  407ab2:	bf00      	nop

00407ab4 <__aeabi_fcmpun>:
  407ab4:	ea4f 0240 	mov.w	r2, r0, lsl #1
  407ab8:	ea4f 0341 	mov.w	r3, r1, lsl #1
  407abc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407ac0:	d102      	bne.n	407ac8 <__aeabi_fcmpun+0x14>
  407ac2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  407ac6:	d108      	bne.n	407ada <__aeabi_fcmpun+0x26>
  407ac8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  407acc:	d102      	bne.n	407ad4 <__aeabi_fcmpun+0x20>
  407ace:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  407ad2:	d102      	bne.n	407ada <__aeabi_fcmpun+0x26>
  407ad4:	f04f 0000 	mov.w	r0, #0
  407ad8:	4770      	bx	lr
  407ada:	f04f 0001 	mov.w	r0, #1
  407ade:	4770      	bx	lr

00407ae0 <__errno>:
  407ae0:	4b01      	ldr	r3, [pc, #4]	; (407ae8 <__errno+0x8>)
  407ae2:	6818      	ldr	r0, [r3, #0]
  407ae4:	4770      	bx	lr
  407ae6:	bf00      	nop
  407ae8:	20000378 	.word	0x20000378

00407aec <exit>:
  407aec:	b508      	push	{r3, lr}
  407aee:	2100      	movs	r1, #0
  407af0:	4604      	mov	r4, r0
  407af2:	f003 f95d 	bl	40adb0 <__call_exitprocs>
  407af6:	4b04      	ldr	r3, [pc, #16]	; (407b08 <exit+0x1c>)
  407af8:	6818      	ldr	r0, [r3, #0]
  407afa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  407afc:	b103      	cbz	r3, 407b00 <exit+0x14>
  407afe:	4798      	blx	r3
  407b00:	4620      	mov	r0, r4
  407b02:	f7fd f977 	bl	404df4 <_exit>
  407b06:	bf00      	nop
  407b08:	0040fa38 	.word	0x0040fa38

00407b0c <__libc_init_array>:
  407b0c:	b570      	push	{r4, r5, r6, lr}
  407b0e:	4e0f      	ldr	r6, [pc, #60]	; (407b4c <__libc_init_array+0x40>)
  407b10:	4d0f      	ldr	r5, [pc, #60]	; (407b50 <__libc_init_array+0x44>)
  407b12:	1b76      	subs	r6, r6, r5
  407b14:	10b6      	asrs	r6, r6, #2
  407b16:	bf18      	it	ne
  407b18:	2400      	movne	r4, #0
  407b1a:	d005      	beq.n	407b28 <__libc_init_array+0x1c>
  407b1c:	3401      	adds	r4, #1
  407b1e:	f855 3b04 	ldr.w	r3, [r5], #4
  407b22:	4798      	blx	r3
  407b24:	42a6      	cmp	r6, r4
  407b26:	d1f9      	bne.n	407b1c <__libc_init_array+0x10>
  407b28:	4e0a      	ldr	r6, [pc, #40]	; (407b54 <__libc_init_array+0x48>)
  407b2a:	4d0b      	ldr	r5, [pc, #44]	; (407b58 <__libc_init_array+0x4c>)
  407b2c:	1b76      	subs	r6, r6, r5
  407b2e:	f008 f8d7 	bl	40fce0 <_init>
  407b32:	10b6      	asrs	r6, r6, #2
  407b34:	bf18      	it	ne
  407b36:	2400      	movne	r4, #0
  407b38:	d006      	beq.n	407b48 <__libc_init_array+0x3c>
  407b3a:	3401      	adds	r4, #1
  407b3c:	f855 3b04 	ldr.w	r3, [r5], #4
  407b40:	4798      	blx	r3
  407b42:	42a6      	cmp	r6, r4
  407b44:	d1f9      	bne.n	407b3a <__libc_init_array+0x2e>
  407b46:	bd70      	pop	{r4, r5, r6, pc}
  407b48:	bd70      	pop	{r4, r5, r6, pc}
  407b4a:	bf00      	nop
  407b4c:	0040fcec 	.word	0x0040fcec
  407b50:	0040fcec 	.word	0x0040fcec
  407b54:	0040fcf4 	.word	0x0040fcf4
  407b58:	0040fcec 	.word	0x0040fcec

00407b5c <memcpy>:
  407b5c:	4684      	mov	ip, r0
  407b5e:	ea41 0300 	orr.w	r3, r1, r0
  407b62:	f013 0303 	ands.w	r3, r3, #3
  407b66:	d16d      	bne.n	407c44 <memcpy+0xe8>
  407b68:	3a40      	subs	r2, #64	; 0x40
  407b6a:	d341      	bcc.n	407bf0 <memcpy+0x94>
  407b6c:	f851 3b04 	ldr.w	r3, [r1], #4
  407b70:	f840 3b04 	str.w	r3, [r0], #4
  407b74:	f851 3b04 	ldr.w	r3, [r1], #4
  407b78:	f840 3b04 	str.w	r3, [r0], #4
  407b7c:	f851 3b04 	ldr.w	r3, [r1], #4
  407b80:	f840 3b04 	str.w	r3, [r0], #4
  407b84:	f851 3b04 	ldr.w	r3, [r1], #4
  407b88:	f840 3b04 	str.w	r3, [r0], #4
  407b8c:	f851 3b04 	ldr.w	r3, [r1], #4
  407b90:	f840 3b04 	str.w	r3, [r0], #4
  407b94:	f851 3b04 	ldr.w	r3, [r1], #4
  407b98:	f840 3b04 	str.w	r3, [r0], #4
  407b9c:	f851 3b04 	ldr.w	r3, [r1], #4
  407ba0:	f840 3b04 	str.w	r3, [r0], #4
  407ba4:	f851 3b04 	ldr.w	r3, [r1], #4
  407ba8:	f840 3b04 	str.w	r3, [r0], #4
  407bac:	f851 3b04 	ldr.w	r3, [r1], #4
  407bb0:	f840 3b04 	str.w	r3, [r0], #4
  407bb4:	f851 3b04 	ldr.w	r3, [r1], #4
  407bb8:	f840 3b04 	str.w	r3, [r0], #4
  407bbc:	f851 3b04 	ldr.w	r3, [r1], #4
  407bc0:	f840 3b04 	str.w	r3, [r0], #4
  407bc4:	f851 3b04 	ldr.w	r3, [r1], #4
  407bc8:	f840 3b04 	str.w	r3, [r0], #4
  407bcc:	f851 3b04 	ldr.w	r3, [r1], #4
  407bd0:	f840 3b04 	str.w	r3, [r0], #4
  407bd4:	f851 3b04 	ldr.w	r3, [r1], #4
  407bd8:	f840 3b04 	str.w	r3, [r0], #4
  407bdc:	f851 3b04 	ldr.w	r3, [r1], #4
  407be0:	f840 3b04 	str.w	r3, [r0], #4
  407be4:	f851 3b04 	ldr.w	r3, [r1], #4
  407be8:	f840 3b04 	str.w	r3, [r0], #4
  407bec:	3a40      	subs	r2, #64	; 0x40
  407bee:	d2bd      	bcs.n	407b6c <memcpy+0x10>
  407bf0:	3230      	adds	r2, #48	; 0x30
  407bf2:	d311      	bcc.n	407c18 <memcpy+0xbc>
  407bf4:	f851 3b04 	ldr.w	r3, [r1], #4
  407bf8:	f840 3b04 	str.w	r3, [r0], #4
  407bfc:	f851 3b04 	ldr.w	r3, [r1], #4
  407c00:	f840 3b04 	str.w	r3, [r0], #4
  407c04:	f851 3b04 	ldr.w	r3, [r1], #4
  407c08:	f840 3b04 	str.w	r3, [r0], #4
  407c0c:	f851 3b04 	ldr.w	r3, [r1], #4
  407c10:	f840 3b04 	str.w	r3, [r0], #4
  407c14:	3a10      	subs	r2, #16
  407c16:	d2ed      	bcs.n	407bf4 <memcpy+0x98>
  407c18:	320c      	adds	r2, #12
  407c1a:	d305      	bcc.n	407c28 <memcpy+0xcc>
  407c1c:	f851 3b04 	ldr.w	r3, [r1], #4
  407c20:	f840 3b04 	str.w	r3, [r0], #4
  407c24:	3a04      	subs	r2, #4
  407c26:	d2f9      	bcs.n	407c1c <memcpy+0xc0>
  407c28:	3204      	adds	r2, #4
  407c2a:	d008      	beq.n	407c3e <memcpy+0xe2>
  407c2c:	07d2      	lsls	r2, r2, #31
  407c2e:	bf1c      	itt	ne
  407c30:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407c34:	f800 3b01 	strbne.w	r3, [r0], #1
  407c38:	d301      	bcc.n	407c3e <memcpy+0xe2>
  407c3a:	880b      	ldrh	r3, [r1, #0]
  407c3c:	8003      	strh	r3, [r0, #0]
  407c3e:	4660      	mov	r0, ip
  407c40:	4770      	bx	lr
  407c42:	bf00      	nop
  407c44:	2a08      	cmp	r2, #8
  407c46:	d313      	bcc.n	407c70 <memcpy+0x114>
  407c48:	078b      	lsls	r3, r1, #30
  407c4a:	d08d      	beq.n	407b68 <memcpy+0xc>
  407c4c:	f010 0303 	ands.w	r3, r0, #3
  407c50:	d08a      	beq.n	407b68 <memcpy+0xc>
  407c52:	f1c3 0304 	rsb	r3, r3, #4
  407c56:	1ad2      	subs	r2, r2, r3
  407c58:	07db      	lsls	r3, r3, #31
  407c5a:	bf1c      	itt	ne
  407c5c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407c60:	f800 3b01 	strbne.w	r3, [r0], #1
  407c64:	d380      	bcc.n	407b68 <memcpy+0xc>
  407c66:	f831 3b02 	ldrh.w	r3, [r1], #2
  407c6a:	f820 3b02 	strh.w	r3, [r0], #2
  407c6e:	e77b      	b.n	407b68 <memcpy+0xc>
  407c70:	3a04      	subs	r2, #4
  407c72:	d3d9      	bcc.n	407c28 <memcpy+0xcc>
  407c74:	3a01      	subs	r2, #1
  407c76:	f811 3b01 	ldrb.w	r3, [r1], #1
  407c7a:	f800 3b01 	strb.w	r3, [r0], #1
  407c7e:	d2f9      	bcs.n	407c74 <memcpy+0x118>
  407c80:	780b      	ldrb	r3, [r1, #0]
  407c82:	7003      	strb	r3, [r0, #0]
  407c84:	784b      	ldrb	r3, [r1, #1]
  407c86:	7043      	strb	r3, [r0, #1]
  407c88:	788b      	ldrb	r3, [r1, #2]
  407c8a:	7083      	strb	r3, [r0, #2]
  407c8c:	4660      	mov	r0, ip
  407c8e:	4770      	bx	lr

00407c90 <memset>:
  407c90:	b470      	push	{r4, r5, r6}
  407c92:	0786      	lsls	r6, r0, #30
  407c94:	d046      	beq.n	407d24 <memset+0x94>
  407c96:	1e54      	subs	r4, r2, #1
  407c98:	2a00      	cmp	r2, #0
  407c9a:	d041      	beq.n	407d20 <memset+0x90>
  407c9c:	b2ca      	uxtb	r2, r1
  407c9e:	4603      	mov	r3, r0
  407ca0:	e002      	b.n	407ca8 <memset+0x18>
  407ca2:	f114 34ff 	adds.w	r4, r4, #4294967295
  407ca6:	d33b      	bcc.n	407d20 <memset+0x90>
  407ca8:	f803 2b01 	strb.w	r2, [r3], #1
  407cac:	079d      	lsls	r5, r3, #30
  407cae:	d1f8      	bne.n	407ca2 <memset+0x12>
  407cb0:	2c03      	cmp	r4, #3
  407cb2:	d92e      	bls.n	407d12 <memset+0x82>
  407cb4:	b2cd      	uxtb	r5, r1
  407cb6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  407cba:	2c0f      	cmp	r4, #15
  407cbc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  407cc0:	d919      	bls.n	407cf6 <memset+0x66>
  407cc2:	f103 0210 	add.w	r2, r3, #16
  407cc6:	4626      	mov	r6, r4
  407cc8:	3e10      	subs	r6, #16
  407cca:	2e0f      	cmp	r6, #15
  407ccc:	f842 5c10 	str.w	r5, [r2, #-16]
  407cd0:	f842 5c0c 	str.w	r5, [r2, #-12]
  407cd4:	f842 5c08 	str.w	r5, [r2, #-8]
  407cd8:	f842 5c04 	str.w	r5, [r2, #-4]
  407cdc:	f102 0210 	add.w	r2, r2, #16
  407ce0:	d8f2      	bhi.n	407cc8 <memset+0x38>
  407ce2:	f1a4 0210 	sub.w	r2, r4, #16
  407ce6:	f022 020f 	bic.w	r2, r2, #15
  407cea:	f004 040f 	and.w	r4, r4, #15
  407cee:	3210      	adds	r2, #16
  407cf0:	2c03      	cmp	r4, #3
  407cf2:	4413      	add	r3, r2
  407cf4:	d90d      	bls.n	407d12 <memset+0x82>
  407cf6:	461e      	mov	r6, r3
  407cf8:	4622      	mov	r2, r4
  407cfa:	3a04      	subs	r2, #4
  407cfc:	2a03      	cmp	r2, #3
  407cfe:	f846 5b04 	str.w	r5, [r6], #4
  407d02:	d8fa      	bhi.n	407cfa <memset+0x6a>
  407d04:	1f22      	subs	r2, r4, #4
  407d06:	f022 0203 	bic.w	r2, r2, #3
  407d0a:	3204      	adds	r2, #4
  407d0c:	4413      	add	r3, r2
  407d0e:	f004 0403 	and.w	r4, r4, #3
  407d12:	b12c      	cbz	r4, 407d20 <memset+0x90>
  407d14:	b2c9      	uxtb	r1, r1
  407d16:	441c      	add	r4, r3
  407d18:	f803 1b01 	strb.w	r1, [r3], #1
  407d1c:	429c      	cmp	r4, r3
  407d1e:	d1fb      	bne.n	407d18 <memset+0x88>
  407d20:	bc70      	pop	{r4, r5, r6}
  407d22:	4770      	bx	lr
  407d24:	4614      	mov	r4, r2
  407d26:	4603      	mov	r3, r0
  407d28:	e7c2      	b.n	407cb0 <memset+0x20>
  407d2a:	bf00      	nop

00407d2c <printf>:
  407d2c:	b40f      	push	{r0, r1, r2, r3}
  407d2e:	b500      	push	{lr}
  407d30:	4907      	ldr	r1, [pc, #28]	; (407d50 <printf+0x24>)
  407d32:	b083      	sub	sp, #12
  407d34:	ab04      	add	r3, sp, #16
  407d36:	6808      	ldr	r0, [r1, #0]
  407d38:	f853 2b04 	ldr.w	r2, [r3], #4
  407d3c:	6881      	ldr	r1, [r0, #8]
  407d3e:	9301      	str	r3, [sp, #4]
  407d40:	f001 fcda 	bl	4096f8 <_vfprintf_r>
  407d44:	b003      	add	sp, #12
  407d46:	f85d eb04 	ldr.w	lr, [sp], #4
  407d4a:	b004      	add	sp, #16
  407d4c:	4770      	bx	lr
  407d4e:	bf00      	nop
  407d50:	20000378 	.word	0x20000378

00407d54 <_puts_r>:
  407d54:	b5f0      	push	{r4, r5, r6, r7, lr}
  407d56:	4605      	mov	r5, r0
  407d58:	b089      	sub	sp, #36	; 0x24
  407d5a:	4608      	mov	r0, r1
  407d5c:	460c      	mov	r4, r1
  407d5e:	f000 fa2f 	bl	4081c0 <strlen>
  407d62:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407d64:	4f21      	ldr	r7, [pc, #132]	; (407dec <_puts_r+0x98>)
  407d66:	9404      	str	r4, [sp, #16]
  407d68:	2601      	movs	r6, #1
  407d6a:	1c44      	adds	r4, r0, #1
  407d6c:	a904      	add	r1, sp, #16
  407d6e:	2202      	movs	r2, #2
  407d70:	9403      	str	r4, [sp, #12]
  407d72:	9005      	str	r0, [sp, #20]
  407d74:	68ac      	ldr	r4, [r5, #8]
  407d76:	9706      	str	r7, [sp, #24]
  407d78:	9607      	str	r6, [sp, #28]
  407d7a:	9101      	str	r1, [sp, #4]
  407d7c:	9202      	str	r2, [sp, #8]
  407d7e:	b353      	cbz	r3, 407dd6 <_puts_r+0x82>
  407d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407d82:	f013 0f01 	tst.w	r3, #1
  407d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407d8a:	b29a      	uxth	r2, r3
  407d8c:	d101      	bne.n	407d92 <_puts_r+0x3e>
  407d8e:	0590      	lsls	r0, r2, #22
  407d90:	d525      	bpl.n	407dde <_puts_r+0x8a>
  407d92:	0491      	lsls	r1, r2, #18
  407d94:	d406      	bmi.n	407da4 <_puts_r+0x50>
  407d96:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407d98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  407da0:	81a3      	strh	r3, [r4, #12]
  407da2:	6662      	str	r2, [r4, #100]	; 0x64
  407da4:	4628      	mov	r0, r5
  407da6:	aa01      	add	r2, sp, #4
  407da8:	4621      	mov	r1, r4
  407daa:	f004 facd 	bl	40c348 <__sfvwrite_r>
  407dae:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407db0:	2800      	cmp	r0, #0
  407db2:	bf0c      	ite	eq
  407db4:	250a      	moveq	r5, #10
  407db6:	f04f 35ff 	movne.w	r5, #4294967295
  407dba:	07da      	lsls	r2, r3, #31
  407dbc:	d402      	bmi.n	407dc4 <_puts_r+0x70>
  407dbe:	89a3      	ldrh	r3, [r4, #12]
  407dc0:	059b      	lsls	r3, r3, #22
  407dc2:	d502      	bpl.n	407dca <_puts_r+0x76>
  407dc4:	4628      	mov	r0, r5
  407dc6:	b009      	add	sp, #36	; 0x24
  407dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407dca:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407dcc:	f004 fc98 	bl	40c700 <__retarget_lock_release_recursive>
  407dd0:	4628      	mov	r0, r5
  407dd2:	b009      	add	sp, #36	; 0x24
  407dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407dd6:	4628      	mov	r0, r5
  407dd8:	f004 f92e 	bl	40c038 <__sinit>
  407ddc:	e7d0      	b.n	407d80 <_puts_r+0x2c>
  407dde:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407de0:	f004 fc8c 	bl	40c6fc <__retarget_lock_acquire_recursive>
  407de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407de8:	b29a      	uxth	r2, r3
  407dea:	e7d2      	b.n	407d92 <_puts_r+0x3e>
  407dec:	0040f1f0 	.word	0x0040f1f0

00407df0 <puts>:
  407df0:	4b02      	ldr	r3, [pc, #8]	; (407dfc <puts+0xc>)
  407df2:	4601      	mov	r1, r0
  407df4:	6818      	ldr	r0, [r3, #0]
  407df6:	f7ff bfad 	b.w	407d54 <_puts_r>
  407dfa:	bf00      	nop
  407dfc:	20000378 	.word	0x20000378

00407e00 <__srget_r>:
  407e00:	b538      	push	{r3, r4, r5, lr}
  407e02:	460c      	mov	r4, r1
  407e04:	4605      	mov	r5, r0
  407e06:	b108      	cbz	r0, 407e0c <__srget_r+0xc>
  407e08:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407e0a:	b163      	cbz	r3, 407e26 <__srget_r+0x26>
  407e0c:	4628      	mov	r0, r5
  407e0e:	4621      	mov	r1, r4
  407e10:	f005 fd20 	bl	40d854 <__srefill_r>
  407e14:	b950      	cbnz	r0, 407e2c <__srget_r+0x2c>
  407e16:	e894 000c 	ldmia.w	r4, {r2, r3}
  407e1a:	3b01      	subs	r3, #1
  407e1c:	1c51      	adds	r1, r2, #1
  407e1e:	e884 000a 	stmia.w	r4, {r1, r3}
  407e22:	7810      	ldrb	r0, [r2, #0]
  407e24:	bd38      	pop	{r3, r4, r5, pc}
  407e26:	f004 f907 	bl	40c038 <__sinit>
  407e2a:	e7ef      	b.n	407e0c <__srget_r+0xc>
  407e2c:	f04f 30ff 	mov.w	r0, #4294967295
  407e30:	bd38      	pop	{r3, r4, r5, pc}
  407e32:	bf00      	nop

00407e34 <setbuf>:
  407e34:	2900      	cmp	r1, #0
  407e36:	bf0c      	ite	eq
  407e38:	2202      	moveq	r2, #2
  407e3a:	2200      	movne	r2, #0
  407e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407e40:	f000 b800 	b.w	407e44 <setvbuf>

00407e44 <setvbuf>:
  407e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407e48:	4c61      	ldr	r4, [pc, #388]	; (407fd0 <setvbuf+0x18c>)
  407e4a:	6825      	ldr	r5, [r4, #0]
  407e4c:	b083      	sub	sp, #12
  407e4e:	4604      	mov	r4, r0
  407e50:	460f      	mov	r7, r1
  407e52:	4690      	mov	r8, r2
  407e54:	461e      	mov	r6, r3
  407e56:	b115      	cbz	r5, 407e5e <setvbuf+0x1a>
  407e58:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407e5a:	2b00      	cmp	r3, #0
  407e5c:	d064      	beq.n	407f28 <setvbuf+0xe4>
  407e5e:	f1b8 0f02 	cmp.w	r8, #2
  407e62:	d006      	beq.n	407e72 <setvbuf+0x2e>
  407e64:	f1b8 0f01 	cmp.w	r8, #1
  407e68:	f200 809f 	bhi.w	407faa <setvbuf+0x166>
  407e6c:	2e00      	cmp	r6, #0
  407e6e:	f2c0 809c 	blt.w	407faa <setvbuf+0x166>
  407e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407e74:	07d8      	lsls	r0, r3, #31
  407e76:	d534      	bpl.n	407ee2 <setvbuf+0x9e>
  407e78:	4621      	mov	r1, r4
  407e7a:	4628      	mov	r0, r5
  407e7c:	f004 f872 	bl	40bf64 <_fflush_r>
  407e80:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407e82:	b141      	cbz	r1, 407e96 <setvbuf+0x52>
  407e84:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407e88:	4299      	cmp	r1, r3
  407e8a:	d002      	beq.n	407e92 <setvbuf+0x4e>
  407e8c:	4628      	mov	r0, r5
  407e8e:	f004 f975 	bl	40c17c <_free_r>
  407e92:	2300      	movs	r3, #0
  407e94:	6323      	str	r3, [r4, #48]	; 0x30
  407e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407e9a:	2200      	movs	r2, #0
  407e9c:	61a2      	str	r2, [r4, #24]
  407e9e:	6062      	str	r2, [r4, #4]
  407ea0:	061a      	lsls	r2, r3, #24
  407ea2:	d43a      	bmi.n	407f1a <setvbuf+0xd6>
  407ea4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  407ea8:	f023 0303 	bic.w	r3, r3, #3
  407eac:	f1b8 0f02 	cmp.w	r8, #2
  407eb0:	81a3      	strh	r3, [r4, #12]
  407eb2:	d01d      	beq.n	407ef0 <setvbuf+0xac>
  407eb4:	ab01      	add	r3, sp, #4
  407eb6:	466a      	mov	r2, sp
  407eb8:	4621      	mov	r1, r4
  407eba:	4628      	mov	r0, r5
  407ebc:	f004 fc22 	bl	40c704 <__swhatbuf_r>
  407ec0:	89a3      	ldrh	r3, [r4, #12]
  407ec2:	4318      	orrs	r0, r3
  407ec4:	81a0      	strh	r0, [r4, #12]
  407ec6:	2e00      	cmp	r6, #0
  407ec8:	d132      	bne.n	407f30 <setvbuf+0xec>
  407eca:	9e00      	ldr	r6, [sp, #0]
  407ecc:	4630      	mov	r0, r6
  407ece:	f004 fc91 	bl	40c7f4 <malloc>
  407ed2:	4607      	mov	r7, r0
  407ed4:	2800      	cmp	r0, #0
  407ed6:	d06b      	beq.n	407fb0 <setvbuf+0x16c>
  407ed8:	89a3      	ldrh	r3, [r4, #12]
  407eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407ede:	81a3      	strh	r3, [r4, #12]
  407ee0:	e028      	b.n	407f34 <setvbuf+0xf0>
  407ee2:	89a3      	ldrh	r3, [r4, #12]
  407ee4:	0599      	lsls	r1, r3, #22
  407ee6:	d4c7      	bmi.n	407e78 <setvbuf+0x34>
  407ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407eea:	f004 fc07 	bl	40c6fc <__retarget_lock_acquire_recursive>
  407eee:	e7c3      	b.n	407e78 <setvbuf+0x34>
  407ef0:	2500      	movs	r5, #0
  407ef2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407ef4:	2600      	movs	r6, #0
  407ef6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407efa:	f043 0302 	orr.w	r3, r3, #2
  407efe:	2001      	movs	r0, #1
  407f00:	60a6      	str	r6, [r4, #8]
  407f02:	07ce      	lsls	r6, r1, #31
  407f04:	81a3      	strh	r3, [r4, #12]
  407f06:	6022      	str	r2, [r4, #0]
  407f08:	6122      	str	r2, [r4, #16]
  407f0a:	6160      	str	r0, [r4, #20]
  407f0c:	d401      	bmi.n	407f12 <setvbuf+0xce>
  407f0e:	0598      	lsls	r0, r3, #22
  407f10:	d53e      	bpl.n	407f90 <setvbuf+0x14c>
  407f12:	4628      	mov	r0, r5
  407f14:	b003      	add	sp, #12
  407f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407f1a:	6921      	ldr	r1, [r4, #16]
  407f1c:	4628      	mov	r0, r5
  407f1e:	f004 f92d 	bl	40c17c <_free_r>
  407f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407f26:	e7bd      	b.n	407ea4 <setvbuf+0x60>
  407f28:	4628      	mov	r0, r5
  407f2a:	f004 f885 	bl	40c038 <__sinit>
  407f2e:	e796      	b.n	407e5e <setvbuf+0x1a>
  407f30:	2f00      	cmp	r7, #0
  407f32:	d0cb      	beq.n	407ecc <setvbuf+0x88>
  407f34:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407f36:	2b00      	cmp	r3, #0
  407f38:	d033      	beq.n	407fa2 <setvbuf+0x15e>
  407f3a:	9b00      	ldr	r3, [sp, #0]
  407f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407f40:	6027      	str	r7, [r4, #0]
  407f42:	429e      	cmp	r6, r3
  407f44:	bf1c      	itt	ne
  407f46:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  407f4a:	81a2      	strhne	r2, [r4, #12]
  407f4c:	f1b8 0f01 	cmp.w	r8, #1
  407f50:	bf04      	itt	eq
  407f52:	f042 0201 	orreq.w	r2, r2, #1
  407f56:	81a2      	strheq	r2, [r4, #12]
  407f58:	b292      	uxth	r2, r2
  407f5a:	f012 0308 	ands.w	r3, r2, #8
  407f5e:	6127      	str	r7, [r4, #16]
  407f60:	6166      	str	r6, [r4, #20]
  407f62:	d00e      	beq.n	407f82 <setvbuf+0x13e>
  407f64:	07d1      	lsls	r1, r2, #31
  407f66:	d51a      	bpl.n	407f9e <setvbuf+0x15a>
  407f68:	6e65      	ldr	r5, [r4, #100]	; 0x64
  407f6a:	4276      	negs	r6, r6
  407f6c:	2300      	movs	r3, #0
  407f6e:	f015 0501 	ands.w	r5, r5, #1
  407f72:	61a6      	str	r6, [r4, #24]
  407f74:	60a3      	str	r3, [r4, #8]
  407f76:	d009      	beq.n	407f8c <setvbuf+0x148>
  407f78:	2500      	movs	r5, #0
  407f7a:	4628      	mov	r0, r5
  407f7c:	b003      	add	sp, #12
  407f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407f82:	60a3      	str	r3, [r4, #8]
  407f84:	6e65      	ldr	r5, [r4, #100]	; 0x64
  407f86:	f015 0501 	ands.w	r5, r5, #1
  407f8a:	d1f5      	bne.n	407f78 <setvbuf+0x134>
  407f8c:	0593      	lsls	r3, r2, #22
  407f8e:	d4c0      	bmi.n	407f12 <setvbuf+0xce>
  407f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407f92:	f004 fbb5 	bl	40c700 <__retarget_lock_release_recursive>
  407f96:	4628      	mov	r0, r5
  407f98:	b003      	add	sp, #12
  407f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407f9e:	60a6      	str	r6, [r4, #8]
  407fa0:	e7f0      	b.n	407f84 <setvbuf+0x140>
  407fa2:	4628      	mov	r0, r5
  407fa4:	f004 f848 	bl	40c038 <__sinit>
  407fa8:	e7c7      	b.n	407f3a <setvbuf+0xf6>
  407faa:	f04f 35ff 	mov.w	r5, #4294967295
  407fae:	e7b0      	b.n	407f12 <setvbuf+0xce>
  407fb0:	f8dd 9000 	ldr.w	r9, [sp]
  407fb4:	45b1      	cmp	r9, r6
  407fb6:	d004      	beq.n	407fc2 <setvbuf+0x17e>
  407fb8:	4648      	mov	r0, r9
  407fba:	f004 fc1b 	bl	40c7f4 <malloc>
  407fbe:	4607      	mov	r7, r0
  407fc0:	b920      	cbnz	r0, 407fcc <setvbuf+0x188>
  407fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407fc6:	f04f 35ff 	mov.w	r5, #4294967295
  407fca:	e792      	b.n	407ef2 <setvbuf+0xae>
  407fcc:	464e      	mov	r6, r9
  407fce:	e783      	b.n	407ed8 <setvbuf+0x94>
  407fd0:	20000378 	.word	0x20000378

00407fd4 <sprintf>:
  407fd4:	b40e      	push	{r1, r2, r3}
  407fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
  407fd8:	b09c      	sub	sp, #112	; 0x70
  407fda:	ab21      	add	r3, sp, #132	; 0x84
  407fdc:	490f      	ldr	r1, [pc, #60]	; (40801c <sprintf+0x48>)
  407fde:	f853 2b04 	ldr.w	r2, [r3], #4
  407fe2:	9301      	str	r3, [sp, #4]
  407fe4:	4605      	mov	r5, r0
  407fe6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  407fea:	6808      	ldr	r0, [r1, #0]
  407fec:	9502      	str	r5, [sp, #8]
  407fee:	f44f 7702 	mov.w	r7, #520	; 0x208
  407ff2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  407ff6:	a902      	add	r1, sp, #8
  407ff8:	9506      	str	r5, [sp, #24]
  407ffa:	f8ad 7014 	strh.w	r7, [sp, #20]
  407ffe:	9404      	str	r4, [sp, #16]
  408000:	9407      	str	r4, [sp, #28]
  408002:	f8ad 6016 	strh.w	r6, [sp, #22]
  408006:	f000 f949 	bl	40829c <_svfprintf_r>
  40800a:	9b02      	ldr	r3, [sp, #8]
  40800c:	2200      	movs	r2, #0
  40800e:	701a      	strb	r2, [r3, #0]
  408010:	b01c      	add	sp, #112	; 0x70
  408012:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  408016:	b003      	add	sp, #12
  408018:	4770      	bx	lr
  40801a:	bf00      	nop
  40801c:	20000378 	.word	0x20000378

00408020 <strcpy>:
  408020:	ea80 0201 	eor.w	r2, r0, r1
  408024:	4684      	mov	ip, r0
  408026:	f012 0f03 	tst.w	r2, #3
  40802a:	d14f      	bne.n	4080cc <strcpy+0xac>
  40802c:	f011 0f03 	tst.w	r1, #3
  408030:	d132      	bne.n	408098 <strcpy+0x78>
  408032:	f84d 4d04 	str.w	r4, [sp, #-4]!
  408036:	f011 0f04 	tst.w	r1, #4
  40803a:	f851 3b04 	ldr.w	r3, [r1], #4
  40803e:	d00b      	beq.n	408058 <strcpy+0x38>
  408040:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  408044:	439a      	bics	r2, r3
  408046:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40804a:	bf04      	itt	eq
  40804c:	f84c 3b04 	streq.w	r3, [ip], #4
  408050:	f851 3b04 	ldreq.w	r3, [r1], #4
  408054:	d116      	bne.n	408084 <strcpy+0x64>
  408056:	bf00      	nop
  408058:	f851 4b04 	ldr.w	r4, [r1], #4
  40805c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  408060:	439a      	bics	r2, r3
  408062:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  408066:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  40806a:	d10b      	bne.n	408084 <strcpy+0x64>
  40806c:	f84c 3b04 	str.w	r3, [ip], #4
  408070:	43a2      	bics	r2, r4
  408072:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  408076:	bf04      	itt	eq
  408078:	f851 3b04 	ldreq.w	r3, [r1], #4
  40807c:	f84c 4b04 	streq.w	r4, [ip], #4
  408080:	d0ea      	beq.n	408058 <strcpy+0x38>
  408082:	4623      	mov	r3, r4
  408084:	f80c 3b01 	strb.w	r3, [ip], #1
  408088:	f013 0fff 	tst.w	r3, #255	; 0xff
  40808c:	ea4f 2333 	mov.w	r3, r3, ror #8
  408090:	d1f8      	bne.n	408084 <strcpy+0x64>
  408092:	f85d 4b04 	ldr.w	r4, [sp], #4
  408096:	4770      	bx	lr
  408098:	f011 0f01 	tst.w	r1, #1
  40809c:	d006      	beq.n	4080ac <strcpy+0x8c>
  40809e:	f811 2b01 	ldrb.w	r2, [r1], #1
  4080a2:	f80c 2b01 	strb.w	r2, [ip], #1
  4080a6:	2a00      	cmp	r2, #0
  4080a8:	bf08      	it	eq
  4080aa:	4770      	bxeq	lr
  4080ac:	f011 0f02 	tst.w	r1, #2
  4080b0:	d0bf      	beq.n	408032 <strcpy+0x12>
  4080b2:	f831 2b02 	ldrh.w	r2, [r1], #2
  4080b6:	f012 0fff 	tst.w	r2, #255	; 0xff
  4080ba:	bf16      	itet	ne
  4080bc:	f82c 2b02 	strhne.w	r2, [ip], #2
  4080c0:	f88c 2000 	strbeq.w	r2, [ip]
  4080c4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  4080c8:	d1b3      	bne.n	408032 <strcpy+0x12>
  4080ca:	4770      	bx	lr
  4080cc:	f811 2b01 	ldrb.w	r2, [r1], #1
  4080d0:	f80c 2b01 	strb.w	r2, [ip], #1
  4080d4:	2a00      	cmp	r2, #0
  4080d6:	d1f9      	bne.n	4080cc <strcpy+0xac>
  4080d8:	4770      	bx	lr
  4080da:	bf00      	nop

004080dc <strlcat>:
  4080dc:	b570      	push	{r4, r5, r6, lr}
  4080de:	b322      	cbz	r2, 40812a <strlcat+0x4e>
  4080e0:	7806      	ldrb	r6, [r0, #0]
  4080e2:	b386      	cbz	r6, 408146 <strlcat+0x6a>
  4080e4:	1c43      	adds	r3, r0, #1
  4080e6:	1886      	adds	r6, r0, r2
  4080e8:	e002      	b.n	4080f0 <strlcat+0x14>
  4080ea:	781d      	ldrb	r5, [r3, #0]
  4080ec:	3301      	adds	r3, #1
  4080ee:	b115      	cbz	r5, 4080f6 <strlcat+0x1a>
  4080f0:	429e      	cmp	r6, r3
  4080f2:	461c      	mov	r4, r3
  4080f4:	d1f9      	bne.n	4080ea <strlcat+0xe>
  4080f6:	1a26      	subs	r6, r4, r0
  4080f8:	1b92      	subs	r2, r2, r6
  4080fa:	d017      	beq.n	40812c <strlcat+0x50>
  4080fc:	780d      	ldrb	r5, [r1, #0]
  4080fe:	b305      	cbz	r5, 408142 <strlcat+0x66>
  408100:	2a01      	cmp	r2, #1
  408102:	d018      	beq.n	408136 <strlcat+0x5a>
  408104:	3a01      	subs	r2, #1
  408106:	440a      	add	r2, r1
  408108:	460b      	mov	r3, r1
  40810a:	f804 5b01 	strb.w	r5, [r4], #1
  40810e:	f813 5f01 	ldrb.w	r5, [r3, #1]!
  408112:	b12d      	cbz	r5, 408120 <strlcat+0x44>
  408114:	4293      	cmp	r3, r2
  408116:	d1f8      	bne.n	40810a <strlcat+0x2e>
  408118:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  40811c:	2a00      	cmp	r2, #0
  40811e:	d1fb      	bne.n	408118 <strlcat+0x3c>
  408120:	1a5b      	subs	r3, r3, r1
  408122:	2200      	movs	r2, #0
  408124:	7022      	strb	r2, [r4, #0]
  408126:	18f0      	adds	r0, r6, r3
  408128:	bd70      	pop	{r4, r5, r6, pc}
  40812a:	4616      	mov	r6, r2
  40812c:	4608      	mov	r0, r1
  40812e:	f000 f847 	bl	4081c0 <strlen>
  408132:	4430      	add	r0, r6
  408134:	bd70      	pop	{r4, r5, r6, pc}
  408136:	460b      	mov	r3, r1
  408138:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  40813c:	2a00      	cmp	r2, #0
  40813e:	d1eb      	bne.n	408118 <strlcat+0x3c>
  408140:	e7ee      	b.n	408120 <strlcat+0x44>
  408142:	462b      	mov	r3, r5
  408144:	e7ed      	b.n	408122 <strlcat+0x46>
  408146:	4604      	mov	r4, r0
  408148:	e7d8      	b.n	4080fc <strlcat+0x20>
  40814a:	bf00      	nop

0040814c <strlcpy>:
  40814c:	b182      	cbz	r2, 408170 <strlcpy+0x24>
  40814e:	3a01      	subs	r2, #1
  408150:	d016      	beq.n	408180 <strlcpy+0x34>
  408152:	b410      	push	{r4}
  408154:	460b      	mov	r3, r1
  408156:	e001      	b.n	40815c <strlcpy+0x10>
  408158:	3a01      	subs	r2, #1
  40815a:	d015      	beq.n	408188 <strlcpy+0x3c>
  40815c:	f813 4b01 	ldrb.w	r4, [r3], #1
  408160:	f800 4b01 	strb.w	r4, [r0], #1
  408164:	2c00      	cmp	r4, #0
  408166:	d1f7      	bne.n	408158 <strlcpy+0xc>
  408168:	1a58      	subs	r0, r3, r1
  40816a:	3801      	subs	r0, #1
  40816c:	bc10      	pop	{r4}
  40816e:	4770      	bx	lr
  408170:	460b      	mov	r3, r1
  408172:	f813 2b01 	ldrb.w	r2, [r3], #1
  408176:	2a00      	cmp	r2, #0
  408178:	d1fb      	bne.n	408172 <strlcpy+0x26>
  40817a:	1a58      	subs	r0, r3, r1
  40817c:	3801      	subs	r0, #1
  40817e:	4770      	bx	lr
  408180:	2200      	movs	r2, #0
  408182:	460b      	mov	r3, r1
  408184:	7002      	strb	r2, [r0, #0]
  408186:	e7f4      	b.n	408172 <strlcpy+0x26>
  408188:	2200      	movs	r2, #0
  40818a:	7002      	strb	r2, [r0, #0]
  40818c:	f813 2b01 	ldrb.w	r2, [r3], #1
  408190:	2a00      	cmp	r2, #0
  408192:	d1fb      	bne.n	40818c <strlcpy+0x40>
  408194:	1a58      	subs	r0, r3, r1
  408196:	3801      	subs	r0, #1
  408198:	bc10      	pop	{r4}
  40819a:	4770      	bx	lr
	...

004081c0 <strlen>:
  4081c0:	f890 f000 	pld	[r0]
  4081c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4081c8:	f020 0107 	bic.w	r1, r0, #7
  4081cc:	f06f 0c00 	mvn.w	ip, #0
  4081d0:	f010 0407 	ands.w	r4, r0, #7
  4081d4:	f891 f020 	pld	[r1, #32]
  4081d8:	f040 8049 	bne.w	40826e <strlen+0xae>
  4081dc:	f04f 0400 	mov.w	r4, #0
  4081e0:	f06f 0007 	mvn.w	r0, #7
  4081e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4081e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4081ec:	f100 0008 	add.w	r0, r0, #8
  4081f0:	fa82 f24c 	uadd8	r2, r2, ip
  4081f4:	faa4 f28c 	sel	r2, r4, ip
  4081f8:	fa83 f34c 	uadd8	r3, r3, ip
  4081fc:	faa2 f38c 	sel	r3, r2, ip
  408200:	bb4b      	cbnz	r3, 408256 <strlen+0x96>
  408202:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  408206:	fa82 f24c 	uadd8	r2, r2, ip
  40820a:	f100 0008 	add.w	r0, r0, #8
  40820e:	faa4 f28c 	sel	r2, r4, ip
  408212:	fa83 f34c 	uadd8	r3, r3, ip
  408216:	faa2 f38c 	sel	r3, r2, ip
  40821a:	b9e3      	cbnz	r3, 408256 <strlen+0x96>
  40821c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  408220:	fa82 f24c 	uadd8	r2, r2, ip
  408224:	f100 0008 	add.w	r0, r0, #8
  408228:	faa4 f28c 	sel	r2, r4, ip
  40822c:	fa83 f34c 	uadd8	r3, r3, ip
  408230:	faa2 f38c 	sel	r3, r2, ip
  408234:	b97b      	cbnz	r3, 408256 <strlen+0x96>
  408236:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40823a:	f101 0120 	add.w	r1, r1, #32
  40823e:	fa82 f24c 	uadd8	r2, r2, ip
  408242:	f100 0008 	add.w	r0, r0, #8
  408246:	faa4 f28c 	sel	r2, r4, ip
  40824a:	fa83 f34c 	uadd8	r3, r3, ip
  40824e:	faa2 f38c 	sel	r3, r2, ip
  408252:	2b00      	cmp	r3, #0
  408254:	d0c6      	beq.n	4081e4 <strlen+0x24>
  408256:	2a00      	cmp	r2, #0
  408258:	bf04      	itt	eq
  40825a:	3004      	addeq	r0, #4
  40825c:	461a      	moveq	r2, r3
  40825e:	ba12      	rev	r2, r2
  408260:	fab2 f282 	clz	r2, r2
  408264:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  408268:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40826c:	4770      	bx	lr
  40826e:	e9d1 2300 	ldrd	r2, r3, [r1]
  408272:	f004 0503 	and.w	r5, r4, #3
  408276:	f1c4 0000 	rsb	r0, r4, #0
  40827a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40827e:	f014 0f04 	tst.w	r4, #4
  408282:	f891 f040 	pld	[r1, #64]	; 0x40
  408286:	fa0c f505 	lsl.w	r5, ip, r5
  40828a:	ea62 0205 	orn	r2, r2, r5
  40828e:	bf1c      	itt	ne
  408290:	ea63 0305 	ornne	r3, r3, r5
  408294:	4662      	movne	r2, ip
  408296:	f04f 0400 	mov.w	r4, #0
  40829a:	e7a9      	b.n	4081f0 <strlen+0x30>

0040829c <_svfprintf_r>:
  40829c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4082a0:	b0c3      	sub	sp, #268	; 0x10c
  4082a2:	460c      	mov	r4, r1
  4082a4:	910b      	str	r1, [sp, #44]	; 0x2c
  4082a6:	4692      	mov	sl, r2
  4082a8:	930f      	str	r3, [sp, #60]	; 0x3c
  4082aa:	900c      	str	r0, [sp, #48]	; 0x30
  4082ac:	f004 fa14 	bl	40c6d8 <_localeconv_r>
  4082b0:	6803      	ldr	r3, [r0, #0]
  4082b2:	931a      	str	r3, [sp, #104]	; 0x68
  4082b4:	4618      	mov	r0, r3
  4082b6:	f7ff ff83 	bl	4081c0 <strlen>
  4082ba:	89a3      	ldrh	r3, [r4, #12]
  4082bc:	9019      	str	r0, [sp, #100]	; 0x64
  4082be:	0619      	lsls	r1, r3, #24
  4082c0:	d503      	bpl.n	4082ca <_svfprintf_r+0x2e>
  4082c2:	6923      	ldr	r3, [r4, #16]
  4082c4:	2b00      	cmp	r3, #0
  4082c6:	f001 8003 	beq.w	4092d0 <_svfprintf_r+0x1034>
  4082ca:	2300      	movs	r3, #0
  4082cc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4082d0:	9313      	str	r3, [sp, #76]	; 0x4c
  4082d2:	9315      	str	r3, [sp, #84]	; 0x54
  4082d4:	9314      	str	r3, [sp, #80]	; 0x50
  4082d6:	9327      	str	r3, [sp, #156]	; 0x9c
  4082d8:	9326      	str	r3, [sp, #152]	; 0x98
  4082da:	9318      	str	r3, [sp, #96]	; 0x60
  4082dc:	931b      	str	r3, [sp, #108]	; 0x6c
  4082de:	9309      	str	r3, [sp, #36]	; 0x24
  4082e0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4082e4:	46c8      	mov	r8, r9
  4082e6:	9316      	str	r3, [sp, #88]	; 0x58
  4082e8:	9317      	str	r3, [sp, #92]	; 0x5c
  4082ea:	f89a 3000 	ldrb.w	r3, [sl]
  4082ee:	4654      	mov	r4, sl
  4082f0:	b1e3      	cbz	r3, 40832c <_svfprintf_r+0x90>
  4082f2:	2b25      	cmp	r3, #37	; 0x25
  4082f4:	d102      	bne.n	4082fc <_svfprintf_r+0x60>
  4082f6:	e019      	b.n	40832c <_svfprintf_r+0x90>
  4082f8:	2b25      	cmp	r3, #37	; 0x25
  4082fa:	d003      	beq.n	408304 <_svfprintf_r+0x68>
  4082fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  408300:	2b00      	cmp	r3, #0
  408302:	d1f9      	bne.n	4082f8 <_svfprintf_r+0x5c>
  408304:	eba4 050a 	sub.w	r5, r4, sl
  408308:	b185      	cbz	r5, 40832c <_svfprintf_r+0x90>
  40830a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40830c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40830e:	f8c8 a000 	str.w	sl, [r8]
  408312:	3301      	adds	r3, #1
  408314:	442a      	add	r2, r5
  408316:	2b07      	cmp	r3, #7
  408318:	f8c8 5004 	str.w	r5, [r8, #4]
  40831c:	9227      	str	r2, [sp, #156]	; 0x9c
  40831e:	9326      	str	r3, [sp, #152]	; 0x98
  408320:	dc7f      	bgt.n	408422 <_svfprintf_r+0x186>
  408322:	f108 0808 	add.w	r8, r8, #8
  408326:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408328:	442b      	add	r3, r5
  40832a:	9309      	str	r3, [sp, #36]	; 0x24
  40832c:	7823      	ldrb	r3, [r4, #0]
  40832e:	2b00      	cmp	r3, #0
  408330:	d07f      	beq.n	408432 <_svfprintf_r+0x196>
  408332:	2300      	movs	r3, #0
  408334:	461a      	mov	r2, r3
  408336:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40833a:	4619      	mov	r1, r3
  40833c:	930d      	str	r3, [sp, #52]	; 0x34
  40833e:	469b      	mov	fp, r3
  408340:	f04f 30ff 	mov.w	r0, #4294967295
  408344:	7863      	ldrb	r3, [r4, #1]
  408346:	900a      	str	r0, [sp, #40]	; 0x28
  408348:	f104 0a01 	add.w	sl, r4, #1
  40834c:	f10a 0a01 	add.w	sl, sl, #1
  408350:	f1a3 0020 	sub.w	r0, r3, #32
  408354:	2858      	cmp	r0, #88	; 0x58
  408356:	f200 83c1 	bhi.w	408adc <_svfprintf_r+0x840>
  40835a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40835e:	0238      	.short	0x0238
  408360:	03bf03bf 	.word	0x03bf03bf
  408364:	03bf0240 	.word	0x03bf0240
  408368:	03bf03bf 	.word	0x03bf03bf
  40836c:	03bf03bf 	.word	0x03bf03bf
  408370:	024503bf 	.word	0x024503bf
  408374:	03bf0203 	.word	0x03bf0203
  408378:	026b005d 	.word	0x026b005d
  40837c:	028603bf 	.word	0x028603bf
  408380:	039d039d 	.word	0x039d039d
  408384:	039d039d 	.word	0x039d039d
  408388:	039d039d 	.word	0x039d039d
  40838c:	039d039d 	.word	0x039d039d
  408390:	03bf039d 	.word	0x03bf039d
  408394:	03bf03bf 	.word	0x03bf03bf
  408398:	03bf03bf 	.word	0x03bf03bf
  40839c:	03bf03bf 	.word	0x03bf03bf
  4083a0:	03bf03bf 	.word	0x03bf03bf
  4083a4:	033703bf 	.word	0x033703bf
  4083a8:	03bf0357 	.word	0x03bf0357
  4083ac:	03bf0357 	.word	0x03bf0357
  4083b0:	03bf03bf 	.word	0x03bf03bf
  4083b4:	039803bf 	.word	0x039803bf
  4083b8:	03bf03bf 	.word	0x03bf03bf
  4083bc:	03bf03ad 	.word	0x03bf03ad
  4083c0:	03bf03bf 	.word	0x03bf03bf
  4083c4:	03bf03bf 	.word	0x03bf03bf
  4083c8:	03bf0259 	.word	0x03bf0259
  4083cc:	031e03bf 	.word	0x031e03bf
  4083d0:	03bf03bf 	.word	0x03bf03bf
  4083d4:	03bf03bf 	.word	0x03bf03bf
  4083d8:	03bf03bf 	.word	0x03bf03bf
  4083dc:	03bf03bf 	.word	0x03bf03bf
  4083e0:	03bf03bf 	.word	0x03bf03bf
  4083e4:	02db02c6 	.word	0x02db02c6
  4083e8:	03570357 	.word	0x03570357
  4083ec:	028b0357 	.word	0x028b0357
  4083f0:	03bf02db 	.word	0x03bf02db
  4083f4:	029003bf 	.word	0x029003bf
  4083f8:	029d03bf 	.word	0x029d03bf
  4083fc:	02b401cc 	.word	0x02b401cc
  408400:	03bf0208 	.word	0x03bf0208
  408404:	03bf01e1 	.word	0x03bf01e1
  408408:	03bf007e 	.word	0x03bf007e
  40840c:	020d03bf 	.word	0x020d03bf
  408410:	980d      	ldr	r0, [sp, #52]	; 0x34
  408412:	930f      	str	r3, [sp, #60]	; 0x3c
  408414:	4240      	negs	r0, r0
  408416:	900d      	str	r0, [sp, #52]	; 0x34
  408418:	f04b 0b04 	orr.w	fp, fp, #4
  40841c:	f89a 3000 	ldrb.w	r3, [sl]
  408420:	e794      	b.n	40834c <_svfprintf_r+0xb0>
  408422:	aa25      	add	r2, sp, #148	; 0x94
  408424:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408426:	980c      	ldr	r0, [sp, #48]	; 0x30
  408428:	f005 faf4 	bl	40da14 <__ssprint_r>
  40842c:	b940      	cbnz	r0, 408440 <_svfprintf_r+0x1a4>
  40842e:	46c8      	mov	r8, r9
  408430:	e779      	b.n	408326 <_svfprintf_r+0x8a>
  408432:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  408434:	b123      	cbz	r3, 408440 <_svfprintf_r+0x1a4>
  408436:	980c      	ldr	r0, [sp, #48]	; 0x30
  408438:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40843a:	aa25      	add	r2, sp, #148	; 0x94
  40843c:	f005 faea 	bl	40da14 <__ssprint_r>
  408440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408442:	899b      	ldrh	r3, [r3, #12]
  408444:	f013 0f40 	tst.w	r3, #64	; 0x40
  408448:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40844a:	bf18      	it	ne
  40844c:	f04f 33ff 	movne.w	r3, #4294967295
  408450:	9309      	str	r3, [sp, #36]	; 0x24
  408452:	9809      	ldr	r0, [sp, #36]	; 0x24
  408454:	b043      	add	sp, #268	; 0x10c
  408456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40845a:	f01b 0f20 	tst.w	fp, #32
  40845e:	9311      	str	r3, [sp, #68]	; 0x44
  408460:	f040 81dd 	bne.w	40881e <_svfprintf_r+0x582>
  408464:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408466:	f01b 0f10 	tst.w	fp, #16
  40846a:	4613      	mov	r3, r2
  40846c:	f040 856e 	bne.w	408f4c <_svfprintf_r+0xcb0>
  408470:	f01b 0f40 	tst.w	fp, #64	; 0x40
  408474:	f000 856a 	beq.w	408f4c <_svfprintf_r+0xcb0>
  408478:	8814      	ldrh	r4, [r2, #0]
  40847a:	3204      	adds	r2, #4
  40847c:	2500      	movs	r5, #0
  40847e:	2301      	movs	r3, #1
  408480:	920f      	str	r2, [sp, #60]	; 0x3c
  408482:	2700      	movs	r7, #0
  408484:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  408488:	990a      	ldr	r1, [sp, #40]	; 0x28
  40848a:	1c4a      	adds	r2, r1, #1
  40848c:	f000 8265 	beq.w	40895a <_svfprintf_r+0x6be>
  408490:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  408494:	9207      	str	r2, [sp, #28]
  408496:	ea54 0205 	orrs.w	r2, r4, r5
  40849a:	f040 8264 	bne.w	408966 <_svfprintf_r+0x6ca>
  40849e:	2900      	cmp	r1, #0
  4084a0:	f040 843c 	bne.w	408d1c <_svfprintf_r+0xa80>
  4084a4:	2b00      	cmp	r3, #0
  4084a6:	f040 84d7 	bne.w	408e58 <_svfprintf_r+0xbbc>
  4084aa:	f01b 0301 	ands.w	r3, fp, #1
  4084ae:	930e      	str	r3, [sp, #56]	; 0x38
  4084b0:	f000 8604 	beq.w	4090bc <_svfprintf_r+0xe20>
  4084b4:	ae42      	add	r6, sp, #264	; 0x108
  4084b6:	2330      	movs	r3, #48	; 0x30
  4084b8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4084bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4084be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4084c0:	4293      	cmp	r3, r2
  4084c2:	bfb8      	it	lt
  4084c4:	4613      	movlt	r3, r2
  4084c6:	9308      	str	r3, [sp, #32]
  4084c8:	2300      	movs	r3, #0
  4084ca:	9312      	str	r3, [sp, #72]	; 0x48
  4084cc:	b117      	cbz	r7, 4084d4 <_svfprintf_r+0x238>
  4084ce:	9b08      	ldr	r3, [sp, #32]
  4084d0:	3301      	adds	r3, #1
  4084d2:	9308      	str	r3, [sp, #32]
  4084d4:	9b07      	ldr	r3, [sp, #28]
  4084d6:	f013 0302 	ands.w	r3, r3, #2
  4084da:	9310      	str	r3, [sp, #64]	; 0x40
  4084dc:	d002      	beq.n	4084e4 <_svfprintf_r+0x248>
  4084de:	9b08      	ldr	r3, [sp, #32]
  4084e0:	3302      	adds	r3, #2
  4084e2:	9308      	str	r3, [sp, #32]
  4084e4:	9b07      	ldr	r3, [sp, #28]
  4084e6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4084ea:	f040 830e 	bne.w	408b0a <_svfprintf_r+0x86e>
  4084ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4084f0:	9a08      	ldr	r2, [sp, #32]
  4084f2:	eba3 0b02 	sub.w	fp, r3, r2
  4084f6:	f1bb 0f00 	cmp.w	fp, #0
  4084fa:	f340 8306 	ble.w	408b0a <_svfprintf_r+0x86e>
  4084fe:	f1bb 0f10 	cmp.w	fp, #16
  408502:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408504:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408506:	dd29      	ble.n	40855c <_svfprintf_r+0x2c0>
  408508:	4643      	mov	r3, r8
  40850a:	4621      	mov	r1, r4
  40850c:	46a8      	mov	r8, r5
  40850e:	2710      	movs	r7, #16
  408510:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408512:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  408514:	e006      	b.n	408524 <_svfprintf_r+0x288>
  408516:	f1ab 0b10 	sub.w	fp, fp, #16
  40851a:	f1bb 0f10 	cmp.w	fp, #16
  40851e:	f103 0308 	add.w	r3, r3, #8
  408522:	dd18      	ble.n	408556 <_svfprintf_r+0x2ba>
  408524:	3201      	adds	r2, #1
  408526:	48b7      	ldr	r0, [pc, #732]	; (408804 <_svfprintf_r+0x568>)
  408528:	9226      	str	r2, [sp, #152]	; 0x98
  40852a:	3110      	adds	r1, #16
  40852c:	2a07      	cmp	r2, #7
  40852e:	9127      	str	r1, [sp, #156]	; 0x9c
  408530:	e883 0081 	stmia.w	r3, {r0, r7}
  408534:	ddef      	ble.n	408516 <_svfprintf_r+0x27a>
  408536:	aa25      	add	r2, sp, #148	; 0x94
  408538:	4629      	mov	r1, r5
  40853a:	4620      	mov	r0, r4
  40853c:	f005 fa6a 	bl	40da14 <__ssprint_r>
  408540:	2800      	cmp	r0, #0
  408542:	f47f af7d 	bne.w	408440 <_svfprintf_r+0x1a4>
  408546:	f1ab 0b10 	sub.w	fp, fp, #16
  40854a:	f1bb 0f10 	cmp.w	fp, #16
  40854e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  408550:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408552:	464b      	mov	r3, r9
  408554:	dce6      	bgt.n	408524 <_svfprintf_r+0x288>
  408556:	4645      	mov	r5, r8
  408558:	460c      	mov	r4, r1
  40855a:	4698      	mov	r8, r3
  40855c:	3201      	adds	r2, #1
  40855e:	4ba9      	ldr	r3, [pc, #676]	; (408804 <_svfprintf_r+0x568>)
  408560:	9226      	str	r2, [sp, #152]	; 0x98
  408562:	445c      	add	r4, fp
  408564:	2a07      	cmp	r2, #7
  408566:	9427      	str	r4, [sp, #156]	; 0x9c
  408568:	e888 0808 	stmia.w	r8, {r3, fp}
  40856c:	f300 8498 	bgt.w	408ea0 <_svfprintf_r+0xc04>
  408570:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408574:	f108 0808 	add.w	r8, r8, #8
  408578:	b177      	cbz	r7, 408598 <_svfprintf_r+0x2fc>
  40857a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40857c:	3301      	adds	r3, #1
  40857e:	3401      	adds	r4, #1
  408580:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  408584:	2201      	movs	r2, #1
  408586:	2b07      	cmp	r3, #7
  408588:	9427      	str	r4, [sp, #156]	; 0x9c
  40858a:	9326      	str	r3, [sp, #152]	; 0x98
  40858c:	e888 0006 	stmia.w	r8, {r1, r2}
  408590:	f300 83db 	bgt.w	408d4a <_svfprintf_r+0xaae>
  408594:	f108 0808 	add.w	r8, r8, #8
  408598:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40859a:	b16b      	cbz	r3, 4085b8 <_svfprintf_r+0x31c>
  40859c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40859e:	3301      	adds	r3, #1
  4085a0:	3402      	adds	r4, #2
  4085a2:	a91e      	add	r1, sp, #120	; 0x78
  4085a4:	2202      	movs	r2, #2
  4085a6:	2b07      	cmp	r3, #7
  4085a8:	9427      	str	r4, [sp, #156]	; 0x9c
  4085aa:	9326      	str	r3, [sp, #152]	; 0x98
  4085ac:	e888 0006 	stmia.w	r8, {r1, r2}
  4085b0:	f300 83d6 	bgt.w	408d60 <_svfprintf_r+0xac4>
  4085b4:	f108 0808 	add.w	r8, r8, #8
  4085b8:	2d80      	cmp	r5, #128	; 0x80
  4085ba:	f000 8315 	beq.w	408be8 <_svfprintf_r+0x94c>
  4085be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4085c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4085c2:	1a9f      	subs	r7, r3, r2
  4085c4:	2f00      	cmp	r7, #0
  4085c6:	dd36      	ble.n	408636 <_svfprintf_r+0x39a>
  4085c8:	2f10      	cmp	r7, #16
  4085ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4085cc:	4d8e      	ldr	r5, [pc, #568]	; (408808 <_svfprintf_r+0x56c>)
  4085ce:	dd27      	ble.n	408620 <_svfprintf_r+0x384>
  4085d0:	4642      	mov	r2, r8
  4085d2:	4621      	mov	r1, r4
  4085d4:	46b0      	mov	r8, r6
  4085d6:	f04f 0b10 	mov.w	fp, #16
  4085da:	462e      	mov	r6, r5
  4085dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4085de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4085e0:	e004      	b.n	4085ec <_svfprintf_r+0x350>
  4085e2:	3f10      	subs	r7, #16
  4085e4:	2f10      	cmp	r7, #16
  4085e6:	f102 0208 	add.w	r2, r2, #8
  4085ea:	dd15      	ble.n	408618 <_svfprintf_r+0x37c>
  4085ec:	3301      	adds	r3, #1
  4085ee:	3110      	adds	r1, #16
  4085f0:	2b07      	cmp	r3, #7
  4085f2:	9127      	str	r1, [sp, #156]	; 0x9c
  4085f4:	9326      	str	r3, [sp, #152]	; 0x98
  4085f6:	e882 0840 	stmia.w	r2, {r6, fp}
  4085fa:	ddf2      	ble.n	4085e2 <_svfprintf_r+0x346>
  4085fc:	aa25      	add	r2, sp, #148	; 0x94
  4085fe:	4629      	mov	r1, r5
  408600:	4620      	mov	r0, r4
  408602:	f005 fa07 	bl	40da14 <__ssprint_r>
  408606:	2800      	cmp	r0, #0
  408608:	f47f af1a 	bne.w	408440 <_svfprintf_r+0x1a4>
  40860c:	3f10      	subs	r7, #16
  40860e:	2f10      	cmp	r7, #16
  408610:	9927      	ldr	r1, [sp, #156]	; 0x9c
  408612:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408614:	464a      	mov	r2, r9
  408616:	dce9      	bgt.n	4085ec <_svfprintf_r+0x350>
  408618:	4635      	mov	r5, r6
  40861a:	460c      	mov	r4, r1
  40861c:	4646      	mov	r6, r8
  40861e:	4690      	mov	r8, r2
  408620:	3301      	adds	r3, #1
  408622:	443c      	add	r4, r7
  408624:	2b07      	cmp	r3, #7
  408626:	9427      	str	r4, [sp, #156]	; 0x9c
  408628:	9326      	str	r3, [sp, #152]	; 0x98
  40862a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40862e:	f300 8381 	bgt.w	408d34 <_svfprintf_r+0xa98>
  408632:	f108 0808 	add.w	r8, r8, #8
  408636:	9b07      	ldr	r3, [sp, #28]
  408638:	05df      	lsls	r7, r3, #23
  40863a:	f100 8268 	bmi.w	408b0e <_svfprintf_r+0x872>
  40863e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408640:	990e      	ldr	r1, [sp, #56]	; 0x38
  408642:	f8c8 6000 	str.w	r6, [r8]
  408646:	3301      	adds	r3, #1
  408648:	440c      	add	r4, r1
  40864a:	2b07      	cmp	r3, #7
  40864c:	9427      	str	r4, [sp, #156]	; 0x9c
  40864e:	f8c8 1004 	str.w	r1, [r8, #4]
  408652:	9326      	str	r3, [sp, #152]	; 0x98
  408654:	f300 834d 	bgt.w	408cf2 <_svfprintf_r+0xa56>
  408658:	f108 0808 	add.w	r8, r8, #8
  40865c:	9b07      	ldr	r3, [sp, #28]
  40865e:	075b      	lsls	r3, r3, #29
  408660:	d53a      	bpl.n	4086d8 <_svfprintf_r+0x43c>
  408662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408664:	9a08      	ldr	r2, [sp, #32]
  408666:	1a9d      	subs	r5, r3, r2
  408668:	2d00      	cmp	r5, #0
  40866a:	dd35      	ble.n	4086d8 <_svfprintf_r+0x43c>
  40866c:	2d10      	cmp	r5, #16
  40866e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408670:	dd20      	ble.n	4086b4 <_svfprintf_r+0x418>
  408672:	2610      	movs	r6, #16
  408674:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408676:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40867a:	e004      	b.n	408686 <_svfprintf_r+0x3ea>
  40867c:	3d10      	subs	r5, #16
  40867e:	2d10      	cmp	r5, #16
  408680:	f108 0808 	add.w	r8, r8, #8
  408684:	dd16      	ble.n	4086b4 <_svfprintf_r+0x418>
  408686:	3301      	adds	r3, #1
  408688:	4a5e      	ldr	r2, [pc, #376]	; (408804 <_svfprintf_r+0x568>)
  40868a:	9326      	str	r3, [sp, #152]	; 0x98
  40868c:	3410      	adds	r4, #16
  40868e:	2b07      	cmp	r3, #7
  408690:	9427      	str	r4, [sp, #156]	; 0x9c
  408692:	e888 0044 	stmia.w	r8, {r2, r6}
  408696:	ddf1      	ble.n	40867c <_svfprintf_r+0x3e0>
  408698:	aa25      	add	r2, sp, #148	; 0x94
  40869a:	4659      	mov	r1, fp
  40869c:	4638      	mov	r0, r7
  40869e:	f005 f9b9 	bl	40da14 <__ssprint_r>
  4086a2:	2800      	cmp	r0, #0
  4086a4:	f47f aecc 	bne.w	408440 <_svfprintf_r+0x1a4>
  4086a8:	3d10      	subs	r5, #16
  4086aa:	2d10      	cmp	r5, #16
  4086ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4086ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4086b0:	46c8      	mov	r8, r9
  4086b2:	dce8      	bgt.n	408686 <_svfprintf_r+0x3ea>
  4086b4:	3301      	adds	r3, #1
  4086b6:	4a53      	ldr	r2, [pc, #332]	; (408804 <_svfprintf_r+0x568>)
  4086b8:	9326      	str	r3, [sp, #152]	; 0x98
  4086ba:	442c      	add	r4, r5
  4086bc:	2b07      	cmp	r3, #7
  4086be:	9427      	str	r4, [sp, #156]	; 0x9c
  4086c0:	e888 0024 	stmia.w	r8, {r2, r5}
  4086c4:	dd08      	ble.n	4086d8 <_svfprintf_r+0x43c>
  4086c6:	aa25      	add	r2, sp, #148	; 0x94
  4086c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4086ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4086cc:	f005 f9a2 	bl	40da14 <__ssprint_r>
  4086d0:	2800      	cmp	r0, #0
  4086d2:	f47f aeb5 	bne.w	408440 <_svfprintf_r+0x1a4>
  4086d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4086d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4086da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4086dc:	9908      	ldr	r1, [sp, #32]
  4086de:	428a      	cmp	r2, r1
  4086e0:	bfac      	ite	ge
  4086e2:	189b      	addge	r3, r3, r2
  4086e4:	185b      	addlt	r3, r3, r1
  4086e6:	9309      	str	r3, [sp, #36]	; 0x24
  4086e8:	2c00      	cmp	r4, #0
  4086ea:	f040 830d 	bne.w	408d08 <_svfprintf_r+0xa6c>
  4086ee:	2300      	movs	r3, #0
  4086f0:	9326      	str	r3, [sp, #152]	; 0x98
  4086f2:	46c8      	mov	r8, r9
  4086f4:	e5f9      	b.n	4082ea <_svfprintf_r+0x4e>
  4086f6:	9311      	str	r3, [sp, #68]	; 0x44
  4086f8:	f01b 0320 	ands.w	r3, fp, #32
  4086fc:	f040 81e3 	bne.w	408ac6 <_svfprintf_r+0x82a>
  408700:	f01b 0210 	ands.w	r2, fp, #16
  408704:	f040 842e 	bne.w	408f64 <_svfprintf_r+0xcc8>
  408708:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40870c:	f000 842a 	beq.w	408f64 <_svfprintf_r+0xcc8>
  408710:	990f      	ldr	r1, [sp, #60]	; 0x3c
  408712:	4613      	mov	r3, r2
  408714:	460a      	mov	r2, r1
  408716:	3204      	adds	r2, #4
  408718:	880c      	ldrh	r4, [r1, #0]
  40871a:	920f      	str	r2, [sp, #60]	; 0x3c
  40871c:	2500      	movs	r5, #0
  40871e:	e6b0      	b.n	408482 <_svfprintf_r+0x1e6>
  408720:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408722:	9311      	str	r3, [sp, #68]	; 0x44
  408724:	6816      	ldr	r6, [r2, #0]
  408726:	2400      	movs	r4, #0
  408728:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  40872c:	1d15      	adds	r5, r2, #4
  40872e:	2e00      	cmp	r6, #0
  408730:	f000 86a7 	beq.w	409482 <_svfprintf_r+0x11e6>
  408734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408736:	1c53      	adds	r3, r2, #1
  408738:	f000 8609 	beq.w	40934e <_svfprintf_r+0x10b2>
  40873c:	4621      	mov	r1, r4
  40873e:	4630      	mov	r0, r6
  408740:	f004 fb1e 	bl	40cd80 <memchr>
  408744:	2800      	cmp	r0, #0
  408746:	f000 86e1 	beq.w	40950c <_svfprintf_r+0x1270>
  40874a:	1b83      	subs	r3, r0, r6
  40874c:	930e      	str	r3, [sp, #56]	; 0x38
  40874e:	940a      	str	r4, [sp, #40]	; 0x28
  408750:	950f      	str	r5, [sp, #60]	; 0x3c
  408752:	f8cd b01c 	str.w	fp, [sp, #28]
  408756:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40875a:	9308      	str	r3, [sp, #32]
  40875c:	9412      	str	r4, [sp, #72]	; 0x48
  40875e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408762:	e6b3      	b.n	4084cc <_svfprintf_r+0x230>
  408764:	f89a 3000 	ldrb.w	r3, [sl]
  408768:	2201      	movs	r2, #1
  40876a:	212b      	movs	r1, #43	; 0x2b
  40876c:	e5ee      	b.n	40834c <_svfprintf_r+0xb0>
  40876e:	f04b 0b20 	orr.w	fp, fp, #32
  408772:	f89a 3000 	ldrb.w	r3, [sl]
  408776:	e5e9      	b.n	40834c <_svfprintf_r+0xb0>
  408778:	9311      	str	r3, [sp, #68]	; 0x44
  40877a:	2a00      	cmp	r2, #0
  40877c:	f040 8795 	bne.w	4096aa <_svfprintf_r+0x140e>
  408780:	4b22      	ldr	r3, [pc, #136]	; (40880c <_svfprintf_r+0x570>)
  408782:	9318      	str	r3, [sp, #96]	; 0x60
  408784:	f01b 0f20 	tst.w	fp, #32
  408788:	f040 8111 	bne.w	4089ae <_svfprintf_r+0x712>
  40878c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40878e:	f01b 0f10 	tst.w	fp, #16
  408792:	4613      	mov	r3, r2
  408794:	f040 83e1 	bne.w	408f5a <_svfprintf_r+0xcbe>
  408798:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40879c:	f000 83dd 	beq.w	408f5a <_svfprintf_r+0xcbe>
  4087a0:	3304      	adds	r3, #4
  4087a2:	8814      	ldrh	r4, [r2, #0]
  4087a4:	930f      	str	r3, [sp, #60]	; 0x3c
  4087a6:	2500      	movs	r5, #0
  4087a8:	f01b 0f01 	tst.w	fp, #1
  4087ac:	f000 810c 	beq.w	4089c8 <_svfprintf_r+0x72c>
  4087b0:	ea54 0305 	orrs.w	r3, r4, r5
  4087b4:	f000 8108 	beq.w	4089c8 <_svfprintf_r+0x72c>
  4087b8:	2330      	movs	r3, #48	; 0x30
  4087ba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4087be:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4087c2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4087c6:	f04b 0b02 	orr.w	fp, fp, #2
  4087ca:	2302      	movs	r3, #2
  4087cc:	e659      	b.n	408482 <_svfprintf_r+0x1e6>
  4087ce:	f89a 3000 	ldrb.w	r3, [sl]
  4087d2:	2900      	cmp	r1, #0
  4087d4:	f47f adba 	bne.w	40834c <_svfprintf_r+0xb0>
  4087d8:	2201      	movs	r2, #1
  4087da:	2120      	movs	r1, #32
  4087dc:	e5b6      	b.n	40834c <_svfprintf_r+0xb0>
  4087de:	f04b 0b01 	orr.w	fp, fp, #1
  4087e2:	f89a 3000 	ldrb.w	r3, [sl]
  4087e6:	e5b1      	b.n	40834c <_svfprintf_r+0xb0>
  4087e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4087ea:	6823      	ldr	r3, [r4, #0]
  4087ec:	930d      	str	r3, [sp, #52]	; 0x34
  4087ee:	4618      	mov	r0, r3
  4087f0:	2800      	cmp	r0, #0
  4087f2:	4623      	mov	r3, r4
  4087f4:	f103 0304 	add.w	r3, r3, #4
  4087f8:	f6ff ae0a 	blt.w	408410 <_svfprintf_r+0x174>
  4087fc:	930f      	str	r3, [sp, #60]	; 0x3c
  4087fe:	f89a 3000 	ldrb.w	r3, [sl]
  408802:	e5a3      	b.n	40834c <_svfprintf_r+0xb0>
  408804:	0040fa80 	.word	0x0040fa80
  408808:	0040fa90 	.word	0x0040fa90
  40880c:	0040fa60 	.word	0x0040fa60
  408810:	f04b 0b10 	orr.w	fp, fp, #16
  408814:	f01b 0f20 	tst.w	fp, #32
  408818:	9311      	str	r3, [sp, #68]	; 0x44
  40881a:	f43f ae23 	beq.w	408464 <_svfprintf_r+0x1c8>
  40881e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408820:	3507      	adds	r5, #7
  408822:	f025 0307 	bic.w	r3, r5, #7
  408826:	f103 0208 	add.w	r2, r3, #8
  40882a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40882e:	920f      	str	r2, [sp, #60]	; 0x3c
  408830:	2301      	movs	r3, #1
  408832:	e626      	b.n	408482 <_svfprintf_r+0x1e6>
  408834:	f89a 3000 	ldrb.w	r3, [sl]
  408838:	2b2a      	cmp	r3, #42	; 0x2a
  40883a:	f10a 0401 	add.w	r4, sl, #1
  40883e:	f000 8727 	beq.w	409690 <_svfprintf_r+0x13f4>
  408842:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408846:	2809      	cmp	r0, #9
  408848:	46a2      	mov	sl, r4
  40884a:	f200 86ad 	bhi.w	4095a8 <_svfprintf_r+0x130c>
  40884e:	2300      	movs	r3, #0
  408850:	461c      	mov	r4, r3
  408852:	f81a 3b01 	ldrb.w	r3, [sl], #1
  408856:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40885a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40885e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408862:	2809      	cmp	r0, #9
  408864:	d9f5      	bls.n	408852 <_svfprintf_r+0x5b6>
  408866:	940a      	str	r4, [sp, #40]	; 0x28
  408868:	e572      	b.n	408350 <_svfprintf_r+0xb4>
  40886a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40886e:	f89a 3000 	ldrb.w	r3, [sl]
  408872:	e56b      	b.n	40834c <_svfprintf_r+0xb0>
  408874:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  408878:	f89a 3000 	ldrb.w	r3, [sl]
  40887c:	e566      	b.n	40834c <_svfprintf_r+0xb0>
  40887e:	f89a 3000 	ldrb.w	r3, [sl]
  408882:	2b6c      	cmp	r3, #108	; 0x6c
  408884:	bf03      	ittte	eq
  408886:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40888a:	f04b 0b20 	orreq.w	fp, fp, #32
  40888e:	f10a 0a01 	addeq.w	sl, sl, #1
  408892:	f04b 0b10 	orrne.w	fp, fp, #16
  408896:	e559      	b.n	40834c <_svfprintf_r+0xb0>
  408898:	2a00      	cmp	r2, #0
  40889a:	f040 8711 	bne.w	4096c0 <_svfprintf_r+0x1424>
  40889e:	f01b 0f20 	tst.w	fp, #32
  4088a2:	f040 84f9 	bne.w	409298 <_svfprintf_r+0xffc>
  4088a6:	f01b 0f10 	tst.w	fp, #16
  4088aa:	f040 84ac 	bne.w	409206 <_svfprintf_r+0xf6a>
  4088ae:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4088b2:	f000 84a8 	beq.w	409206 <_svfprintf_r+0xf6a>
  4088b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4088b8:	6813      	ldr	r3, [r2, #0]
  4088ba:	3204      	adds	r2, #4
  4088bc:	920f      	str	r2, [sp, #60]	; 0x3c
  4088be:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4088c2:	801a      	strh	r2, [r3, #0]
  4088c4:	e511      	b.n	4082ea <_svfprintf_r+0x4e>
  4088c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4088c8:	4bb3      	ldr	r3, [pc, #716]	; (408b98 <_svfprintf_r+0x8fc>)
  4088ca:	680c      	ldr	r4, [r1, #0]
  4088cc:	9318      	str	r3, [sp, #96]	; 0x60
  4088ce:	2230      	movs	r2, #48	; 0x30
  4088d0:	2378      	movs	r3, #120	; 0x78
  4088d2:	3104      	adds	r1, #4
  4088d4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4088d8:	9311      	str	r3, [sp, #68]	; 0x44
  4088da:	f04b 0b02 	orr.w	fp, fp, #2
  4088de:	910f      	str	r1, [sp, #60]	; 0x3c
  4088e0:	2500      	movs	r5, #0
  4088e2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4088e6:	2302      	movs	r3, #2
  4088e8:	e5cb      	b.n	408482 <_svfprintf_r+0x1e6>
  4088ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4088ec:	9311      	str	r3, [sp, #68]	; 0x44
  4088ee:	680a      	ldr	r2, [r1, #0]
  4088f0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4088f4:	2300      	movs	r3, #0
  4088f6:	460a      	mov	r2, r1
  4088f8:	461f      	mov	r7, r3
  4088fa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4088fe:	3204      	adds	r2, #4
  408900:	2301      	movs	r3, #1
  408902:	9308      	str	r3, [sp, #32]
  408904:	f8cd b01c 	str.w	fp, [sp, #28]
  408908:	970a      	str	r7, [sp, #40]	; 0x28
  40890a:	9712      	str	r7, [sp, #72]	; 0x48
  40890c:	920f      	str	r2, [sp, #60]	; 0x3c
  40890e:	930e      	str	r3, [sp, #56]	; 0x38
  408910:	ae28      	add	r6, sp, #160	; 0xa0
  408912:	e5df      	b.n	4084d4 <_svfprintf_r+0x238>
  408914:	9311      	str	r3, [sp, #68]	; 0x44
  408916:	2a00      	cmp	r2, #0
  408918:	f040 86ea 	bne.w	4096f0 <_svfprintf_r+0x1454>
  40891c:	f01b 0f20 	tst.w	fp, #32
  408920:	d15d      	bne.n	4089de <_svfprintf_r+0x742>
  408922:	f01b 0f10 	tst.w	fp, #16
  408926:	f040 8308 	bne.w	408f3a <_svfprintf_r+0xc9e>
  40892a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40892e:	f000 8304 	beq.w	408f3a <_svfprintf_r+0xc9e>
  408932:	990f      	ldr	r1, [sp, #60]	; 0x3c
  408934:	f9b1 4000 	ldrsh.w	r4, [r1]
  408938:	3104      	adds	r1, #4
  40893a:	17e5      	asrs	r5, r4, #31
  40893c:	4622      	mov	r2, r4
  40893e:	462b      	mov	r3, r5
  408940:	910f      	str	r1, [sp, #60]	; 0x3c
  408942:	2a00      	cmp	r2, #0
  408944:	f173 0300 	sbcs.w	r3, r3, #0
  408948:	db58      	blt.n	4089fc <_svfprintf_r+0x760>
  40894a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40894c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408950:	1c4a      	adds	r2, r1, #1
  408952:	f04f 0301 	mov.w	r3, #1
  408956:	f47f ad9b 	bne.w	408490 <_svfprintf_r+0x1f4>
  40895a:	ea54 0205 	orrs.w	r2, r4, r5
  40895e:	f000 81df 	beq.w	408d20 <_svfprintf_r+0xa84>
  408962:	f8cd b01c 	str.w	fp, [sp, #28]
  408966:	2b01      	cmp	r3, #1
  408968:	f000 827b 	beq.w	408e62 <_svfprintf_r+0xbc6>
  40896c:	2b02      	cmp	r3, #2
  40896e:	f040 8206 	bne.w	408d7e <_svfprintf_r+0xae2>
  408972:	9818      	ldr	r0, [sp, #96]	; 0x60
  408974:	464e      	mov	r6, r9
  408976:	0923      	lsrs	r3, r4, #4
  408978:	f004 010f 	and.w	r1, r4, #15
  40897c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  408980:	092a      	lsrs	r2, r5, #4
  408982:	461c      	mov	r4, r3
  408984:	4615      	mov	r5, r2
  408986:	5c43      	ldrb	r3, [r0, r1]
  408988:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40898c:	ea54 0305 	orrs.w	r3, r4, r5
  408990:	d1f1      	bne.n	408976 <_svfprintf_r+0x6da>
  408992:	eba9 0306 	sub.w	r3, r9, r6
  408996:	930e      	str	r3, [sp, #56]	; 0x38
  408998:	e590      	b.n	4084bc <_svfprintf_r+0x220>
  40899a:	9311      	str	r3, [sp, #68]	; 0x44
  40899c:	2a00      	cmp	r2, #0
  40899e:	f040 86a3 	bne.w	4096e8 <_svfprintf_r+0x144c>
  4089a2:	4b7e      	ldr	r3, [pc, #504]	; (408b9c <_svfprintf_r+0x900>)
  4089a4:	9318      	str	r3, [sp, #96]	; 0x60
  4089a6:	f01b 0f20 	tst.w	fp, #32
  4089aa:	f43f aeef 	beq.w	40878c <_svfprintf_r+0x4f0>
  4089ae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4089b0:	3507      	adds	r5, #7
  4089b2:	f025 0307 	bic.w	r3, r5, #7
  4089b6:	f103 0208 	add.w	r2, r3, #8
  4089ba:	f01b 0f01 	tst.w	fp, #1
  4089be:	920f      	str	r2, [sp, #60]	; 0x3c
  4089c0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4089c4:	f47f aef4 	bne.w	4087b0 <_svfprintf_r+0x514>
  4089c8:	2302      	movs	r3, #2
  4089ca:	e55a      	b.n	408482 <_svfprintf_r+0x1e6>
  4089cc:	9311      	str	r3, [sp, #68]	; 0x44
  4089ce:	2a00      	cmp	r2, #0
  4089d0:	f040 8686 	bne.w	4096e0 <_svfprintf_r+0x1444>
  4089d4:	f04b 0b10 	orr.w	fp, fp, #16
  4089d8:	f01b 0f20 	tst.w	fp, #32
  4089dc:	d0a1      	beq.n	408922 <_svfprintf_r+0x686>
  4089de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4089e0:	3507      	adds	r5, #7
  4089e2:	f025 0507 	bic.w	r5, r5, #7
  4089e6:	e9d5 2300 	ldrd	r2, r3, [r5]
  4089ea:	2a00      	cmp	r2, #0
  4089ec:	f105 0108 	add.w	r1, r5, #8
  4089f0:	461d      	mov	r5, r3
  4089f2:	f173 0300 	sbcs.w	r3, r3, #0
  4089f6:	910f      	str	r1, [sp, #60]	; 0x3c
  4089f8:	4614      	mov	r4, r2
  4089fa:	daa6      	bge.n	40894a <_svfprintf_r+0x6ae>
  4089fc:	272d      	movs	r7, #45	; 0x2d
  4089fe:	4264      	negs	r4, r4
  408a00:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  408a04:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  408a08:	2301      	movs	r3, #1
  408a0a:	e53d      	b.n	408488 <_svfprintf_r+0x1ec>
  408a0c:	9311      	str	r3, [sp, #68]	; 0x44
  408a0e:	2a00      	cmp	r2, #0
  408a10:	f040 8662 	bne.w	4096d8 <_svfprintf_r+0x143c>
  408a14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408a16:	3507      	adds	r5, #7
  408a18:	f025 0307 	bic.w	r3, r5, #7
  408a1c:	f103 0208 	add.w	r2, r3, #8
  408a20:	920f      	str	r2, [sp, #60]	; 0x3c
  408a22:	681a      	ldr	r2, [r3, #0]
  408a24:	9215      	str	r2, [sp, #84]	; 0x54
  408a26:	685b      	ldr	r3, [r3, #4]
  408a28:	9314      	str	r3, [sp, #80]	; 0x50
  408a2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408a2c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  408a2e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  408a32:	4628      	mov	r0, r5
  408a34:	4621      	mov	r1, r4
  408a36:	f04f 32ff 	mov.w	r2, #4294967295
  408a3a:	4b59      	ldr	r3, [pc, #356]	; (408ba0 <_svfprintf_r+0x904>)
  408a3c:	f005 fbe0 	bl	40e200 <__aeabi_dcmpun>
  408a40:	2800      	cmp	r0, #0
  408a42:	f040 834a 	bne.w	4090da <_svfprintf_r+0xe3e>
  408a46:	4628      	mov	r0, r5
  408a48:	4621      	mov	r1, r4
  408a4a:	f04f 32ff 	mov.w	r2, #4294967295
  408a4e:	4b54      	ldr	r3, [pc, #336]	; (408ba0 <_svfprintf_r+0x904>)
  408a50:	f005 fbb8 	bl	40e1c4 <__aeabi_dcmple>
  408a54:	2800      	cmp	r0, #0
  408a56:	f040 8340 	bne.w	4090da <_svfprintf_r+0xe3e>
  408a5a:	a815      	add	r0, sp, #84	; 0x54
  408a5c:	c80d      	ldmia	r0, {r0, r2, r3}
  408a5e:	9914      	ldr	r1, [sp, #80]	; 0x50
  408a60:	f005 fba6 	bl	40e1b0 <__aeabi_dcmplt>
  408a64:	2800      	cmp	r0, #0
  408a66:	f040 8530 	bne.w	4094ca <_svfprintf_r+0x122e>
  408a6a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408a6e:	4e4d      	ldr	r6, [pc, #308]	; (408ba4 <_svfprintf_r+0x908>)
  408a70:	4b4d      	ldr	r3, [pc, #308]	; (408ba8 <_svfprintf_r+0x90c>)
  408a72:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  408a76:	9007      	str	r0, [sp, #28]
  408a78:	9811      	ldr	r0, [sp, #68]	; 0x44
  408a7a:	2203      	movs	r2, #3
  408a7c:	2100      	movs	r1, #0
  408a7e:	9208      	str	r2, [sp, #32]
  408a80:	910a      	str	r1, [sp, #40]	; 0x28
  408a82:	2847      	cmp	r0, #71	; 0x47
  408a84:	bfd8      	it	le
  408a86:	461e      	movle	r6, r3
  408a88:	920e      	str	r2, [sp, #56]	; 0x38
  408a8a:	9112      	str	r1, [sp, #72]	; 0x48
  408a8c:	e51e      	b.n	4084cc <_svfprintf_r+0x230>
  408a8e:	f04b 0b08 	orr.w	fp, fp, #8
  408a92:	f89a 3000 	ldrb.w	r3, [sl]
  408a96:	e459      	b.n	40834c <_svfprintf_r+0xb0>
  408a98:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408a9c:	2300      	movs	r3, #0
  408a9e:	461c      	mov	r4, r3
  408aa0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  408aa4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  408aa8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  408aac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408ab0:	2809      	cmp	r0, #9
  408ab2:	d9f5      	bls.n	408aa0 <_svfprintf_r+0x804>
  408ab4:	940d      	str	r4, [sp, #52]	; 0x34
  408ab6:	e44b      	b.n	408350 <_svfprintf_r+0xb4>
  408ab8:	f04b 0b10 	orr.w	fp, fp, #16
  408abc:	9311      	str	r3, [sp, #68]	; 0x44
  408abe:	f01b 0320 	ands.w	r3, fp, #32
  408ac2:	f43f ae1d 	beq.w	408700 <_svfprintf_r+0x464>
  408ac6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408ac8:	3507      	adds	r5, #7
  408aca:	f025 0307 	bic.w	r3, r5, #7
  408ace:	f103 0208 	add.w	r2, r3, #8
  408ad2:	e9d3 4500 	ldrd	r4, r5, [r3]
  408ad6:	920f      	str	r2, [sp, #60]	; 0x3c
  408ad8:	2300      	movs	r3, #0
  408ada:	e4d2      	b.n	408482 <_svfprintf_r+0x1e6>
  408adc:	9311      	str	r3, [sp, #68]	; 0x44
  408ade:	2a00      	cmp	r2, #0
  408ae0:	f040 85e7 	bne.w	4096b2 <_svfprintf_r+0x1416>
  408ae4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408ae6:	2a00      	cmp	r2, #0
  408ae8:	f43f aca3 	beq.w	408432 <_svfprintf_r+0x196>
  408aec:	2300      	movs	r3, #0
  408aee:	2101      	movs	r1, #1
  408af0:	461f      	mov	r7, r3
  408af2:	9108      	str	r1, [sp, #32]
  408af4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  408af8:	f8cd b01c 	str.w	fp, [sp, #28]
  408afc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  408b00:	930a      	str	r3, [sp, #40]	; 0x28
  408b02:	9312      	str	r3, [sp, #72]	; 0x48
  408b04:	910e      	str	r1, [sp, #56]	; 0x38
  408b06:	ae28      	add	r6, sp, #160	; 0xa0
  408b08:	e4e4      	b.n	4084d4 <_svfprintf_r+0x238>
  408b0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408b0c:	e534      	b.n	408578 <_svfprintf_r+0x2dc>
  408b0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408b10:	2b65      	cmp	r3, #101	; 0x65
  408b12:	f340 80a7 	ble.w	408c64 <_svfprintf_r+0x9c8>
  408b16:	a815      	add	r0, sp, #84	; 0x54
  408b18:	c80d      	ldmia	r0, {r0, r2, r3}
  408b1a:	9914      	ldr	r1, [sp, #80]	; 0x50
  408b1c:	f005 fb3e 	bl	40e19c <__aeabi_dcmpeq>
  408b20:	2800      	cmp	r0, #0
  408b22:	f000 8150 	beq.w	408dc6 <_svfprintf_r+0xb2a>
  408b26:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408b28:	4a20      	ldr	r2, [pc, #128]	; (408bac <_svfprintf_r+0x910>)
  408b2a:	f8c8 2000 	str.w	r2, [r8]
  408b2e:	3301      	adds	r3, #1
  408b30:	3401      	adds	r4, #1
  408b32:	2201      	movs	r2, #1
  408b34:	2b07      	cmp	r3, #7
  408b36:	9427      	str	r4, [sp, #156]	; 0x9c
  408b38:	9326      	str	r3, [sp, #152]	; 0x98
  408b3a:	f8c8 2004 	str.w	r2, [r8, #4]
  408b3e:	f300 836a 	bgt.w	409216 <_svfprintf_r+0xf7a>
  408b42:	f108 0808 	add.w	r8, r8, #8
  408b46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  408b48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408b4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408b4c:	4293      	cmp	r3, r2
  408b4e:	db03      	blt.n	408b58 <_svfprintf_r+0x8bc>
  408b50:	9b07      	ldr	r3, [sp, #28]
  408b52:	07dd      	lsls	r5, r3, #31
  408b54:	f57f ad82 	bpl.w	40865c <_svfprintf_r+0x3c0>
  408b58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408b5a:	9919      	ldr	r1, [sp, #100]	; 0x64
  408b5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  408b5e:	f8c8 2000 	str.w	r2, [r8]
  408b62:	3301      	adds	r3, #1
  408b64:	440c      	add	r4, r1
  408b66:	2b07      	cmp	r3, #7
  408b68:	f8c8 1004 	str.w	r1, [r8, #4]
  408b6c:	9427      	str	r4, [sp, #156]	; 0x9c
  408b6e:	9326      	str	r3, [sp, #152]	; 0x98
  408b70:	f300 839e 	bgt.w	4092b0 <_svfprintf_r+0x1014>
  408b74:	f108 0808 	add.w	r8, r8, #8
  408b78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408b7a:	1e5e      	subs	r6, r3, #1
  408b7c:	2e00      	cmp	r6, #0
  408b7e:	f77f ad6d 	ble.w	40865c <_svfprintf_r+0x3c0>
  408b82:	2e10      	cmp	r6, #16
  408b84:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408b86:	4d0a      	ldr	r5, [pc, #40]	; (408bb0 <_svfprintf_r+0x914>)
  408b88:	f340 81f5 	ble.w	408f76 <_svfprintf_r+0xcda>
  408b8c:	4622      	mov	r2, r4
  408b8e:	2710      	movs	r7, #16
  408b90:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  408b94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  408b96:	e013      	b.n	408bc0 <_svfprintf_r+0x924>
  408b98:	0040fa60 	.word	0x0040fa60
  408b9c:	0040fa4c 	.word	0x0040fa4c
  408ba0:	7fefffff 	.word	0x7fefffff
  408ba4:	0040fa40 	.word	0x0040fa40
  408ba8:	0040fa3c 	.word	0x0040fa3c
  408bac:	0040fa7c 	.word	0x0040fa7c
  408bb0:	0040fa90 	.word	0x0040fa90
  408bb4:	f108 0808 	add.w	r8, r8, #8
  408bb8:	3e10      	subs	r6, #16
  408bba:	2e10      	cmp	r6, #16
  408bbc:	f340 81da 	ble.w	408f74 <_svfprintf_r+0xcd8>
  408bc0:	3301      	adds	r3, #1
  408bc2:	3210      	adds	r2, #16
  408bc4:	2b07      	cmp	r3, #7
  408bc6:	9227      	str	r2, [sp, #156]	; 0x9c
  408bc8:	9326      	str	r3, [sp, #152]	; 0x98
  408bca:	e888 00a0 	stmia.w	r8, {r5, r7}
  408bce:	ddf1      	ble.n	408bb4 <_svfprintf_r+0x918>
  408bd0:	aa25      	add	r2, sp, #148	; 0x94
  408bd2:	4621      	mov	r1, r4
  408bd4:	4658      	mov	r0, fp
  408bd6:	f004 ff1d 	bl	40da14 <__ssprint_r>
  408bda:	2800      	cmp	r0, #0
  408bdc:	f47f ac30 	bne.w	408440 <_svfprintf_r+0x1a4>
  408be0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  408be2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408be4:	46c8      	mov	r8, r9
  408be6:	e7e7      	b.n	408bb8 <_svfprintf_r+0x91c>
  408be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408bea:	9a08      	ldr	r2, [sp, #32]
  408bec:	1a9f      	subs	r7, r3, r2
  408bee:	2f00      	cmp	r7, #0
  408bf0:	f77f ace5 	ble.w	4085be <_svfprintf_r+0x322>
  408bf4:	2f10      	cmp	r7, #16
  408bf6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408bf8:	4db6      	ldr	r5, [pc, #728]	; (408ed4 <_svfprintf_r+0xc38>)
  408bfa:	dd27      	ble.n	408c4c <_svfprintf_r+0x9b0>
  408bfc:	4642      	mov	r2, r8
  408bfe:	4621      	mov	r1, r4
  408c00:	46b0      	mov	r8, r6
  408c02:	f04f 0b10 	mov.w	fp, #16
  408c06:	462e      	mov	r6, r5
  408c08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408c0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  408c0c:	e004      	b.n	408c18 <_svfprintf_r+0x97c>
  408c0e:	3f10      	subs	r7, #16
  408c10:	2f10      	cmp	r7, #16
  408c12:	f102 0208 	add.w	r2, r2, #8
  408c16:	dd15      	ble.n	408c44 <_svfprintf_r+0x9a8>
  408c18:	3301      	adds	r3, #1
  408c1a:	3110      	adds	r1, #16
  408c1c:	2b07      	cmp	r3, #7
  408c1e:	9127      	str	r1, [sp, #156]	; 0x9c
  408c20:	9326      	str	r3, [sp, #152]	; 0x98
  408c22:	e882 0840 	stmia.w	r2, {r6, fp}
  408c26:	ddf2      	ble.n	408c0e <_svfprintf_r+0x972>
  408c28:	aa25      	add	r2, sp, #148	; 0x94
  408c2a:	4629      	mov	r1, r5
  408c2c:	4620      	mov	r0, r4
  408c2e:	f004 fef1 	bl	40da14 <__ssprint_r>
  408c32:	2800      	cmp	r0, #0
  408c34:	f47f ac04 	bne.w	408440 <_svfprintf_r+0x1a4>
  408c38:	3f10      	subs	r7, #16
  408c3a:	2f10      	cmp	r7, #16
  408c3c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  408c3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408c40:	464a      	mov	r2, r9
  408c42:	dce9      	bgt.n	408c18 <_svfprintf_r+0x97c>
  408c44:	4635      	mov	r5, r6
  408c46:	460c      	mov	r4, r1
  408c48:	4646      	mov	r6, r8
  408c4a:	4690      	mov	r8, r2
  408c4c:	3301      	adds	r3, #1
  408c4e:	443c      	add	r4, r7
  408c50:	2b07      	cmp	r3, #7
  408c52:	9427      	str	r4, [sp, #156]	; 0x9c
  408c54:	9326      	str	r3, [sp, #152]	; 0x98
  408c56:	e888 00a0 	stmia.w	r8, {r5, r7}
  408c5a:	f300 8232 	bgt.w	4090c2 <_svfprintf_r+0xe26>
  408c5e:	f108 0808 	add.w	r8, r8, #8
  408c62:	e4ac      	b.n	4085be <_svfprintf_r+0x322>
  408c64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408c66:	9f26      	ldr	r7, [sp, #152]	; 0x98
  408c68:	2b01      	cmp	r3, #1
  408c6a:	f340 81fe 	ble.w	40906a <_svfprintf_r+0xdce>
  408c6e:	3701      	adds	r7, #1
  408c70:	3401      	adds	r4, #1
  408c72:	2301      	movs	r3, #1
  408c74:	2f07      	cmp	r7, #7
  408c76:	9427      	str	r4, [sp, #156]	; 0x9c
  408c78:	9726      	str	r7, [sp, #152]	; 0x98
  408c7a:	f8c8 6000 	str.w	r6, [r8]
  408c7e:	f8c8 3004 	str.w	r3, [r8, #4]
  408c82:	f300 8203 	bgt.w	40908c <_svfprintf_r+0xdf0>
  408c86:	f108 0808 	add.w	r8, r8, #8
  408c8a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408c8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  408c8e:	f8c8 3000 	str.w	r3, [r8]
  408c92:	3701      	adds	r7, #1
  408c94:	4414      	add	r4, r2
  408c96:	2f07      	cmp	r7, #7
  408c98:	9427      	str	r4, [sp, #156]	; 0x9c
  408c9a:	9726      	str	r7, [sp, #152]	; 0x98
  408c9c:	f8c8 2004 	str.w	r2, [r8, #4]
  408ca0:	f300 8200 	bgt.w	4090a4 <_svfprintf_r+0xe08>
  408ca4:	f108 0808 	add.w	r8, r8, #8
  408ca8:	a815      	add	r0, sp, #84	; 0x54
  408caa:	c80d      	ldmia	r0, {r0, r2, r3}
  408cac:	9914      	ldr	r1, [sp, #80]	; 0x50
  408cae:	f005 fa75 	bl	40e19c <__aeabi_dcmpeq>
  408cb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408cb4:	2800      	cmp	r0, #0
  408cb6:	f040 8101 	bne.w	408ebc <_svfprintf_r+0xc20>
  408cba:	3b01      	subs	r3, #1
  408cbc:	3701      	adds	r7, #1
  408cbe:	3601      	adds	r6, #1
  408cc0:	441c      	add	r4, r3
  408cc2:	2f07      	cmp	r7, #7
  408cc4:	9726      	str	r7, [sp, #152]	; 0x98
  408cc6:	9427      	str	r4, [sp, #156]	; 0x9c
  408cc8:	f8c8 6000 	str.w	r6, [r8]
  408ccc:	f8c8 3004 	str.w	r3, [r8, #4]
  408cd0:	f300 8127 	bgt.w	408f22 <_svfprintf_r+0xc86>
  408cd4:	f108 0808 	add.w	r8, r8, #8
  408cd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  408cda:	f8c8 2004 	str.w	r2, [r8, #4]
  408cde:	3701      	adds	r7, #1
  408ce0:	4414      	add	r4, r2
  408ce2:	ab21      	add	r3, sp, #132	; 0x84
  408ce4:	2f07      	cmp	r7, #7
  408ce6:	9427      	str	r4, [sp, #156]	; 0x9c
  408ce8:	9726      	str	r7, [sp, #152]	; 0x98
  408cea:	f8c8 3000 	str.w	r3, [r8]
  408cee:	f77f acb3 	ble.w	408658 <_svfprintf_r+0x3bc>
  408cf2:	aa25      	add	r2, sp, #148	; 0x94
  408cf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408cf6:	980c      	ldr	r0, [sp, #48]	; 0x30
  408cf8:	f004 fe8c 	bl	40da14 <__ssprint_r>
  408cfc:	2800      	cmp	r0, #0
  408cfe:	f47f ab9f 	bne.w	408440 <_svfprintf_r+0x1a4>
  408d02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408d04:	46c8      	mov	r8, r9
  408d06:	e4a9      	b.n	40865c <_svfprintf_r+0x3c0>
  408d08:	aa25      	add	r2, sp, #148	; 0x94
  408d0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408d0c:	980c      	ldr	r0, [sp, #48]	; 0x30
  408d0e:	f004 fe81 	bl	40da14 <__ssprint_r>
  408d12:	2800      	cmp	r0, #0
  408d14:	f43f aceb 	beq.w	4086ee <_svfprintf_r+0x452>
  408d18:	f7ff bb92 	b.w	408440 <_svfprintf_r+0x1a4>
  408d1c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  408d20:	2b01      	cmp	r3, #1
  408d22:	f000 8134 	beq.w	408f8e <_svfprintf_r+0xcf2>
  408d26:	2b02      	cmp	r3, #2
  408d28:	d125      	bne.n	408d76 <_svfprintf_r+0xada>
  408d2a:	f8cd b01c 	str.w	fp, [sp, #28]
  408d2e:	2400      	movs	r4, #0
  408d30:	2500      	movs	r5, #0
  408d32:	e61e      	b.n	408972 <_svfprintf_r+0x6d6>
  408d34:	aa25      	add	r2, sp, #148	; 0x94
  408d36:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408d38:	980c      	ldr	r0, [sp, #48]	; 0x30
  408d3a:	f004 fe6b 	bl	40da14 <__ssprint_r>
  408d3e:	2800      	cmp	r0, #0
  408d40:	f47f ab7e 	bne.w	408440 <_svfprintf_r+0x1a4>
  408d44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408d46:	46c8      	mov	r8, r9
  408d48:	e475      	b.n	408636 <_svfprintf_r+0x39a>
  408d4a:	aa25      	add	r2, sp, #148	; 0x94
  408d4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408d4e:	980c      	ldr	r0, [sp, #48]	; 0x30
  408d50:	f004 fe60 	bl	40da14 <__ssprint_r>
  408d54:	2800      	cmp	r0, #0
  408d56:	f47f ab73 	bne.w	408440 <_svfprintf_r+0x1a4>
  408d5a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408d5c:	46c8      	mov	r8, r9
  408d5e:	e41b      	b.n	408598 <_svfprintf_r+0x2fc>
  408d60:	aa25      	add	r2, sp, #148	; 0x94
  408d62:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408d64:	980c      	ldr	r0, [sp, #48]	; 0x30
  408d66:	f004 fe55 	bl	40da14 <__ssprint_r>
  408d6a:	2800      	cmp	r0, #0
  408d6c:	f47f ab68 	bne.w	408440 <_svfprintf_r+0x1a4>
  408d70:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408d72:	46c8      	mov	r8, r9
  408d74:	e420      	b.n	4085b8 <_svfprintf_r+0x31c>
  408d76:	f8cd b01c 	str.w	fp, [sp, #28]
  408d7a:	2400      	movs	r4, #0
  408d7c:	2500      	movs	r5, #0
  408d7e:	4649      	mov	r1, r9
  408d80:	e000      	b.n	408d84 <_svfprintf_r+0xae8>
  408d82:	4631      	mov	r1, r6
  408d84:	08e2      	lsrs	r2, r4, #3
  408d86:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  408d8a:	08e8      	lsrs	r0, r5, #3
  408d8c:	f004 0307 	and.w	r3, r4, #7
  408d90:	4605      	mov	r5, r0
  408d92:	4614      	mov	r4, r2
  408d94:	3330      	adds	r3, #48	; 0x30
  408d96:	ea54 0205 	orrs.w	r2, r4, r5
  408d9a:	f801 3c01 	strb.w	r3, [r1, #-1]
  408d9e:	f101 36ff 	add.w	r6, r1, #4294967295
  408da2:	d1ee      	bne.n	408d82 <_svfprintf_r+0xae6>
  408da4:	9a07      	ldr	r2, [sp, #28]
  408da6:	07d2      	lsls	r2, r2, #31
  408da8:	f57f adf3 	bpl.w	408992 <_svfprintf_r+0x6f6>
  408dac:	2b30      	cmp	r3, #48	; 0x30
  408dae:	f43f adf0 	beq.w	408992 <_svfprintf_r+0x6f6>
  408db2:	3902      	subs	r1, #2
  408db4:	2330      	movs	r3, #48	; 0x30
  408db6:	f806 3c01 	strb.w	r3, [r6, #-1]
  408dba:	eba9 0301 	sub.w	r3, r9, r1
  408dbe:	930e      	str	r3, [sp, #56]	; 0x38
  408dc0:	460e      	mov	r6, r1
  408dc2:	f7ff bb7b 	b.w	4084bc <_svfprintf_r+0x220>
  408dc6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  408dc8:	2900      	cmp	r1, #0
  408dca:	f340 822e 	ble.w	40922a <_svfprintf_r+0xf8e>
  408dce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408dd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408dd2:	4293      	cmp	r3, r2
  408dd4:	bfa8      	it	ge
  408dd6:	4613      	movge	r3, r2
  408dd8:	2b00      	cmp	r3, #0
  408dda:	461f      	mov	r7, r3
  408ddc:	dd0d      	ble.n	408dfa <_svfprintf_r+0xb5e>
  408dde:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408de0:	f8c8 6000 	str.w	r6, [r8]
  408de4:	3301      	adds	r3, #1
  408de6:	443c      	add	r4, r7
  408de8:	2b07      	cmp	r3, #7
  408dea:	9427      	str	r4, [sp, #156]	; 0x9c
  408dec:	f8c8 7004 	str.w	r7, [r8, #4]
  408df0:	9326      	str	r3, [sp, #152]	; 0x98
  408df2:	f300 831f 	bgt.w	409434 <_svfprintf_r+0x1198>
  408df6:	f108 0808 	add.w	r8, r8, #8
  408dfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408dfc:	2f00      	cmp	r7, #0
  408dfe:	bfa8      	it	ge
  408e00:	1bdb      	subge	r3, r3, r7
  408e02:	2b00      	cmp	r3, #0
  408e04:	461f      	mov	r7, r3
  408e06:	f340 80d6 	ble.w	408fb6 <_svfprintf_r+0xd1a>
  408e0a:	2f10      	cmp	r7, #16
  408e0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408e0e:	4d31      	ldr	r5, [pc, #196]	; (408ed4 <_svfprintf_r+0xc38>)
  408e10:	f340 81ed 	ble.w	4091ee <_svfprintf_r+0xf52>
  408e14:	4642      	mov	r2, r8
  408e16:	4621      	mov	r1, r4
  408e18:	46b0      	mov	r8, r6
  408e1a:	f04f 0b10 	mov.w	fp, #16
  408e1e:	462e      	mov	r6, r5
  408e20:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408e22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  408e24:	e004      	b.n	408e30 <_svfprintf_r+0xb94>
  408e26:	3208      	adds	r2, #8
  408e28:	3f10      	subs	r7, #16
  408e2a:	2f10      	cmp	r7, #16
  408e2c:	f340 81db 	ble.w	4091e6 <_svfprintf_r+0xf4a>
  408e30:	3301      	adds	r3, #1
  408e32:	3110      	adds	r1, #16
  408e34:	2b07      	cmp	r3, #7
  408e36:	9127      	str	r1, [sp, #156]	; 0x9c
  408e38:	9326      	str	r3, [sp, #152]	; 0x98
  408e3a:	e882 0840 	stmia.w	r2, {r6, fp}
  408e3e:	ddf2      	ble.n	408e26 <_svfprintf_r+0xb8a>
  408e40:	aa25      	add	r2, sp, #148	; 0x94
  408e42:	4629      	mov	r1, r5
  408e44:	4620      	mov	r0, r4
  408e46:	f004 fde5 	bl	40da14 <__ssprint_r>
  408e4a:	2800      	cmp	r0, #0
  408e4c:	f47f aaf8 	bne.w	408440 <_svfprintf_r+0x1a4>
  408e50:	9927      	ldr	r1, [sp, #156]	; 0x9c
  408e52:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408e54:	464a      	mov	r2, r9
  408e56:	e7e7      	b.n	408e28 <_svfprintf_r+0xb8c>
  408e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408e5a:	930e      	str	r3, [sp, #56]	; 0x38
  408e5c:	464e      	mov	r6, r9
  408e5e:	f7ff bb2d 	b.w	4084bc <_svfprintf_r+0x220>
  408e62:	2d00      	cmp	r5, #0
  408e64:	bf08      	it	eq
  408e66:	2c0a      	cmpeq	r4, #10
  408e68:	f0c0 808f 	bcc.w	408f8a <_svfprintf_r+0xcee>
  408e6c:	464e      	mov	r6, r9
  408e6e:	4620      	mov	r0, r4
  408e70:	4629      	mov	r1, r5
  408e72:	220a      	movs	r2, #10
  408e74:	2300      	movs	r3, #0
  408e76:	f005 fa01 	bl	40e27c <__aeabi_uldivmod>
  408e7a:	3230      	adds	r2, #48	; 0x30
  408e7c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  408e80:	4620      	mov	r0, r4
  408e82:	4629      	mov	r1, r5
  408e84:	2300      	movs	r3, #0
  408e86:	220a      	movs	r2, #10
  408e88:	f005 f9f8 	bl	40e27c <__aeabi_uldivmod>
  408e8c:	4604      	mov	r4, r0
  408e8e:	460d      	mov	r5, r1
  408e90:	ea54 0305 	orrs.w	r3, r4, r5
  408e94:	d1eb      	bne.n	408e6e <_svfprintf_r+0xbd2>
  408e96:	eba9 0306 	sub.w	r3, r9, r6
  408e9a:	930e      	str	r3, [sp, #56]	; 0x38
  408e9c:	f7ff bb0e 	b.w	4084bc <_svfprintf_r+0x220>
  408ea0:	aa25      	add	r2, sp, #148	; 0x94
  408ea2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408ea4:	980c      	ldr	r0, [sp, #48]	; 0x30
  408ea6:	f004 fdb5 	bl	40da14 <__ssprint_r>
  408eaa:	2800      	cmp	r0, #0
  408eac:	f47f aac8 	bne.w	408440 <_svfprintf_r+0x1a4>
  408eb0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408eb4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408eb6:	46c8      	mov	r8, r9
  408eb8:	f7ff bb5e 	b.w	408578 <_svfprintf_r+0x2dc>
  408ebc:	1e5e      	subs	r6, r3, #1
  408ebe:	2e00      	cmp	r6, #0
  408ec0:	f77f af0a 	ble.w	408cd8 <_svfprintf_r+0xa3c>
  408ec4:	2e10      	cmp	r6, #16
  408ec6:	4d03      	ldr	r5, [pc, #12]	; (408ed4 <_svfprintf_r+0xc38>)
  408ec8:	dd22      	ble.n	408f10 <_svfprintf_r+0xc74>
  408eca:	4622      	mov	r2, r4
  408ecc:	f04f 0b10 	mov.w	fp, #16
  408ed0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408ed2:	e006      	b.n	408ee2 <_svfprintf_r+0xc46>
  408ed4:	0040fa90 	.word	0x0040fa90
  408ed8:	3e10      	subs	r6, #16
  408eda:	2e10      	cmp	r6, #16
  408edc:	f108 0808 	add.w	r8, r8, #8
  408ee0:	dd15      	ble.n	408f0e <_svfprintf_r+0xc72>
  408ee2:	3701      	adds	r7, #1
  408ee4:	3210      	adds	r2, #16
  408ee6:	2f07      	cmp	r7, #7
  408ee8:	9227      	str	r2, [sp, #156]	; 0x9c
  408eea:	9726      	str	r7, [sp, #152]	; 0x98
  408eec:	e888 0820 	stmia.w	r8, {r5, fp}
  408ef0:	ddf2      	ble.n	408ed8 <_svfprintf_r+0xc3c>
  408ef2:	aa25      	add	r2, sp, #148	; 0x94
  408ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408ef6:	4620      	mov	r0, r4
  408ef8:	f004 fd8c 	bl	40da14 <__ssprint_r>
  408efc:	2800      	cmp	r0, #0
  408efe:	f47f aa9f 	bne.w	408440 <_svfprintf_r+0x1a4>
  408f02:	3e10      	subs	r6, #16
  408f04:	2e10      	cmp	r6, #16
  408f06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  408f08:	9f26      	ldr	r7, [sp, #152]	; 0x98
  408f0a:	46c8      	mov	r8, r9
  408f0c:	dce9      	bgt.n	408ee2 <_svfprintf_r+0xc46>
  408f0e:	4614      	mov	r4, r2
  408f10:	3701      	adds	r7, #1
  408f12:	4434      	add	r4, r6
  408f14:	2f07      	cmp	r7, #7
  408f16:	9427      	str	r4, [sp, #156]	; 0x9c
  408f18:	9726      	str	r7, [sp, #152]	; 0x98
  408f1a:	e888 0060 	stmia.w	r8, {r5, r6}
  408f1e:	f77f aed9 	ble.w	408cd4 <_svfprintf_r+0xa38>
  408f22:	aa25      	add	r2, sp, #148	; 0x94
  408f24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408f26:	980c      	ldr	r0, [sp, #48]	; 0x30
  408f28:	f004 fd74 	bl	40da14 <__ssprint_r>
  408f2c:	2800      	cmp	r0, #0
  408f2e:	f47f aa87 	bne.w	408440 <_svfprintf_r+0x1a4>
  408f32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408f34:	9f26      	ldr	r7, [sp, #152]	; 0x98
  408f36:	46c8      	mov	r8, r9
  408f38:	e6ce      	b.n	408cd8 <_svfprintf_r+0xa3c>
  408f3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408f3c:	6814      	ldr	r4, [r2, #0]
  408f3e:	4613      	mov	r3, r2
  408f40:	3304      	adds	r3, #4
  408f42:	17e5      	asrs	r5, r4, #31
  408f44:	930f      	str	r3, [sp, #60]	; 0x3c
  408f46:	4622      	mov	r2, r4
  408f48:	462b      	mov	r3, r5
  408f4a:	e4fa      	b.n	408942 <_svfprintf_r+0x6a6>
  408f4c:	3204      	adds	r2, #4
  408f4e:	681c      	ldr	r4, [r3, #0]
  408f50:	920f      	str	r2, [sp, #60]	; 0x3c
  408f52:	2301      	movs	r3, #1
  408f54:	2500      	movs	r5, #0
  408f56:	f7ff ba94 	b.w	408482 <_svfprintf_r+0x1e6>
  408f5a:	681c      	ldr	r4, [r3, #0]
  408f5c:	3304      	adds	r3, #4
  408f5e:	930f      	str	r3, [sp, #60]	; 0x3c
  408f60:	2500      	movs	r5, #0
  408f62:	e421      	b.n	4087a8 <_svfprintf_r+0x50c>
  408f64:	990f      	ldr	r1, [sp, #60]	; 0x3c
  408f66:	460a      	mov	r2, r1
  408f68:	3204      	adds	r2, #4
  408f6a:	680c      	ldr	r4, [r1, #0]
  408f6c:	920f      	str	r2, [sp, #60]	; 0x3c
  408f6e:	2500      	movs	r5, #0
  408f70:	f7ff ba87 	b.w	408482 <_svfprintf_r+0x1e6>
  408f74:	4614      	mov	r4, r2
  408f76:	3301      	adds	r3, #1
  408f78:	4434      	add	r4, r6
  408f7a:	2b07      	cmp	r3, #7
  408f7c:	9427      	str	r4, [sp, #156]	; 0x9c
  408f7e:	9326      	str	r3, [sp, #152]	; 0x98
  408f80:	e888 0060 	stmia.w	r8, {r5, r6}
  408f84:	f77f ab68 	ble.w	408658 <_svfprintf_r+0x3bc>
  408f88:	e6b3      	b.n	408cf2 <_svfprintf_r+0xa56>
  408f8a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  408f8e:	f8cd b01c 	str.w	fp, [sp, #28]
  408f92:	ae42      	add	r6, sp, #264	; 0x108
  408f94:	3430      	adds	r4, #48	; 0x30
  408f96:	2301      	movs	r3, #1
  408f98:	f806 4d41 	strb.w	r4, [r6, #-65]!
  408f9c:	930e      	str	r3, [sp, #56]	; 0x38
  408f9e:	f7ff ba8d 	b.w	4084bc <_svfprintf_r+0x220>
  408fa2:	aa25      	add	r2, sp, #148	; 0x94
  408fa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408fa6:	980c      	ldr	r0, [sp, #48]	; 0x30
  408fa8:	f004 fd34 	bl	40da14 <__ssprint_r>
  408fac:	2800      	cmp	r0, #0
  408fae:	f47f aa47 	bne.w	408440 <_svfprintf_r+0x1a4>
  408fb2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408fb4:	46c8      	mov	r8, r9
  408fb6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  408fb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408fba:	429a      	cmp	r2, r3
  408fbc:	db44      	blt.n	409048 <_svfprintf_r+0xdac>
  408fbe:	9b07      	ldr	r3, [sp, #28]
  408fc0:	07d9      	lsls	r1, r3, #31
  408fc2:	d441      	bmi.n	409048 <_svfprintf_r+0xdac>
  408fc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408fc6:	9812      	ldr	r0, [sp, #72]	; 0x48
  408fc8:	1a9a      	subs	r2, r3, r2
  408fca:	1a1d      	subs	r5, r3, r0
  408fcc:	4295      	cmp	r5, r2
  408fce:	bfa8      	it	ge
  408fd0:	4615      	movge	r5, r2
  408fd2:	2d00      	cmp	r5, #0
  408fd4:	dd0e      	ble.n	408ff4 <_svfprintf_r+0xd58>
  408fd6:	9926      	ldr	r1, [sp, #152]	; 0x98
  408fd8:	f8c8 5004 	str.w	r5, [r8, #4]
  408fdc:	3101      	adds	r1, #1
  408fde:	4406      	add	r6, r0
  408fe0:	442c      	add	r4, r5
  408fe2:	2907      	cmp	r1, #7
  408fe4:	f8c8 6000 	str.w	r6, [r8]
  408fe8:	9427      	str	r4, [sp, #156]	; 0x9c
  408fea:	9126      	str	r1, [sp, #152]	; 0x98
  408fec:	f300 823b 	bgt.w	409466 <_svfprintf_r+0x11ca>
  408ff0:	f108 0808 	add.w	r8, r8, #8
  408ff4:	2d00      	cmp	r5, #0
  408ff6:	bfac      	ite	ge
  408ff8:	1b56      	subge	r6, r2, r5
  408ffa:	4616      	movlt	r6, r2
  408ffc:	2e00      	cmp	r6, #0
  408ffe:	f77f ab2d 	ble.w	40865c <_svfprintf_r+0x3c0>
  409002:	2e10      	cmp	r6, #16
  409004:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409006:	4db0      	ldr	r5, [pc, #704]	; (4092c8 <_svfprintf_r+0x102c>)
  409008:	ddb5      	ble.n	408f76 <_svfprintf_r+0xcda>
  40900a:	4622      	mov	r2, r4
  40900c:	2710      	movs	r7, #16
  40900e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  409012:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  409014:	e004      	b.n	409020 <_svfprintf_r+0xd84>
  409016:	f108 0808 	add.w	r8, r8, #8
  40901a:	3e10      	subs	r6, #16
  40901c:	2e10      	cmp	r6, #16
  40901e:	dda9      	ble.n	408f74 <_svfprintf_r+0xcd8>
  409020:	3301      	adds	r3, #1
  409022:	3210      	adds	r2, #16
  409024:	2b07      	cmp	r3, #7
  409026:	9227      	str	r2, [sp, #156]	; 0x9c
  409028:	9326      	str	r3, [sp, #152]	; 0x98
  40902a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40902e:	ddf2      	ble.n	409016 <_svfprintf_r+0xd7a>
  409030:	aa25      	add	r2, sp, #148	; 0x94
  409032:	4621      	mov	r1, r4
  409034:	4658      	mov	r0, fp
  409036:	f004 fced 	bl	40da14 <__ssprint_r>
  40903a:	2800      	cmp	r0, #0
  40903c:	f47f aa00 	bne.w	408440 <_svfprintf_r+0x1a4>
  409040:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  409042:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409044:	46c8      	mov	r8, r9
  409046:	e7e8      	b.n	40901a <_svfprintf_r+0xd7e>
  409048:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40904a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40904c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40904e:	f8c8 1000 	str.w	r1, [r8]
  409052:	3301      	adds	r3, #1
  409054:	4404      	add	r4, r0
  409056:	2b07      	cmp	r3, #7
  409058:	9427      	str	r4, [sp, #156]	; 0x9c
  40905a:	f8c8 0004 	str.w	r0, [r8, #4]
  40905e:	9326      	str	r3, [sp, #152]	; 0x98
  409060:	f300 81f5 	bgt.w	40944e <_svfprintf_r+0x11b2>
  409064:	f108 0808 	add.w	r8, r8, #8
  409068:	e7ac      	b.n	408fc4 <_svfprintf_r+0xd28>
  40906a:	9b07      	ldr	r3, [sp, #28]
  40906c:	07da      	lsls	r2, r3, #31
  40906e:	f53f adfe 	bmi.w	408c6e <_svfprintf_r+0x9d2>
  409072:	3701      	adds	r7, #1
  409074:	3401      	adds	r4, #1
  409076:	2301      	movs	r3, #1
  409078:	2f07      	cmp	r7, #7
  40907a:	9427      	str	r4, [sp, #156]	; 0x9c
  40907c:	9726      	str	r7, [sp, #152]	; 0x98
  40907e:	f8c8 6000 	str.w	r6, [r8]
  409082:	f8c8 3004 	str.w	r3, [r8, #4]
  409086:	f77f ae25 	ble.w	408cd4 <_svfprintf_r+0xa38>
  40908a:	e74a      	b.n	408f22 <_svfprintf_r+0xc86>
  40908c:	aa25      	add	r2, sp, #148	; 0x94
  40908e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409090:	980c      	ldr	r0, [sp, #48]	; 0x30
  409092:	f004 fcbf 	bl	40da14 <__ssprint_r>
  409096:	2800      	cmp	r0, #0
  409098:	f47f a9d2 	bne.w	408440 <_svfprintf_r+0x1a4>
  40909c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40909e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4090a0:	46c8      	mov	r8, r9
  4090a2:	e5f2      	b.n	408c8a <_svfprintf_r+0x9ee>
  4090a4:	aa25      	add	r2, sp, #148	; 0x94
  4090a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4090a8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4090aa:	f004 fcb3 	bl	40da14 <__ssprint_r>
  4090ae:	2800      	cmp	r0, #0
  4090b0:	f47f a9c6 	bne.w	408440 <_svfprintf_r+0x1a4>
  4090b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4090b6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4090b8:	46c8      	mov	r8, r9
  4090ba:	e5f5      	b.n	408ca8 <_svfprintf_r+0xa0c>
  4090bc:	464e      	mov	r6, r9
  4090be:	f7ff b9fd 	b.w	4084bc <_svfprintf_r+0x220>
  4090c2:	aa25      	add	r2, sp, #148	; 0x94
  4090c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4090c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4090c8:	f004 fca4 	bl	40da14 <__ssprint_r>
  4090cc:	2800      	cmp	r0, #0
  4090ce:	f47f a9b7 	bne.w	408440 <_svfprintf_r+0x1a4>
  4090d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4090d4:	46c8      	mov	r8, r9
  4090d6:	f7ff ba72 	b.w	4085be <_svfprintf_r+0x322>
  4090da:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4090dc:	4622      	mov	r2, r4
  4090de:	4620      	mov	r0, r4
  4090e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4090e2:	4623      	mov	r3, r4
  4090e4:	4621      	mov	r1, r4
  4090e6:	f005 f88b 	bl	40e200 <__aeabi_dcmpun>
  4090ea:	2800      	cmp	r0, #0
  4090ec:	f040 8286 	bne.w	4095fc <_svfprintf_r+0x1360>
  4090f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4090f2:	3301      	adds	r3, #1
  4090f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4090f6:	f023 0320 	bic.w	r3, r3, #32
  4090fa:	930e      	str	r3, [sp, #56]	; 0x38
  4090fc:	f000 81e2 	beq.w	4094c4 <_svfprintf_r+0x1228>
  409100:	2b47      	cmp	r3, #71	; 0x47
  409102:	f000 811e 	beq.w	409342 <_svfprintf_r+0x10a6>
  409106:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40910a:	9307      	str	r3, [sp, #28]
  40910c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40910e:	1e1f      	subs	r7, r3, #0
  409110:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409112:	9308      	str	r3, [sp, #32]
  409114:	bfbb      	ittet	lt
  409116:	463b      	movlt	r3, r7
  409118:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40911c:	2300      	movge	r3, #0
  40911e:	232d      	movlt	r3, #45	; 0x2d
  409120:	9310      	str	r3, [sp, #64]	; 0x40
  409122:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409124:	2b66      	cmp	r3, #102	; 0x66
  409126:	f000 81bb 	beq.w	4094a0 <_svfprintf_r+0x1204>
  40912a:	2b46      	cmp	r3, #70	; 0x46
  40912c:	f000 80df 	beq.w	4092ee <_svfprintf_r+0x1052>
  409130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409132:	9a08      	ldr	r2, [sp, #32]
  409134:	2b45      	cmp	r3, #69	; 0x45
  409136:	bf0c      	ite	eq
  409138:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40913a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40913c:	a823      	add	r0, sp, #140	; 0x8c
  40913e:	a920      	add	r1, sp, #128	; 0x80
  409140:	bf08      	it	eq
  409142:	1c5d      	addeq	r5, r3, #1
  409144:	9004      	str	r0, [sp, #16]
  409146:	9103      	str	r1, [sp, #12]
  409148:	a81f      	add	r0, sp, #124	; 0x7c
  40914a:	2102      	movs	r1, #2
  40914c:	463b      	mov	r3, r7
  40914e:	9002      	str	r0, [sp, #8]
  409150:	9501      	str	r5, [sp, #4]
  409152:	9100      	str	r1, [sp, #0]
  409154:	980c      	ldr	r0, [sp, #48]	; 0x30
  409156:	f001 ff3b 	bl	40afd0 <_dtoa_r>
  40915a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40915c:	2b67      	cmp	r3, #103	; 0x67
  40915e:	4606      	mov	r6, r0
  409160:	f040 81e0 	bne.w	409524 <_svfprintf_r+0x1288>
  409164:	f01b 0f01 	tst.w	fp, #1
  409168:	f000 8246 	beq.w	4095f8 <_svfprintf_r+0x135c>
  40916c:	1974      	adds	r4, r6, r5
  40916e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409170:	9808      	ldr	r0, [sp, #32]
  409172:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  409174:	4639      	mov	r1, r7
  409176:	f005 f811 	bl	40e19c <__aeabi_dcmpeq>
  40917a:	2800      	cmp	r0, #0
  40917c:	f040 8165 	bne.w	40944a <_svfprintf_r+0x11ae>
  409180:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  409182:	42a3      	cmp	r3, r4
  409184:	d206      	bcs.n	409194 <_svfprintf_r+0xef8>
  409186:	2130      	movs	r1, #48	; 0x30
  409188:	1c5a      	adds	r2, r3, #1
  40918a:	9223      	str	r2, [sp, #140]	; 0x8c
  40918c:	7019      	strb	r1, [r3, #0]
  40918e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  409190:	429c      	cmp	r4, r3
  409192:	d8f9      	bhi.n	409188 <_svfprintf_r+0xeec>
  409194:	1b9b      	subs	r3, r3, r6
  409196:	9313      	str	r3, [sp, #76]	; 0x4c
  409198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40919a:	2b47      	cmp	r3, #71	; 0x47
  40919c:	f000 80e9 	beq.w	409372 <_svfprintf_r+0x10d6>
  4091a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4091a2:	2b65      	cmp	r3, #101	; 0x65
  4091a4:	f340 81cd 	ble.w	409542 <_svfprintf_r+0x12a6>
  4091a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4091aa:	2b66      	cmp	r3, #102	; 0x66
  4091ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4091ae:	9312      	str	r3, [sp, #72]	; 0x48
  4091b0:	f000 819e 	beq.w	4094f0 <_svfprintf_r+0x1254>
  4091b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4091b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4091b8:	4619      	mov	r1, r3
  4091ba:	4291      	cmp	r1, r2
  4091bc:	f300 818a 	bgt.w	4094d4 <_svfprintf_r+0x1238>
  4091c0:	f01b 0f01 	tst.w	fp, #1
  4091c4:	f040 8213 	bne.w	4095ee <_svfprintf_r+0x1352>
  4091c8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4091cc:	9308      	str	r3, [sp, #32]
  4091ce:	2367      	movs	r3, #103	; 0x67
  4091d0:	920e      	str	r2, [sp, #56]	; 0x38
  4091d2:	9311      	str	r3, [sp, #68]	; 0x44
  4091d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4091d6:	2b00      	cmp	r3, #0
  4091d8:	f040 80c4 	bne.w	409364 <_svfprintf_r+0x10c8>
  4091dc:	930a      	str	r3, [sp, #40]	; 0x28
  4091de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4091e2:	f7ff b973 	b.w	4084cc <_svfprintf_r+0x230>
  4091e6:	4635      	mov	r5, r6
  4091e8:	460c      	mov	r4, r1
  4091ea:	4646      	mov	r6, r8
  4091ec:	4690      	mov	r8, r2
  4091ee:	3301      	adds	r3, #1
  4091f0:	443c      	add	r4, r7
  4091f2:	2b07      	cmp	r3, #7
  4091f4:	9427      	str	r4, [sp, #156]	; 0x9c
  4091f6:	9326      	str	r3, [sp, #152]	; 0x98
  4091f8:	e888 00a0 	stmia.w	r8, {r5, r7}
  4091fc:	f73f aed1 	bgt.w	408fa2 <_svfprintf_r+0xd06>
  409200:	f108 0808 	add.w	r8, r8, #8
  409204:	e6d7      	b.n	408fb6 <_svfprintf_r+0xd1a>
  409206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409208:	6813      	ldr	r3, [r2, #0]
  40920a:	3204      	adds	r2, #4
  40920c:	920f      	str	r2, [sp, #60]	; 0x3c
  40920e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409210:	601a      	str	r2, [r3, #0]
  409212:	f7ff b86a 	b.w	4082ea <_svfprintf_r+0x4e>
  409216:	aa25      	add	r2, sp, #148	; 0x94
  409218:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40921a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40921c:	f004 fbfa 	bl	40da14 <__ssprint_r>
  409220:	2800      	cmp	r0, #0
  409222:	f47f a90d 	bne.w	408440 <_svfprintf_r+0x1a4>
  409226:	46c8      	mov	r8, r9
  409228:	e48d      	b.n	408b46 <_svfprintf_r+0x8aa>
  40922a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40922c:	4a27      	ldr	r2, [pc, #156]	; (4092cc <_svfprintf_r+0x1030>)
  40922e:	f8c8 2000 	str.w	r2, [r8]
  409232:	3301      	adds	r3, #1
  409234:	3401      	adds	r4, #1
  409236:	2201      	movs	r2, #1
  409238:	2b07      	cmp	r3, #7
  40923a:	9427      	str	r4, [sp, #156]	; 0x9c
  40923c:	9326      	str	r3, [sp, #152]	; 0x98
  40923e:	f8c8 2004 	str.w	r2, [r8, #4]
  409242:	dc72      	bgt.n	40932a <_svfprintf_r+0x108e>
  409244:	f108 0808 	add.w	r8, r8, #8
  409248:	b929      	cbnz	r1, 409256 <_svfprintf_r+0xfba>
  40924a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40924c:	b91b      	cbnz	r3, 409256 <_svfprintf_r+0xfba>
  40924e:	9b07      	ldr	r3, [sp, #28]
  409250:	07d8      	lsls	r0, r3, #31
  409252:	f57f aa03 	bpl.w	40865c <_svfprintf_r+0x3c0>
  409256:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409258:	9819      	ldr	r0, [sp, #100]	; 0x64
  40925a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40925c:	f8c8 2000 	str.w	r2, [r8]
  409260:	3301      	adds	r3, #1
  409262:	4602      	mov	r2, r0
  409264:	4422      	add	r2, r4
  409266:	2b07      	cmp	r3, #7
  409268:	9227      	str	r2, [sp, #156]	; 0x9c
  40926a:	f8c8 0004 	str.w	r0, [r8, #4]
  40926e:	9326      	str	r3, [sp, #152]	; 0x98
  409270:	f300 818d 	bgt.w	40958e <_svfprintf_r+0x12f2>
  409274:	f108 0808 	add.w	r8, r8, #8
  409278:	2900      	cmp	r1, #0
  40927a:	f2c0 8165 	blt.w	409548 <_svfprintf_r+0x12ac>
  40927e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  409280:	f8c8 6000 	str.w	r6, [r8]
  409284:	3301      	adds	r3, #1
  409286:	188c      	adds	r4, r1, r2
  409288:	2b07      	cmp	r3, #7
  40928a:	9427      	str	r4, [sp, #156]	; 0x9c
  40928c:	9326      	str	r3, [sp, #152]	; 0x98
  40928e:	f8c8 1004 	str.w	r1, [r8, #4]
  409292:	f77f a9e1 	ble.w	408658 <_svfprintf_r+0x3bc>
  409296:	e52c      	b.n	408cf2 <_svfprintf_r+0xa56>
  409298:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40929a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40929c:	6813      	ldr	r3, [r2, #0]
  40929e:	17cd      	asrs	r5, r1, #31
  4092a0:	4608      	mov	r0, r1
  4092a2:	3204      	adds	r2, #4
  4092a4:	4629      	mov	r1, r5
  4092a6:	920f      	str	r2, [sp, #60]	; 0x3c
  4092a8:	e9c3 0100 	strd	r0, r1, [r3]
  4092ac:	f7ff b81d 	b.w	4082ea <_svfprintf_r+0x4e>
  4092b0:	aa25      	add	r2, sp, #148	; 0x94
  4092b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4092b4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4092b6:	f004 fbad 	bl	40da14 <__ssprint_r>
  4092ba:	2800      	cmp	r0, #0
  4092bc:	f47f a8c0 	bne.w	408440 <_svfprintf_r+0x1a4>
  4092c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4092c2:	46c8      	mov	r8, r9
  4092c4:	e458      	b.n	408b78 <_svfprintf_r+0x8dc>
  4092c6:	bf00      	nop
  4092c8:	0040fa90 	.word	0x0040fa90
  4092cc:	0040fa7c 	.word	0x0040fa7c
  4092d0:	2140      	movs	r1, #64	; 0x40
  4092d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4092d4:	f003 fa9e 	bl	40c814 <_malloc_r>
  4092d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4092da:	6010      	str	r0, [r2, #0]
  4092dc:	6110      	str	r0, [r2, #16]
  4092de:	2800      	cmp	r0, #0
  4092e0:	f000 81f2 	beq.w	4096c8 <_svfprintf_r+0x142c>
  4092e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4092e6:	2340      	movs	r3, #64	; 0x40
  4092e8:	6153      	str	r3, [r2, #20]
  4092ea:	f7fe bfee 	b.w	4082ca <_svfprintf_r+0x2e>
  4092ee:	a823      	add	r0, sp, #140	; 0x8c
  4092f0:	a920      	add	r1, sp, #128	; 0x80
  4092f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4092f4:	9004      	str	r0, [sp, #16]
  4092f6:	9103      	str	r1, [sp, #12]
  4092f8:	a81f      	add	r0, sp, #124	; 0x7c
  4092fa:	2103      	movs	r1, #3
  4092fc:	9002      	str	r0, [sp, #8]
  4092fe:	9a08      	ldr	r2, [sp, #32]
  409300:	9401      	str	r4, [sp, #4]
  409302:	463b      	mov	r3, r7
  409304:	9100      	str	r1, [sp, #0]
  409306:	980c      	ldr	r0, [sp, #48]	; 0x30
  409308:	f001 fe62 	bl	40afd0 <_dtoa_r>
  40930c:	4625      	mov	r5, r4
  40930e:	4606      	mov	r6, r0
  409310:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409312:	2b46      	cmp	r3, #70	; 0x46
  409314:	eb06 0405 	add.w	r4, r6, r5
  409318:	f47f af29 	bne.w	40916e <_svfprintf_r+0xed2>
  40931c:	7833      	ldrb	r3, [r6, #0]
  40931e:	2b30      	cmp	r3, #48	; 0x30
  409320:	f000 8178 	beq.w	409614 <_svfprintf_r+0x1378>
  409324:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  409326:	442c      	add	r4, r5
  409328:	e721      	b.n	40916e <_svfprintf_r+0xed2>
  40932a:	aa25      	add	r2, sp, #148	; 0x94
  40932c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40932e:	980c      	ldr	r0, [sp, #48]	; 0x30
  409330:	f004 fb70 	bl	40da14 <__ssprint_r>
  409334:	2800      	cmp	r0, #0
  409336:	f47f a883 	bne.w	408440 <_svfprintf_r+0x1a4>
  40933a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40933c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40933e:	46c8      	mov	r8, r9
  409340:	e782      	b.n	409248 <_svfprintf_r+0xfac>
  409342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409344:	2b00      	cmp	r3, #0
  409346:	bf08      	it	eq
  409348:	2301      	moveq	r3, #1
  40934a:	930a      	str	r3, [sp, #40]	; 0x28
  40934c:	e6db      	b.n	409106 <_svfprintf_r+0xe6a>
  40934e:	4630      	mov	r0, r6
  409350:	940a      	str	r4, [sp, #40]	; 0x28
  409352:	f7fe ff35 	bl	4081c0 <strlen>
  409356:	950f      	str	r5, [sp, #60]	; 0x3c
  409358:	900e      	str	r0, [sp, #56]	; 0x38
  40935a:	f8cd b01c 	str.w	fp, [sp, #28]
  40935e:	4603      	mov	r3, r0
  409360:	f7ff b9f9 	b.w	408756 <_svfprintf_r+0x4ba>
  409364:	272d      	movs	r7, #45	; 0x2d
  409366:	2300      	movs	r3, #0
  409368:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40936c:	930a      	str	r3, [sp, #40]	; 0x28
  40936e:	f7ff b8ae 	b.w	4084ce <_svfprintf_r+0x232>
  409372:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  409374:	9312      	str	r3, [sp, #72]	; 0x48
  409376:	461a      	mov	r2, r3
  409378:	3303      	adds	r3, #3
  40937a:	db04      	blt.n	409386 <_svfprintf_r+0x10ea>
  40937c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40937e:	4619      	mov	r1, r3
  409380:	4291      	cmp	r1, r2
  409382:	f6bf af17 	bge.w	4091b4 <_svfprintf_r+0xf18>
  409386:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409388:	3b02      	subs	r3, #2
  40938a:	9311      	str	r3, [sp, #68]	; 0x44
  40938c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  409390:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  409394:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409396:	3b01      	subs	r3, #1
  409398:	2b00      	cmp	r3, #0
  40939a:	931f      	str	r3, [sp, #124]	; 0x7c
  40939c:	bfbd      	ittte	lt
  40939e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4093a0:	f1c3 0301 	rsblt	r3, r3, #1
  4093a4:	222d      	movlt	r2, #45	; 0x2d
  4093a6:	222b      	movge	r2, #43	; 0x2b
  4093a8:	2b09      	cmp	r3, #9
  4093aa:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4093ae:	f340 8116 	ble.w	4095de <_svfprintf_r+0x1342>
  4093b2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4093b6:	4620      	mov	r0, r4
  4093b8:	4dab      	ldr	r5, [pc, #684]	; (409668 <_svfprintf_r+0x13cc>)
  4093ba:	e000      	b.n	4093be <_svfprintf_r+0x1122>
  4093bc:	4610      	mov	r0, r2
  4093be:	fb85 1203 	smull	r1, r2, r5, r3
  4093c2:	17d9      	asrs	r1, r3, #31
  4093c4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4093c8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4093cc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4093d0:	3230      	adds	r2, #48	; 0x30
  4093d2:	2909      	cmp	r1, #9
  4093d4:	f800 2c01 	strb.w	r2, [r0, #-1]
  4093d8:	460b      	mov	r3, r1
  4093da:	f100 32ff 	add.w	r2, r0, #4294967295
  4093de:	dced      	bgt.n	4093bc <_svfprintf_r+0x1120>
  4093e0:	3330      	adds	r3, #48	; 0x30
  4093e2:	3802      	subs	r0, #2
  4093e4:	b2d9      	uxtb	r1, r3
  4093e6:	4284      	cmp	r4, r0
  4093e8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4093ec:	f240 8165 	bls.w	4096ba <_svfprintf_r+0x141e>
  4093f0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4093f4:	4613      	mov	r3, r2
  4093f6:	e001      	b.n	4093fc <_svfprintf_r+0x1160>
  4093f8:	f813 1b01 	ldrb.w	r1, [r3], #1
  4093fc:	f800 1b01 	strb.w	r1, [r0], #1
  409400:	42a3      	cmp	r3, r4
  409402:	d1f9      	bne.n	4093f8 <_svfprintf_r+0x115c>
  409404:	3301      	adds	r3, #1
  409406:	1a9b      	subs	r3, r3, r2
  409408:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40940c:	4413      	add	r3, r2
  40940e:	aa21      	add	r2, sp, #132	; 0x84
  409410:	1a9b      	subs	r3, r3, r2
  409412:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  409414:	931b      	str	r3, [sp, #108]	; 0x6c
  409416:	2a01      	cmp	r2, #1
  409418:	4413      	add	r3, r2
  40941a:	930e      	str	r3, [sp, #56]	; 0x38
  40941c:	f340 8119 	ble.w	409652 <_svfprintf_r+0x13b6>
  409420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409422:	9a19      	ldr	r2, [sp, #100]	; 0x64
  409424:	4413      	add	r3, r2
  409426:	930e      	str	r3, [sp, #56]	; 0x38
  409428:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40942c:	9308      	str	r3, [sp, #32]
  40942e:	2300      	movs	r3, #0
  409430:	9312      	str	r3, [sp, #72]	; 0x48
  409432:	e6cf      	b.n	4091d4 <_svfprintf_r+0xf38>
  409434:	aa25      	add	r2, sp, #148	; 0x94
  409436:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409438:	980c      	ldr	r0, [sp, #48]	; 0x30
  40943a:	f004 faeb 	bl	40da14 <__ssprint_r>
  40943e:	2800      	cmp	r0, #0
  409440:	f47e affe 	bne.w	408440 <_svfprintf_r+0x1a4>
  409444:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  409446:	46c8      	mov	r8, r9
  409448:	e4d7      	b.n	408dfa <_svfprintf_r+0xb5e>
  40944a:	4623      	mov	r3, r4
  40944c:	e6a2      	b.n	409194 <_svfprintf_r+0xef8>
  40944e:	aa25      	add	r2, sp, #148	; 0x94
  409450:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409452:	980c      	ldr	r0, [sp, #48]	; 0x30
  409454:	f004 fade 	bl	40da14 <__ssprint_r>
  409458:	2800      	cmp	r0, #0
  40945a:	f47e aff1 	bne.w	408440 <_svfprintf_r+0x1a4>
  40945e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  409460:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  409462:	46c8      	mov	r8, r9
  409464:	e5ae      	b.n	408fc4 <_svfprintf_r+0xd28>
  409466:	aa25      	add	r2, sp, #148	; 0x94
  409468:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40946a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40946c:	f004 fad2 	bl	40da14 <__ssprint_r>
  409470:	2800      	cmp	r0, #0
  409472:	f47e afe5 	bne.w	408440 <_svfprintf_r+0x1a4>
  409476:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  409478:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40947a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40947c:	1a9a      	subs	r2, r3, r2
  40947e:	46c8      	mov	r8, r9
  409480:	e5b8      	b.n	408ff4 <_svfprintf_r+0xd58>
  409482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409484:	9612      	str	r6, [sp, #72]	; 0x48
  409486:	2b06      	cmp	r3, #6
  409488:	bf28      	it	cs
  40948a:	2306      	movcs	r3, #6
  40948c:	960a      	str	r6, [sp, #40]	; 0x28
  40948e:	4637      	mov	r7, r6
  409490:	9308      	str	r3, [sp, #32]
  409492:	950f      	str	r5, [sp, #60]	; 0x3c
  409494:	f8cd b01c 	str.w	fp, [sp, #28]
  409498:	930e      	str	r3, [sp, #56]	; 0x38
  40949a:	4e74      	ldr	r6, [pc, #464]	; (40966c <_svfprintf_r+0x13d0>)
  40949c:	f7ff b816 	b.w	4084cc <_svfprintf_r+0x230>
  4094a0:	a823      	add	r0, sp, #140	; 0x8c
  4094a2:	a920      	add	r1, sp, #128	; 0x80
  4094a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4094a6:	9004      	str	r0, [sp, #16]
  4094a8:	9103      	str	r1, [sp, #12]
  4094aa:	a81f      	add	r0, sp, #124	; 0x7c
  4094ac:	2103      	movs	r1, #3
  4094ae:	9002      	str	r0, [sp, #8]
  4094b0:	9a08      	ldr	r2, [sp, #32]
  4094b2:	9501      	str	r5, [sp, #4]
  4094b4:	463b      	mov	r3, r7
  4094b6:	9100      	str	r1, [sp, #0]
  4094b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4094ba:	f001 fd89 	bl	40afd0 <_dtoa_r>
  4094be:	4606      	mov	r6, r0
  4094c0:	1944      	adds	r4, r0, r5
  4094c2:	e72b      	b.n	40931c <_svfprintf_r+0x1080>
  4094c4:	2306      	movs	r3, #6
  4094c6:	930a      	str	r3, [sp, #40]	; 0x28
  4094c8:	e61d      	b.n	409106 <_svfprintf_r+0xe6a>
  4094ca:	272d      	movs	r7, #45	; 0x2d
  4094cc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4094d0:	f7ff bacd 	b.w	408a6e <_svfprintf_r+0x7d2>
  4094d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4094d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4094d8:	4413      	add	r3, r2
  4094da:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4094dc:	930e      	str	r3, [sp, #56]	; 0x38
  4094de:	2a00      	cmp	r2, #0
  4094e0:	f340 80b0 	ble.w	409644 <_svfprintf_r+0x13a8>
  4094e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4094e8:	9308      	str	r3, [sp, #32]
  4094ea:	2367      	movs	r3, #103	; 0x67
  4094ec:	9311      	str	r3, [sp, #68]	; 0x44
  4094ee:	e671      	b.n	4091d4 <_svfprintf_r+0xf38>
  4094f0:	2b00      	cmp	r3, #0
  4094f2:	f340 80c3 	ble.w	40967c <_svfprintf_r+0x13e0>
  4094f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4094f8:	2a00      	cmp	r2, #0
  4094fa:	f040 8099 	bne.w	409630 <_svfprintf_r+0x1394>
  4094fe:	f01b 0f01 	tst.w	fp, #1
  409502:	f040 8095 	bne.w	409630 <_svfprintf_r+0x1394>
  409506:	9308      	str	r3, [sp, #32]
  409508:	930e      	str	r3, [sp, #56]	; 0x38
  40950a:	e663      	b.n	4091d4 <_svfprintf_r+0xf38>
  40950c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40950e:	9308      	str	r3, [sp, #32]
  409510:	930e      	str	r3, [sp, #56]	; 0x38
  409512:	900a      	str	r0, [sp, #40]	; 0x28
  409514:	950f      	str	r5, [sp, #60]	; 0x3c
  409516:	f8cd b01c 	str.w	fp, [sp, #28]
  40951a:	9012      	str	r0, [sp, #72]	; 0x48
  40951c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  409520:	f7fe bfd4 	b.w	4084cc <_svfprintf_r+0x230>
  409524:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409526:	2b47      	cmp	r3, #71	; 0x47
  409528:	f47f ae20 	bne.w	40916c <_svfprintf_r+0xed0>
  40952c:	f01b 0f01 	tst.w	fp, #1
  409530:	f47f aeee 	bne.w	409310 <_svfprintf_r+0x1074>
  409534:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  409536:	1b9b      	subs	r3, r3, r6
  409538:	9313      	str	r3, [sp, #76]	; 0x4c
  40953a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40953c:	2b47      	cmp	r3, #71	; 0x47
  40953e:	f43f af18 	beq.w	409372 <_svfprintf_r+0x10d6>
  409542:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  409544:	9312      	str	r3, [sp, #72]	; 0x48
  409546:	e721      	b.n	40938c <_svfprintf_r+0x10f0>
  409548:	424f      	negs	r7, r1
  40954a:	3110      	adds	r1, #16
  40954c:	4d48      	ldr	r5, [pc, #288]	; (409670 <_svfprintf_r+0x13d4>)
  40954e:	da2f      	bge.n	4095b0 <_svfprintf_r+0x1314>
  409550:	2410      	movs	r4, #16
  409552:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  409556:	e004      	b.n	409562 <_svfprintf_r+0x12c6>
  409558:	f108 0808 	add.w	r8, r8, #8
  40955c:	3f10      	subs	r7, #16
  40955e:	2f10      	cmp	r7, #16
  409560:	dd26      	ble.n	4095b0 <_svfprintf_r+0x1314>
  409562:	3301      	adds	r3, #1
  409564:	3210      	adds	r2, #16
  409566:	2b07      	cmp	r3, #7
  409568:	9227      	str	r2, [sp, #156]	; 0x9c
  40956a:	9326      	str	r3, [sp, #152]	; 0x98
  40956c:	f8c8 5000 	str.w	r5, [r8]
  409570:	f8c8 4004 	str.w	r4, [r8, #4]
  409574:	ddf0      	ble.n	409558 <_svfprintf_r+0x12bc>
  409576:	aa25      	add	r2, sp, #148	; 0x94
  409578:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40957a:	4658      	mov	r0, fp
  40957c:	f004 fa4a 	bl	40da14 <__ssprint_r>
  409580:	2800      	cmp	r0, #0
  409582:	f47e af5d 	bne.w	408440 <_svfprintf_r+0x1a4>
  409586:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  409588:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40958a:	46c8      	mov	r8, r9
  40958c:	e7e6      	b.n	40955c <_svfprintf_r+0x12c0>
  40958e:	aa25      	add	r2, sp, #148	; 0x94
  409590:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409592:	980c      	ldr	r0, [sp, #48]	; 0x30
  409594:	f004 fa3e 	bl	40da14 <__ssprint_r>
  409598:	2800      	cmp	r0, #0
  40959a:	f47e af51 	bne.w	408440 <_svfprintf_r+0x1a4>
  40959e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4095a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4095a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4095a4:	46c8      	mov	r8, r9
  4095a6:	e667      	b.n	409278 <_svfprintf_r+0xfdc>
  4095a8:	2000      	movs	r0, #0
  4095aa:	900a      	str	r0, [sp, #40]	; 0x28
  4095ac:	f7fe bed0 	b.w	408350 <_svfprintf_r+0xb4>
  4095b0:	3301      	adds	r3, #1
  4095b2:	443a      	add	r2, r7
  4095b4:	2b07      	cmp	r3, #7
  4095b6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4095ba:	9227      	str	r2, [sp, #156]	; 0x9c
  4095bc:	9326      	str	r3, [sp, #152]	; 0x98
  4095be:	f108 0808 	add.w	r8, r8, #8
  4095c2:	f77f ae5c 	ble.w	40927e <_svfprintf_r+0xfe2>
  4095c6:	aa25      	add	r2, sp, #148	; 0x94
  4095c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4095ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4095cc:	f004 fa22 	bl	40da14 <__ssprint_r>
  4095d0:	2800      	cmp	r0, #0
  4095d2:	f47e af35 	bne.w	408440 <_svfprintf_r+0x1a4>
  4095d6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4095d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4095da:	46c8      	mov	r8, r9
  4095dc:	e64f      	b.n	40927e <_svfprintf_r+0xfe2>
  4095de:	3330      	adds	r3, #48	; 0x30
  4095e0:	2230      	movs	r2, #48	; 0x30
  4095e2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4095e6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4095ea:	ab22      	add	r3, sp, #136	; 0x88
  4095ec:	e70f      	b.n	40940e <_svfprintf_r+0x1172>
  4095ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4095f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4095f2:	4413      	add	r3, r2
  4095f4:	930e      	str	r3, [sp, #56]	; 0x38
  4095f6:	e775      	b.n	4094e4 <_svfprintf_r+0x1248>
  4095f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4095fa:	e5cb      	b.n	409194 <_svfprintf_r+0xef8>
  4095fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4095fe:	4e1d      	ldr	r6, [pc, #116]	; (409674 <_svfprintf_r+0x13d8>)
  409600:	2b00      	cmp	r3, #0
  409602:	bfb6      	itet	lt
  409604:	272d      	movlt	r7, #45	; 0x2d
  409606:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40960a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40960e:	4b1a      	ldr	r3, [pc, #104]	; (409678 <_svfprintf_r+0x13dc>)
  409610:	f7ff ba2f 	b.w	408a72 <_svfprintf_r+0x7d6>
  409614:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409616:	9808      	ldr	r0, [sp, #32]
  409618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40961a:	4639      	mov	r1, r7
  40961c:	f004 fdbe 	bl	40e19c <__aeabi_dcmpeq>
  409620:	2800      	cmp	r0, #0
  409622:	f47f ae7f 	bne.w	409324 <_svfprintf_r+0x1088>
  409626:	f1c5 0501 	rsb	r5, r5, #1
  40962a:	951f      	str	r5, [sp, #124]	; 0x7c
  40962c:	442c      	add	r4, r5
  40962e:	e59e      	b.n	40916e <_svfprintf_r+0xed2>
  409630:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409632:	9a19      	ldr	r2, [sp, #100]	; 0x64
  409634:	4413      	add	r3, r2
  409636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409638:	441a      	add	r2, r3
  40963a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40963e:	920e      	str	r2, [sp, #56]	; 0x38
  409640:	9308      	str	r3, [sp, #32]
  409642:	e5c7      	b.n	4091d4 <_svfprintf_r+0xf38>
  409644:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409646:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409648:	f1c3 0301 	rsb	r3, r3, #1
  40964c:	441a      	add	r2, r3
  40964e:	4613      	mov	r3, r2
  409650:	e7d0      	b.n	4095f4 <_svfprintf_r+0x1358>
  409652:	f01b 0301 	ands.w	r3, fp, #1
  409656:	9312      	str	r3, [sp, #72]	; 0x48
  409658:	f47f aee2 	bne.w	409420 <_svfprintf_r+0x1184>
  40965c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40965e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409662:	9308      	str	r3, [sp, #32]
  409664:	e5b6      	b.n	4091d4 <_svfprintf_r+0xf38>
  409666:	bf00      	nop
  409668:	66666667 	.word	0x66666667
  40966c:	0040fa74 	.word	0x0040fa74
  409670:	0040fa90 	.word	0x0040fa90
  409674:	0040fa48 	.word	0x0040fa48
  409678:	0040fa44 	.word	0x0040fa44
  40967c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40967e:	b913      	cbnz	r3, 409686 <_svfprintf_r+0x13ea>
  409680:	f01b 0f01 	tst.w	fp, #1
  409684:	d002      	beq.n	40968c <_svfprintf_r+0x13f0>
  409686:	9b19      	ldr	r3, [sp, #100]	; 0x64
  409688:	3301      	adds	r3, #1
  40968a:	e7d4      	b.n	409636 <_svfprintf_r+0x139a>
  40968c:	2301      	movs	r3, #1
  40968e:	e73a      	b.n	409506 <_svfprintf_r+0x126a>
  409690:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  409692:	f89a 3001 	ldrb.w	r3, [sl, #1]
  409696:	6828      	ldr	r0, [r5, #0]
  409698:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40969c:	900a      	str	r0, [sp, #40]	; 0x28
  40969e:	4628      	mov	r0, r5
  4096a0:	3004      	adds	r0, #4
  4096a2:	46a2      	mov	sl, r4
  4096a4:	900f      	str	r0, [sp, #60]	; 0x3c
  4096a6:	f7fe be51 	b.w	40834c <_svfprintf_r+0xb0>
  4096aa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4096ae:	f7ff b867 	b.w	408780 <_svfprintf_r+0x4e4>
  4096b2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4096b6:	f7ff ba15 	b.w	408ae4 <_svfprintf_r+0x848>
  4096ba:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4096be:	e6a6      	b.n	40940e <_svfprintf_r+0x1172>
  4096c0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4096c4:	f7ff b8eb 	b.w	40889e <_svfprintf_r+0x602>
  4096c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4096ca:	230c      	movs	r3, #12
  4096cc:	6013      	str	r3, [r2, #0]
  4096ce:	f04f 33ff 	mov.w	r3, #4294967295
  4096d2:	9309      	str	r3, [sp, #36]	; 0x24
  4096d4:	f7fe bebd 	b.w	408452 <_svfprintf_r+0x1b6>
  4096d8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4096dc:	f7ff b99a 	b.w	408a14 <_svfprintf_r+0x778>
  4096e0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4096e4:	f7ff b976 	b.w	4089d4 <_svfprintf_r+0x738>
  4096e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4096ec:	f7ff b959 	b.w	4089a2 <_svfprintf_r+0x706>
  4096f0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4096f4:	f7ff b912 	b.w	40891c <_svfprintf_r+0x680>

004096f8 <_vfprintf_r>:
  4096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4096fc:	b0c1      	sub	sp, #260	; 0x104
  4096fe:	461d      	mov	r5, r3
  409700:	468a      	mov	sl, r1
  409702:	4691      	mov	r9, r2
  409704:	4604      	mov	r4, r0
  409706:	9008      	str	r0, [sp, #32]
  409708:	f002 ffe6 	bl	40c6d8 <_localeconv_r>
  40970c:	6803      	ldr	r3, [r0, #0]
  40970e:	9315      	str	r3, [sp, #84]	; 0x54
  409710:	4618      	mov	r0, r3
  409712:	f7fe fd55 	bl	4081c0 <strlen>
  409716:	950e      	str	r5, [sp, #56]	; 0x38
  409718:	9014      	str	r0, [sp, #80]	; 0x50
  40971a:	b11c      	cbz	r4, 409724 <_vfprintf_r+0x2c>
  40971c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40971e:	2b00      	cmp	r3, #0
  409720:	f000 825f 	beq.w	409be2 <_vfprintf_r+0x4ea>
  409724:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  409728:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  40972c:	f013 0f01 	tst.w	r3, #1
  409730:	b293      	uxth	r3, r2
  409732:	d102      	bne.n	40973a <_vfprintf_r+0x42>
  409734:	0599      	lsls	r1, r3, #22
  409736:	f140 8275 	bpl.w	409c24 <_vfprintf_r+0x52c>
  40973a:	049f      	lsls	r7, r3, #18
  40973c:	d40a      	bmi.n	409754 <_vfprintf_r+0x5c>
  40973e:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  409742:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  409746:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40974a:	f8aa 300c 	strh.w	r3, [sl, #12]
  40974e:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  409752:	b29b      	uxth	r3, r3
  409754:	071e      	lsls	r6, r3, #28
  409756:	f140 8223 	bpl.w	409ba0 <_vfprintf_r+0x4a8>
  40975a:	f8da 2010 	ldr.w	r2, [sl, #16]
  40975e:	2a00      	cmp	r2, #0
  409760:	f000 821e 	beq.w	409ba0 <_vfprintf_r+0x4a8>
  409764:	f003 021a 	and.w	r2, r3, #26
  409768:	2a0a      	cmp	r2, #10
  40976a:	f000 823e 	beq.w	409bea <_vfprintf_r+0x4f2>
  40976e:	2300      	movs	r3, #0
  409770:	4618      	mov	r0, r3
  409772:	9311      	str	r3, [sp, #68]	; 0x44
  409774:	9313      	str	r3, [sp, #76]	; 0x4c
  409776:	9312      	str	r3, [sp, #72]	; 0x48
  409778:	9325      	str	r3, [sp, #148]	; 0x94
  40977a:	9324      	str	r3, [sp, #144]	; 0x90
  40977c:	9318      	str	r3, [sp, #96]	; 0x60
  40977e:	9319      	str	r3, [sp, #100]	; 0x64
  409780:	930b      	str	r3, [sp, #44]	; 0x2c
  409782:	ab30      	add	r3, sp, #192	; 0xc0
  409784:	9323      	str	r3, [sp, #140]	; 0x8c
  409786:	4698      	mov	r8, r3
  409788:	9016      	str	r0, [sp, #88]	; 0x58
  40978a:	9017      	str	r0, [sp, #92]	; 0x5c
  40978c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  409790:	f899 3000 	ldrb.w	r3, [r9]
  409794:	464c      	mov	r4, r9
  409796:	b1eb      	cbz	r3, 4097d4 <_vfprintf_r+0xdc>
  409798:	2b25      	cmp	r3, #37	; 0x25
  40979a:	d102      	bne.n	4097a2 <_vfprintf_r+0xaa>
  40979c:	e01a      	b.n	4097d4 <_vfprintf_r+0xdc>
  40979e:	2b25      	cmp	r3, #37	; 0x25
  4097a0:	d003      	beq.n	4097aa <_vfprintf_r+0xb2>
  4097a2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4097a6:	2b00      	cmp	r3, #0
  4097a8:	d1f9      	bne.n	40979e <_vfprintf_r+0xa6>
  4097aa:	eba4 0509 	sub.w	r5, r4, r9
  4097ae:	b18d      	cbz	r5, 4097d4 <_vfprintf_r+0xdc>
  4097b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4097b2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4097b4:	f8c8 9000 	str.w	r9, [r8]
  4097b8:	3301      	adds	r3, #1
  4097ba:	442a      	add	r2, r5
  4097bc:	2b07      	cmp	r3, #7
  4097be:	f8c8 5004 	str.w	r5, [r8, #4]
  4097c2:	9225      	str	r2, [sp, #148]	; 0x94
  4097c4:	9324      	str	r3, [sp, #144]	; 0x90
  4097c6:	f300 8201 	bgt.w	409bcc <_vfprintf_r+0x4d4>
  4097ca:	f108 0808 	add.w	r8, r8, #8
  4097ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4097d0:	442b      	add	r3, r5
  4097d2:	930b      	str	r3, [sp, #44]	; 0x2c
  4097d4:	7823      	ldrb	r3, [r4, #0]
  4097d6:	2b00      	cmp	r3, #0
  4097d8:	f000 83f0 	beq.w	409fbc <_vfprintf_r+0x8c4>
  4097dc:	2300      	movs	r3, #0
  4097de:	461a      	mov	r2, r3
  4097e0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4097e4:	4619      	mov	r1, r3
  4097e6:	930c      	str	r3, [sp, #48]	; 0x30
  4097e8:	469b      	mov	fp, r3
  4097ea:	7866      	ldrb	r6, [r4, #1]
  4097ec:	f04f 33ff 	mov.w	r3, #4294967295
  4097f0:	f104 0901 	add.w	r9, r4, #1
  4097f4:	9309      	str	r3, [sp, #36]	; 0x24
  4097f6:	f109 0901 	add.w	r9, r9, #1
  4097fa:	f1a6 0320 	sub.w	r3, r6, #32
  4097fe:	2b58      	cmp	r3, #88	; 0x58
  409800:	f200 83bf 	bhi.w	409f82 <_vfprintf_r+0x88a>
  409804:	e8df f013 	tbh	[pc, r3, lsl #1]
  409808:	03bd02e0 	.word	0x03bd02e0
  40980c:	034f03bd 	.word	0x034f03bd
  409810:	03bd03bd 	.word	0x03bd03bd
  409814:	03bd03bd 	.word	0x03bd03bd
  409818:	03bd03bd 	.word	0x03bd03bd
  40981c:	03080354 	.word	0x03080354
  409820:	021a03bd 	.word	0x021a03bd
  409824:	03bd02e8 	.word	0x03bd02e8
  409828:	033a0303 	.word	0x033a0303
  40982c:	033a033a 	.word	0x033a033a
  409830:	033a033a 	.word	0x033a033a
  409834:	033a033a 	.word	0x033a033a
  409838:	033a033a 	.word	0x033a033a
  40983c:	03bd03bd 	.word	0x03bd03bd
  409840:	03bd03bd 	.word	0x03bd03bd
  409844:	03bd03bd 	.word	0x03bd03bd
  409848:	03bd03bd 	.word	0x03bd03bd
  40984c:	03bd03bd 	.word	0x03bd03bd
  409850:	03620349 	.word	0x03620349
  409854:	036203bd 	.word	0x036203bd
  409858:	03bd03bd 	.word	0x03bd03bd
  40985c:	03bd03bd 	.word	0x03bd03bd
  409860:	03bd03a2 	.word	0x03bd03a2
  409864:	006f03bd 	.word	0x006f03bd
  409868:	03bd03bd 	.word	0x03bd03bd
  40986c:	03bd03bd 	.word	0x03bd03bd
  409870:	005903bd 	.word	0x005903bd
  409874:	03bd03bd 	.word	0x03bd03bd
  409878:	03bd031e 	.word	0x03bd031e
  40987c:	03bd03bd 	.word	0x03bd03bd
  409880:	03bd03bd 	.word	0x03bd03bd
  409884:	03bd03bd 	.word	0x03bd03bd
  409888:	03bd03bd 	.word	0x03bd03bd
  40988c:	032403bd 	.word	0x032403bd
  409890:	03620273 	.word	0x03620273
  409894:	03620362 	.word	0x03620362
  409898:	027302b7 	.word	0x027302b7
  40989c:	03bd03bd 	.word	0x03bd03bd
  4098a0:	03bd02bc 	.word	0x03bd02bc
  4098a4:	007102c9 	.word	0x007102c9
  4098a8:	0247030d 	.word	0x0247030d
  4098ac:	025203bd 	.word	0x025203bd
  4098b0:	005b03bd 	.word	0x005b03bd
  4098b4:	03bd03bd 	.word	0x03bd03bd
  4098b8:	021f      	.short	0x021f
  4098ba:	f04b 0b10 	orr.w	fp, fp, #16
  4098be:	f01b 0f20 	tst.w	fp, #32
  4098c2:	f040 8353 	bne.w	409f6c <_vfprintf_r+0x874>
  4098c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4098c8:	f01b 0f10 	tst.w	fp, #16
  4098cc:	4613      	mov	r3, r2
  4098ce:	f040 85b4 	bne.w	40a43a <_vfprintf_r+0xd42>
  4098d2:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4098d6:	f000 85b0 	beq.w	40a43a <_vfprintf_r+0xd42>
  4098da:	8814      	ldrh	r4, [r2, #0]
  4098dc:	3204      	adds	r2, #4
  4098de:	2500      	movs	r5, #0
  4098e0:	2301      	movs	r3, #1
  4098e2:	920e      	str	r2, [sp, #56]	; 0x38
  4098e4:	e014      	b.n	409910 <_vfprintf_r+0x218>
  4098e6:	f04b 0b10 	orr.w	fp, fp, #16
  4098ea:	f01b 0320 	ands.w	r3, fp, #32
  4098ee:	f040 8332 	bne.w	409f56 <_vfprintf_r+0x85e>
  4098f2:	f01b 0210 	ands.w	r2, fp, #16
  4098f6:	f040 8589 	bne.w	40a40c <_vfprintf_r+0xd14>
  4098fa:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4098fe:	f000 8585 	beq.w	40a40c <_vfprintf_r+0xd14>
  409902:	990e      	ldr	r1, [sp, #56]	; 0x38
  409904:	4613      	mov	r3, r2
  409906:	460a      	mov	r2, r1
  409908:	3204      	adds	r2, #4
  40990a:	880c      	ldrh	r4, [r1, #0]
  40990c:	920e      	str	r2, [sp, #56]	; 0x38
  40990e:	2500      	movs	r5, #0
  409910:	f04f 0a00 	mov.w	sl, #0
  409914:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  409918:	9909      	ldr	r1, [sp, #36]	; 0x24
  40991a:	1c4a      	adds	r2, r1, #1
  40991c:	f000 820b 	beq.w	409d36 <_vfprintf_r+0x63e>
  409920:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  409924:	9206      	str	r2, [sp, #24]
  409926:	ea54 0205 	orrs.w	r2, r4, r5
  40992a:	f040 820a 	bne.w	409d42 <_vfprintf_r+0x64a>
  40992e:	2900      	cmp	r1, #0
  409930:	f040 846f 	bne.w	40a212 <_vfprintf_r+0xb1a>
  409934:	2b00      	cmp	r3, #0
  409936:	f040 852d 	bne.w	40a394 <_vfprintf_r+0xc9c>
  40993a:	f01b 0301 	ands.w	r3, fp, #1
  40993e:	930d      	str	r3, [sp, #52]	; 0x34
  409940:	f000 8668 	beq.w	40a614 <_vfprintf_r+0xf1c>
  409944:	af40      	add	r7, sp, #256	; 0x100
  409946:	2330      	movs	r3, #48	; 0x30
  409948:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40994c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40994e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409950:	4293      	cmp	r3, r2
  409952:	bfb8      	it	lt
  409954:	4613      	movlt	r3, r2
  409956:	9307      	str	r3, [sp, #28]
  409958:	2300      	movs	r3, #0
  40995a:	9310      	str	r3, [sp, #64]	; 0x40
  40995c:	f1ba 0f00 	cmp.w	sl, #0
  409960:	d002      	beq.n	409968 <_vfprintf_r+0x270>
  409962:	9b07      	ldr	r3, [sp, #28]
  409964:	3301      	adds	r3, #1
  409966:	9307      	str	r3, [sp, #28]
  409968:	9b06      	ldr	r3, [sp, #24]
  40996a:	f013 0302 	ands.w	r3, r3, #2
  40996e:	930f      	str	r3, [sp, #60]	; 0x3c
  409970:	d002      	beq.n	409978 <_vfprintf_r+0x280>
  409972:	9b07      	ldr	r3, [sp, #28]
  409974:	3302      	adds	r3, #2
  409976:	9307      	str	r3, [sp, #28]
  409978:	9b06      	ldr	r3, [sp, #24]
  40997a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40997e:	f040 831b 	bne.w	409fb8 <_vfprintf_r+0x8c0>
  409982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409984:	9a07      	ldr	r2, [sp, #28]
  409986:	eba3 0b02 	sub.w	fp, r3, r2
  40998a:	f1bb 0f00 	cmp.w	fp, #0
  40998e:	f340 8313 	ble.w	409fb8 <_vfprintf_r+0x8c0>
  409992:	f1bb 0f10 	cmp.w	fp, #16
  409996:	9925      	ldr	r1, [sp, #148]	; 0x94
  409998:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40999a:	dd28      	ble.n	4099ee <_vfprintf_r+0x2f6>
  40999c:	4643      	mov	r3, r8
  40999e:	2410      	movs	r4, #16
  4099a0:	46a8      	mov	r8, r5
  4099a2:	f8dd a020 	ldr.w	sl, [sp, #32]
  4099a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4099a8:	e006      	b.n	4099b8 <_vfprintf_r+0x2c0>
  4099aa:	f1ab 0b10 	sub.w	fp, fp, #16
  4099ae:	f1bb 0f10 	cmp.w	fp, #16
  4099b2:	f103 0308 	add.w	r3, r3, #8
  4099b6:	dd18      	ble.n	4099ea <_vfprintf_r+0x2f2>
  4099b8:	3201      	adds	r2, #1
  4099ba:	48b9      	ldr	r0, [pc, #740]	; (409ca0 <_vfprintf_r+0x5a8>)
  4099bc:	9224      	str	r2, [sp, #144]	; 0x90
  4099be:	3110      	adds	r1, #16
  4099c0:	2a07      	cmp	r2, #7
  4099c2:	9125      	str	r1, [sp, #148]	; 0x94
  4099c4:	e883 0011 	stmia.w	r3, {r0, r4}
  4099c8:	ddef      	ble.n	4099aa <_vfprintf_r+0x2b2>
  4099ca:	aa23      	add	r2, sp, #140	; 0x8c
  4099cc:	4629      	mov	r1, r5
  4099ce:	4650      	mov	r0, sl
  4099d0:	f004 f8de 	bl	40db90 <__sprint_r>
  4099d4:	2800      	cmp	r0, #0
  4099d6:	f040 836a 	bne.w	40a0ae <_vfprintf_r+0x9b6>
  4099da:	f1ab 0b10 	sub.w	fp, fp, #16
  4099de:	f1bb 0f10 	cmp.w	fp, #16
  4099e2:	9925      	ldr	r1, [sp, #148]	; 0x94
  4099e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4099e6:	ab30      	add	r3, sp, #192	; 0xc0
  4099e8:	dce6      	bgt.n	4099b8 <_vfprintf_r+0x2c0>
  4099ea:	4645      	mov	r5, r8
  4099ec:	4698      	mov	r8, r3
  4099ee:	3201      	adds	r2, #1
  4099f0:	4bab      	ldr	r3, [pc, #684]	; (409ca0 <_vfprintf_r+0x5a8>)
  4099f2:	9224      	str	r2, [sp, #144]	; 0x90
  4099f4:	eb0b 0401 	add.w	r4, fp, r1
  4099f8:	2a07      	cmp	r2, #7
  4099fa:	9425      	str	r4, [sp, #148]	; 0x94
  4099fc:	e888 0808 	stmia.w	r8, {r3, fp}
  409a00:	f300 84cd 	bgt.w	40a39e <_vfprintf_r+0xca6>
  409a04:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  409a08:	f108 0808 	add.w	r8, r8, #8
  409a0c:	f1ba 0f00 	cmp.w	sl, #0
  409a10:	d00e      	beq.n	409a30 <_vfprintf_r+0x338>
  409a12:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409a14:	3301      	adds	r3, #1
  409a16:	3401      	adds	r4, #1
  409a18:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  409a1c:	2201      	movs	r2, #1
  409a1e:	2b07      	cmp	r3, #7
  409a20:	9425      	str	r4, [sp, #148]	; 0x94
  409a22:	9324      	str	r3, [sp, #144]	; 0x90
  409a24:	e888 0006 	stmia.w	r8, {r1, r2}
  409a28:	f300 840a 	bgt.w	40a240 <_vfprintf_r+0xb48>
  409a2c:	f108 0808 	add.w	r8, r8, #8
  409a30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409a32:	b16b      	cbz	r3, 409a50 <_vfprintf_r+0x358>
  409a34:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409a36:	3301      	adds	r3, #1
  409a38:	3402      	adds	r4, #2
  409a3a:	a91c      	add	r1, sp, #112	; 0x70
  409a3c:	2202      	movs	r2, #2
  409a3e:	2b07      	cmp	r3, #7
  409a40:	9425      	str	r4, [sp, #148]	; 0x94
  409a42:	9324      	str	r3, [sp, #144]	; 0x90
  409a44:	e888 0006 	stmia.w	r8, {r1, r2}
  409a48:	f300 8406 	bgt.w	40a258 <_vfprintf_r+0xb60>
  409a4c:	f108 0808 	add.w	r8, r8, #8
  409a50:	2d80      	cmp	r5, #128	; 0x80
  409a52:	f000 832e 	beq.w	40a0b2 <_vfprintf_r+0x9ba>
  409a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409a58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409a5a:	eba3 0a02 	sub.w	sl, r3, r2
  409a5e:	f1ba 0f00 	cmp.w	sl, #0
  409a62:	dd3b      	ble.n	409adc <_vfprintf_r+0x3e4>
  409a64:	f1ba 0f10 	cmp.w	sl, #16
  409a68:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409a6a:	4d8e      	ldr	r5, [pc, #568]	; (409ca4 <_vfprintf_r+0x5ac>)
  409a6c:	dd2b      	ble.n	409ac6 <_vfprintf_r+0x3ce>
  409a6e:	4642      	mov	r2, r8
  409a70:	4621      	mov	r1, r4
  409a72:	46b0      	mov	r8, r6
  409a74:	f04f 0b10 	mov.w	fp, #16
  409a78:	462e      	mov	r6, r5
  409a7a:	9c08      	ldr	r4, [sp, #32]
  409a7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  409a7e:	e006      	b.n	409a8e <_vfprintf_r+0x396>
  409a80:	f1aa 0a10 	sub.w	sl, sl, #16
  409a84:	f1ba 0f10 	cmp.w	sl, #16
  409a88:	f102 0208 	add.w	r2, r2, #8
  409a8c:	dd17      	ble.n	409abe <_vfprintf_r+0x3c6>
  409a8e:	3301      	adds	r3, #1
  409a90:	3110      	adds	r1, #16
  409a92:	2b07      	cmp	r3, #7
  409a94:	9125      	str	r1, [sp, #148]	; 0x94
  409a96:	9324      	str	r3, [sp, #144]	; 0x90
  409a98:	e882 0840 	stmia.w	r2, {r6, fp}
  409a9c:	ddf0      	ble.n	409a80 <_vfprintf_r+0x388>
  409a9e:	aa23      	add	r2, sp, #140	; 0x8c
  409aa0:	4629      	mov	r1, r5
  409aa2:	4620      	mov	r0, r4
  409aa4:	f004 f874 	bl	40db90 <__sprint_r>
  409aa8:	2800      	cmp	r0, #0
  409aaa:	f040 8300 	bne.w	40a0ae <_vfprintf_r+0x9b6>
  409aae:	f1aa 0a10 	sub.w	sl, sl, #16
  409ab2:	f1ba 0f10 	cmp.w	sl, #16
  409ab6:	9925      	ldr	r1, [sp, #148]	; 0x94
  409ab8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409aba:	aa30      	add	r2, sp, #192	; 0xc0
  409abc:	dce7      	bgt.n	409a8e <_vfprintf_r+0x396>
  409abe:	4635      	mov	r5, r6
  409ac0:	460c      	mov	r4, r1
  409ac2:	4646      	mov	r6, r8
  409ac4:	4690      	mov	r8, r2
  409ac6:	3301      	adds	r3, #1
  409ac8:	4454      	add	r4, sl
  409aca:	2b07      	cmp	r3, #7
  409acc:	9425      	str	r4, [sp, #148]	; 0x94
  409ace:	9324      	str	r3, [sp, #144]	; 0x90
  409ad0:	e888 0420 	stmia.w	r8, {r5, sl}
  409ad4:	f300 83a9 	bgt.w	40a22a <_vfprintf_r+0xb32>
  409ad8:	f108 0808 	add.w	r8, r8, #8
  409adc:	9b06      	ldr	r3, [sp, #24]
  409ade:	05db      	lsls	r3, r3, #23
  409ae0:	f100 8285 	bmi.w	409fee <_vfprintf_r+0x8f6>
  409ae4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409ae6:	990d      	ldr	r1, [sp, #52]	; 0x34
  409ae8:	f8c8 7000 	str.w	r7, [r8]
  409aec:	3301      	adds	r3, #1
  409aee:	440c      	add	r4, r1
  409af0:	2b07      	cmp	r3, #7
  409af2:	9425      	str	r4, [sp, #148]	; 0x94
  409af4:	f8c8 1004 	str.w	r1, [r8, #4]
  409af8:	9324      	str	r3, [sp, #144]	; 0x90
  409afa:	f300 8375 	bgt.w	40a1e8 <_vfprintf_r+0xaf0>
  409afe:	f108 0808 	add.w	r8, r8, #8
  409b02:	9b06      	ldr	r3, [sp, #24]
  409b04:	0759      	lsls	r1, r3, #29
  409b06:	d53b      	bpl.n	409b80 <_vfprintf_r+0x488>
  409b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409b0a:	9a07      	ldr	r2, [sp, #28]
  409b0c:	1a9d      	subs	r5, r3, r2
  409b0e:	2d00      	cmp	r5, #0
  409b10:	dd36      	ble.n	409b80 <_vfprintf_r+0x488>
  409b12:	2d10      	cmp	r5, #16
  409b14:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409b16:	dd21      	ble.n	409b5c <_vfprintf_r+0x464>
  409b18:	2610      	movs	r6, #16
  409b1a:	9f08      	ldr	r7, [sp, #32]
  409b1c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  409b20:	e004      	b.n	409b2c <_vfprintf_r+0x434>
  409b22:	3d10      	subs	r5, #16
  409b24:	2d10      	cmp	r5, #16
  409b26:	f108 0808 	add.w	r8, r8, #8
  409b2a:	dd17      	ble.n	409b5c <_vfprintf_r+0x464>
  409b2c:	3301      	adds	r3, #1
  409b2e:	4a5c      	ldr	r2, [pc, #368]	; (409ca0 <_vfprintf_r+0x5a8>)
  409b30:	9324      	str	r3, [sp, #144]	; 0x90
  409b32:	3410      	adds	r4, #16
  409b34:	2b07      	cmp	r3, #7
  409b36:	9425      	str	r4, [sp, #148]	; 0x94
  409b38:	e888 0044 	stmia.w	r8, {r2, r6}
  409b3c:	ddf1      	ble.n	409b22 <_vfprintf_r+0x42a>
  409b3e:	aa23      	add	r2, sp, #140	; 0x8c
  409b40:	4651      	mov	r1, sl
  409b42:	4638      	mov	r0, r7
  409b44:	f004 f824 	bl	40db90 <__sprint_r>
  409b48:	2800      	cmp	r0, #0
  409b4a:	f040 823f 	bne.w	409fcc <_vfprintf_r+0x8d4>
  409b4e:	3d10      	subs	r5, #16
  409b50:	2d10      	cmp	r5, #16
  409b52:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409b54:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409b56:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  409b5a:	dce7      	bgt.n	409b2c <_vfprintf_r+0x434>
  409b5c:	3301      	adds	r3, #1
  409b5e:	4a50      	ldr	r2, [pc, #320]	; (409ca0 <_vfprintf_r+0x5a8>)
  409b60:	9324      	str	r3, [sp, #144]	; 0x90
  409b62:	442c      	add	r4, r5
  409b64:	2b07      	cmp	r3, #7
  409b66:	9425      	str	r4, [sp, #148]	; 0x94
  409b68:	e888 0024 	stmia.w	r8, {r2, r5}
  409b6c:	dd08      	ble.n	409b80 <_vfprintf_r+0x488>
  409b6e:	aa23      	add	r2, sp, #140	; 0x8c
  409b70:	990a      	ldr	r1, [sp, #40]	; 0x28
  409b72:	9808      	ldr	r0, [sp, #32]
  409b74:	f004 f80c 	bl	40db90 <__sprint_r>
  409b78:	2800      	cmp	r0, #0
  409b7a:	f040 8347 	bne.w	40a20c <_vfprintf_r+0xb14>
  409b7e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409b82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409b84:	9907      	ldr	r1, [sp, #28]
  409b86:	428a      	cmp	r2, r1
  409b88:	bfac      	ite	ge
  409b8a:	189b      	addge	r3, r3, r2
  409b8c:	185b      	addlt	r3, r3, r1
  409b8e:	930b      	str	r3, [sp, #44]	; 0x2c
  409b90:	2c00      	cmp	r4, #0
  409b92:	f040 8333 	bne.w	40a1fc <_vfprintf_r+0xb04>
  409b96:	2300      	movs	r3, #0
  409b98:	9324      	str	r3, [sp, #144]	; 0x90
  409b9a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  409b9e:	e5f7      	b.n	409790 <_vfprintf_r+0x98>
  409ba0:	4651      	mov	r1, sl
  409ba2:	9808      	ldr	r0, [sp, #32]
  409ba4:	f001 f896 	bl	40acd4 <__swsetup_r>
  409ba8:	2800      	cmp	r0, #0
  409baa:	d038      	beq.n	409c1e <_vfprintf_r+0x526>
  409bac:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  409bb0:	07dd      	lsls	r5, r3, #31
  409bb2:	d404      	bmi.n	409bbe <_vfprintf_r+0x4c6>
  409bb4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  409bb8:	059c      	lsls	r4, r3, #22
  409bba:	f140 85ca 	bpl.w	40a752 <_vfprintf_r+0x105a>
  409bbe:	f04f 33ff 	mov.w	r3, #4294967295
  409bc2:	930b      	str	r3, [sp, #44]	; 0x2c
  409bc4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  409bc6:	b041      	add	sp, #260	; 0x104
  409bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409bcc:	aa23      	add	r2, sp, #140	; 0x8c
  409bce:	990a      	ldr	r1, [sp, #40]	; 0x28
  409bd0:	9808      	ldr	r0, [sp, #32]
  409bd2:	f003 ffdd 	bl	40db90 <__sprint_r>
  409bd6:	2800      	cmp	r0, #0
  409bd8:	f040 8318 	bne.w	40a20c <_vfprintf_r+0xb14>
  409bdc:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  409be0:	e5f5      	b.n	4097ce <_vfprintf_r+0xd6>
  409be2:	9808      	ldr	r0, [sp, #32]
  409be4:	f002 fa28 	bl	40c038 <__sinit>
  409be8:	e59c      	b.n	409724 <_vfprintf_r+0x2c>
  409bea:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  409bee:	2a00      	cmp	r2, #0
  409bf0:	f6ff adbd 	blt.w	40976e <_vfprintf_r+0x76>
  409bf4:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  409bf8:	07d0      	lsls	r0, r2, #31
  409bfa:	d405      	bmi.n	409c08 <_vfprintf_r+0x510>
  409bfc:	0599      	lsls	r1, r3, #22
  409bfe:	d403      	bmi.n	409c08 <_vfprintf_r+0x510>
  409c00:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  409c04:	f002 fd7c 	bl	40c700 <__retarget_lock_release_recursive>
  409c08:	462b      	mov	r3, r5
  409c0a:	464a      	mov	r2, r9
  409c0c:	4651      	mov	r1, sl
  409c0e:	9808      	ldr	r0, [sp, #32]
  409c10:	f001 f81e 	bl	40ac50 <__sbprintf>
  409c14:	900b      	str	r0, [sp, #44]	; 0x2c
  409c16:	980b      	ldr	r0, [sp, #44]	; 0x2c
  409c18:	b041      	add	sp, #260	; 0x104
  409c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409c1e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  409c22:	e59f      	b.n	409764 <_vfprintf_r+0x6c>
  409c24:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  409c28:	f002 fd68 	bl	40c6fc <__retarget_lock_acquire_recursive>
  409c2c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  409c30:	b293      	uxth	r3, r2
  409c32:	e582      	b.n	40973a <_vfprintf_r+0x42>
  409c34:	980c      	ldr	r0, [sp, #48]	; 0x30
  409c36:	930e      	str	r3, [sp, #56]	; 0x38
  409c38:	4240      	negs	r0, r0
  409c3a:	900c      	str	r0, [sp, #48]	; 0x30
  409c3c:	f04b 0b04 	orr.w	fp, fp, #4
  409c40:	f899 6000 	ldrb.w	r6, [r9]
  409c44:	e5d7      	b.n	4097f6 <_vfprintf_r+0xfe>
  409c46:	2a00      	cmp	r2, #0
  409c48:	f040 87df 	bne.w	40ac0a <_vfprintf_r+0x1512>
  409c4c:	4b16      	ldr	r3, [pc, #88]	; (409ca8 <_vfprintf_r+0x5b0>)
  409c4e:	9318      	str	r3, [sp, #96]	; 0x60
  409c50:	f01b 0f20 	tst.w	fp, #32
  409c54:	f040 84b9 	bne.w	40a5ca <_vfprintf_r+0xed2>
  409c58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409c5a:	f01b 0f10 	tst.w	fp, #16
  409c5e:	4613      	mov	r3, r2
  409c60:	f040 83dc 	bne.w	40a41c <_vfprintf_r+0xd24>
  409c64:	f01b 0f40 	tst.w	fp, #64	; 0x40
  409c68:	f000 83d8 	beq.w	40a41c <_vfprintf_r+0xd24>
  409c6c:	3304      	adds	r3, #4
  409c6e:	8814      	ldrh	r4, [r2, #0]
  409c70:	930e      	str	r3, [sp, #56]	; 0x38
  409c72:	2500      	movs	r5, #0
  409c74:	f01b 0f01 	tst.w	fp, #1
  409c78:	f000 8322 	beq.w	40a2c0 <_vfprintf_r+0xbc8>
  409c7c:	ea54 0305 	orrs.w	r3, r4, r5
  409c80:	f000 831e 	beq.w	40a2c0 <_vfprintf_r+0xbc8>
  409c84:	2330      	movs	r3, #48	; 0x30
  409c86:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  409c8a:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  409c8e:	f04b 0b02 	orr.w	fp, fp, #2
  409c92:	2302      	movs	r3, #2
  409c94:	e63c      	b.n	409910 <_vfprintf_r+0x218>
  409c96:	f04b 0b20 	orr.w	fp, fp, #32
  409c9a:	f899 6000 	ldrb.w	r6, [r9]
  409c9e:	e5aa      	b.n	4097f6 <_vfprintf_r+0xfe>
  409ca0:	0040faa0 	.word	0x0040faa0
  409ca4:	0040fab0 	.word	0x0040fab0
  409ca8:	0040fa60 	.word	0x0040fa60
  409cac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409cae:	6817      	ldr	r7, [r2, #0]
  409cb0:	2400      	movs	r4, #0
  409cb2:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  409cb6:	1d15      	adds	r5, r2, #4
  409cb8:	2f00      	cmp	r7, #0
  409cba:	f000 864e 	beq.w	40a95a <_vfprintf_r+0x1262>
  409cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409cc0:	1c53      	adds	r3, r2, #1
  409cc2:	f000 85cc 	beq.w	40a85e <_vfprintf_r+0x1166>
  409cc6:	4621      	mov	r1, r4
  409cc8:	4638      	mov	r0, r7
  409cca:	f003 f859 	bl	40cd80 <memchr>
  409cce:	2800      	cmp	r0, #0
  409cd0:	f000 8697 	beq.w	40aa02 <_vfprintf_r+0x130a>
  409cd4:	1bc3      	subs	r3, r0, r7
  409cd6:	930d      	str	r3, [sp, #52]	; 0x34
  409cd8:	9409      	str	r4, [sp, #36]	; 0x24
  409cda:	950e      	str	r5, [sp, #56]	; 0x38
  409cdc:	f8cd b018 	str.w	fp, [sp, #24]
  409ce0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409ce4:	9307      	str	r3, [sp, #28]
  409ce6:	9410      	str	r4, [sp, #64]	; 0x40
  409ce8:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  409cec:	e636      	b.n	40995c <_vfprintf_r+0x264>
  409cee:	2a00      	cmp	r2, #0
  409cf0:	f040 8796 	bne.w	40ac20 <_vfprintf_r+0x1528>
  409cf4:	f01b 0f20 	tst.w	fp, #32
  409cf8:	f040 845a 	bne.w	40a5b0 <_vfprintf_r+0xeb8>
  409cfc:	f01b 0f10 	tst.w	fp, #16
  409d00:	f040 83a2 	bne.w	40a448 <_vfprintf_r+0xd50>
  409d04:	f01b 0f40 	tst.w	fp, #64	; 0x40
  409d08:	f000 839e 	beq.w	40a448 <_vfprintf_r+0xd50>
  409d0c:	990e      	ldr	r1, [sp, #56]	; 0x38
  409d0e:	f9b1 4000 	ldrsh.w	r4, [r1]
  409d12:	3104      	adds	r1, #4
  409d14:	17e5      	asrs	r5, r4, #31
  409d16:	4622      	mov	r2, r4
  409d18:	462b      	mov	r3, r5
  409d1a:	910e      	str	r1, [sp, #56]	; 0x38
  409d1c:	2a00      	cmp	r2, #0
  409d1e:	f173 0300 	sbcs.w	r3, r3, #0
  409d22:	f2c0 8487 	blt.w	40a634 <_vfprintf_r+0xf3c>
  409d26:	9909      	ldr	r1, [sp, #36]	; 0x24
  409d28:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  409d2c:	1c4a      	adds	r2, r1, #1
  409d2e:	f04f 0301 	mov.w	r3, #1
  409d32:	f47f adf5 	bne.w	409920 <_vfprintf_r+0x228>
  409d36:	ea54 0205 	orrs.w	r2, r4, r5
  409d3a:	f000 826c 	beq.w	40a216 <_vfprintf_r+0xb1e>
  409d3e:	f8cd b018 	str.w	fp, [sp, #24]
  409d42:	2b01      	cmp	r3, #1
  409d44:	f000 8308 	beq.w	40a358 <_vfprintf_r+0xc60>
  409d48:	2b02      	cmp	r3, #2
  409d4a:	f040 8295 	bne.w	40a278 <_vfprintf_r+0xb80>
  409d4e:	9818      	ldr	r0, [sp, #96]	; 0x60
  409d50:	af30      	add	r7, sp, #192	; 0xc0
  409d52:	0923      	lsrs	r3, r4, #4
  409d54:	f004 010f 	and.w	r1, r4, #15
  409d58:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  409d5c:	092a      	lsrs	r2, r5, #4
  409d5e:	461c      	mov	r4, r3
  409d60:	4615      	mov	r5, r2
  409d62:	5c43      	ldrb	r3, [r0, r1]
  409d64:	f807 3d01 	strb.w	r3, [r7, #-1]!
  409d68:	ea54 0305 	orrs.w	r3, r4, r5
  409d6c:	d1f1      	bne.n	409d52 <_vfprintf_r+0x65a>
  409d6e:	ab30      	add	r3, sp, #192	; 0xc0
  409d70:	1bdb      	subs	r3, r3, r7
  409d72:	930d      	str	r3, [sp, #52]	; 0x34
  409d74:	e5ea      	b.n	40994c <_vfprintf_r+0x254>
  409d76:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  409d7a:	f899 6000 	ldrb.w	r6, [r9]
  409d7e:	e53a      	b.n	4097f6 <_vfprintf_r+0xfe>
  409d80:	f899 6000 	ldrb.w	r6, [r9]
  409d84:	2e6c      	cmp	r6, #108	; 0x6c
  409d86:	bf03      	ittte	eq
  409d88:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  409d8c:	f04b 0b20 	orreq.w	fp, fp, #32
  409d90:	f109 0901 	addeq.w	r9, r9, #1
  409d94:	f04b 0b10 	orrne.w	fp, fp, #16
  409d98:	e52d      	b.n	4097f6 <_vfprintf_r+0xfe>
  409d9a:	2a00      	cmp	r2, #0
  409d9c:	f040 874c 	bne.w	40ac38 <_vfprintf_r+0x1540>
  409da0:	f01b 0f20 	tst.w	fp, #32
  409da4:	f040 853f 	bne.w	40a826 <_vfprintf_r+0x112e>
  409da8:	f01b 0f10 	tst.w	fp, #16
  409dac:	f040 80fc 	bne.w	409fa8 <_vfprintf_r+0x8b0>
  409db0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  409db4:	f000 80f8 	beq.w	409fa8 <_vfprintf_r+0x8b0>
  409db8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409dba:	6813      	ldr	r3, [r2, #0]
  409dbc:	3204      	adds	r2, #4
  409dbe:	920e      	str	r2, [sp, #56]	; 0x38
  409dc0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  409dc4:	801a      	strh	r2, [r3, #0]
  409dc6:	e4e3      	b.n	409790 <_vfprintf_r+0x98>
  409dc8:	f899 6000 	ldrb.w	r6, [r9]
  409dcc:	2900      	cmp	r1, #0
  409dce:	f47f ad12 	bne.w	4097f6 <_vfprintf_r+0xfe>
  409dd2:	2201      	movs	r2, #1
  409dd4:	2120      	movs	r1, #32
  409dd6:	e50e      	b.n	4097f6 <_vfprintf_r+0xfe>
  409dd8:	f899 6000 	ldrb.w	r6, [r9]
  409ddc:	2e2a      	cmp	r6, #42	; 0x2a
  409dde:	f109 0001 	add.w	r0, r9, #1
  409de2:	f000 86f1 	beq.w	40abc8 <_vfprintf_r+0x14d0>
  409de6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  409dea:	2b09      	cmp	r3, #9
  409dec:	4681      	mov	r9, r0
  409dee:	bf98      	it	ls
  409df0:	2000      	movls	r0, #0
  409df2:	f200 863d 	bhi.w	40aa70 <_vfprintf_r+0x1378>
  409df6:	f819 6b01 	ldrb.w	r6, [r9], #1
  409dfa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  409dfe:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  409e02:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  409e06:	2b09      	cmp	r3, #9
  409e08:	d9f5      	bls.n	409df6 <_vfprintf_r+0x6fe>
  409e0a:	9009      	str	r0, [sp, #36]	; 0x24
  409e0c:	e4f5      	b.n	4097fa <_vfprintf_r+0x102>
  409e0e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  409e12:	f899 6000 	ldrb.w	r6, [r9]
  409e16:	e4ee      	b.n	4097f6 <_vfprintf_r+0xfe>
  409e18:	f899 6000 	ldrb.w	r6, [r9]
  409e1c:	2201      	movs	r2, #1
  409e1e:	212b      	movs	r1, #43	; 0x2b
  409e20:	e4e9      	b.n	4097f6 <_vfprintf_r+0xfe>
  409e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409e24:	4bae      	ldr	r3, [pc, #696]	; (40a0e0 <_vfprintf_r+0x9e8>)
  409e26:	6814      	ldr	r4, [r2, #0]
  409e28:	9318      	str	r3, [sp, #96]	; 0x60
  409e2a:	2678      	movs	r6, #120	; 0x78
  409e2c:	2330      	movs	r3, #48	; 0x30
  409e2e:	3204      	adds	r2, #4
  409e30:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  409e34:	f04b 0b02 	orr.w	fp, fp, #2
  409e38:	920e      	str	r2, [sp, #56]	; 0x38
  409e3a:	2500      	movs	r5, #0
  409e3c:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  409e40:	2302      	movs	r3, #2
  409e42:	e565      	b.n	409910 <_vfprintf_r+0x218>
  409e44:	2a00      	cmp	r2, #0
  409e46:	f040 86e4 	bne.w	40ac12 <_vfprintf_r+0x151a>
  409e4a:	4ba6      	ldr	r3, [pc, #664]	; (40a0e4 <_vfprintf_r+0x9ec>)
  409e4c:	9318      	str	r3, [sp, #96]	; 0x60
  409e4e:	e6ff      	b.n	409c50 <_vfprintf_r+0x558>
  409e50:	990e      	ldr	r1, [sp, #56]	; 0x38
  409e52:	f8cd b018 	str.w	fp, [sp, #24]
  409e56:	680a      	ldr	r2, [r1, #0]
  409e58:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  409e5c:	2300      	movs	r3, #0
  409e5e:	460a      	mov	r2, r1
  409e60:	469a      	mov	sl, r3
  409e62:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  409e66:	3204      	adds	r2, #4
  409e68:	2301      	movs	r3, #1
  409e6a:	9307      	str	r3, [sp, #28]
  409e6c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  409e70:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  409e74:	920e      	str	r2, [sp, #56]	; 0x38
  409e76:	930d      	str	r3, [sp, #52]	; 0x34
  409e78:	af26      	add	r7, sp, #152	; 0x98
  409e7a:	e575      	b.n	409968 <_vfprintf_r+0x270>
  409e7c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  409e80:	2000      	movs	r0, #0
  409e82:	f819 6b01 	ldrb.w	r6, [r9], #1
  409e86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  409e8a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  409e8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  409e92:	2b09      	cmp	r3, #9
  409e94:	d9f5      	bls.n	409e82 <_vfprintf_r+0x78a>
  409e96:	900c      	str	r0, [sp, #48]	; 0x30
  409e98:	e4af      	b.n	4097fa <_vfprintf_r+0x102>
  409e9a:	2a00      	cmp	r2, #0
  409e9c:	f040 86c8 	bne.w	40ac30 <_vfprintf_r+0x1538>
  409ea0:	f04b 0b10 	orr.w	fp, fp, #16
  409ea4:	e726      	b.n	409cf4 <_vfprintf_r+0x5fc>
  409ea6:	f04b 0b01 	orr.w	fp, fp, #1
  409eaa:	f899 6000 	ldrb.w	r6, [r9]
  409eae:	e4a2      	b.n	4097f6 <_vfprintf_r+0xfe>
  409eb0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  409eb2:	6823      	ldr	r3, [r4, #0]
  409eb4:	930c      	str	r3, [sp, #48]	; 0x30
  409eb6:	4618      	mov	r0, r3
  409eb8:	2800      	cmp	r0, #0
  409eba:	4623      	mov	r3, r4
  409ebc:	f103 0304 	add.w	r3, r3, #4
  409ec0:	f6ff aeb8 	blt.w	409c34 <_vfprintf_r+0x53c>
  409ec4:	930e      	str	r3, [sp, #56]	; 0x38
  409ec6:	f899 6000 	ldrb.w	r6, [r9]
  409eca:	e494      	b.n	4097f6 <_vfprintf_r+0xfe>
  409ecc:	2a00      	cmp	r2, #0
  409ece:	f040 86b7 	bne.w	40ac40 <_vfprintf_r+0x1548>
  409ed2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  409ed4:	3507      	adds	r5, #7
  409ed6:	f025 0307 	bic.w	r3, r5, #7
  409eda:	f103 0208 	add.w	r2, r3, #8
  409ede:	920e      	str	r2, [sp, #56]	; 0x38
  409ee0:	681a      	ldr	r2, [r3, #0]
  409ee2:	9213      	str	r2, [sp, #76]	; 0x4c
  409ee4:	685b      	ldr	r3, [r3, #4]
  409ee6:	9312      	str	r3, [sp, #72]	; 0x48
  409ee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409eea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  409eec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  409ef0:	4628      	mov	r0, r5
  409ef2:	4621      	mov	r1, r4
  409ef4:	f04f 32ff 	mov.w	r2, #4294967295
  409ef8:	4b7b      	ldr	r3, [pc, #492]	; (40a0e8 <_vfprintf_r+0x9f0>)
  409efa:	f004 f981 	bl	40e200 <__aeabi_dcmpun>
  409efe:	2800      	cmp	r0, #0
  409f00:	f040 83a2 	bne.w	40a648 <_vfprintf_r+0xf50>
  409f04:	4628      	mov	r0, r5
  409f06:	4621      	mov	r1, r4
  409f08:	f04f 32ff 	mov.w	r2, #4294967295
  409f0c:	4b76      	ldr	r3, [pc, #472]	; (40a0e8 <_vfprintf_r+0x9f0>)
  409f0e:	f004 f959 	bl	40e1c4 <__aeabi_dcmple>
  409f12:	2800      	cmp	r0, #0
  409f14:	f040 8398 	bne.w	40a648 <_vfprintf_r+0xf50>
  409f18:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409f1a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  409f1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  409f1e:	9912      	ldr	r1, [sp, #72]	; 0x48
  409f20:	f004 f946 	bl	40e1b0 <__aeabi_dcmplt>
  409f24:	2800      	cmp	r0, #0
  409f26:	f040 8435 	bne.w	40a794 <_vfprintf_r+0x109c>
  409f2a:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  409f2e:	4f6f      	ldr	r7, [pc, #444]	; (40a0ec <_vfprintf_r+0x9f4>)
  409f30:	4b6f      	ldr	r3, [pc, #444]	; (40a0f0 <_vfprintf_r+0x9f8>)
  409f32:	2203      	movs	r2, #3
  409f34:	2100      	movs	r1, #0
  409f36:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  409f3a:	9207      	str	r2, [sp, #28]
  409f3c:	9109      	str	r1, [sp, #36]	; 0x24
  409f3e:	9006      	str	r0, [sp, #24]
  409f40:	2e47      	cmp	r6, #71	; 0x47
  409f42:	bfd8      	it	le
  409f44:	461f      	movle	r7, r3
  409f46:	920d      	str	r2, [sp, #52]	; 0x34
  409f48:	9110      	str	r1, [sp, #64]	; 0x40
  409f4a:	e507      	b.n	40995c <_vfprintf_r+0x264>
  409f4c:	f04b 0b08 	orr.w	fp, fp, #8
  409f50:	f899 6000 	ldrb.w	r6, [r9]
  409f54:	e44f      	b.n	4097f6 <_vfprintf_r+0xfe>
  409f56:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  409f58:	3507      	adds	r5, #7
  409f5a:	f025 0307 	bic.w	r3, r5, #7
  409f5e:	f103 0208 	add.w	r2, r3, #8
  409f62:	e9d3 4500 	ldrd	r4, r5, [r3]
  409f66:	920e      	str	r2, [sp, #56]	; 0x38
  409f68:	2300      	movs	r3, #0
  409f6a:	e4d1      	b.n	409910 <_vfprintf_r+0x218>
  409f6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  409f6e:	3507      	adds	r5, #7
  409f70:	f025 0307 	bic.w	r3, r5, #7
  409f74:	f103 0208 	add.w	r2, r3, #8
  409f78:	e9d3 4500 	ldrd	r4, r5, [r3]
  409f7c:	920e      	str	r2, [sp, #56]	; 0x38
  409f7e:	2301      	movs	r3, #1
  409f80:	e4c6      	b.n	409910 <_vfprintf_r+0x218>
  409f82:	2a00      	cmp	r2, #0
  409f84:	f040 8650 	bne.w	40ac28 <_vfprintf_r+0x1530>
  409f88:	b1c6      	cbz	r6, 409fbc <_vfprintf_r+0x8c4>
  409f8a:	2300      	movs	r3, #0
  409f8c:	2201      	movs	r2, #1
  409f8e:	469a      	mov	sl, r3
  409f90:	9207      	str	r2, [sp, #28]
  409f92:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  409f96:	f8cd b018 	str.w	fp, [sp, #24]
  409f9a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  409f9e:	9309      	str	r3, [sp, #36]	; 0x24
  409fa0:	9310      	str	r3, [sp, #64]	; 0x40
  409fa2:	920d      	str	r2, [sp, #52]	; 0x34
  409fa4:	af26      	add	r7, sp, #152	; 0x98
  409fa6:	e4df      	b.n	409968 <_vfprintf_r+0x270>
  409fa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409faa:	6813      	ldr	r3, [r2, #0]
  409fac:	3204      	adds	r2, #4
  409fae:	920e      	str	r2, [sp, #56]	; 0x38
  409fb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409fb2:	601a      	str	r2, [r3, #0]
  409fb4:	f7ff bbec 	b.w	409790 <_vfprintf_r+0x98>
  409fb8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409fba:	e527      	b.n	409a0c <_vfprintf_r+0x314>
  409fbc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409fbe:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  409fc2:	2b00      	cmp	r3, #0
  409fc4:	f040 8594 	bne.w	40aaf0 <_vfprintf_r+0x13f8>
  409fc8:	2300      	movs	r3, #0
  409fca:	9324      	str	r3, [sp, #144]	; 0x90
  409fcc:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  409fd0:	f013 0f01 	tst.w	r3, #1
  409fd4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  409fd8:	d102      	bne.n	409fe0 <_vfprintf_r+0x8e8>
  409fda:	059a      	lsls	r2, r3, #22
  409fdc:	f140 8249 	bpl.w	40a472 <_vfprintf_r+0xd7a>
  409fe0:	065b      	lsls	r3, r3, #25
  409fe2:	f53f adec 	bmi.w	409bbe <_vfprintf_r+0x4c6>
  409fe6:	980b      	ldr	r0, [sp, #44]	; 0x2c
  409fe8:	b041      	add	sp, #260	; 0x104
  409fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409fee:	2e65      	cmp	r6, #101	; 0x65
  409ff0:	f340 80b2 	ble.w	40a158 <_vfprintf_r+0xa60>
  409ff4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409ff6:	9813      	ldr	r0, [sp, #76]	; 0x4c
  409ff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  409ffa:	9912      	ldr	r1, [sp, #72]	; 0x48
  409ffc:	f004 f8ce 	bl	40e19c <__aeabi_dcmpeq>
  40a000:	2800      	cmp	r0, #0
  40a002:	f000 8160 	beq.w	40a2c6 <_vfprintf_r+0xbce>
  40a006:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a008:	4a3a      	ldr	r2, [pc, #232]	; (40a0f4 <_vfprintf_r+0x9fc>)
  40a00a:	f8c8 2000 	str.w	r2, [r8]
  40a00e:	3301      	adds	r3, #1
  40a010:	3401      	adds	r4, #1
  40a012:	2201      	movs	r2, #1
  40a014:	2b07      	cmp	r3, #7
  40a016:	9425      	str	r4, [sp, #148]	; 0x94
  40a018:	9324      	str	r3, [sp, #144]	; 0x90
  40a01a:	f8c8 2004 	str.w	r2, [r8, #4]
  40a01e:	f300 83bf 	bgt.w	40a7a0 <_vfprintf_r+0x10a8>
  40a022:	f108 0808 	add.w	r8, r8, #8
  40a026:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a028:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a02a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a02c:	4293      	cmp	r3, r2
  40a02e:	db03      	blt.n	40a038 <_vfprintf_r+0x940>
  40a030:	9b06      	ldr	r3, [sp, #24]
  40a032:	07df      	lsls	r7, r3, #31
  40a034:	f57f ad65 	bpl.w	409b02 <_vfprintf_r+0x40a>
  40a038:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a03a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40a03c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40a03e:	f8c8 2000 	str.w	r2, [r8]
  40a042:	3301      	adds	r3, #1
  40a044:	440c      	add	r4, r1
  40a046:	2b07      	cmp	r3, #7
  40a048:	f8c8 1004 	str.w	r1, [r8, #4]
  40a04c:	9425      	str	r4, [sp, #148]	; 0x94
  40a04e:	9324      	str	r3, [sp, #144]	; 0x90
  40a050:	f300 83f8 	bgt.w	40a844 <_vfprintf_r+0x114c>
  40a054:	f108 0808 	add.w	r8, r8, #8
  40a058:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a05a:	1e5e      	subs	r6, r3, #1
  40a05c:	2e00      	cmp	r6, #0
  40a05e:	f77f ad50 	ble.w	409b02 <_vfprintf_r+0x40a>
  40a062:	2e10      	cmp	r6, #16
  40a064:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a066:	4d24      	ldr	r5, [pc, #144]	; (40a0f8 <_vfprintf_r+0xa00>)
  40a068:	f340 81dd 	ble.w	40a426 <_vfprintf_r+0xd2e>
  40a06c:	2710      	movs	r7, #16
  40a06e:	f8dd a020 	ldr.w	sl, [sp, #32]
  40a072:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40a076:	e005      	b.n	40a084 <_vfprintf_r+0x98c>
  40a078:	f108 0808 	add.w	r8, r8, #8
  40a07c:	3e10      	subs	r6, #16
  40a07e:	2e10      	cmp	r6, #16
  40a080:	f340 81d1 	ble.w	40a426 <_vfprintf_r+0xd2e>
  40a084:	3301      	adds	r3, #1
  40a086:	3410      	adds	r4, #16
  40a088:	2b07      	cmp	r3, #7
  40a08a:	9425      	str	r4, [sp, #148]	; 0x94
  40a08c:	9324      	str	r3, [sp, #144]	; 0x90
  40a08e:	e888 00a0 	stmia.w	r8, {r5, r7}
  40a092:	ddf1      	ble.n	40a078 <_vfprintf_r+0x980>
  40a094:	aa23      	add	r2, sp, #140	; 0x8c
  40a096:	4659      	mov	r1, fp
  40a098:	4650      	mov	r0, sl
  40a09a:	f003 fd79 	bl	40db90 <__sprint_r>
  40a09e:	2800      	cmp	r0, #0
  40a0a0:	f040 83cd 	bne.w	40a83e <_vfprintf_r+0x1146>
  40a0a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a0a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a0a8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a0ac:	e7e6      	b.n	40a07c <_vfprintf_r+0x984>
  40a0ae:	46aa      	mov	sl, r5
  40a0b0:	e78c      	b.n	409fcc <_vfprintf_r+0x8d4>
  40a0b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a0b4:	9a07      	ldr	r2, [sp, #28]
  40a0b6:	eba3 0a02 	sub.w	sl, r3, r2
  40a0ba:	f1ba 0f00 	cmp.w	sl, #0
  40a0be:	f77f acca 	ble.w	409a56 <_vfprintf_r+0x35e>
  40a0c2:	f1ba 0f10 	cmp.w	sl, #16
  40a0c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a0c8:	4d0b      	ldr	r5, [pc, #44]	; (40a0f8 <_vfprintf_r+0xa00>)
  40a0ca:	dd39      	ble.n	40a140 <_vfprintf_r+0xa48>
  40a0cc:	4642      	mov	r2, r8
  40a0ce:	4621      	mov	r1, r4
  40a0d0:	46b0      	mov	r8, r6
  40a0d2:	f04f 0b10 	mov.w	fp, #16
  40a0d6:	462e      	mov	r6, r5
  40a0d8:	9c08      	ldr	r4, [sp, #32]
  40a0da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40a0dc:	e015      	b.n	40a10a <_vfprintf_r+0xa12>
  40a0de:	bf00      	nop
  40a0e0:	0040fa60 	.word	0x0040fa60
  40a0e4:	0040fa4c 	.word	0x0040fa4c
  40a0e8:	7fefffff 	.word	0x7fefffff
  40a0ec:	0040fa40 	.word	0x0040fa40
  40a0f0:	0040fa3c 	.word	0x0040fa3c
  40a0f4:	0040fa7c 	.word	0x0040fa7c
  40a0f8:	0040fab0 	.word	0x0040fab0
  40a0fc:	f1aa 0a10 	sub.w	sl, sl, #16
  40a100:	f1ba 0f10 	cmp.w	sl, #16
  40a104:	f102 0208 	add.w	r2, r2, #8
  40a108:	dd16      	ble.n	40a138 <_vfprintf_r+0xa40>
  40a10a:	3301      	adds	r3, #1
  40a10c:	3110      	adds	r1, #16
  40a10e:	2b07      	cmp	r3, #7
  40a110:	9125      	str	r1, [sp, #148]	; 0x94
  40a112:	9324      	str	r3, [sp, #144]	; 0x90
  40a114:	e882 0840 	stmia.w	r2, {r6, fp}
  40a118:	ddf0      	ble.n	40a0fc <_vfprintf_r+0xa04>
  40a11a:	aa23      	add	r2, sp, #140	; 0x8c
  40a11c:	4629      	mov	r1, r5
  40a11e:	4620      	mov	r0, r4
  40a120:	f003 fd36 	bl	40db90 <__sprint_r>
  40a124:	2800      	cmp	r0, #0
  40a126:	d1c2      	bne.n	40a0ae <_vfprintf_r+0x9b6>
  40a128:	f1aa 0a10 	sub.w	sl, sl, #16
  40a12c:	f1ba 0f10 	cmp.w	sl, #16
  40a130:	9925      	ldr	r1, [sp, #148]	; 0x94
  40a132:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a134:	aa30      	add	r2, sp, #192	; 0xc0
  40a136:	dce8      	bgt.n	40a10a <_vfprintf_r+0xa12>
  40a138:	4635      	mov	r5, r6
  40a13a:	460c      	mov	r4, r1
  40a13c:	4646      	mov	r6, r8
  40a13e:	4690      	mov	r8, r2
  40a140:	3301      	adds	r3, #1
  40a142:	4454      	add	r4, sl
  40a144:	2b07      	cmp	r3, #7
  40a146:	9425      	str	r4, [sp, #148]	; 0x94
  40a148:	9324      	str	r3, [sp, #144]	; 0x90
  40a14a:	e888 0420 	stmia.w	r8, {r5, sl}
  40a14e:	f300 8264 	bgt.w	40a61a <_vfprintf_r+0xf22>
  40a152:	f108 0808 	add.w	r8, r8, #8
  40a156:	e47e      	b.n	409a56 <_vfprintf_r+0x35e>
  40a158:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a15a:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40a15c:	2b01      	cmp	r3, #1
  40a15e:	f340 81fd 	ble.w	40a55c <_vfprintf_r+0xe64>
  40a162:	3601      	adds	r6, #1
  40a164:	3401      	adds	r4, #1
  40a166:	2301      	movs	r3, #1
  40a168:	2e07      	cmp	r6, #7
  40a16a:	9425      	str	r4, [sp, #148]	; 0x94
  40a16c:	9624      	str	r6, [sp, #144]	; 0x90
  40a16e:	f8c8 7000 	str.w	r7, [r8]
  40a172:	f8c8 3004 	str.w	r3, [r8, #4]
  40a176:	f300 820e 	bgt.w	40a596 <_vfprintf_r+0xe9e>
  40a17a:	f108 0808 	add.w	r8, r8, #8
  40a17e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40a180:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a182:	f8c8 3000 	str.w	r3, [r8]
  40a186:	3601      	adds	r6, #1
  40a188:	4414      	add	r4, r2
  40a18a:	2e07      	cmp	r6, #7
  40a18c:	9425      	str	r4, [sp, #148]	; 0x94
  40a18e:	9624      	str	r6, [sp, #144]	; 0x90
  40a190:	f8c8 2004 	str.w	r2, [r8, #4]
  40a194:	f300 822e 	bgt.w	40a5f4 <_vfprintf_r+0xefc>
  40a198:	f108 0808 	add.w	r8, r8, #8
  40a19c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40a19e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40a1a0:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40a1a2:	9912      	ldr	r1, [sp, #72]	; 0x48
  40a1a4:	f003 fffa 	bl	40e19c <__aeabi_dcmpeq>
  40a1a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a1aa:	2800      	cmp	r0, #0
  40a1ac:	f040 8106 	bne.w	40a3bc <_vfprintf_r+0xcc4>
  40a1b0:	3b01      	subs	r3, #1
  40a1b2:	3601      	adds	r6, #1
  40a1b4:	3701      	adds	r7, #1
  40a1b6:	441c      	add	r4, r3
  40a1b8:	2e07      	cmp	r6, #7
  40a1ba:	9624      	str	r6, [sp, #144]	; 0x90
  40a1bc:	9425      	str	r4, [sp, #148]	; 0x94
  40a1be:	f8c8 7000 	str.w	r7, [r8]
  40a1c2:	f8c8 3004 	str.w	r3, [r8, #4]
  40a1c6:	f300 81d9 	bgt.w	40a57c <_vfprintf_r+0xe84>
  40a1ca:	f108 0808 	add.w	r8, r8, #8
  40a1ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40a1d0:	f8c8 2004 	str.w	r2, [r8, #4]
  40a1d4:	3601      	adds	r6, #1
  40a1d6:	4414      	add	r4, r2
  40a1d8:	ab1f      	add	r3, sp, #124	; 0x7c
  40a1da:	2e07      	cmp	r6, #7
  40a1dc:	9425      	str	r4, [sp, #148]	; 0x94
  40a1de:	9624      	str	r6, [sp, #144]	; 0x90
  40a1e0:	f8c8 3000 	str.w	r3, [r8]
  40a1e4:	f77f ac8b 	ble.w	409afe <_vfprintf_r+0x406>
  40a1e8:	aa23      	add	r2, sp, #140	; 0x8c
  40a1ea:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a1ec:	9808      	ldr	r0, [sp, #32]
  40a1ee:	f003 fccf 	bl	40db90 <__sprint_r>
  40a1f2:	b958      	cbnz	r0, 40a20c <_vfprintf_r+0xb14>
  40a1f4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a1f6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a1fa:	e482      	b.n	409b02 <_vfprintf_r+0x40a>
  40a1fc:	aa23      	add	r2, sp, #140	; 0x8c
  40a1fe:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a200:	9808      	ldr	r0, [sp, #32]
  40a202:	f003 fcc5 	bl	40db90 <__sprint_r>
  40a206:	2800      	cmp	r0, #0
  40a208:	f43f acc5 	beq.w	409b96 <_vfprintf_r+0x49e>
  40a20c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  40a210:	e6dc      	b.n	409fcc <_vfprintf_r+0x8d4>
  40a212:	f8dd b018 	ldr.w	fp, [sp, #24]
  40a216:	2b01      	cmp	r3, #1
  40a218:	f000 8121 	beq.w	40a45e <_vfprintf_r+0xd66>
  40a21c:	2b02      	cmp	r3, #2
  40a21e:	d127      	bne.n	40a270 <_vfprintf_r+0xb78>
  40a220:	f8cd b018 	str.w	fp, [sp, #24]
  40a224:	2400      	movs	r4, #0
  40a226:	2500      	movs	r5, #0
  40a228:	e591      	b.n	409d4e <_vfprintf_r+0x656>
  40a22a:	aa23      	add	r2, sp, #140	; 0x8c
  40a22c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a22e:	9808      	ldr	r0, [sp, #32]
  40a230:	f003 fcae 	bl	40db90 <__sprint_r>
  40a234:	2800      	cmp	r0, #0
  40a236:	d1e9      	bne.n	40a20c <_vfprintf_r+0xb14>
  40a238:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a23a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a23e:	e44d      	b.n	409adc <_vfprintf_r+0x3e4>
  40a240:	aa23      	add	r2, sp, #140	; 0x8c
  40a242:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a244:	9808      	ldr	r0, [sp, #32]
  40a246:	f003 fca3 	bl	40db90 <__sprint_r>
  40a24a:	2800      	cmp	r0, #0
  40a24c:	d1de      	bne.n	40a20c <_vfprintf_r+0xb14>
  40a24e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a250:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a254:	f7ff bbec 	b.w	409a30 <_vfprintf_r+0x338>
  40a258:	aa23      	add	r2, sp, #140	; 0x8c
  40a25a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a25c:	9808      	ldr	r0, [sp, #32]
  40a25e:	f003 fc97 	bl	40db90 <__sprint_r>
  40a262:	2800      	cmp	r0, #0
  40a264:	d1d2      	bne.n	40a20c <_vfprintf_r+0xb14>
  40a266:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a268:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a26c:	f7ff bbf0 	b.w	409a50 <_vfprintf_r+0x358>
  40a270:	f8cd b018 	str.w	fp, [sp, #24]
  40a274:	2400      	movs	r4, #0
  40a276:	2500      	movs	r5, #0
  40a278:	a930      	add	r1, sp, #192	; 0xc0
  40a27a:	e000      	b.n	40a27e <_vfprintf_r+0xb86>
  40a27c:	4639      	mov	r1, r7
  40a27e:	08e2      	lsrs	r2, r4, #3
  40a280:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40a284:	08e8      	lsrs	r0, r5, #3
  40a286:	f004 0307 	and.w	r3, r4, #7
  40a28a:	4605      	mov	r5, r0
  40a28c:	4614      	mov	r4, r2
  40a28e:	3330      	adds	r3, #48	; 0x30
  40a290:	ea54 0205 	orrs.w	r2, r4, r5
  40a294:	f801 3c01 	strb.w	r3, [r1, #-1]
  40a298:	f101 37ff 	add.w	r7, r1, #4294967295
  40a29c:	d1ee      	bne.n	40a27c <_vfprintf_r+0xb84>
  40a29e:	9a06      	ldr	r2, [sp, #24]
  40a2a0:	07d2      	lsls	r2, r2, #31
  40a2a2:	f57f ad64 	bpl.w	409d6e <_vfprintf_r+0x676>
  40a2a6:	2b30      	cmp	r3, #48	; 0x30
  40a2a8:	f43f ad61 	beq.w	409d6e <_vfprintf_r+0x676>
  40a2ac:	2330      	movs	r3, #48	; 0x30
  40a2ae:	3902      	subs	r1, #2
  40a2b0:	f807 3c01 	strb.w	r3, [r7, #-1]
  40a2b4:	ab30      	add	r3, sp, #192	; 0xc0
  40a2b6:	1a5b      	subs	r3, r3, r1
  40a2b8:	930d      	str	r3, [sp, #52]	; 0x34
  40a2ba:	460f      	mov	r7, r1
  40a2bc:	f7ff bb46 	b.w	40994c <_vfprintf_r+0x254>
  40a2c0:	2302      	movs	r3, #2
  40a2c2:	f7ff bb25 	b.w	409910 <_vfprintf_r+0x218>
  40a2c6:	991d      	ldr	r1, [sp, #116]	; 0x74
  40a2c8:	2900      	cmp	r1, #0
  40a2ca:	f340 8274 	ble.w	40a7b6 <_vfprintf_r+0x10be>
  40a2ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a2d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a2d2:	4293      	cmp	r3, r2
  40a2d4:	bfa8      	it	ge
  40a2d6:	4613      	movge	r3, r2
  40a2d8:	2b00      	cmp	r3, #0
  40a2da:	461e      	mov	r6, r3
  40a2dc:	dd0d      	ble.n	40a2fa <_vfprintf_r+0xc02>
  40a2de:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a2e0:	f8c8 7000 	str.w	r7, [r8]
  40a2e4:	3301      	adds	r3, #1
  40a2e6:	4434      	add	r4, r6
  40a2e8:	2b07      	cmp	r3, #7
  40a2ea:	9425      	str	r4, [sp, #148]	; 0x94
  40a2ec:	f8c8 6004 	str.w	r6, [r8, #4]
  40a2f0:	9324      	str	r3, [sp, #144]	; 0x90
  40a2f2:	f300 8324 	bgt.w	40a93e <_vfprintf_r+0x1246>
  40a2f6:	f108 0808 	add.w	r8, r8, #8
  40a2fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a2fc:	2e00      	cmp	r6, #0
  40a2fe:	bfa8      	it	ge
  40a300:	1b9b      	subge	r3, r3, r6
  40a302:	2b00      	cmp	r3, #0
  40a304:	461e      	mov	r6, r3
  40a306:	f340 80d0 	ble.w	40a4aa <_vfprintf_r+0xdb2>
  40a30a:	2e10      	cmp	r6, #16
  40a30c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a30e:	4dc0      	ldr	r5, [pc, #768]	; (40a610 <_vfprintf_r+0xf18>)
  40a310:	f340 80b7 	ble.w	40a482 <_vfprintf_r+0xd8a>
  40a314:	4622      	mov	r2, r4
  40a316:	f04f 0a10 	mov.w	sl, #16
  40a31a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40a31e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40a320:	e005      	b.n	40a32e <_vfprintf_r+0xc36>
  40a322:	f108 0808 	add.w	r8, r8, #8
  40a326:	3e10      	subs	r6, #16
  40a328:	2e10      	cmp	r6, #16
  40a32a:	f340 80a9 	ble.w	40a480 <_vfprintf_r+0xd88>
  40a32e:	3301      	adds	r3, #1
  40a330:	3210      	adds	r2, #16
  40a332:	2b07      	cmp	r3, #7
  40a334:	9225      	str	r2, [sp, #148]	; 0x94
  40a336:	9324      	str	r3, [sp, #144]	; 0x90
  40a338:	e888 0420 	stmia.w	r8, {r5, sl}
  40a33c:	ddf1      	ble.n	40a322 <_vfprintf_r+0xc2a>
  40a33e:	aa23      	add	r2, sp, #140	; 0x8c
  40a340:	4621      	mov	r1, r4
  40a342:	4658      	mov	r0, fp
  40a344:	f003 fc24 	bl	40db90 <__sprint_r>
  40a348:	2800      	cmp	r0, #0
  40a34a:	f040 8324 	bne.w	40a996 <_vfprintf_r+0x129e>
  40a34e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a350:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a352:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a356:	e7e6      	b.n	40a326 <_vfprintf_r+0xc2e>
  40a358:	2d00      	cmp	r5, #0
  40a35a:	bf08      	it	eq
  40a35c:	2c0a      	cmpeq	r4, #10
  40a35e:	d37c      	bcc.n	40a45a <_vfprintf_r+0xd62>
  40a360:	af30      	add	r7, sp, #192	; 0xc0
  40a362:	4620      	mov	r0, r4
  40a364:	4629      	mov	r1, r5
  40a366:	220a      	movs	r2, #10
  40a368:	2300      	movs	r3, #0
  40a36a:	f003 ff87 	bl	40e27c <__aeabi_uldivmod>
  40a36e:	3230      	adds	r2, #48	; 0x30
  40a370:	f807 2d01 	strb.w	r2, [r7, #-1]!
  40a374:	4620      	mov	r0, r4
  40a376:	4629      	mov	r1, r5
  40a378:	2300      	movs	r3, #0
  40a37a:	220a      	movs	r2, #10
  40a37c:	f003 ff7e 	bl	40e27c <__aeabi_uldivmod>
  40a380:	4604      	mov	r4, r0
  40a382:	460d      	mov	r5, r1
  40a384:	ea54 0305 	orrs.w	r3, r4, r5
  40a388:	d1eb      	bne.n	40a362 <_vfprintf_r+0xc6a>
  40a38a:	ab30      	add	r3, sp, #192	; 0xc0
  40a38c:	1bdb      	subs	r3, r3, r7
  40a38e:	930d      	str	r3, [sp, #52]	; 0x34
  40a390:	f7ff badc 	b.w	40994c <_vfprintf_r+0x254>
  40a394:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a396:	930d      	str	r3, [sp, #52]	; 0x34
  40a398:	af30      	add	r7, sp, #192	; 0xc0
  40a39a:	f7ff bad7 	b.w	40994c <_vfprintf_r+0x254>
  40a39e:	aa23      	add	r2, sp, #140	; 0x8c
  40a3a0:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a3a2:	9808      	ldr	r0, [sp, #32]
  40a3a4:	f003 fbf4 	bl	40db90 <__sprint_r>
  40a3a8:	2800      	cmp	r0, #0
  40a3aa:	f47f af2f 	bne.w	40a20c <_vfprintf_r+0xb14>
  40a3ae:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40a3b2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a3b4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a3b8:	f7ff bb28 	b.w	409a0c <_vfprintf_r+0x314>
  40a3bc:	1e5f      	subs	r7, r3, #1
  40a3be:	2f00      	cmp	r7, #0
  40a3c0:	f77f af05 	ble.w	40a1ce <_vfprintf_r+0xad6>
  40a3c4:	2f10      	cmp	r7, #16
  40a3c6:	4d92      	ldr	r5, [pc, #584]	; (40a610 <_vfprintf_r+0xf18>)
  40a3c8:	f340 810a 	ble.w	40a5e0 <_vfprintf_r+0xee8>
  40a3cc:	f04f 0a10 	mov.w	sl, #16
  40a3d0:	f8dd b020 	ldr.w	fp, [sp, #32]
  40a3d4:	e005      	b.n	40a3e2 <_vfprintf_r+0xcea>
  40a3d6:	f108 0808 	add.w	r8, r8, #8
  40a3da:	3f10      	subs	r7, #16
  40a3dc:	2f10      	cmp	r7, #16
  40a3de:	f340 80ff 	ble.w	40a5e0 <_vfprintf_r+0xee8>
  40a3e2:	3601      	adds	r6, #1
  40a3e4:	3410      	adds	r4, #16
  40a3e6:	2e07      	cmp	r6, #7
  40a3e8:	9425      	str	r4, [sp, #148]	; 0x94
  40a3ea:	9624      	str	r6, [sp, #144]	; 0x90
  40a3ec:	e888 0420 	stmia.w	r8, {r5, sl}
  40a3f0:	ddf1      	ble.n	40a3d6 <_vfprintf_r+0xcde>
  40a3f2:	aa23      	add	r2, sp, #140	; 0x8c
  40a3f4:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a3f6:	4658      	mov	r0, fp
  40a3f8:	f003 fbca 	bl	40db90 <__sprint_r>
  40a3fc:	2800      	cmp	r0, #0
  40a3fe:	f47f af05 	bne.w	40a20c <_vfprintf_r+0xb14>
  40a402:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a404:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40a406:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a40a:	e7e6      	b.n	40a3da <_vfprintf_r+0xce2>
  40a40c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a40e:	460a      	mov	r2, r1
  40a410:	3204      	adds	r2, #4
  40a412:	680c      	ldr	r4, [r1, #0]
  40a414:	920e      	str	r2, [sp, #56]	; 0x38
  40a416:	2500      	movs	r5, #0
  40a418:	f7ff ba7a 	b.w	409910 <_vfprintf_r+0x218>
  40a41c:	681c      	ldr	r4, [r3, #0]
  40a41e:	3304      	adds	r3, #4
  40a420:	930e      	str	r3, [sp, #56]	; 0x38
  40a422:	2500      	movs	r5, #0
  40a424:	e426      	b.n	409c74 <_vfprintf_r+0x57c>
  40a426:	3301      	adds	r3, #1
  40a428:	4434      	add	r4, r6
  40a42a:	2b07      	cmp	r3, #7
  40a42c:	9425      	str	r4, [sp, #148]	; 0x94
  40a42e:	9324      	str	r3, [sp, #144]	; 0x90
  40a430:	e888 0060 	stmia.w	r8, {r5, r6}
  40a434:	f77f ab63 	ble.w	409afe <_vfprintf_r+0x406>
  40a438:	e6d6      	b.n	40a1e8 <_vfprintf_r+0xaf0>
  40a43a:	3204      	adds	r2, #4
  40a43c:	681c      	ldr	r4, [r3, #0]
  40a43e:	920e      	str	r2, [sp, #56]	; 0x38
  40a440:	2301      	movs	r3, #1
  40a442:	2500      	movs	r5, #0
  40a444:	f7ff ba64 	b.w	409910 <_vfprintf_r+0x218>
  40a448:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a44a:	6814      	ldr	r4, [r2, #0]
  40a44c:	4613      	mov	r3, r2
  40a44e:	3304      	adds	r3, #4
  40a450:	17e5      	asrs	r5, r4, #31
  40a452:	930e      	str	r3, [sp, #56]	; 0x38
  40a454:	4622      	mov	r2, r4
  40a456:	462b      	mov	r3, r5
  40a458:	e460      	b.n	409d1c <_vfprintf_r+0x624>
  40a45a:	f8dd b018 	ldr.w	fp, [sp, #24]
  40a45e:	f8cd b018 	str.w	fp, [sp, #24]
  40a462:	af40      	add	r7, sp, #256	; 0x100
  40a464:	3430      	adds	r4, #48	; 0x30
  40a466:	2301      	movs	r3, #1
  40a468:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40a46c:	930d      	str	r3, [sp, #52]	; 0x34
  40a46e:	f7ff ba6d 	b.w	40994c <_vfprintf_r+0x254>
  40a472:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40a476:	f002 f943 	bl	40c700 <__retarget_lock_release_recursive>
  40a47a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  40a47e:	e5af      	b.n	409fe0 <_vfprintf_r+0x8e8>
  40a480:	4614      	mov	r4, r2
  40a482:	3301      	adds	r3, #1
  40a484:	4434      	add	r4, r6
  40a486:	2b07      	cmp	r3, #7
  40a488:	9425      	str	r4, [sp, #148]	; 0x94
  40a48a:	9324      	str	r3, [sp, #144]	; 0x90
  40a48c:	e888 0060 	stmia.w	r8, {r5, r6}
  40a490:	f340 816d 	ble.w	40a76e <_vfprintf_r+0x1076>
  40a494:	aa23      	add	r2, sp, #140	; 0x8c
  40a496:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a498:	9808      	ldr	r0, [sp, #32]
  40a49a:	f003 fb79 	bl	40db90 <__sprint_r>
  40a49e:	2800      	cmp	r0, #0
  40a4a0:	f47f aeb4 	bne.w	40a20c <_vfprintf_r+0xb14>
  40a4a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a4a6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a4aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a4ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a4ae:	4293      	cmp	r3, r2
  40a4b0:	f280 8158 	bge.w	40a764 <_vfprintf_r+0x106c>
  40a4b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a4b6:	9814      	ldr	r0, [sp, #80]	; 0x50
  40a4b8:	9915      	ldr	r1, [sp, #84]	; 0x54
  40a4ba:	f8c8 1000 	str.w	r1, [r8]
  40a4be:	3201      	adds	r2, #1
  40a4c0:	4404      	add	r4, r0
  40a4c2:	2a07      	cmp	r2, #7
  40a4c4:	9425      	str	r4, [sp, #148]	; 0x94
  40a4c6:	f8c8 0004 	str.w	r0, [r8, #4]
  40a4ca:	9224      	str	r2, [sp, #144]	; 0x90
  40a4cc:	f300 8152 	bgt.w	40a774 <_vfprintf_r+0x107c>
  40a4d0:	f108 0808 	add.w	r8, r8, #8
  40a4d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a4d6:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a4d8:	1ad3      	subs	r3, r2, r3
  40a4da:	1a56      	subs	r6, r2, r1
  40a4dc:	429e      	cmp	r6, r3
  40a4de:	bfa8      	it	ge
  40a4e0:	461e      	movge	r6, r3
  40a4e2:	2e00      	cmp	r6, #0
  40a4e4:	dd0e      	ble.n	40a504 <_vfprintf_r+0xe0c>
  40a4e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a4e8:	f8c8 6004 	str.w	r6, [r8, #4]
  40a4ec:	3201      	adds	r2, #1
  40a4ee:	440f      	add	r7, r1
  40a4f0:	4434      	add	r4, r6
  40a4f2:	2a07      	cmp	r2, #7
  40a4f4:	f8c8 7000 	str.w	r7, [r8]
  40a4f8:	9425      	str	r4, [sp, #148]	; 0x94
  40a4fa:	9224      	str	r2, [sp, #144]	; 0x90
  40a4fc:	f300 823c 	bgt.w	40a978 <_vfprintf_r+0x1280>
  40a500:	f108 0808 	add.w	r8, r8, #8
  40a504:	2e00      	cmp	r6, #0
  40a506:	bfac      	ite	ge
  40a508:	1b9e      	subge	r6, r3, r6
  40a50a:	461e      	movlt	r6, r3
  40a50c:	2e00      	cmp	r6, #0
  40a50e:	f77f aaf8 	ble.w	409b02 <_vfprintf_r+0x40a>
  40a512:	2e10      	cmp	r6, #16
  40a514:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a516:	4d3e      	ldr	r5, [pc, #248]	; (40a610 <_vfprintf_r+0xf18>)
  40a518:	dd85      	ble.n	40a426 <_vfprintf_r+0xd2e>
  40a51a:	2710      	movs	r7, #16
  40a51c:	f8dd a020 	ldr.w	sl, [sp, #32]
  40a520:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40a524:	e005      	b.n	40a532 <_vfprintf_r+0xe3a>
  40a526:	f108 0808 	add.w	r8, r8, #8
  40a52a:	3e10      	subs	r6, #16
  40a52c:	2e10      	cmp	r6, #16
  40a52e:	f77f af7a 	ble.w	40a426 <_vfprintf_r+0xd2e>
  40a532:	3301      	adds	r3, #1
  40a534:	3410      	adds	r4, #16
  40a536:	2b07      	cmp	r3, #7
  40a538:	9425      	str	r4, [sp, #148]	; 0x94
  40a53a:	9324      	str	r3, [sp, #144]	; 0x90
  40a53c:	e888 00a0 	stmia.w	r8, {r5, r7}
  40a540:	ddf1      	ble.n	40a526 <_vfprintf_r+0xe2e>
  40a542:	aa23      	add	r2, sp, #140	; 0x8c
  40a544:	4659      	mov	r1, fp
  40a546:	4650      	mov	r0, sl
  40a548:	f003 fb22 	bl	40db90 <__sprint_r>
  40a54c:	2800      	cmp	r0, #0
  40a54e:	f040 8176 	bne.w	40a83e <_vfprintf_r+0x1146>
  40a552:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a554:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a556:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a55a:	e7e6      	b.n	40a52a <_vfprintf_r+0xe32>
  40a55c:	9b06      	ldr	r3, [sp, #24]
  40a55e:	07d8      	lsls	r0, r3, #31
  40a560:	f53f adff 	bmi.w	40a162 <_vfprintf_r+0xa6a>
  40a564:	3601      	adds	r6, #1
  40a566:	3401      	adds	r4, #1
  40a568:	2301      	movs	r3, #1
  40a56a:	2e07      	cmp	r6, #7
  40a56c:	9425      	str	r4, [sp, #148]	; 0x94
  40a56e:	9624      	str	r6, [sp, #144]	; 0x90
  40a570:	f8c8 7000 	str.w	r7, [r8]
  40a574:	f8c8 3004 	str.w	r3, [r8, #4]
  40a578:	f77f ae27 	ble.w	40a1ca <_vfprintf_r+0xad2>
  40a57c:	aa23      	add	r2, sp, #140	; 0x8c
  40a57e:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a580:	9808      	ldr	r0, [sp, #32]
  40a582:	f003 fb05 	bl	40db90 <__sprint_r>
  40a586:	2800      	cmp	r0, #0
  40a588:	f47f ae40 	bne.w	40a20c <_vfprintf_r+0xb14>
  40a58c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a58e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40a590:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a594:	e61b      	b.n	40a1ce <_vfprintf_r+0xad6>
  40a596:	aa23      	add	r2, sp, #140	; 0x8c
  40a598:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a59a:	9808      	ldr	r0, [sp, #32]
  40a59c:	f003 faf8 	bl	40db90 <__sprint_r>
  40a5a0:	2800      	cmp	r0, #0
  40a5a2:	f47f ae33 	bne.w	40a20c <_vfprintf_r+0xb14>
  40a5a6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a5a8:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40a5aa:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a5ae:	e5e6      	b.n	40a17e <_vfprintf_r+0xa86>
  40a5b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40a5b2:	3507      	adds	r5, #7
  40a5b4:	f025 0507 	bic.w	r5, r5, #7
  40a5b8:	e9d5 2300 	ldrd	r2, r3, [r5]
  40a5bc:	f105 0108 	add.w	r1, r5, #8
  40a5c0:	910e      	str	r1, [sp, #56]	; 0x38
  40a5c2:	4614      	mov	r4, r2
  40a5c4:	461d      	mov	r5, r3
  40a5c6:	f7ff bba9 	b.w	409d1c <_vfprintf_r+0x624>
  40a5ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40a5cc:	3507      	adds	r5, #7
  40a5ce:	f025 0307 	bic.w	r3, r5, #7
  40a5d2:	f103 0208 	add.w	r2, r3, #8
  40a5d6:	920e      	str	r2, [sp, #56]	; 0x38
  40a5d8:	e9d3 4500 	ldrd	r4, r5, [r3]
  40a5dc:	f7ff bb4a 	b.w	409c74 <_vfprintf_r+0x57c>
  40a5e0:	3601      	adds	r6, #1
  40a5e2:	443c      	add	r4, r7
  40a5e4:	2e07      	cmp	r6, #7
  40a5e6:	9425      	str	r4, [sp, #148]	; 0x94
  40a5e8:	9624      	str	r6, [sp, #144]	; 0x90
  40a5ea:	e888 00a0 	stmia.w	r8, {r5, r7}
  40a5ee:	f77f adec 	ble.w	40a1ca <_vfprintf_r+0xad2>
  40a5f2:	e7c3      	b.n	40a57c <_vfprintf_r+0xe84>
  40a5f4:	aa23      	add	r2, sp, #140	; 0x8c
  40a5f6:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a5f8:	9808      	ldr	r0, [sp, #32]
  40a5fa:	f003 fac9 	bl	40db90 <__sprint_r>
  40a5fe:	2800      	cmp	r0, #0
  40a600:	f47f ae04 	bne.w	40a20c <_vfprintf_r+0xb14>
  40a604:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a606:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40a608:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a60c:	e5c6      	b.n	40a19c <_vfprintf_r+0xaa4>
  40a60e:	bf00      	nop
  40a610:	0040fab0 	.word	0x0040fab0
  40a614:	af30      	add	r7, sp, #192	; 0xc0
  40a616:	f7ff b999 	b.w	40994c <_vfprintf_r+0x254>
  40a61a:	aa23      	add	r2, sp, #140	; 0x8c
  40a61c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a61e:	9808      	ldr	r0, [sp, #32]
  40a620:	f003 fab6 	bl	40db90 <__sprint_r>
  40a624:	2800      	cmp	r0, #0
  40a626:	f47f adf1 	bne.w	40a20c <_vfprintf_r+0xb14>
  40a62a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a62c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a630:	f7ff ba11 	b.w	409a56 <_vfprintf_r+0x35e>
  40a634:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40a638:	4264      	negs	r4, r4
  40a63a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40a63e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  40a642:	2301      	movs	r3, #1
  40a644:	f7ff b968 	b.w	409918 <_vfprintf_r+0x220>
  40a648:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  40a64a:	4622      	mov	r2, r4
  40a64c:	4620      	mov	r0, r4
  40a64e:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40a650:	4623      	mov	r3, r4
  40a652:	4621      	mov	r1, r4
  40a654:	f003 fdd4 	bl	40e200 <__aeabi_dcmpun>
  40a658:	2800      	cmp	r0, #0
  40a65a:	f040 828c 	bne.w	40ab76 <_vfprintf_r+0x147e>
  40a65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a660:	3301      	adds	r3, #1
  40a662:	f026 0320 	bic.w	r3, r6, #32
  40a666:	930d      	str	r3, [sp, #52]	; 0x34
  40a668:	f000 8091 	beq.w	40a78e <_vfprintf_r+0x1096>
  40a66c:	2b47      	cmp	r3, #71	; 0x47
  40a66e:	d104      	bne.n	40a67a <_vfprintf_r+0xf82>
  40a670:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a672:	2b00      	cmp	r3, #0
  40a674:	bf08      	it	eq
  40a676:	2301      	moveq	r3, #1
  40a678:	9309      	str	r3, [sp, #36]	; 0x24
  40a67a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40a67e:	9306      	str	r3, [sp, #24]
  40a680:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a682:	f1b3 0a00 	subs.w	sl, r3, #0
  40a686:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a688:	9307      	str	r3, [sp, #28]
  40a68a:	bfbb      	ittet	lt
  40a68c:	4653      	movlt	r3, sl
  40a68e:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  40a692:	2300      	movge	r3, #0
  40a694:	232d      	movlt	r3, #45	; 0x2d
  40a696:	2e66      	cmp	r6, #102	; 0x66
  40a698:	930f      	str	r3, [sp, #60]	; 0x3c
  40a69a:	f000 817f 	beq.w	40a99c <_vfprintf_r+0x12a4>
  40a69e:	2e46      	cmp	r6, #70	; 0x46
  40a6a0:	f000 81d4 	beq.w	40aa4c <_vfprintf_r+0x1354>
  40a6a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a6a6:	9a07      	ldr	r2, [sp, #28]
  40a6a8:	2b45      	cmp	r3, #69	; 0x45
  40a6aa:	bf0c      	ite	eq
  40a6ac:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  40a6ae:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  40a6b0:	a821      	add	r0, sp, #132	; 0x84
  40a6b2:	a91e      	add	r1, sp, #120	; 0x78
  40a6b4:	bf08      	it	eq
  40a6b6:	1c5d      	addeq	r5, r3, #1
  40a6b8:	9004      	str	r0, [sp, #16]
  40a6ba:	9103      	str	r1, [sp, #12]
  40a6bc:	a81d      	add	r0, sp, #116	; 0x74
  40a6be:	2102      	movs	r1, #2
  40a6c0:	9002      	str	r0, [sp, #8]
  40a6c2:	4653      	mov	r3, sl
  40a6c4:	9501      	str	r5, [sp, #4]
  40a6c6:	9100      	str	r1, [sp, #0]
  40a6c8:	9808      	ldr	r0, [sp, #32]
  40a6ca:	f000 fc81 	bl	40afd0 <_dtoa_r>
  40a6ce:	2e67      	cmp	r6, #103	; 0x67
  40a6d0:	4607      	mov	r7, r0
  40a6d2:	f040 81af 	bne.w	40aa34 <_vfprintf_r+0x133c>
  40a6d6:	f01b 0f01 	tst.w	fp, #1
  40a6da:	f000 8213 	beq.w	40ab04 <_vfprintf_r+0x140c>
  40a6de:	197c      	adds	r4, r7, r5
  40a6e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40a6e2:	9807      	ldr	r0, [sp, #28]
  40a6e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40a6e6:	4651      	mov	r1, sl
  40a6e8:	f003 fd58 	bl	40e19c <__aeabi_dcmpeq>
  40a6ec:	2800      	cmp	r0, #0
  40a6ee:	f040 8132 	bne.w	40a956 <_vfprintf_r+0x125e>
  40a6f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40a6f4:	42a3      	cmp	r3, r4
  40a6f6:	d206      	bcs.n	40a706 <_vfprintf_r+0x100e>
  40a6f8:	2130      	movs	r1, #48	; 0x30
  40a6fa:	1c5a      	adds	r2, r3, #1
  40a6fc:	9221      	str	r2, [sp, #132]	; 0x84
  40a6fe:	7019      	strb	r1, [r3, #0]
  40a700:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40a702:	429c      	cmp	r4, r3
  40a704:	d8f9      	bhi.n	40a6fa <_vfprintf_r+0x1002>
  40a706:	1bdb      	subs	r3, r3, r7
  40a708:	9311      	str	r3, [sp, #68]	; 0x44
  40a70a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a70c:	2b47      	cmp	r3, #71	; 0x47
  40a70e:	f000 80b9 	beq.w	40a884 <_vfprintf_r+0x118c>
  40a712:	2e65      	cmp	r6, #101	; 0x65
  40a714:	f340 8276 	ble.w	40ac04 <_vfprintf_r+0x150c>
  40a718:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a71a:	9310      	str	r3, [sp, #64]	; 0x40
  40a71c:	2e66      	cmp	r6, #102	; 0x66
  40a71e:	f000 8162 	beq.w	40a9e6 <_vfprintf_r+0x12ee>
  40a722:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a724:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40a726:	4619      	mov	r1, r3
  40a728:	4291      	cmp	r1, r2
  40a72a:	f300 814f 	bgt.w	40a9cc <_vfprintf_r+0x12d4>
  40a72e:	f01b 0f01 	tst.w	fp, #1
  40a732:	f040 8209 	bne.w	40ab48 <_vfprintf_r+0x1450>
  40a736:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40a73a:	9307      	str	r3, [sp, #28]
  40a73c:	920d      	str	r2, [sp, #52]	; 0x34
  40a73e:	2667      	movs	r6, #103	; 0x67
  40a740:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a742:	2b00      	cmp	r3, #0
  40a744:	f040 8096 	bne.w	40a874 <_vfprintf_r+0x117c>
  40a748:	9309      	str	r3, [sp, #36]	; 0x24
  40a74a:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40a74e:	f7ff b905 	b.w	40995c <_vfprintf_r+0x264>
  40a752:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40a756:	f001 ffd3 	bl	40c700 <__retarget_lock_release_recursive>
  40a75a:	f04f 33ff 	mov.w	r3, #4294967295
  40a75e:	930b      	str	r3, [sp, #44]	; 0x2c
  40a760:	f7ff ba30 	b.w	409bc4 <_vfprintf_r+0x4cc>
  40a764:	9a06      	ldr	r2, [sp, #24]
  40a766:	07d5      	lsls	r5, r2, #31
  40a768:	f57f aeb4 	bpl.w	40a4d4 <_vfprintf_r+0xddc>
  40a76c:	e6a2      	b.n	40a4b4 <_vfprintf_r+0xdbc>
  40a76e:	f108 0808 	add.w	r8, r8, #8
  40a772:	e69a      	b.n	40a4aa <_vfprintf_r+0xdb2>
  40a774:	aa23      	add	r2, sp, #140	; 0x8c
  40a776:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a778:	9808      	ldr	r0, [sp, #32]
  40a77a:	f003 fa09 	bl	40db90 <__sprint_r>
  40a77e:	2800      	cmp	r0, #0
  40a780:	f47f ad44 	bne.w	40a20c <_vfprintf_r+0xb14>
  40a784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a786:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a788:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a78c:	e6a2      	b.n	40a4d4 <_vfprintf_r+0xddc>
  40a78e:	2306      	movs	r3, #6
  40a790:	9309      	str	r3, [sp, #36]	; 0x24
  40a792:	e772      	b.n	40a67a <_vfprintf_r+0xf82>
  40a794:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40a798:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  40a79c:	f7ff bbc7 	b.w	409f2e <_vfprintf_r+0x836>
  40a7a0:	aa23      	add	r2, sp, #140	; 0x8c
  40a7a2:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a7a4:	9808      	ldr	r0, [sp, #32]
  40a7a6:	f003 f9f3 	bl	40db90 <__sprint_r>
  40a7aa:	2800      	cmp	r0, #0
  40a7ac:	f47f ad2e 	bne.w	40a20c <_vfprintf_r+0xb14>
  40a7b0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a7b4:	e437      	b.n	40a026 <_vfprintf_r+0x92e>
  40a7b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a7b8:	4ab4      	ldr	r2, [pc, #720]	; (40aa8c <_vfprintf_r+0x1394>)
  40a7ba:	f8c8 2000 	str.w	r2, [r8]
  40a7be:	3301      	adds	r3, #1
  40a7c0:	3401      	adds	r4, #1
  40a7c2:	2201      	movs	r2, #1
  40a7c4:	2b07      	cmp	r3, #7
  40a7c6:	9425      	str	r4, [sp, #148]	; 0x94
  40a7c8:	9324      	str	r3, [sp, #144]	; 0x90
  40a7ca:	f8c8 2004 	str.w	r2, [r8, #4]
  40a7ce:	f300 8124 	bgt.w	40aa1a <_vfprintf_r+0x1322>
  40a7d2:	f108 0808 	add.w	r8, r8, #8
  40a7d6:	b929      	cbnz	r1, 40a7e4 <_vfprintf_r+0x10ec>
  40a7d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a7da:	b91b      	cbnz	r3, 40a7e4 <_vfprintf_r+0x10ec>
  40a7dc:	9b06      	ldr	r3, [sp, #24]
  40a7de:	07de      	lsls	r6, r3, #31
  40a7e0:	f57f a98f 	bpl.w	409b02 <_vfprintf_r+0x40a>
  40a7e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a7e6:	9814      	ldr	r0, [sp, #80]	; 0x50
  40a7e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40a7ea:	f8c8 2000 	str.w	r2, [r8]
  40a7ee:	3301      	adds	r3, #1
  40a7f0:	4602      	mov	r2, r0
  40a7f2:	4422      	add	r2, r4
  40a7f4:	2b07      	cmp	r3, #7
  40a7f6:	9225      	str	r2, [sp, #148]	; 0x94
  40a7f8:	f8c8 0004 	str.w	r0, [r8, #4]
  40a7fc:	9324      	str	r3, [sp, #144]	; 0x90
  40a7fe:	f300 8169 	bgt.w	40aad4 <_vfprintf_r+0x13dc>
  40a802:	f108 0808 	add.w	r8, r8, #8
  40a806:	2900      	cmp	r1, #0
  40a808:	f2c0 8136 	blt.w	40aa78 <_vfprintf_r+0x1380>
  40a80c:	9911      	ldr	r1, [sp, #68]	; 0x44
  40a80e:	f8c8 7000 	str.w	r7, [r8]
  40a812:	3301      	adds	r3, #1
  40a814:	188c      	adds	r4, r1, r2
  40a816:	2b07      	cmp	r3, #7
  40a818:	9425      	str	r4, [sp, #148]	; 0x94
  40a81a:	9324      	str	r3, [sp, #144]	; 0x90
  40a81c:	f8c8 1004 	str.w	r1, [r8, #4]
  40a820:	f77f a96d 	ble.w	409afe <_vfprintf_r+0x406>
  40a824:	e4e0      	b.n	40a1e8 <_vfprintf_r+0xaf0>
  40a826:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a828:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a82a:	6813      	ldr	r3, [r2, #0]
  40a82c:	17cd      	asrs	r5, r1, #31
  40a82e:	4608      	mov	r0, r1
  40a830:	3204      	adds	r2, #4
  40a832:	4629      	mov	r1, r5
  40a834:	920e      	str	r2, [sp, #56]	; 0x38
  40a836:	e9c3 0100 	strd	r0, r1, [r3]
  40a83a:	f7fe bfa9 	b.w	409790 <_vfprintf_r+0x98>
  40a83e:	46da      	mov	sl, fp
  40a840:	f7ff bbc4 	b.w	409fcc <_vfprintf_r+0x8d4>
  40a844:	aa23      	add	r2, sp, #140	; 0x8c
  40a846:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a848:	9808      	ldr	r0, [sp, #32]
  40a84a:	f003 f9a1 	bl	40db90 <__sprint_r>
  40a84e:	2800      	cmp	r0, #0
  40a850:	f47f acdc 	bne.w	40a20c <_vfprintf_r+0xb14>
  40a854:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a856:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a85a:	f7ff bbfd 	b.w	40a058 <_vfprintf_r+0x960>
  40a85e:	4638      	mov	r0, r7
  40a860:	9409      	str	r4, [sp, #36]	; 0x24
  40a862:	f7fd fcad 	bl	4081c0 <strlen>
  40a866:	950e      	str	r5, [sp, #56]	; 0x38
  40a868:	900d      	str	r0, [sp, #52]	; 0x34
  40a86a:	f8cd b018 	str.w	fp, [sp, #24]
  40a86e:	4603      	mov	r3, r0
  40a870:	f7ff ba36 	b.w	409ce0 <_vfprintf_r+0x5e8>
  40a874:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40a878:	2300      	movs	r3, #0
  40a87a:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  40a87e:	9309      	str	r3, [sp, #36]	; 0x24
  40a880:	f7ff b86f 	b.w	409962 <_vfprintf_r+0x26a>
  40a884:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a886:	9310      	str	r3, [sp, #64]	; 0x40
  40a888:	461a      	mov	r2, r3
  40a88a:	3303      	adds	r3, #3
  40a88c:	db04      	blt.n	40a898 <_vfprintf_r+0x11a0>
  40a88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a890:	4619      	mov	r1, r3
  40a892:	4291      	cmp	r1, r2
  40a894:	f6bf af45 	bge.w	40a722 <_vfprintf_r+0x102a>
  40a898:	3e02      	subs	r6, #2
  40a89a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a89c:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  40a8a0:	3b01      	subs	r3, #1
  40a8a2:	2b00      	cmp	r3, #0
  40a8a4:	931d      	str	r3, [sp, #116]	; 0x74
  40a8a6:	bfbd      	ittte	lt
  40a8a8:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  40a8aa:	f1c3 0301 	rsblt	r3, r3, #1
  40a8ae:	222d      	movlt	r2, #45	; 0x2d
  40a8b0:	222b      	movge	r2, #43	; 0x2b
  40a8b2:	2b09      	cmp	r3, #9
  40a8b4:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40a8b8:	f340 813e 	ble.w	40ab38 <_vfprintf_r+0x1440>
  40a8bc:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  40a8c0:	4620      	mov	r0, r4
  40a8c2:	4d73      	ldr	r5, [pc, #460]	; (40aa90 <_vfprintf_r+0x1398>)
  40a8c4:	e000      	b.n	40a8c8 <_vfprintf_r+0x11d0>
  40a8c6:	4610      	mov	r0, r2
  40a8c8:	fb85 1203 	smull	r1, r2, r5, r3
  40a8cc:	17d9      	asrs	r1, r3, #31
  40a8ce:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  40a8d2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40a8d6:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40a8da:	3230      	adds	r2, #48	; 0x30
  40a8dc:	2909      	cmp	r1, #9
  40a8de:	f800 2c01 	strb.w	r2, [r0, #-1]
  40a8e2:	460b      	mov	r3, r1
  40a8e4:	f100 32ff 	add.w	r2, r0, #4294967295
  40a8e8:	dced      	bgt.n	40a8c6 <_vfprintf_r+0x11ce>
  40a8ea:	3330      	adds	r3, #48	; 0x30
  40a8ec:	3802      	subs	r0, #2
  40a8ee:	b2d9      	uxtb	r1, r3
  40a8f0:	4284      	cmp	r4, r0
  40a8f2:	f802 1c01 	strb.w	r1, [r2, #-1]
  40a8f6:	f240 8190 	bls.w	40ac1a <_vfprintf_r+0x1522>
  40a8fa:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  40a8fe:	4613      	mov	r3, r2
  40a900:	e001      	b.n	40a906 <_vfprintf_r+0x120e>
  40a902:	f813 1b01 	ldrb.w	r1, [r3], #1
  40a906:	f800 1b01 	strb.w	r1, [r0], #1
  40a90a:	42a3      	cmp	r3, r4
  40a90c:	d1f9      	bne.n	40a902 <_vfprintf_r+0x120a>
  40a90e:	3301      	adds	r3, #1
  40a910:	1a9b      	subs	r3, r3, r2
  40a912:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40a916:	4413      	add	r3, r2
  40a918:	aa1f      	add	r2, sp, #124	; 0x7c
  40a91a:	1a9b      	subs	r3, r3, r2
  40a91c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a91e:	9319      	str	r3, [sp, #100]	; 0x64
  40a920:	2a01      	cmp	r2, #1
  40a922:	4413      	add	r3, r2
  40a924:	930d      	str	r3, [sp, #52]	; 0x34
  40a926:	f340 8145 	ble.w	40abb4 <_vfprintf_r+0x14bc>
  40a92a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a92c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40a92e:	4413      	add	r3, r2
  40a930:	930d      	str	r3, [sp, #52]	; 0x34
  40a932:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40a936:	9307      	str	r3, [sp, #28]
  40a938:	2300      	movs	r3, #0
  40a93a:	9310      	str	r3, [sp, #64]	; 0x40
  40a93c:	e700      	b.n	40a740 <_vfprintf_r+0x1048>
  40a93e:	aa23      	add	r2, sp, #140	; 0x8c
  40a940:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a942:	9808      	ldr	r0, [sp, #32]
  40a944:	f003 f924 	bl	40db90 <__sprint_r>
  40a948:	2800      	cmp	r0, #0
  40a94a:	f47f ac5f 	bne.w	40a20c <_vfprintf_r+0xb14>
  40a94e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a950:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a954:	e4d1      	b.n	40a2fa <_vfprintf_r+0xc02>
  40a956:	4623      	mov	r3, r4
  40a958:	e6d5      	b.n	40a706 <_vfprintf_r+0x100e>
  40a95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a95c:	9710      	str	r7, [sp, #64]	; 0x40
  40a95e:	2b06      	cmp	r3, #6
  40a960:	bf28      	it	cs
  40a962:	2306      	movcs	r3, #6
  40a964:	9709      	str	r7, [sp, #36]	; 0x24
  40a966:	46ba      	mov	sl, r7
  40a968:	9307      	str	r3, [sp, #28]
  40a96a:	950e      	str	r5, [sp, #56]	; 0x38
  40a96c:	f8cd b018 	str.w	fp, [sp, #24]
  40a970:	930d      	str	r3, [sp, #52]	; 0x34
  40a972:	4f48      	ldr	r7, [pc, #288]	; (40aa94 <_vfprintf_r+0x139c>)
  40a974:	f7fe bff2 	b.w	40995c <_vfprintf_r+0x264>
  40a978:	aa23      	add	r2, sp, #140	; 0x8c
  40a97a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a97c:	9808      	ldr	r0, [sp, #32]
  40a97e:	f003 f907 	bl	40db90 <__sprint_r>
  40a982:	2800      	cmp	r0, #0
  40a984:	f47f ac42 	bne.w	40a20c <_vfprintf_r+0xb14>
  40a988:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a98a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a98c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a98e:	1ad3      	subs	r3, r2, r3
  40a990:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a994:	e5b6      	b.n	40a504 <_vfprintf_r+0xe0c>
  40a996:	46a2      	mov	sl, r4
  40a998:	f7ff bb18 	b.w	409fcc <_vfprintf_r+0x8d4>
  40a99c:	a821      	add	r0, sp, #132	; 0x84
  40a99e:	a91e      	add	r1, sp, #120	; 0x78
  40a9a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40a9a2:	9004      	str	r0, [sp, #16]
  40a9a4:	9103      	str	r1, [sp, #12]
  40a9a6:	a81d      	add	r0, sp, #116	; 0x74
  40a9a8:	2103      	movs	r1, #3
  40a9aa:	9002      	str	r0, [sp, #8]
  40a9ac:	9a07      	ldr	r2, [sp, #28]
  40a9ae:	9501      	str	r5, [sp, #4]
  40a9b0:	4653      	mov	r3, sl
  40a9b2:	9100      	str	r1, [sp, #0]
  40a9b4:	9808      	ldr	r0, [sp, #32]
  40a9b6:	f000 fb0b 	bl	40afd0 <_dtoa_r>
  40a9ba:	4607      	mov	r7, r0
  40a9bc:	1944      	adds	r4, r0, r5
  40a9be:	783b      	ldrb	r3, [r7, #0]
  40a9c0:	2b30      	cmp	r3, #48	; 0x30
  40a9c2:	f000 80ca 	beq.w	40ab5a <_vfprintf_r+0x1462>
  40a9c6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40a9c8:	442c      	add	r4, r5
  40a9ca:	e689      	b.n	40a6e0 <_vfprintf_r+0xfe8>
  40a9cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40a9ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a9d0:	4413      	add	r3, r2
  40a9d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40a9d4:	930d      	str	r3, [sp, #52]	; 0x34
  40a9d6:	2a00      	cmp	r2, #0
  40a9d8:	f340 80e4 	ble.w	40aba4 <_vfprintf_r+0x14ac>
  40a9dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40a9e0:	9307      	str	r3, [sp, #28]
  40a9e2:	2667      	movs	r6, #103	; 0x67
  40a9e4:	e6ac      	b.n	40a740 <_vfprintf_r+0x1048>
  40a9e6:	2b00      	cmp	r3, #0
  40a9e8:	f340 80fb 	ble.w	40abe2 <_vfprintf_r+0x14ea>
  40a9ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a9ee:	2a00      	cmp	r2, #0
  40a9f0:	f040 80ce 	bne.w	40ab90 <_vfprintf_r+0x1498>
  40a9f4:	f01b 0f01 	tst.w	fp, #1
  40a9f8:	f040 80ca 	bne.w	40ab90 <_vfprintf_r+0x1498>
  40a9fc:	9307      	str	r3, [sp, #28]
  40a9fe:	930d      	str	r3, [sp, #52]	; 0x34
  40aa00:	e69e      	b.n	40a740 <_vfprintf_r+0x1048>
  40aa02:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40aa04:	9307      	str	r3, [sp, #28]
  40aa06:	930d      	str	r3, [sp, #52]	; 0x34
  40aa08:	9009      	str	r0, [sp, #36]	; 0x24
  40aa0a:	950e      	str	r5, [sp, #56]	; 0x38
  40aa0c:	f8cd b018 	str.w	fp, [sp, #24]
  40aa10:	9010      	str	r0, [sp, #64]	; 0x40
  40aa12:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40aa16:	f7fe bfa1 	b.w	40995c <_vfprintf_r+0x264>
  40aa1a:	aa23      	add	r2, sp, #140	; 0x8c
  40aa1c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40aa1e:	9808      	ldr	r0, [sp, #32]
  40aa20:	f003 f8b6 	bl	40db90 <__sprint_r>
  40aa24:	2800      	cmp	r0, #0
  40aa26:	f47f abf1 	bne.w	40a20c <_vfprintf_r+0xb14>
  40aa2a:	991d      	ldr	r1, [sp, #116]	; 0x74
  40aa2c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40aa2e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40aa32:	e6d0      	b.n	40a7d6 <_vfprintf_r+0x10de>
  40aa34:	2e47      	cmp	r6, #71	; 0x47
  40aa36:	f47f ae52 	bne.w	40a6de <_vfprintf_r+0xfe6>
  40aa3a:	f01b 0f01 	tst.w	fp, #1
  40aa3e:	f000 80da 	beq.w	40abf6 <_vfprintf_r+0x14fe>
  40aa42:	2e46      	cmp	r6, #70	; 0x46
  40aa44:	eb07 0405 	add.w	r4, r7, r5
  40aa48:	d0b9      	beq.n	40a9be <_vfprintf_r+0x12c6>
  40aa4a:	e649      	b.n	40a6e0 <_vfprintf_r+0xfe8>
  40aa4c:	a821      	add	r0, sp, #132	; 0x84
  40aa4e:	a91e      	add	r1, sp, #120	; 0x78
  40aa50:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40aa52:	9004      	str	r0, [sp, #16]
  40aa54:	9103      	str	r1, [sp, #12]
  40aa56:	a81d      	add	r0, sp, #116	; 0x74
  40aa58:	2103      	movs	r1, #3
  40aa5a:	9002      	str	r0, [sp, #8]
  40aa5c:	9a07      	ldr	r2, [sp, #28]
  40aa5e:	9401      	str	r4, [sp, #4]
  40aa60:	4653      	mov	r3, sl
  40aa62:	9100      	str	r1, [sp, #0]
  40aa64:	9808      	ldr	r0, [sp, #32]
  40aa66:	f000 fab3 	bl	40afd0 <_dtoa_r>
  40aa6a:	4625      	mov	r5, r4
  40aa6c:	4607      	mov	r7, r0
  40aa6e:	e7e8      	b.n	40aa42 <_vfprintf_r+0x134a>
  40aa70:	2300      	movs	r3, #0
  40aa72:	9309      	str	r3, [sp, #36]	; 0x24
  40aa74:	f7fe bec1 	b.w	4097fa <_vfprintf_r+0x102>
  40aa78:	424e      	negs	r6, r1
  40aa7a:	3110      	adds	r1, #16
  40aa7c:	4d06      	ldr	r5, [pc, #24]	; (40aa98 <_vfprintf_r+0x13a0>)
  40aa7e:	da43      	bge.n	40ab08 <_vfprintf_r+0x1410>
  40aa80:	2410      	movs	r4, #16
  40aa82:	f8dd a020 	ldr.w	sl, [sp, #32]
  40aa86:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40aa8a:	e00c      	b.n	40aaa6 <_vfprintf_r+0x13ae>
  40aa8c:	0040fa7c 	.word	0x0040fa7c
  40aa90:	66666667 	.word	0x66666667
  40aa94:	0040fa74 	.word	0x0040fa74
  40aa98:	0040fab0 	.word	0x0040fab0
  40aa9c:	f108 0808 	add.w	r8, r8, #8
  40aaa0:	3e10      	subs	r6, #16
  40aaa2:	2e10      	cmp	r6, #16
  40aaa4:	dd30      	ble.n	40ab08 <_vfprintf_r+0x1410>
  40aaa6:	3301      	adds	r3, #1
  40aaa8:	3210      	adds	r2, #16
  40aaaa:	2b07      	cmp	r3, #7
  40aaac:	9225      	str	r2, [sp, #148]	; 0x94
  40aaae:	9324      	str	r3, [sp, #144]	; 0x90
  40aab0:	f8c8 5000 	str.w	r5, [r8]
  40aab4:	f8c8 4004 	str.w	r4, [r8, #4]
  40aab8:	ddf0      	ble.n	40aa9c <_vfprintf_r+0x13a4>
  40aaba:	aa23      	add	r2, sp, #140	; 0x8c
  40aabc:	4659      	mov	r1, fp
  40aabe:	4650      	mov	r0, sl
  40aac0:	f003 f866 	bl	40db90 <__sprint_r>
  40aac4:	2800      	cmp	r0, #0
  40aac6:	f47f aeba 	bne.w	40a83e <_vfprintf_r+0x1146>
  40aaca:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40aacc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40aace:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40aad2:	e7e5      	b.n	40aaa0 <_vfprintf_r+0x13a8>
  40aad4:	aa23      	add	r2, sp, #140	; 0x8c
  40aad6:	990a      	ldr	r1, [sp, #40]	; 0x28
  40aad8:	9808      	ldr	r0, [sp, #32]
  40aada:	f003 f859 	bl	40db90 <__sprint_r>
  40aade:	2800      	cmp	r0, #0
  40aae0:	f47f ab94 	bne.w	40a20c <_vfprintf_r+0xb14>
  40aae4:	991d      	ldr	r1, [sp, #116]	; 0x74
  40aae6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40aae8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40aaea:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40aaee:	e68a      	b.n	40a806 <_vfprintf_r+0x110e>
  40aaf0:	9808      	ldr	r0, [sp, #32]
  40aaf2:	aa23      	add	r2, sp, #140	; 0x8c
  40aaf4:	4651      	mov	r1, sl
  40aaf6:	f003 f84b 	bl	40db90 <__sprint_r>
  40aafa:	2800      	cmp	r0, #0
  40aafc:	f43f aa64 	beq.w	409fc8 <_vfprintf_r+0x8d0>
  40ab00:	f7ff ba64 	b.w	409fcc <_vfprintf_r+0x8d4>
  40ab04:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40ab06:	e5fe      	b.n	40a706 <_vfprintf_r+0x100e>
  40ab08:	3301      	adds	r3, #1
  40ab0a:	4432      	add	r2, r6
  40ab0c:	2b07      	cmp	r3, #7
  40ab0e:	e888 0060 	stmia.w	r8, {r5, r6}
  40ab12:	9225      	str	r2, [sp, #148]	; 0x94
  40ab14:	9324      	str	r3, [sp, #144]	; 0x90
  40ab16:	f108 0808 	add.w	r8, r8, #8
  40ab1a:	f77f ae77 	ble.w	40a80c <_vfprintf_r+0x1114>
  40ab1e:	aa23      	add	r2, sp, #140	; 0x8c
  40ab20:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ab22:	9808      	ldr	r0, [sp, #32]
  40ab24:	f003 f834 	bl	40db90 <__sprint_r>
  40ab28:	2800      	cmp	r0, #0
  40ab2a:	f47f ab6f 	bne.w	40a20c <_vfprintf_r+0xb14>
  40ab2e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40ab30:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ab32:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40ab36:	e669      	b.n	40a80c <_vfprintf_r+0x1114>
  40ab38:	3330      	adds	r3, #48	; 0x30
  40ab3a:	2230      	movs	r2, #48	; 0x30
  40ab3c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40ab40:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  40ab44:	ab20      	add	r3, sp, #128	; 0x80
  40ab46:	e6e7      	b.n	40a918 <_vfprintf_r+0x1220>
  40ab48:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40ab4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40ab4c:	4413      	add	r3, r2
  40ab4e:	930d      	str	r3, [sp, #52]	; 0x34
  40ab50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ab54:	9307      	str	r3, [sp, #28]
  40ab56:	2667      	movs	r6, #103	; 0x67
  40ab58:	e5f2      	b.n	40a740 <_vfprintf_r+0x1048>
  40ab5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40ab5c:	9807      	ldr	r0, [sp, #28]
  40ab5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40ab60:	4651      	mov	r1, sl
  40ab62:	f003 fb1b 	bl	40e19c <__aeabi_dcmpeq>
  40ab66:	2800      	cmp	r0, #0
  40ab68:	f47f af2d 	bne.w	40a9c6 <_vfprintf_r+0x12ce>
  40ab6c:	f1c5 0501 	rsb	r5, r5, #1
  40ab70:	951d      	str	r5, [sp, #116]	; 0x74
  40ab72:	442c      	add	r4, r5
  40ab74:	e5b4      	b.n	40a6e0 <_vfprintf_r+0xfe8>
  40ab76:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ab78:	4f33      	ldr	r7, [pc, #204]	; (40ac48 <_vfprintf_r+0x1550>)
  40ab7a:	2b00      	cmp	r3, #0
  40ab7c:	bfb6      	itet	lt
  40ab7e:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  40ab82:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  40ab86:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  40ab8a:	4b30      	ldr	r3, [pc, #192]	; (40ac4c <_vfprintf_r+0x1554>)
  40ab8c:	f7ff b9d1 	b.w	409f32 <_vfprintf_r+0x83a>
  40ab90:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40ab92:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40ab94:	4413      	add	r3, r2
  40ab96:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40ab98:	441a      	add	r2, r3
  40ab9a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40ab9e:	920d      	str	r2, [sp, #52]	; 0x34
  40aba0:	9307      	str	r3, [sp, #28]
  40aba2:	e5cd      	b.n	40a740 <_vfprintf_r+0x1048>
  40aba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40aba6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40aba8:	f1c3 0301 	rsb	r3, r3, #1
  40abac:	441a      	add	r2, r3
  40abae:	4613      	mov	r3, r2
  40abb0:	920d      	str	r2, [sp, #52]	; 0x34
  40abb2:	e713      	b.n	40a9dc <_vfprintf_r+0x12e4>
  40abb4:	f01b 0301 	ands.w	r3, fp, #1
  40abb8:	9310      	str	r3, [sp, #64]	; 0x40
  40abba:	f47f aeb6 	bne.w	40a92a <_vfprintf_r+0x1232>
  40abbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40abc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40abc4:	9307      	str	r3, [sp, #28]
  40abc6:	e5bb      	b.n	40a740 <_vfprintf_r+0x1048>
  40abc8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40abca:	f899 6001 	ldrb.w	r6, [r9, #1]
  40abce:	6823      	ldr	r3, [r4, #0]
  40abd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  40abd4:	9309      	str	r3, [sp, #36]	; 0x24
  40abd6:	4623      	mov	r3, r4
  40abd8:	3304      	adds	r3, #4
  40abda:	4681      	mov	r9, r0
  40abdc:	930e      	str	r3, [sp, #56]	; 0x38
  40abde:	f7fe be0a 	b.w	4097f6 <_vfprintf_r+0xfe>
  40abe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40abe4:	b913      	cbnz	r3, 40abec <_vfprintf_r+0x14f4>
  40abe6:	f01b 0f01 	tst.w	fp, #1
  40abea:	d002      	beq.n	40abf2 <_vfprintf_r+0x14fa>
  40abec:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40abee:	3301      	adds	r3, #1
  40abf0:	e7d1      	b.n	40ab96 <_vfprintf_r+0x149e>
  40abf2:	2301      	movs	r3, #1
  40abf4:	e702      	b.n	40a9fc <_vfprintf_r+0x1304>
  40abf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40abf8:	1bdb      	subs	r3, r3, r7
  40abfa:	9311      	str	r3, [sp, #68]	; 0x44
  40abfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40abfe:	2b47      	cmp	r3, #71	; 0x47
  40ac00:	f43f ae40 	beq.w	40a884 <_vfprintf_r+0x118c>
  40ac04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ac06:	9310      	str	r3, [sp, #64]	; 0x40
  40ac08:	e647      	b.n	40a89a <_vfprintf_r+0x11a2>
  40ac0a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40ac0e:	f7ff b81d 	b.w	409c4c <_vfprintf_r+0x554>
  40ac12:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40ac16:	f7ff b918 	b.w	409e4a <_vfprintf_r+0x752>
  40ac1a:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40ac1e:	e67b      	b.n	40a918 <_vfprintf_r+0x1220>
  40ac20:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40ac24:	f7ff b866 	b.w	409cf4 <_vfprintf_r+0x5fc>
  40ac28:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40ac2c:	f7ff b9ac 	b.w	409f88 <_vfprintf_r+0x890>
  40ac30:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40ac34:	f7ff b934 	b.w	409ea0 <_vfprintf_r+0x7a8>
  40ac38:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40ac3c:	f7ff b8b0 	b.w	409da0 <_vfprintf_r+0x6a8>
  40ac40:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40ac44:	f7ff b945 	b.w	409ed2 <_vfprintf_r+0x7da>
  40ac48:	0040fa48 	.word	0x0040fa48
  40ac4c:	0040fa44 	.word	0x0040fa44

0040ac50 <__sbprintf>:
  40ac50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ac54:	460c      	mov	r4, r1
  40ac56:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40ac5a:	8989      	ldrh	r1, [r1, #12]
  40ac5c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40ac5e:	89e5      	ldrh	r5, [r4, #14]
  40ac60:	9619      	str	r6, [sp, #100]	; 0x64
  40ac62:	f021 0102 	bic.w	r1, r1, #2
  40ac66:	4606      	mov	r6, r0
  40ac68:	69e0      	ldr	r0, [r4, #28]
  40ac6a:	f8ad 100c 	strh.w	r1, [sp, #12]
  40ac6e:	4617      	mov	r7, r2
  40ac70:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40ac74:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40ac76:	f8ad 500e 	strh.w	r5, [sp, #14]
  40ac7a:	4698      	mov	r8, r3
  40ac7c:	ad1a      	add	r5, sp, #104	; 0x68
  40ac7e:	2300      	movs	r3, #0
  40ac80:	9007      	str	r0, [sp, #28]
  40ac82:	a816      	add	r0, sp, #88	; 0x58
  40ac84:	9209      	str	r2, [sp, #36]	; 0x24
  40ac86:	9306      	str	r3, [sp, #24]
  40ac88:	9500      	str	r5, [sp, #0]
  40ac8a:	9504      	str	r5, [sp, #16]
  40ac8c:	9102      	str	r1, [sp, #8]
  40ac8e:	9105      	str	r1, [sp, #20]
  40ac90:	f001 fd30 	bl	40c6f4 <__retarget_lock_init_recursive>
  40ac94:	4643      	mov	r3, r8
  40ac96:	463a      	mov	r2, r7
  40ac98:	4669      	mov	r1, sp
  40ac9a:	4630      	mov	r0, r6
  40ac9c:	f7fe fd2c 	bl	4096f8 <_vfprintf_r>
  40aca0:	1e05      	subs	r5, r0, #0
  40aca2:	db07      	blt.n	40acb4 <__sbprintf+0x64>
  40aca4:	4630      	mov	r0, r6
  40aca6:	4669      	mov	r1, sp
  40aca8:	f001 f95c 	bl	40bf64 <_fflush_r>
  40acac:	2800      	cmp	r0, #0
  40acae:	bf18      	it	ne
  40acb0:	f04f 35ff 	movne.w	r5, #4294967295
  40acb4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40acb8:	065b      	lsls	r3, r3, #25
  40acba:	d503      	bpl.n	40acc4 <__sbprintf+0x74>
  40acbc:	89a3      	ldrh	r3, [r4, #12]
  40acbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40acc2:	81a3      	strh	r3, [r4, #12]
  40acc4:	9816      	ldr	r0, [sp, #88]	; 0x58
  40acc6:	f001 fd17 	bl	40c6f8 <__retarget_lock_close_recursive>
  40acca:	4628      	mov	r0, r5
  40accc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40acd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040acd4 <__swsetup_r>:
  40acd4:	b538      	push	{r3, r4, r5, lr}
  40acd6:	4b30      	ldr	r3, [pc, #192]	; (40ad98 <__swsetup_r+0xc4>)
  40acd8:	681b      	ldr	r3, [r3, #0]
  40acda:	4605      	mov	r5, r0
  40acdc:	460c      	mov	r4, r1
  40acde:	b113      	cbz	r3, 40ace6 <__swsetup_r+0x12>
  40ace0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40ace2:	2a00      	cmp	r2, #0
  40ace4:	d038      	beq.n	40ad58 <__swsetup_r+0x84>
  40ace6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40acea:	b293      	uxth	r3, r2
  40acec:	0718      	lsls	r0, r3, #28
  40acee:	d50c      	bpl.n	40ad0a <__swsetup_r+0x36>
  40acf0:	6920      	ldr	r0, [r4, #16]
  40acf2:	b1a8      	cbz	r0, 40ad20 <__swsetup_r+0x4c>
  40acf4:	f013 0201 	ands.w	r2, r3, #1
  40acf8:	d01e      	beq.n	40ad38 <__swsetup_r+0x64>
  40acfa:	6963      	ldr	r3, [r4, #20]
  40acfc:	2200      	movs	r2, #0
  40acfe:	425b      	negs	r3, r3
  40ad00:	61a3      	str	r3, [r4, #24]
  40ad02:	60a2      	str	r2, [r4, #8]
  40ad04:	b1f0      	cbz	r0, 40ad44 <__swsetup_r+0x70>
  40ad06:	2000      	movs	r0, #0
  40ad08:	bd38      	pop	{r3, r4, r5, pc}
  40ad0a:	06d9      	lsls	r1, r3, #27
  40ad0c:	d53c      	bpl.n	40ad88 <__swsetup_r+0xb4>
  40ad0e:	0758      	lsls	r0, r3, #29
  40ad10:	d426      	bmi.n	40ad60 <__swsetup_r+0x8c>
  40ad12:	6920      	ldr	r0, [r4, #16]
  40ad14:	f042 0308 	orr.w	r3, r2, #8
  40ad18:	81a3      	strh	r3, [r4, #12]
  40ad1a:	b29b      	uxth	r3, r3
  40ad1c:	2800      	cmp	r0, #0
  40ad1e:	d1e9      	bne.n	40acf4 <__swsetup_r+0x20>
  40ad20:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40ad24:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40ad28:	d0e4      	beq.n	40acf4 <__swsetup_r+0x20>
  40ad2a:	4628      	mov	r0, r5
  40ad2c:	4621      	mov	r1, r4
  40ad2e:	f001 fd17 	bl	40c760 <__smakebuf_r>
  40ad32:	89a3      	ldrh	r3, [r4, #12]
  40ad34:	6920      	ldr	r0, [r4, #16]
  40ad36:	e7dd      	b.n	40acf4 <__swsetup_r+0x20>
  40ad38:	0799      	lsls	r1, r3, #30
  40ad3a:	bf58      	it	pl
  40ad3c:	6962      	ldrpl	r2, [r4, #20]
  40ad3e:	60a2      	str	r2, [r4, #8]
  40ad40:	2800      	cmp	r0, #0
  40ad42:	d1e0      	bne.n	40ad06 <__swsetup_r+0x32>
  40ad44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ad48:	061a      	lsls	r2, r3, #24
  40ad4a:	d5dd      	bpl.n	40ad08 <__swsetup_r+0x34>
  40ad4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ad50:	81a3      	strh	r3, [r4, #12]
  40ad52:	f04f 30ff 	mov.w	r0, #4294967295
  40ad56:	bd38      	pop	{r3, r4, r5, pc}
  40ad58:	4618      	mov	r0, r3
  40ad5a:	f001 f96d 	bl	40c038 <__sinit>
  40ad5e:	e7c2      	b.n	40ace6 <__swsetup_r+0x12>
  40ad60:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40ad62:	b151      	cbz	r1, 40ad7a <__swsetup_r+0xa6>
  40ad64:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40ad68:	4299      	cmp	r1, r3
  40ad6a:	d004      	beq.n	40ad76 <__swsetup_r+0xa2>
  40ad6c:	4628      	mov	r0, r5
  40ad6e:	f001 fa05 	bl	40c17c <_free_r>
  40ad72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40ad76:	2300      	movs	r3, #0
  40ad78:	6323      	str	r3, [r4, #48]	; 0x30
  40ad7a:	2300      	movs	r3, #0
  40ad7c:	6920      	ldr	r0, [r4, #16]
  40ad7e:	6063      	str	r3, [r4, #4]
  40ad80:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40ad84:	6020      	str	r0, [r4, #0]
  40ad86:	e7c5      	b.n	40ad14 <__swsetup_r+0x40>
  40ad88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40ad8c:	2309      	movs	r3, #9
  40ad8e:	602b      	str	r3, [r5, #0]
  40ad90:	f04f 30ff 	mov.w	r0, #4294967295
  40ad94:	81a2      	strh	r2, [r4, #12]
  40ad96:	bd38      	pop	{r3, r4, r5, pc}
  40ad98:	20000378 	.word	0x20000378

0040ad9c <register_fini>:
  40ad9c:	4b02      	ldr	r3, [pc, #8]	; (40ada8 <register_fini+0xc>)
  40ad9e:	b113      	cbz	r3, 40ada6 <register_fini+0xa>
  40ada0:	4802      	ldr	r0, [pc, #8]	; (40adac <register_fini+0x10>)
  40ada2:	f000 b879 	b.w	40ae98 <atexit>
  40ada6:	4770      	bx	lr
  40ada8:	00000000 	.word	0x00000000
  40adac:	0040c0a9 	.word	0x0040c0a9

0040adb0 <__call_exitprocs>:
  40adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40adb4:	4b35      	ldr	r3, [pc, #212]	; (40ae8c <__call_exitprocs+0xdc>)
  40adb6:	b085      	sub	sp, #20
  40adb8:	460e      	mov	r6, r1
  40adba:	9001      	str	r0, [sp, #4]
  40adbc:	6818      	ldr	r0, [r3, #0]
  40adbe:	f001 fc9d 	bl	40c6fc <__retarget_lock_acquire_recursive>
  40adc2:	4b33      	ldr	r3, [pc, #204]	; (40ae90 <__call_exitprocs+0xe0>)
  40adc4:	681b      	ldr	r3, [r3, #0]
  40adc6:	9302      	str	r3, [sp, #8]
  40adc8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
  40adcc:	9303      	str	r3, [sp, #12]
  40adce:	9b02      	ldr	r3, [sp, #8]
  40add0:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
  40add4:	b337      	cbz	r7, 40ae24 <__call_exitprocs+0x74>
  40add6:	f8dd a00c 	ldr.w	sl, [sp, #12]
  40adda:	f04f 0901 	mov.w	r9, #1
  40adde:	46d3      	mov	fp, sl
  40ade0:	687c      	ldr	r4, [r7, #4]
  40ade2:	1e65      	subs	r5, r4, #1
  40ade4:	d40e      	bmi.n	40ae04 <__call_exitprocs+0x54>
  40ade6:	3401      	adds	r4, #1
  40ade8:	eb07 0484 	add.w	r4, r7, r4, lsl #2
  40adec:	f04f 0800 	mov.w	r8, #0
  40adf0:	b1fe      	cbz	r6, 40ae32 <__call_exitprocs+0x82>
  40adf2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
  40adf6:	429e      	cmp	r6, r3
  40adf8:	d01b      	beq.n	40ae32 <__call_exitprocs+0x82>
  40adfa:	3d01      	subs	r5, #1
  40adfc:	1c6b      	adds	r3, r5, #1
  40adfe:	f1a4 0404 	sub.w	r4, r4, #4
  40ae02:	d1f5      	bne.n	40adf0 <__call_exitprocs+0x40>
  40ae04:	4b23      	ldr	r3, [pc, #140]	; (40ae94 <__call_exitprocs+0xe4>)
  40ae06:	b16b      	cbz	r3, 40ae24 <__call_exitprocs+0x74>
  40ae08:	687b      	ldr	r3, [r7, #4]
  40ae0a:	2b00      	cmp	r3, #0
  40ae0c:	d139      	bne.n	40ae82 <__call_exitprocs+0xd2>
  40ae0e:	683b      	ldr	r3, [r7, #0]
  40ae10:	b143      	cbz	r3, 40ae24 <__call_exitprocs+0x74>
  40ae12:	4638      	mov	r0, r7
  40ae14:	f8cb 3000 	str.w	r3, [fp]
  40ae18:	f001 fcf4 	bl	40c804 <free>
  40ae1c:	f8db 7000 	ldr.w	r7, [fp]
  40ae20:	2f00      	cmp	r7, #0
  40ae22:	d1dd      	bne.n	40ade0 <__call_exitprocs+0x30>
  40ae24:	4b19      	ldr	r3, [pc, #100]	; (40ae8c <__call_exitprocs+0xdc>)
  40ae26:	6818      	ldr	r0, [r3, #0]
  40ae28:	b005      	add	sp, #20
  40ae2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ae2e:	f001 bc67 	b.w	40c700 <__retarget_lock_release_recursive>
  40ae32:	687b      	ldr	r3, [r7, #4]
  40ae34:	6822      	ldr	r2, [r4, #0]
  40ae36:	3b01      	subs	r3, #1
  40ae38:	42ab      	cmp	r3, r5
  40ae3a:	bf0c      	ite	eq
  40ae3c:	607d      	streq	r5, [r7, #4]
  40ae3e:	f8c4 8000 	strne.w	r8, [r4]
  40ae42:	2a00      	cmp	r2, #0
  40ae44:	d0d9      	beq.n	40adfa <__call_exitprocs+0x4a>
  40ae46:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
  40ae4a:	f8d7 a004 	ldr.w	sl, [r7, #4]
  40ae4e:	fa09 f305 	lsl.w	r3, r9, r5
  40ae52:	420b      	tst	r3, r1
  40ae54:	d00f      	beq.n	40ae76 <__call_exitprocs+0xc6>
  40ae56:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
  40ae5a:	420b      	tst	r3, r1
  40ae5c:	d10d      	bne.n	40ae7a <__call_exitprocs+0xca>
  40ae5e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  40ae62:	9801      	ldr	r0, [sp, #4]
  40ae64:	4790      	blx	r2
  40ae66:	687b      	ldr	r3, [r7, #4]
  40ae68:	4553      	cmp	r3, sl
  40ae6a:	d1b0      	bne.n	40adce <__call_exitprocs+0x1e>
  40ae6c:	f8db 3000 	ldr.w	r3, [fp]
  40ae70:	42bb      	cmp	r3, r7
  40ae72:	d0c2      	beq.n	40adfa <__call_exitprocs+0x4a>
  40ae74:	e7ab      	b.n	40adce <__call_exitprocs+0x1e>
  40ae76:	4790      	blx	r2
  40ae78:	e7f5      	b.n	40ae66 <__call_exitprocs+0xb6>
  40ae7a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
  40ae7e:	4790      	blx	r2
  40ae80:	e7f1      	b.n	40ae66 <__call_exitprocs+0xb6>
  40ae82:	46bb      	mov	fp, r7
  40ae84:	683f      	ldr	r7, [r7, #0]
  40ae86:	2f00      	cmp	r7, #0
  40ae88:	d1aa      	bne.n	40ade0 <__call_exitprocs+0x30>
  40ae8a:	e7cb      	b.n	40ae24 <__call_exitprocs+0x74>
  40ae8c:	200007a8 	.word	0x200007a8
  40ae90:	0040fa38 	.word	0x0040fa38
  40ae94:	0040c805 	.word	0x0040c805

0040ae98 <atexit>:
  40ae98:	2300      	movs	r3, #0
  40ae9a:	4601      	mov	r1, r0
  40ae9c:	461a      	mov	r2, r3
  40ae9e:	4618      	mov	r0, r3
  40aea0:	f002 be96 	b.w	40dbd0 <__register_exitproc>

0040aea4 <quorem>:
  40aea4:	6902      	ldr	r2, [r0, #16]
  40aea6:	690b      	ldr	r3, [r1, #16]
  40aea8:	4293      	cmp	r3, r2
  40aeaa:	f300 808d 	bgt.w	40afc8 <quorem+0x124>
  40aeae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40aeb2:	f103 38ff 	add.w	r8, r3, #4294967295
  40aeb6:	f101 0714 	add.w	r7, r1, #20
  40aeba:	f100 0b14 	add.w	fp, r0, #20
  40aebe:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40aec2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40aec6:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40aeca:	b083      	sub	sp, #12
  40aecc:	3201      	adds	r2, #1
  40aece:	fbb3 f9f2 	udiv	r9, r3, r2
  40aed2:	eb0b 0304 	add.w	r3, fp, r4
  40aed6:	9400      	str	r4, [sp, #0]
  40aed8:	eb07 0a04 	add.w	sl, r7, r4
  40aedc:	9301      	str	r3, [sp, #4]
  40aede:	f1b9 0f00 	cmp.w	r9, #0
  40aee2:	d039      	beq.n	40af58 <quorem+0xb4>
  40aee4:	2500      	movs	r5, #0
  40aee6:	462e      	mov	r6, r5
  40aee8:	46bc      	mov	ip, r7
  40aeea:	46de      	mov	lr, fp
  40aeec:	f85c 4b04 	ldr.w	r4, [ip], #4
  40aef0:	f8de 3000 	ldr.w	r3, [lr]
  40aef4:	b2a2      	uxth	r2, r4
  40aef6:	fb09 5502 	mla	r5, r9, r2, r5
  40aefa:	0c22      	lsrs	r2, r4, #16
  40aefc:	0c2c      	lsrs	r4, r5, #16
  40aefe:	fb09 4202 	mla	r2, r9, r2, r4
  40af02:	b2ad      	uxth	r5, r5
  40af04:	1b75      	subs	r5, r6, r5
  40af06:	b296      	uxth	r6, r2
  40af08:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40af0c:	fa15 f383 	uxtah	r3, r5, r3
  40af10:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40af14:	b29b      	uxth	r3, r3
  40af16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40af1a:	45e2      	cmp	sl, ip
  40af1c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40af20:	f84e 3b04 	str.w	r3, [lr], #4
  40af24:	ea4f 4626 	mov.w	r6, r6, asr #16
  40af28:	d2e0      	bcs.n	40aeec <quorem+0x48>
  40af2a:	9b00      	ldr	r3, [sp, #0]
  40af2c:	f85b 3003 	ldr.w	r3, [fp, r3]
  40af30:	b993      	cbnz	r3, 40af58 <quorem+0xb4>
  40af32:	9c01      	ldr	r4, [sp, #4]
  40af34:	1f23      	subs	r3, r4, #4
  40af36:	459b      	cmp	fp, r3
  40af38:	d20c      	bcs.n	40af54 <quorem+0xb0>
  40af3a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40af3e:	b94b      	cbnz	r3, 40af54 <quorem+0xb0>
  40af40:	f1a4 0308 	sub.w	r3, r4, #8
  40af44:	e002      	b.n	40af4c <quorem+0xa8>
  40af46:	681a      	ldr	r2, [r3, #0]
  40af48:	3b04      	subs	r3, #4
  40af4a:	b91a      	cbnz	r2, 40af54 <quorem+0xb0>
  40af4c:	459b      	cmp	fp, r3
  40af4e:	f108 38ff 	add.w	r8, r8, #4294967295
  40af52:	d3f8      	bcc.n	40af46 <quorem+0xa2>
  40af54:	f8c0 8010 	str.w	r8, [r0, #16]
  40af58:	4604      	mov	r4, r0
  40af5a:	f002 f9cf 	bl	40d2fc <__mcmp>
  40af5e:	2800      	cmp	r0, #0
  40af60:	db2e      	blt.n	40afc0 <quorem+0x11c>
  40af62:	f109 0901 	add.w	r9, r9, #1
  40af66:	465d      	mov	r5, fp
  40af68:	2300      	movs	r3, #0
  40af6a:	f857 1b04 	ldr.w	r1, [r7], #4
  40af6e:	6828      	ldr	r0, [r5, #0]
  40af70:	b28a      	uxth	r2, r1
  40af72:	1a9a      	subs	r2, r3, r2
  40af74:	0c0b      	lsrs	r3, r1, #16
  40af76:	fa12 f280 	uxtah	r2, r2, r0
  40af7a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40af7e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40af82:	b292      	uxth	r2, r2
  40af84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40af88:	45ba      	cmp	sl, r7
  40af8a:	f845 2b04 	str.w	r2, [r5], #4
  40af8e:	ea4f 4323 	mov.w	r3, r3, asr #16
  40af92:	d2ea      	bcs.n	40af6a <quorem+0xc6>
  40af94:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40af98:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40af9c:	b982      	cbnz	r2, 40afc0 <quorem+0x11c>
  40af9e:	1f1a      	subs	r2, r3, #4
  40afa0:	4593      	cmp	fp, r2
  40afa2:	d20b      	bcs.n	40afbc <quorem+0x118>
  40afa4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40afa8:	b942      	cbnz	r2, 40afbc <quorem+0x118>
  40afaa:	3b08      	subs	r3, #8
  40afac:	e002      	b.n	40afb4 <quorem+0x110>
  40afae:	681a      	ldr	r2, [r3, #0]
  40afb0:	3b04      	subs	r3, #4
  40afb2:	b91a      	cbnz	r2, 40afbc <quorem+0x118>
  40afb4:	459b      	cmp	fp, r3
  40afb6:	f108 38ff 	add.w	r8, r8, #4294967295
  40afba:	d3f8      	bcc.n	40afae <quorem+0x10a>
  40afbc:	f8c4 8010 	str.w	r8, [r4, #16]
  40afc0:	4648      	mov	r0, r9
  40afc2:	b003      	add	sp, #12
  40afc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40afc8:	2000      	movs	r0, #0
  40afca:	4770      	bx	lr
  40afcc:	0000      	movs	r0, r0
	...

0040afd0 <_dtoa_r>:
  40afd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40afd4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40afd6:	b09b      	sub	sp, #108	; 0x6c
  40afd8:	4604      	mov	r4, r0
  40afda:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40afdc:	4692      	mov	sl, r2
  40afde:	469b      	mov	fp, r3
  40afe0:	b141      	cbz	r1, 40aff4 <_dtoa_r+0x24>
  40afe2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40afe4:	604a      	str	r2, [r1, #4]
  40afe6:	2301      	movs	r3, #1
  40afe8:	4093      	lsls	r3, r2
  40afea:	608b      	str	r3, [r1, #8]
  40afec:	f001 ffae 	bl	40cf4c <_Bfree>
  40aff0:	2300      	movs	r3, #0
  40aff2:	6423      	str	r3, [r4, #64]	; 0x40
  40aff4:	f1bb 0f00 	cmp.w	fp, #0
  40aff8:	465d      	mov	r5, fp
  40affa:	db35      	blt.n	40b068 <_dtoa_r+0x98>
  40affc:	2300      	movs	r3, #0
  40affe:	6033      	str	r3, [r6, #0]
  40b000:	4b9d      	ldr	r3, [pc, #628]	; (40b278 <_dtoa_r+0x2a8>)
  40b002:	43ab      	bics	r3, r5
  40b004:	d015      	beq.n	40b032 <_dtoa_r+0x62>
  40b006:	4650      	mov	r0, sl
  40b008:	4659      	mov	r1, fp
  40b00a:	2200      	movs	r2, #0
  40b00c:	2300      	movs	r3, #0
  40b00e:	f003 f8c5 	bl	40e19c <__aeabi_dcmpeq>
  40b012:	4680      	mov	r8, r0
  40b014:	2800      	cmp	r0, #0
  40b016:	d02d      	beq.n	40b074 <_dtoa_r+0xa4>
  40b018:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40b01a:	2301      	movs	r3, #1
  40b01c:	6013      	str	r3, [r2, #0]
  40b01e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40b020:	2b00      	cmp	r3, #0
  40b022:	f000 80bd 	beq.w	40b1a0 <_dtoa_r+0x1d0>
  40b026:	4895      	ldr	r0, [pc, #596]	; (40b27c <_dtoa_r+0x2ac>)
  40b028:	6018      	str	r0, [r3, #0]
  40b02a:	3801      	subs	r0, #1
  40b02c:	b01b      	add	sp, #108	; 0x6c
  40b02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b032:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40b034:	f242 730f 	movw	r3, #9999	; 0x270f
  40b038:	6013      	str	r3, [r2, #0]
  40b03a:	f1ba 0f00 	cmp.w	sl, #0
  40b03e:	d10d      	bne.n	40b05c <_dtoa_r+0x8c>
  40b040:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40b044:	b955      	cbnz	r5, 40b05c <_dtoa_r+0x8c>
  40b046:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40b048:	488d      	ldr	r0, [pc, #564]	; (40b280 <_dtoa_r+0x2b0>)
  40b04a:	2b00      	cmp	r3, #0
  40b04c:	d0ee      	beq.n	40b02c <_dtoa_r+0x5c>
  40b04e:	f100 0308 	add.w	r3, r0, #8
  40b052:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40b054:	6013      	str	r3, [r2, #0]
  40b056:	b01b      	add	sp, #108	; 0x6c
  40b058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b05c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40b05e:	4889      	ldr	r0, [pc, #548]	; (40b284 <_dtoa_r+0x2b4>)
  40b060:	2b00      	cmp	r3, #0
  40b062:	d0e3      	beq.n	40b02c <_dtoa_r+0x5c>
  40b064:	1cc3      	adds	r3, r0, #3
  40b066:	e7f4      	b.n	40b052 <_dtoa_r+0x82>
  40b068:	2301      	movs	r3, #1
  40b06a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40b06e:	6033      	str	r3, [r6, #0]
  40b070:	46ab      	mov	fp, r5
  40b072:	e7c5      	b.n	40b000 <_dtoa_r+0x30>
  40b074:	aa18      	add	r2, sp, #96	; 0x60
  40b076:	ab19      	add	r3, sp, #100	; 0x64
  40b078:	9201      	str	r2, [sp, #4]
  40b07a:	9300      	str	r3, [sp, #0]
  40b07c:	4652      	mov	r2, sl
  40b07e:	465b      	mov	r3, fp
  40b080:	4620      	mov	r0, r4
  40b082:	f002 f9db 	bl	40d43c <__d2b>
  40b086:	0d2b      	lsrs	r3, r5, #20
  40b088:	4681      	mov	r9, r0
  40b08a:	d071      	beq.n	40b170 <_dtoa_r+0x1a0>
  40b08c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  40b090:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40b094:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40b096:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40b09a:	4650      	mov	r0, sl
  40b09c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  40b0a0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40b0a4:	2200      	movs	r2, #0
  40b0a6:	4b78      	ldr	r3, [pc, #480]	; (40b288 <_dtoa_r+0x2b8>)
  40b0a8:	f7fb fe1a 	bl	406ce0 <__aeabi_dsub>
  40b0ac:	a36c      	add	r3, pc, #432	; (adr r3, 40b260 <_dtoa_r+0x290>)
  40b0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b0b2:	f7fb ffc9 	bl	407048 <__aeabi_dmul>
  40b0b6:	a36c      	add	r3, pc, #432	; (adr r3, 40b268 <_dtoa_r+0x298>)
  40b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b0bc:	f7fb fe12 	bl	406ce4 <__adddf3>
  40b0c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40b0c4:	4630      	mov	r0, r6
  40b0c6:	f7fb ff59 	bl	406f7c <__aeabi_i2d>
  40b0ca:	a369      	add	r3, pc, #420	; (adr r3, 40b270 <_dtoa_r+0x2a0>)
  40b0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b0d0:	f7fb ffba 	bl	407048 <__aeabi_dmul>
  40b0d4:	4602      	mov	r2, r0
  40b0d6:	460b      	mov	r3, r1
  40b0d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40b0dc:	f7fb fe02 	bl	406ce4 <__adddf3>
  40b0e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40b0e4:	f003 f8a2 	bl	40e22c <__aeabi_d2iz>
  40b0e8:	2200      	movs	r2, #0
  40b0ea:	9002      	str	r0, [sp, #8]
  40b0ec:	2300      	movs	r3, #0
  40b0ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40b0f2:	f003 f85d 	bl	40e1b0 <__aeabi_dcmplt>
  40b0f6:	2800      	cmp	r0, #0
  40b0f8:	f040 8173 	bne.w	40b3e2 <_dtoa_r+0x412>
  40b0fc:	9d02      	ldr	r5, [sp, #8]
  40b0fe:	2d16      	cmp	r5, #22
  40b100:	f200 815d 	bhi.w	40b3be <_dtoa_r+0x3ee>
  40b104:	4b61      	ldr	r3, [pc, #388]	; (40b28c <_dtoa_r+0x2bc>)
  40b106:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40b10a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40b10e:	4652      	mov	r2, sl
  40b110:	465b      	mov	r3, fp
  40b112:	f003 f86b 	bl	40e1ec <__aeabi_dcmpgt>
  40b116:	2800      	cmp	r0, #0
  40b118:	f000 81c5 	beq.w	40b4a6 <_dtoa_r+0x4d6>
  40b11c:	1e6b      	subs	r3, r5, #1
  40b11e:	9302      	str	r3, [sp, #8]
  40b120:	2300      	movs	r3, #0
  40b122:	930e      	str	r3, [sp, #56]	; 0x38
  40b124:	1bbf      	subs	r7, r7, r6
  40b126:	1e7b      	subs	r3, r7, #1
  40b128:	9306      	str	r3, [sp, #24]
  40b12a:	f100 8154 	bmi.w	40b3d6 <_dtoa_r+0x406>
  40b12e:	2300      	movs	r3, #0
  40b130:	9308      	str	r3, [sp, #32]
  40b132:	9b02      	ldr	r3, [sp, #8]
  40b134:	2b00      	cmp	r3, #0
  40b136:	f2c0 8145 	blt.w	40b3c4 <_dtoa_r+0x3f4>
  40b13a:	9a06      	ldr	r2, [sp, #24]
  40b13c:	930d      	str	r3, [sp, #52]	; 0x34
  40b13e:	4611      	mov	r1, r2
  40b140:	4419      	add	r1, r3
  40b142:	2300      	movs	r3, #0
  40b144:	9106      	str	r1, [sp, #24]
  40b146:	930c      	str	r3, [sp, #48]	; 0x30
  40b148:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b14a:	2b09      	cmp	r3, #9
  40b14c:	d82a      	bhi.n	40b1a4 <_dtoa_r+0x1d4>
  40b14e:	2b05      	cmp	r3, #5
  40b150:	f340 865b 	ble.w	40be0a <_dtoa_r+0xe3a>
  40b154:	3b04      	subs	r3, #4
  40b156:	9324      	str	r3, [sp, #144]	; 0x90
  40b158:	2500      	movs	r5, #0
  40b15a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b15c:	3b02      	subs	r3, #2
  40b15e:	2b03      	cmp	r3, #3
  40b160:	f200 8642 	bhi.w	40bde8 <_dtoa_r+0xe18>
  40b164:	e8df f013 	tbh	[pc, r3, lsl #1]
  40b168:	02c903d4 	.word	0x02c903d4
  40b16c:	046103df 	.word	0x046103df
  40b170:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40b172:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40b174:	443e      	add	r6, r7
  40b176:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40b17a:	2b20      	cmp	r3, #32
  40b17c:	f340 818e 	ble.w	40b49c <_dtoa_r+0x4cc>
  40b180:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40b184:	f206 4012 	addw	r0, r6, #1042	; 0x412
  40b188:	409d      	lsls	r5, r3
  40b18a:	fa2a f000 	lsr.w	r0, sl, r0
  40b18e:	4328      	orrs	r0, r5
  40b190:	f7fb fee4 	bl	406f5c <__aeabi_ui2d>
  40b194:	2301      	movs	r3, #1
  40b196:	3e01      	subs	r6, #1
  40b198:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40b19c:	9314      	str	r3, [sp, #80]	; 0x50
  40b19e:	e781      	b.n	40b0a4 <_dtoa_r+0xd4>
  40b1a0:	483b      	ldr	r0, [pc, #236]	; (40b290 <_dtoa_r+0x2c0>)
  40b1a2:	e743      	b.n	40b02c <_dtoa_r+0x5c>
  40b1a4:	2100      	movs	r1, #0
  40b1a6:	6461      	str	r1, [r4, #68]	; 0x44
  40b1a8:	4620      	mov	r0, r4
  40b1aa:	9125      	str	r1, [sp, #148]	; 0x94
  40b1ac:	f001 fea8 	bl	40cf00 <_Balloc>
  40b1b0:	f04f 33ff 	mov.w	r3, #4294967295
  40b1b4:	930a      	str	r3, [sp, #40]	; 0x28
  40b1b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40b1b8:	930f      	str	r3, [sp, #60]	; 0x3c
  40b1ba:	2301      	movs	r3, #1
  40b1bc:	9004      	str	r0, [sp, #16]
  40b1be:	6420      	str	r0, [r4, #64]	; 0x40
  40b1c0:	9224      	str	r2, [sp, #144]	; 0x90
  40b1c2:	930b      	str	r3, [sp, #44]	; 0x2c
  40b1c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40b1c6:	2b00      	cmp	r3, #0
  40b1c8:	f2c0 80d9 	blt.w	40b37e <_dtoa_r+0x3ae>
  40b1cc:	9a02      	ldr	r2, [sp, #8]
  40b1ce:	2a0e      	cmp	r2, #14
  40b1d0:	f300 80d5 	bgt.w	40b37e <_dtoa_r+0x3ae>
  40b1d4:	4b2d      	ldr	r3, [pc, #180]	; (40b28c <_dtoa_r+0x2bc>)
  40b1d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40b1da:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b1de:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40b1e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40b1e4:	2b00      	cmp	r3, #0
  40b1e6:	f2c0 83ba 	blt.w	40b95e <_dtoa_r+0x98e>
  40b1ea:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40b1ee:	4650      	mov	r0, sl
  40b1f0:	462a      	mov	r2, r5
  40b1f2:	4633      	mov	r3, r6
  40b1f4:	4659      	mov	r1, fp
  40b1f6:	f7fc f851 	bl	40729c <__aeabi_ddiv>
  40b1fa:	f003 f817 	bl	40e22c <__aeabi_d2iz>
  40b1fe:	4680      	mov	r8, r0
  40b200:	f7fb febc 	bl	406f7c <__aeabi_i2d>
  40b204:	462a      	mov	r2, r5
  40b206:	4633      	mov	r3, r6
  40b208:	f7fb ff1e 	bl	407048 <__aeabi_dmul>
  40b20c:	460b      	mov	r3, r1
  40b20e:	4602      	mov	r2, r0
  40b210:	4659      	mov	r1, fp
  40b212:	4650      	mov	r0, sl
  40b214:	f7fb fd64 	bl	406ce0 <__aeabi_dsub>
  40b218:	9d04      	ldr	r5, [sp, #16]
  40b21a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40b21e:	702b      	strb	r3, [r5, #0]
  40b220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b222:	2b01      	cmp	r3, #1
  40b224:	4606      	mov	r6, r0
  40b226:	460f      	mov	r7, r1
  40b228:	f105 0501 	add.w	r5, r5, #1
  40b22c:	d068      	beq.n	40b300 <_dtoa_r+0x330>
  40b22e:	2200      	movs	r2, #0
  40b230:	4b18      	ldr	r3, [pc, #96]	; (40b294 <_dtoa_r+0x2c4>)
  40b232:	f7fb ff09 	bl	407048 <__aeabi_dmul>
  40b236:	2200      	movs	r2, #0
  40b238:	2300      	movs	r3, #0
  40b23a:	4606      	mov	r6, r0
  40b23c:	460f      	mov	r7, r1
  40b23e:	f002 ffad 	bl	40e19c <__aeabi_dcmpeq>
  40b242:	2800      	cmp	r0, #0
  40b244:	f040 8088 	bne.w	40b358 <_dtoa_r+0x388>
  40b248:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40b24c:	f04f 0a00 	mov.w	sl, #0
  40b250:	f8df b040 	ldr.w	fp, [pc, #64]	; 40b294 <_dtoa_r+0x2c4>
  40b254:	940c      	str	r4, [sp, #48]	; 0x30
  40b256:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40b25a:	e028      	b.n	40b2ae <_dtoa_r+0x2de>
  40b25c:	f3af 8000 	nop.w
  40b260:	636f4361 	.word	0x636f4361
  40b264:	3fd287a7 	.word	0x3fd287a7
  40b268:	8b60c8b3 	.word	0x8b60c8b3
  40b26c:	3fc68a28 	.word	0x3fc68a28
  40b270:	509f79fb 	.word	0x509f79fb
  40b274:	3fd34413 	.word	0x3fd34413
  40b278:	7ff00000 	.word	0x7ff00000
  40b27c:	0040fa7d 	.word	0x0040fa7d
  40b280:	0040fac0 	.word	0x0040fac0
  40b284:	0040facc 	.word	0x0040facc
  40b288:	3ff80000 	.word	0x3ff80000
  40b28c:	0040faf8 	.word	0x0040faf8
  40b290:	0040fa7c 	.word	0x0040fa7c
  40b294:	40240000 	.word	0x40240000
  40b298:	f7fb fed6 	bl	407048 <__aeabi_dmul>
  40b29c:	2200      	movs	r2, #0
  40b29e:	2300      	movs	r3, #0
  40b2a0:	4606      	mov	r6, r0
  40b2a2:	460f      	mov	r7, r1
  40b2a4:	f002 ff7a 	bl	40e19c <__aeabi_dcmpeq>
  40b2a8:	2800      	cmp	r0, #0
  40b2aa:	f040 83c1 	bne.w	40ba30 <_dtoa_r+0xa60>
  40b2ae:	4642      	mov	r2, r8
  40b2b0:	464b      	mov	r3, r9
  40b2b2:	4630      	mov	r0, r6
  40b2b4:	4639      	mov	r1, r7
  40b2b6:	f7fb fff1 	bl	40729c <__aeabi_ddiv>
  40b2ba:	f002 ffb7 	bl	40e22c <__aeabi_d2iz>
  40b2be:	4604      	mov	r4, r0
  40b2c0:	f7fb fe5c 	bl	406f7c <__aeabi_i2d>
  40b2c4:	4642      	mov	r2, r8
  40b2c6:	464b      	mov	r3, r9
  40b2c8:	f7fb febe 	bl	407048 <__aeabi_dmul>
  40b2cc:	4602      	mov	r2, r0
  40b2ce:	460b      	mov	r3, r1
  40b2d0:	4630      	mov	r0, r6
  40b2d2:	4639      	mov	r1, r7
  40b2d4:	f7fb fd04 	bl	406ce0 <__aeabi_dsub>
  40b2d8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40b2dc:	9e04      	ldr	r6, [sp, #16]
  40b2de:	f805 eb01 	strb.w	lr, [r5], #1
  40b2e2:	eba5 0e06 	sub.w	lr, r5, r6
  40b2e6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40b2e8:	45b6      	cmp	lr, r6
  40b2ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40b2ee:	4652      	mov	r2, sl
  40b2f0:	465b      	mov	r3, fp
  40b2f2:	d1d1      	bne.n	40b298 <_dtoa_r+0x2c8>
  40b2f4:	46a0      	mov	r8, r4
  40b2f6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40b2fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40b2fc:	4606      	mov	r6, r0
  40b2fe:	460f      	mov	r7, r1
  40b300:	4632      	mov	r2, r6
  40b302:	463b      	mov	r3, r7
  40b304:	4630      	mov	r0, r6
  40b306:	4639      	mov	r1, r7
  40b308:	f7fb fcec 	bl	406ce4 <__adddf3>
  40b30c:	4606      	mov	r6, r0
  40b30e:	460f      	mov	r7, r1
  40b310:	4602      	mov	r2, r0
  40b312:	460b      	mov	r3, r1
  40b314:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40b318:	f002 ff4a 	bl	40e1b0 <__aeabi_dcmplt>
  40b31c:	b948      	cbnz	r0, 40b332 <_dtoa_r+0x362>
  40b31e:	4632      	mov	r2, r6
  40b320:	463b      	mov	r3, r7
  40b322:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40b326:	f002 ff39 	bl	40e19c <__aeabi_dcmpeq>
  40b32a:	b1a8      	cbz	r0, 40b358 <_dtoa_r+0x388>
  40b32c:	f018 0f01 	tst.w	r8, #1
  40b330:	d012      	beq.n	40b358 <_dtoa_r+0x388>
  40b332:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40b336:	9a04      	ldr	r2, [sp, #16]
  40b338:	1e6b      	subs	r3, r5, #1
  40b33a:	e004      	b.n	40b346 <_dtoa_r+0x376>
  40b33c:	429a      	cmp	r2, r3
  40b33e:	f000 8401 	beq.w	40bb44 <_dtoa_r+0xb74>
  40b342:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40b346:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40b34a:	f103 0501 	add.w	r5, r3, #1
  40b34e:	d0f5      	beq.n	40b33c <_dtoa_r+0x36c>
  40b350:	f108 0801 	add.w	r8, r8, #1
  40b354:	f883 8000 	strb.w	r8, [r3]
  40b358:	4649      	mov	r1, r9
  40b35a:	4620      	mov	r0, r4
  40b35c:	f001 fdf6 	bl	40cf4c <_Bfree>
  40b360:	2200      	movs	r2, #0
  40b362:	9b02      	ldr	r3, [sp, #8]
  40b364:	702a      	strb	r2, [r5, #0]
  40b366:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40b368:	3301      	adds	r3, #1
  40b36a:	6013      	str	r3, [r2, #0]
  40b36c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40b36e:	2b00      	cmp	r3, #0
  40b370:	f000 839e 	beq.w	40bab0 <_dtoa_r+0xae0>
  40b374:	9804      	ldr	r0, [sp, #16]
  40b376:	601d      	str	r5, [r3, #0]
  40b378:	b01b      	add	sp, #108	; 0x6c
  40b37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b37e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40b380:	2a00      	cmp	r2, #0
  40b382:	d03e      	beq.n	40b402 <_dtoa_r+0x432>
  40b384:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40b386:	2a01      	cmp	r2, #1
  40b388:	f340 8311 	ble.w	40b9ae <_dtoa_r+0x9de>
  40b38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b38e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40b390:	1e5f      	subs	r7, r3, #1
  40b392:	42ba      	cmp	r2, r7
  40b394:	f2c0 838f 	blt.w	40bab6 <_dtoa_r+0xae6>
  40b398:	1bd7      	subs	r7, r2, r7
  40b39a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b39c:	2b00      	cmp	r3, #0
  40b39e:	f2c0 848b 	blt.w	40bcb8 <_dtoa_r+0xce8>
  40b3a2:	9d08      	ldr	r5, [sp, #32]
  40b3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b3a6:	9a08      	ldr	r2, [sp, #32]
  40b3a8:	441a      	add	r2, r3
  40b3aa:	9208      	str	r2, [sp, #32]
  40b3ac:	9a06      	ldr	r2, [sp, #24]
  40b3ae:	2101      	movs	r1, #1
  40b3b0:	441a      	add	r2, r3
  40b3b2:	4620      	mov	r0, r4
  40b3b4:	9206      	str	r2, [sp, #24]
  40b3b6:	f001 fe63 	bl	40d080 <__i2b>
  40b3ba:	4606      	mov	r6, r0
  40b3bc:	e024      	b.n	40b408 <_dtoa_r+0x438>
  40b3be:	2301      	movs	r3, #1
  40b3c0:	930e      	str	r3, [sp, #56]	; 0x38
  40b3c2:	e6af      	b.n	40b124 <_dtoa_r+0x154>
  40b3c4:	9a08      	ldr	r2, [sp, #32]
  40b3c6:	9b02      	ldr	r3, [sp, #8]
  40b3c8:	1ad2      	subs	r2, r2, r3
  40b3ca:	425b      	negs	r3, r3
  40b3cc:	930c      	str	r3, [sp, #48]	; 0x30
  40b3ce:	2300      	movs	r3, #0
  40b3d0:	9208      	str	r2, [sp, #32]
  40b3d2:	930d      	str	r3, [sp, #52]	; 0x34
  40b3d4:	e6b8      	b.n	40b148 <_dtoa_r+0x178>
  40b3d6:	f1c7 0301 	rsb	r3, r7, #1
  40b3da:	9308      	str	r3, [sp, #32]
  40b3dc:	2300      	movs	r3, #0
  40b3de:	9306      	str	r3, [sp, #24]
  40b3e0:	e6a7      	b.n	40b132 <_dtoa_r+0x162>
  40b3e2:	9d02      	ldr	r5, [sp, #8]
  40b3e4:	4628      	mov	r0, r5
  40b3e6:	f7fb fdc9 	bl	406f7c <__aeabi_i2d>
  40b3ea:	4602      	mov	r2, r0
  40b3ec:	460b      	mov	r3, r1
  40b3ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40b3f2:	f002 fed3 	bl	40e19c <__aeabi_dcmpeq>
  40b3f6:	2800      	cmp	r0, #0
  40b3f8:	f47f ae80 	bne.w	40b0fc <_dtoa_r+0x12c>
  40b3fc:	1e6b      	subs	r3, r5, #1
  40b3fe:	9302      	str	r3, [sp, #8]
  40b400:	e67c      	b.n	40b0fc <_dtoa_r+0x12c>
  40b402:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40b404:	9d08      	ldr	r5, [sp, #32]
  40b406:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40b408:	2d00      	cmp	r5, #0
  40b40a:	dd0c      	ble.n	40b426 <_dtoa_r+0x456>
  40b40c:	9906      	ldr	r1, [sp, #24]
  40b40e:	2900      	cmp	r1, #0
  40b410:	460b      	mov	r3, r1
  40b412:	dd08      	ble.n	40b426 <_dtoa_r+0x456>
  40b414:	42a9      	cmp	r1, r5
  40b416:	9a08      	ldr	r2, [sp, #32]
  40b418:	bfa8      	it	ge
  40b41a:	462b      	movge	r3, r5
  40b41c:	1ad2      	subs	r2, r2, r3
  40b41e:	1aed      	subs	r5, r5, r3
  40b420:	1acb      	subs	r3, r1, r3
  40b422:	9208      	str	r2, [sp, #32]
  40b424:	9306      	str	r3, [sp, #24]
  40b426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b428:	b1d3      	cbz	r3, 40b460 <_dtoa_r+0x490>
  40b42a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b42c:	2b00      	cmp	r3, #0
  40b42e:	f000 82b7 	beq.w	40b9a0 <_dtoa_r+0x9d0>
  40b432:	2f00      	cmp	r7, #0
  40b434:	dd10      	ble.n	40b458 <_dtoa_r+0x488>
  40b436:	4631      	mov	r1, r6
  40b438:	463a      	mov	r2, r7
  40b43a:	4620      	mov	r0, r4
  40b43c:	f001 febc 	bl	40d1b8 <__pow5mult>
  40b440:	464a      	mov	r2, r9
  40b442:	4601      	mov	r1, r0
  40b444:	4606      	mov	r6, r0
  40b446:	4620      	mov	r0, r4
  40b448:	f001 fe24 	bl	40d094 <__multiply>
  40b44c:	4649      	mov	r1, r9
  40b44e:	4680      	mov	r8, r0
  40b450:	4620      	mov	r0, r4
  40b452:	f001 fd7b 	bl	40cf4c <_Bfree>
  40b456:	46c1      	mov	r9, r8
  40b458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b45a:	1bda      	subs	r2, r3, r7
  40b45c:	f040 82a1 	bne.w	40b9a2 <_dtoa_r+0x9d2>
  40b460:	2101      	movs	r1, #1
  40b462:	4620      	mov	r0, r4
  40b464:	f001 fe0c 	bl	40d080 <__i2b>
  40b468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b46a:	2b00      	cmp	r3, #0
  40b46c:	4680      	mov	r8, r0
  40b46e:	dd1c      	ble.n	40b4aa <_dtoa_r+0x4da>
  40b470:	4601      	mov	r1, r0
  40b472:	461a      	mov	r2, r3
  40b474:	4620      	mov	r0, r4
  40b476:	f001 fe9f 	bl	40d1b8 <__pow5mult>
  40b47a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b47c:	2b01      	cmp	r3, #1
  40b47e:	4680      	mov	r8, r0
  40b480:	f340 8254 	ble.w	40b92c <_dtoa_r+0x95c>
  40b484:	2300      	movs	r3, #0
  40b486:	930c      	str	r3, [sp, #48]	; 0x30
  40b488:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40b48c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40b490:	6918      	ldr	r0, [r3, #16]
  40b492:	f001 fda5 	bl	40cfe0 <__hi0bits>
  40b496:	f1c0 0020 	rsb	r0, r0, #32
  40b49a:	e010      	b.n	40b4be <_dtoa_r+0x4ee>
  40b49c:	f1c3 0520 	rsb	r5, r3, #32
  40b4a0:	fa0a f005 	lsl.w	r0, sl, r5
  40b4a4:	e674      	b.n	40b190 <_dtoa_r+0x1c0>
  40b4a6:	900e      	str	r0, [sp, #56]	; 0x38
  40b4a8:	e63c      	b.n	40b124 <_dtoa_r+0x154>
  40b4aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b4ac:	2b01      	cmp	r3, #1
  40b4ae:	f340 8287 	ble.w	40b9c0 <_dtoa_r+0x9f0>
  40b4b2:	2300      	movs	r3, #0
  40b4b4:	930c      	str	r3, [sp, #48]	; 0x30
  40b4b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b4b8:	2001      	movs	r0, #1
  40b4ba:	2b00      	cmp	r3, #0
  40b4bc:	d1e4      	bne.n	40b488 <_dtoa_r+0x4b8>
  40b4be:	9a06      	ldr	r2, [sp, #24]
  40b4c0:	4410      	add	r0, r2
  40b4c2:	f010 001f 	ands.w	r0, r0, #31
  40b4c6:	f000 80a1 	beq.w	40b60c <_dtoa_r+0x63c>
  40b4ca:	f1c0 0320 	rsb	r3, r0, #32
  40b4ce:	2b04      	cmp	r3, #4
  40b4d0:	f340 849e 	ble.w	40be10 <_dtoa_r+0xe40>
  40b4d4:	9b08      	ldr	r3, [sp, #32]
  40b4d6:	f1c0 001c 	rsb	r0, r0, #28
  40b4da:	4403      	add	r3, r0
  40b4dc:	9308      	str	r3, [sp, #32]
  40b4de:	4613      	mov	r3, r2
  40b4e0:	4403      	add	r3, r0
  40b4e2:	4405      	add	r5, r0
  40b4e4:	9306      	str	r3, [sp, #24]
  40b4e6:	9b08      	ldr	r3, [sp, #32]
  40b4e8:	2b00      	cmp	r3, #0
  40b4ea:	dd05      	ble.n	40b4f8 <_dtoa_r+0x528>
  40b4ec:	4649      	mov	r1, r9
  40b4ee:	461a      	mov	r2, r3
  40b4f0:	4620      	mov	r0, r4
  40b4f2:	f001 feb1 	bl	40d258 <__lshift>
  40b4f6:	4681      	mov	r9, r0
  40b4f8:	9b06      	ldr	r3, [sp, #24]
  40b4fa:	2b00      	cmp	r3, #0
  40b4fc:	dd05      	ble.n	40b50a <_dtoa_r+0x53a>
  40b4fe:	4641      	mov	r1, r8
  40b500:	461a      	mov	r2, r3
  40b502:	4620      	mov	r0, r4
  40b504:	f001 fea8 	bl	40d258 <__lshift>
  40b508:	4680      	mov	r8, r0
  40b50a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b50c:	2b00      	cmp	r3, #0
  40b50e:	f040 8086 	bne.w	40b61e <_dtoa_r+0x64e>
  40b512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b514:	2b00      	cmp	r3, #0
  40b516:	f340 8266 	ble.w	40b9e6 <_dtoa_r+0xa16>
  40b51a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b51c:	2b00      	cmp	r3, #0
  40b51e:	f000 8098 	beq.w	40b652 <_dtoa_r+0x682>
  40b522:	2d00      	cmp	r5, #0
  40b524:	dd05      	ble.n	40b532 <_dtoa_r+0x562>
  40b526:	4631      	mov	r1, r6
  40b528:	462a      	mov	r2, r5
  40b52a:	4620      	mov	r0, r4
  40b52c:	f001 fe94 	bl	40d258 <__lshift>
  40b530:	4606      	mov	r6, r0
  40b532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b534:	2b00      	cmp	r3, #0
  40b536:	f040 8337 	bne.w	40bba8 <_dtoa_r+0xbd8>
  40b53a:	9606      	str	r6, [sp, #24]
  40b53c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b53e:	9a04      	ldr	r2, [sp, #16]
  40b540:	f8dd b018 	ldr.w	fp, [sp, #24]
  40b544:	3b01      	subs	r3, #1
  40b546:	18d3      	adds	r3, r2, r3
  40b548:	930b      	str	r3, [sp, #44]	; 0x2c
  40b54a:	f00a 0301 	and.w	r3, sl, #1
  40b54e:	930c      	str	r3, [sp, #48]	; 0x30
  40b550:	4617      	mov	r7, r2
  40b552:	46c2      	mov	sl, r8
  40b554:	4651      	mov	r1, sl
  40b556:	4648      	mov	r0, r9
  40b558:	f7ff fca4 	bl	40aea4 <quorem>
  40b55c:	4631      	mov	r1, r6
  40b55e:	4605      	mov	r5, r0
  40b560:	4648      	mov	r0, r9
  40b562:	f001 fecb 	bl	40d2fc <__mcmp>
  40b566:	465a      	mov	r2, fp
  40b568:	900a      	str	r0, [sp, #40]	; 0x28
  40b56a:	4651      	mov	r1, sl
  40b56c:	4620      	mov	r0, r4
  40b56e:	f001 fee1 	bl	40d334 <__mdiff>
  40b572:	68c2      	ldr	r2, [r0, #12]
  40b574:	4680      	mov	r8, r0
  40b576:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40b57a:	2a00      	cmp	r2, #0
  40b57c:	f040 822b 	bne.w	40b9d6 <_dtoa_r+0xa06>
  40b580:	4601      	mov	r1, r0
  40b582:	4648      	mov	r0, r9
  40b584:	9308      	str	r3, [sp, #32]
  40b586:	f001 feb9 	bl	40d2fc <__mcmp>
  40b58a:	4641      	mov	r1, r8
  40b58c:	9006      	str	r0, [sp, #24]
  40b58e:	4620      	mov	r0, r4
  40b590:	f001 fcdc 	bl	40cf4c <_Bfree>
  40b594:	9a06      	ldr	r2, [sp, #24]
  40b596:	9b08      	ldr	r3, [sp, #32]
  40b598:	b932      	cbnz	r2, 40b5a8 <_dtoa_r+0x5d8>
  40b59a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40b59c:	b921      	cbnz	r1, 40b5a8 <_dtoa_r+0x5d8>
  40b59e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40b5a0:	2a00      	cmp	r2, #0
  40b5a2:	f000 83ef 	beq.w	40bd84 <_dtoa_r+0xdb4>
  40b5a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40b5a8:	990a      	ldr	r1, [sp, #40]	; 0x28
  40b5aa:	2900      	cmp	r1, #0
  40b5ac:	f2c0 829f 	blt.w	40baee <_dtoa_r+0xb1e>
  40b5b0:	d105      	bne.n	40b5be <_dtoa_r+0x5ee>
  40b5b2:	9924      	ldr	r1, [sp, #144]	; 0x90
  40b5b4:	b919      	cbnz	r1, 40b5be <_dtoa_r+0x5ee>
  40b5b6:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b5b8:	2900      	cmp	r1, #0
  40b5ba:	f000 8298 	beq.w	40baee <_dtoa_r+0xb1e>
  40b5be:	2a00      	cmp	r2, #0
  40b5c0:	f300 8306 	bgt.w	40bbd0 <_dtoa_r+0xc00>
  40b5c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40b5c6:	703b      	strb	r3, [r7, #0]
  40b5c8:	f107 0801 	add.w	r8, r7, #1
  40b5cc:	4297      	cmp	r7, r2
  40b5ce:	4645      	mov	r5, r8
  40b5d0:	f000 830c 	beq.w	40bbec <_dtoa_r+0xc1c>
  40b5d4:	4649      	mov	r1, r9
  40b5d6:	2300      	movs	r3, #0
  40b5d8:	220a      	movs	r2, #10
  40b5da:	4620      	mov	r0, r4
  40b5dc:	f001 fcc0 	bl	40cf60 <__multadd>
  40b5e0:	455e      	cmp	r6, fp
  40b5e2:	4681      	mov	r9, r0
  40b5e4:	4631      	mov	r1, r6
  40b5e6:	f04f 0300 	mov.w	r3, #0
  40b5ea:	f04f 020a 	mov.w	r2, #10
  40b5ee:	4620      	mov	r0, r4
  40b5f0:	f000 81eb 	beq.w	40b9ca <_dtoa_r+0x9fa>
  40b5f4:	f001 fcb4 	bl	40cf60 <__multadd>
  40b5f8:	4659      	mov	r1, fp
  40b5fa:	4606      	mov	r6, r0
  40b5fc:	2300      	movs	r3, #0
  40b5fe:	220a      	movs	r2, #10
  40b600:	4620      	mov	r0, r4
  40b602:	f001 fcad 	bl	40cf60 <__multadd>
  40b606:	4647      	mov	r7, r8
  40b608:	4683      	mov	fp, r0
  40b60a:	e7a3      	b.n	40b554 <_dtoa_r+0x584>
  40b60c:	201c      	movs	r0, #28
  40b60e:	9b08      	ldr	r3, [sp, #32]
  40b610:	4403      	add	r3, r0
  40b612:	9308      	str	r3, [sp, #32]
  40b614:	9b06      	ldr	r3, [sp, #24]
  40b616:	4403      	add	r3, r0
  40b618:	4405      	add	r5, r0
  40b61a:	9306      	str	r3, [sp, #24]
  40b61c:	e763      	b.n	40b4e6 <_dtoa_r+0x516>
  40b61e:	4641      	mov	r1, r8
  40b620:	4648      	mov	r0, r9
  40b622:	f001 fe6b 	bl	40d2fc <__mcmp>
  40b626:	2800      	cmp	r0, #0
  40b628:	f6bf af73 	bge.w	40b512 <_dtoa_r+0x542>
  40b62c:	9f02      	ldr	r7, [sp, #8]
  40b62e:	4649      	mov	r1, r9
  40b630:	2300      	movs	r3, #0
  40b632:	220a      	movs	r2, #10
  40b634:	4620      	mov	r0, r4
  40b636:	3f01      	subs	r7, #1
  40b638:	9702      	str	r7, [sp, #8]
  40b63a:	f001 fc91 	bl	40cf60 <__multadd>
  40b63e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b640:	4681      	mov	r9, r0
  40b642:	2b00      	cmp	r3, #0
  40b644:	f040 83b6 	bne.w	40bdb4 <_dtoa_r+0xde4>
  40b648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b64a:	2b00      	cmp	r3, #0
  40b64c:	f340 83bf 	ble.w	40bdce <_dtoa_r+0xdfe>
  40b650:	930a      	str	r3, [sp, #40]	; 0x28
  40b652:	f8dd b010 	ldr.w	fp, [sp, #16]
  40b656:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b658:	465d      	mov	r5, fp
  40b65a:	e002      	b.n	40b662 <_dtoa_r+0x692>
  40b65c:	f001 fc80 	bl	40cf60 <__multadd>
  40b660:	4681      	mov	r9, r0
  40b662:	4641      	mov	r1, r8
  40b664:	4648      	mov	r0, r9
  40b666:	f7ff fc1d 	bl	40aea4 <quorem>
  40b66a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40b66e:	f805 ab01 	strb.w	sl, [r5], #1
  40b672:	eba5 030b 	sub.w	r3, r5, fp
  40b676:	42bb      	cmp	r3, r7
  40b678:	f04f 020a 	mov.w	r2, #10
  40b67c:	f04f 0300 	mov.w	r3, #0
  40b680:	4649      	mov	r1, r9
  40b682:	4620      	mov	r0, r4
  40b684:	dbea      	blt.n	40b65c <_dtoa_r+0x68c>
  40b686:	9b04      	ldr	r3, [sp, #16]
  40b688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b68a:	2a01      	cmp	r2, #1
  40b68c:	bfac      	ite	ge
  40b68e:	189b      	addge	r3, r3, r2
  40b690:	3301      	addlt	r3, #1
  40b692:	461d      	mov	r5, r3
  40b694:	f04f 0b00 	mov.w	fp, #0
  40b698:	4649      	mov	r1, r9
  40b69a:	2201      	movs	r2, #1
  40b69c:	4620      	mov	r0, r4
  40b69e:	f001 fddb 	bl	40d258 <__lshift>
  40b6a2:	4641      	mov	r1, r8
  40b6a4:	4681      	mov	r9, r0
  40b6a6:	f001 fe29 	bl	40d2fc <__mcmp>
  40b6aa:	2800      	cmp	r0, #0
  40b6ac:	f340 823d 	ble.w	40bb2a <_dtoa_r+0xb5a>
  40b6b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40b6b4:	9904      	ldr	r1, [sp, #16]
  40b6b6:	1e6b      	subs	r3, r5, #1
  40b6b8:	e004      	b.n	40b6c4 <_dtoa_r+0x6f4>
  40b6ba:	428b      	cmp	r3, r1
  40b6bc:	f000 81ae 	beq.w	40ba1c <_dtoa_r+0xa4c>
  40b6c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40b6c4:	2a39      	cmp	r2, #57	; 0x39
  40b6c6:	f103 0501 	add.w	r5, r3, #1
  40b6ca:	d0f6      	beq.n	40b6ba <_dtoa_r+0x6ea>
  40b6cc:	3201      	adds	r2, #1
  40b6ce:	701a      	strb	r2, [r3, #0]
  40b6d0:	4641      	mov	r1, r8
  40b6d2:	4620      	mov	r0, r4
  40b6d4:	f001 fc3a 	bl	40cf4c <_Bfree>
  40b6d8:	2e00      	cmp	r6, #0
  40b6da:	f43f ae3d 	beq.w	40b358 <_dtoa_r+0x388>
  40b6de:	f1bb 0f00 	cmp.w	fp, #0
  40b6e2:	d005      	beq.n	40b6f0 <_dtoa_r+0x720>
  40b6e4:	45b3      	cmp	fp, r6
  40b6e6:	d003      	beq.n	40b6f0 <_dtoa_r+0x720>
  40b6e8:	4659      	mov	r1, fp
  40b6ea:	4620      	mov	r0, r4
  40b6ec:	f001 fc2e 	bl	40cf4c <_Bfree>
  40b6f0:	4631      	mov	r1, r6
  40b6f2:	4620      	mov	r0, r4
  40b6f4:	f001 fc2a 	bl	40cf4c <_Bfree>
  40b6f8:	e62e      	b.n	40b358 <_dtoa_r+0x388>
  40b6fa:	2300      	movs	r3, #0
  40b6fc:	930b      	str	r3, [sp, #44]	; 0x2c
  40b6fe:	9b02      	ldr	r3, [sp, #8]
  40b700:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40b702:	4413      	add	r3, r2
  40b704:	930f      	str	r3, [sp, #60]	; 0x3c
  40b706:	3301      	adds	r3, #1
  40b708:	2b01      	cmp	r3, #1
  40b70a:	461f      	mov	r7, r3
  40b70c:	461e      	mov	r6, r3
  40b70e:	930a      	str	r3, [sp, #40]	; 0x28
  40b710:	bfb8      	it	lt
  40b712:	2701      	movlt	r7, #1
  40b714:	2100      	movs	r1, #0
  40b716:	2f17      	cmp	r7, #23
  40b718:	6461      	str	r1, [r4, #68]	; 0x44
  40b71a:	d90a      	bls.n	40b732 <_dtoa_r+0x762>
  40b71c:	2201      	movs	r2, #1
  40b71e:	2304      	movs	r3, #4
  40b720:	005b      	lsls	r3, r3, #1
  40b722:	f103 0014 	add.w	r0, r3, #20
  40b726:	4287      	cmp	r7, r0
  40b728:	4611      	mov	r1, r2
  40b72a:	f102 0201 	add.w	r2, r2, #1
  40b72e:	d2f7      	bcs.n	40b720 <_dtoa_r+0x750>
  40b730:	6461      	str	r1, [r4, #68]	; 0x44
  40b732:	4620      	mov	r0, r4
  40b734:	f001 fbe4 	bl	40cf00 <_Balloc>
  40b738:	2e0e      	cmp	r6, #14
  40b73a:	9004      	str	r0, [sp, #16]
  40b73c:	6420      	str	r0, [r4, #64]	; 0x40
  40b73e:	f63f ad41 	bhi.w	40b1c4 <_dtoa_r+0x1f4>
  40b742:	2d00      	cmp	r5, #0
  40b744:	f43f ad3e 	beq.w	40b1c4 <_dtoa_r+0x1f4>
  40b748:	9902      	ldr	r1, [sp, #8]
  40b74a:	2900      	cmp	r1, #0
  40b74c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  40b750:	f340 8202 	ble.w	40bb58 <_dtoa_r+0xb88>
  40b754:	4bb8      	ldr	r3, [pc, #736]	; (40ba38 <_dtoa_r+0xa68>)
  40b756:	f001 020f 	and.w	r2, r1, #15
  40b75a:	110d      	asrs	r5, r1, #4
  40b75c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40b760:	06e9      	lsls	r1, r5, #27
  40b762:	e9d3 6700 	ldrd	r6, r7, [r3]
  40b766:	f140 81ae 	bpl.w	40bac6 <_dtoa_r+0xaf6>
  40b76a:	4bb4      	ldr	r3, [pc, #720]	; (40ba3c <_dtoa_r+0xa6c>)
  40b76c:	4650      	mov	r0, sl
  40b76e:	4659      	mov	r1, fp
  40b770:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40b774:	f7fb fd92 	bl	40729c <__aeabi_ddiv>
  40b778:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40b77c:	f005 050f 	and.w	r5, r5, #15
  40b780:	f04f 0a03 	mov.w	sl, #3
  40b784:	b18d      	cbz	r5, 40b7aa <_dtoa_r+0x7da>
  40b786:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40ba3c <_dtoa_r+0xa6c>
  40b78a:	07ea      	lsls	r2, r5, #31
  40b78c:	d509      	bpl.n	40b7a2 <_dtoa_r+0x7d2>
  40b78e:	4630      	mov	r0, r6
  40b790:	4639      	mov	r1, r7
  40b792:	e9d8 2300 	ldrd	r2, r3, [r8]
  40b796:	f7fb fc57 	bl	407048 <__aeabi_dmul>
  40b79a:	f10a 0a01 	add.w	sl, sl, #1
  40b79e:	4606      	mov	r6, r0
  40b7a0:	460f      	mov	r7, r1
  40b7a2:	106d      	asrs	r5, r5, #1
  40b7a4:	f108 0808 	add.w	r8, r8, #8
  40b7a8:	d1ef      	bne.n	40b78a <_dtoa_r+0x7ba>
  40b7aa:	463b      	mov	r3, r7
  40b7ac:	4632      	mov	r2, r6
  40b7ae:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40b7b2:	f7fb fd73 	bl	40729c <__aeabi_ddiv>
  40b7b6:	4607      	mov	r7, r0
  40b7b8:	4688      	mov	r8, r1
  40b7ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b7bc:	b143      	cbz	r3, 40b7d0 <_dtoa_r+0x800>
  40b7be:	2200      	movs	r2, #0
  40b7c0:	4b9f      	ldr	r3, [pc, #636]	; (40ba40 <_dtoa_r+0xa70>)
  40b7c2:	4638      	mov	r0, r7
  40b7c4:	4641      	mov	r1, r8
  40b7c6:	f002 fcf3 	bl	40e1b0 <__aeabi_dcmplt>
  40b7ca:	2800      	cmp	r0, #0
  40b7cc:	f040 8286 	bne.w	40bcdc <_dtoa_r+0xd0c>
  40b7d0:	4650      	mov	r0, sl
  40b7d2:	f7fb fbd3 	bl	406f7c <__aeabi_i2d>
  40b7d6:	463a      	mov	r2, r7
  40b7d8:	4643      	mov	r3, r8
  40b7da:	f7fb fc35 	bl	407048 <__aeabi_dmul>
  40b7de:	4b99      	ldr	r3, [pc, #612]	; (40ba44 <_dtoa_r+0xa74>)
  40b7e0:	2200      	movs	r2, #0
  40b7e2:	f7fb fa7f 	bl	406ce4 <__adddf3>
  40b7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b7e8:	4605      	mov	r5, r0
  40b7ea:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40b7ee:	2b00      	cmp	r3, #0
  40b7f0:	f000 813e 	beq.w	40ba70 <_dtoa_r+0xaa0>
  40b7f4:	9b02      	ldr	r3, [sp, #8]
  40b7f6:	9315      	str	r3, [sp, #84]	; 0x54
  40b7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b7fa:	9312      	str	r3, [sp, #72]	; 0x48
  40b7fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b7fe:	2b00      	cmp	r3, #0
  40b800:	f000 81fa 	beq.w	40bbf8 <_dtoa_r+0xc28>
  40b804:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40b806:	4b8c      	ldr	r3, [pc, #560]	; (40ba38 <_dtoa_r+0xa68>)
  40b808:	498f      	ldr	r1, [pc, #572]	; (40ba48 <_dtoa_r+0xa78>)
  40b80a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40b80e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40b812:	2000      	movs	r0, #0
  40b814:	f7fb fd42 	bl	40729c <__aeabi_ddiv>
  40b818:	462a      	mov	r2, r5
  40b81a:	4633      	mov	r3, r6
  40b81c:	f7fb fa60 	bl	406ce0 <__aeabi_dsub>
  40b820:	4682      	mov	sl, r0
  40b822:	468b      	mov	fp, r1
  40b824:	4638      	mov	r0, r7
  40b826:	4641      	mov	r1, r8
  40b828:	f002 fd00 	bl	40e22c <__aeabi_d2iz>
  40b82c:	4605      	mov	r5, r0
  40b82e:	f7fb fba5 	bl	406f7c <__aeabi_i2d>
  40b832:	4602      	mov	r2, r0
  40b834:	460b      	mov	r3, r1
  40b836:	4638      	mov	r0, r7
  40b838:	4641      	mov	r1, r8
  40b83a:	f7fb fa51 	bl	406ce0 <__aeabi_dsub>
  40b83e:	3530      	adds	r5, #48	; 0x30
  40b840:	fa5f f885 	uxtb.w	r8, r5
  40b844:	9d04      	ldr	r5, [sp, #16]
  40b846:	4606      	mov	r6, r0
  40b848:	460f      	mov	r7, r1
  40b84a:	f885 8000 	strb.w	r8, [r5]
  40b84e:	4602      	mov	r2, r0
  40b850:	460b      	mov	r3, r1
  40b852:	4650      	mov	r0, sl
  40b854:	4659      	mov	r1, fp
  40b856:	3501      	adds	r5, #1
  40b858:	f002 fcc8 	bl	40e1ec <__aeabi_dcmpgt>
  40b85c:	2800      	cmp	r0, #0
  40b85e:	d154      	bne.n	40b90a <_dtoa_r+0x93a>
  40b860:	4632      	mov	r2, r6
  40b862:	463b      	mov	r3, r7
  40b864:	2000      	movs	r0, #0
  40b866:	4976      	ldr	r1, [pc, #472]	; (40ba40 <_dtoa_r+0xa70>)
  40b868:	f7fb fa3a 	bl	406ce0 <__aeabi_dsub>
  40b86c:	4602      	mov	r2, r0
  40b86e:	460b      	mov	r3, r1
  40b870:	4650      	mov	r0, sl
  40b872:	4659      	mov	r1, fp
  40b874:	f002 fcba 	bl	40e1ec <__aeabi_dcmpgt>
  40b878:	2800      	cmp	r0, #0
  40b87a:	f040 8270 	bne.w	40bd5e <_dtoa_r+0xd8e>
  40b87e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40b880:	2a01      	cmp	r2, #1
  40b882:	f000 8111 	beq.w	40baa8 <_dtoa_r+0xad8>
  40b886:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b888:	9a04      	ldr	r2, [sp, #16]
  40b88a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40b88e:	4413      	add	r3, r2
  40b890:	4699      	mov	r9, r3
  40b892:	e00d      	b.n	40b8b0 <_dtoa_r+0x8e0>
  40b894:	2000      	movs	r0, #0
  40b896:	496a      	ldr	r1, [pc, #424]	; (40ba40 <_dtoa_r+0xa70>)
  40b898:	f7fb fa22 	bl	406ce0 <__aeabi_dsub>
  40b89c:	4652      	mov	r2, sl
  40b89e:	465b      	mov	r3, fp
  40b8a0:	f002 fc86 	bl	40e1b0 <__aeabi_dcmplt>
  40b8a4:	2800      	cmp	r0, #0
  40b8a6:	f040 8258 	bne.w	40bd5a <_dtoa_r+0xd8a>
  40b8aa:	454d      	cmp	r5, r9
  40b8ac:	f000 80fa 	beq.w	40baa4 <_dtoa_r+0xad4>
  40b8b0:	4650      	mov	r0, sl
  40b8b2:	4659      	mov	r1, fp
  40b8b4:	2200      	movs	r2, #0
  40b8b6:	4b65      	ldr	r3, [pc, #404]	; (40ba4c <_dtoa_r+0xa7c>)
  40b8b8:	f7fb fbc6 	bl	407048 <__aeabi_dmul>
  40b8bc:	2200      	movs	r2, #0
  40b8be:	4b63      	ldr	r3, [pc, #396]	; (40ba4c <_dtoa_r+0xa7c>)
  40b8c0:	4682      	mov	sl, r0
  40b8c2:	468b      	mov	fp, r1
  40b8c4:	4630      	mov	r0, r6
  40b8c6:	4639      	mov	r1, r7
  40b8c8:	f7fb fbbe 	bl	407048 <__aeabi_dmul>
  40b8cc:	460f      	mov	r7, r1
  40b8ce:	4606      	mov	r6, r0
  40b8d0:	f002 fcac 	bl	40e22c <__aeabi_d2iz>
  40b8d4:	4680      	mov	r8, r0
  40b8d6:	f7fb fb51 	bl	406f7c <__aeabi_i2d>
  40b8da:	4602      	mov	r2, r0
  40b8dc:	460b      	mov	r3, r1
  40b8de:	4630      	mov	r0, r6
  40b8e0:	4639      	mov	r1, r7
  40b8e2:	f7fb f9fd 	bl	406ce0 <__aeabi_dsub>
  40b8e6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40b8ea:	fa5f f888 	uxtb.w	r8, r8
  40b8ee:	4652      	mov	r2, sl
  40b8f0:	465b      	mov	r3, fp
  40b8f2:	f805 8b01 	strb.w	r8, [r5], #1
  40b8f6:	4606      	mov	r6, r0
  40b8f8:	460f      	mov	r7, r1
  40b8fa:	f002 fc59 	bl	40e1b0 <__aeabi_dcmplt>
  40b8fe:	4632      	mov	r2, r6
  40b900:	463b      	mov	r3, r7
  40b902:	2800      	cmp	r0, #0
  40b904:	d0c6      	beq.n	40b894 <_dtoa_r+0x8c4>
  40b906:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40b90a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40b90c:	9302      	str	r3, [sp, #8]
  40b90e:	e523      	b.n	40b358 <_dtoa_r+0x388>
  40b910:	2300      	movs	r3, #0
  40b912:	930b      	str	r3, [sp, #44]	; 0x2c
  40b914:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40b916:	2b00      	cmp	r3, #0
  40b918:	f340 80dc 	ble.w	40bad4 <_dtoa_r+0xb04>
  40b91c:	461f      	mov	r7, r3
  40b91e:	461e      	mov	r6, r3
  40b920:	930f      	str	r3, [sp, #60]	; 0x3c
  40b922:	930a      	str	r3, [sp, #40]	; 0x28
  40b924:	e6f6      	b.n	40b714 <_dtoa_r+0x744>
  40b926:	2301      	movs	r3, #1
  40b928:	930b      	str	r3, [sp, #44]	; 0x2c
  40b92a:	e7f3      	b.n	40b914 <_dtoa_r+0x944>
  40b92c:	f1ba 0f00 	cmp.w	sl, #0
  40b930:	f47f ada8 	bne.w	40b484 <_dtoa_r+0x4b4>
  40b934:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40b938:	2b00      	cmp	r3, #0
  40b93a:	f47f adba 	bne.w	40b4b2 <_dtoa_r+0x4e2>
  40b93e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40b942:	0d3f      	lsrs	r7, r7, #20
  40b944:	053f      	lsls	r7, r7, #20
  40b946:	2f00      	cmp	r7, #0
  40b948:	f000 820d 	beq.w	40bd66 <_dtoa_r+0xd96>
  40b94c:	9b08      	ldr	r3, [sp, #32]
  40b94e:	3301      	adds	r3, #1
  40b950:	9308      	str	r3, [sp, #32]
  40b952:	9b06      	ldr	r3, [sp, #24]
  40b954:	3301      	adds	r3, #1
  40b956:	9306      	str	r3, [sp, #24]
  40b958:	2301      	movs	r3, #1
  40b95a:	930c      	str	r3, [sp, #48]	; 0x30
  40b95c:	e5ab      	b.n	40b4b6 <_dtoa_r+0x4e6>
  40b95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b960:	2b00      	cmp	r3, #0
  40b962:	f73f ac42 	bgt.w	40b1ea <_dtoa_r+0x21a>
  40b966:	f040 8221 	bne.w	40bdac <_dtoa_r+0xddc>
  40b96a:	2200      	movs	r2, #0
  40b96c:	4b38      	ldr	r3, [pc, #224]	; (40ba50 <_dtoa_r+0xa80>)
  40b96e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40b972:	f7fb fb69 	bl	407048 <__aeabi_dmul>
  40b976:	4652      	mov	r2, sl
  40b978:	465b      	mov	r3, fp
  40b97a:	f002 fc2d 	bl	40e1d8 <__aeabi_dcmpge>
  40b97e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40b982:	4646      	mov	r6, r8
  40b984:	2800      	cmp	r0, #0
  40b986:	d041      	beq.n	40ba0c <_dtoa_r+0xa3c>
  40b988:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40b98a:	9d04      	ldr	r5, [sp, #16]
  40b98c:	43db      	mvns	r3, r3
  40b98e:	9302      	str	r3, [sp, #8]
  40b990:	4641      	mov	r1, r8
  40b992:	4620      	mov	r0, r4
  40b994:	f001 fada 	bl	40cf4c <_Bfree>
  40b998:	2e00      	cmp	r6, #0
  40b99a:	f43f acdd 	beq.w	40b358 <_dtoa_r+0x388>
  40b99e:	e6a7      	b.n	40b6f0 <_dtoa_r+0x720>
  40b9a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40b9a2:	4649      	mov	r1, r9
  40b9a4:	4620      	mov	r0, r4
  40b9a6:	f001 fc07 	bl	40d1b8 <__pow5mult>
  40b9aa:	4681      	mov	r9, r0
  40b9ac:	e558      	b.n	40b460 <_dtoa_r+0x490>
  40b9ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40b9b0:	2a00      	cmp	r2, #0
  40b9b2:	f000 8187 	beq.w	40bcc4 <_dtoa_r+0xcf4>
  40b9b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40b9ba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40b9bc:	9d08      	ldr	r5, [sp, #32]
  40b9be:	e4f2      	b.n	40b3a6 <_dtoa_r+0x3d6>
  40b9c0:	f1ba 0f00 	cmp.w	sl, #0
  40b9c4:	f47f ad75 	bne.w	40b4b2 <_dtoa_r+0x4e2>
  40b9c8:	e7b4      	b.n	40b934 <_dtoa_r+0x964>
  40b9ca:	f001 fac9 	bl	40cf60 <__multadd>
  40b9ce:	4647      	mov	r7, r8
  40b9d0:	4606      	mov	r6, r0
  40b9d2:	4683      	mov	fp, r0
  40b9d4:	e5be      	b.n	40b554 <_dtoa_r+0x584>
  40b9d6:	4601      	mov	r1, r0
  40b9d8:	4620      	mov	r0, r4
  40b9da:	9306      	str	r3, [sp, #24]
  40b9dc:	f001 fab6 	bl	40cf4c <_Bfree>
  40b9e0:	2201      	movs	r2, #1
  40b9e2:	9b06      	ldr	r3, [sp, #24]
  40b9e4:	e5e0      	b.n	40b5a8 <_dtoa_r+0x5d8>
  40b9e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b9e8:	2b02      	cmp	r3, #2
  40b9ea:	f77f ad96 	ble.w	40b51a <_dtoa_r+0x54a>
  40b9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b9f0:	2b00      	cmp	r3, #0
  40b9f2:	d1c9      	bne.n	40b988 <_dtoa_r+0x9b8>
  40b9f4:	4641      	mov	r1, r8
  40b9f6:	2205      	movs	r2, #5
  40b9f8:	4620      	mov	r0, r4
  40b9fa:	f001 fab1 	bl	40cf60 <__multadd>
  40b9fe:	4601      	mov	r1, r0
  40ba00:	4680      	mov	r8, r0
  40ba02:	4648      	mov	r0, r9
  40ba04:	f001 fc7a 	bl	40d2fc <__mcmp>
  40ba08:	2800      	cmp	r0, #0
  40ba0a:	ddbd      	ble.n	40b988 <_dtoa_r+0x9b8>
  40ba0c:	9a02      	ldr	r2, [sp, #8]
  40ba0e:	9904      	ldr	r1, [sp, #16]
  40ba10:	2331      	movs	r3, #49	; 0x31
  40ba12:	3201      	adds	r2, #1
  40ba14:	9202      	str	r2, [sp, #8]
  40ba16:	700b      	strb	r3, [r1, #0]
  40ba18:	1c4d      	adds	r5, r1, #1
  40ba1a:	e7b9      	b.n	40b990 <_dtoa_r+0x9c0>
  40ba1c:	9a02      	ldr	r2, [sp, #8]
  40ba1e:	3201      	adds	r2, #1
  40ba20:	9202      	str	r2, [sp, #8]
  40ba22:	9a04      	ldr	r2, [sp, #16]
  40ba24:	2331      	movs	r3, #49	; 0x31
  40ba26:	7013      	strb	r3, [r2, #0]
  40ba28:	e652      	b.n	40b6d0 <_dtoa_r+0x700>
  40ba2a:	2301      	movs	r3, #1
  40ba2c:	930b      	str	r3, [sp, #44]	; 0x2c
  40ba2e:	e666      	b.n	40b6fe <_dtoa_r+0x72e>
  40ba30:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40ba34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40ba36:	e48f      	b.n	40b358 <_dtoa_r+0x388>
  40ba38:	0040faf8 	.word	0x0040faf8
  40ba3c:	0040fad0 	.word	0x0040fad0
  40ba40:	3ff00000 	.word	0x3ff00000
  40ba44:	401c0000 	.word	0x401c0000
  40ba48:	3fe00000 	.word	0x3fe00000
  40ba4c:	40240000 	.word	0x40240000
  40ba50:	40140000 	.word	0x40140000
  40ba54:	4650      	mov	r0, sl
  40ba56:	f7fb fa91 	bl	406f7c <__aeabi_i2d>
  40ba5a:	463a      	mov	r2, r7
  40ba5c:	4643      	mov	r3, r8
  40ba5e:	f7fb faf3 	bl	407048 <__aeabi_dmul>
  40ba62:	2200      	movs	r2, #0
  40ba64:	4bc1      	ldr	r3, [pc, #772]	; (40bd6c <_dtoa_r+0xd9c>)
  40ba66:	f7fb f93d 	bl	406ce4 <__adddf3>
  40ba6a:	4605      	mov	r5, r0
  40ba6c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40ba70:	4641      	mov	r1, r8
  40ba72:	2200      	movs	r2, #0
  40ba74:	4bbe      	ldr	r3, [pc, #760]	; (40bd70 <_dtoa_r+0xda0>)
  40ba76:	4638      	mov	r0, r7
  40ba78:	f7fb f932 	bl	406ce0 <__aeabi_dsub>
  40ba7c:	462a      	mov	r2, r5
  40ba7e:	4633      	mov	r3, r6
  40ba80:	4682      	mov	sl, r0
  40ba82:	468b      	mov	fp, r1
  40ba84:	f002 fbb2 	bl	40e1ec <__aeabi_dcmpgt>
  40ba88:	4680      	mov	r8, r0
  40ba8a:	2800      	cmp	r0, #0
  40ba8c:	f040 8110 	bne.w	40bcb0 <_dtoa_r+0xce0>
  40ba90:	462a      	mov	r2, r5
  40ba92:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40ba96:	4650      	mov	r0, sl
  40ba98:	4659      	mov	r1, fp
  40ba9a:	f002 fb89 	bl	40e1b0 <__aeabi_dcmplt>
  40ba9e:	b118      	cbz	r0, 40baa8 <_dtoa_r+0xad8>
  40baa0:	4646      	mov	r6, r8
  40baa2:	e771      	b.n	40b988 <_dtoa_r+0x9b8>
  40baa4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40baa8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40baac:	f7ff bb8a 	b.w	40b1c4 <_dtoa_r+0x1f4>
  40bab0:	9804      	ldr	r0, [sp, #16]
  40bab2:	f7ff babb 	b.w	40b02c <_dtoa_r+0x5c>
  40bab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40bab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40baba:	970c      	str	r7, [sp, #48]	; 0x30
  40babc:	1afb      	subs	r3, r7, r3
  40babe:	441a      	add	r2, r3
  40bac0:	920d      	str	r2, [sp, #52]	; 0x34
  40bac2:	2700      	movs	r7, #0
  40bac4:	e469      	b.n	40b39a <_dtoa_r+0x3ca>
  40bac6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40baca:	f04f 0a02 	mov.w	sl, #2
  40bace:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40bad2:	e657      	b.n	40b784 <_dtoa_r+0x7b4>
  40bad4:	2100      	movs	r1, #0
  40bad6:	2301      	movs	r3, #1
  40bad8:	6461      	str	r1, [r4, #68]	; 0x44
  40bada:	4620      	mov	r0, r4
  40badc:	9325      	str	r3, [sp, #148]	; 0x94
  40bade:	f001 fa0f 	bl	40cf00 <_Balloc>
  40bae2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40bae4:	9004      	str	r0, [sp, #16]
  40bae6:	6420      	str	r0, [r4, #64]	; 0x40
  40bae8:	930a      	str	r3, [sp, #40]	; 0x28
  40baea:	930f      	str	r3, [sp, #60]	; 0x3c
  40baec:	e629      	b.n	40b742 <_dtoa_r+0x772>
  40baee:	2a00      	cmp	r2, #0
  40baf0:	46d0      	mov	r8, sl
  40baf2:	f8cd b018 	str.w	fp, [sp, #24]
  40baf6:	469a      	mov	sl, r3
  40baf8:	dd11      	ble.n	40bb1e <_dtoa_r+0xb4e>
  40bafa:	4649      	mov	r1, r9
  40bafc:	2201      	movs	r2, #1
  40bafe:	4620      	mov	r0, r4
  40bb00:	f001 fbaa 	bl	40d258 <__lshift>
  40bb04:	4641      	mov	r1, r8
  40bb06:	4681      	mov	r9, r0
  40bb08:	f001 fbf8 	bl	40d2fc <__mcmp>
  40bb0c:	2800      	cmp	r0, #0
  40bb0e:	f340 8146 	ble.w	40bd9e <_dtoa_r+0xdce>
  40bb12:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40bb16:	f000 8106 	beq.w	40bd26 <_dtoa_r+0xd56>
  40bb1a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40bb1e:	46b3      	mov	fp, r6
  40bb20:	f887 a000 	strb.w	sl, [r7]
  40bb24:	1c7d      	adds	r5, r7, #1
  40bb26:	9e06      	ldr	r6, [sp, #24]
  40bb28:	e5d2      	b.n	40b6d0 <_dtoa_r+0x700>
  40bb2a:	d104      	bne.n	40bb36 <_dtoa_r+0xb66>
  40bb2c:	f01a 0f01 	tst.w	sl, #1
  40bb30:	d001      	beq.n	40bb36 <_dtoa_r+0xb66>
  40bb32:	e5bd      	b.n	40b6b0 <_dtoa_r+0x6e0>
  40bb34:	4615      	mov	r5, r2
  40bb36:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40bb3a:	2b30      	cmp	r3, #48	; 0x30
  40bb3c:	f105 32ff 	add.w	r2, r5, #4294967295
  40bb40:	d0f8      	beq.n	40bb34 <_dtoa_r+0xb64>
  40bb42:	e5c5      	b.n	40b6d0 <_dtoa_r+0x700>
  40bb44:	9904      	ldr	r1, [sp, #16]
  40bb46:	2230      	movs	r2, #48	; 0x30
  40bb48:	700a      	strb	r2, [r1, #0]
  40bb4a:	9a02      	ldr	r2, [sp, #8]
  40bb4c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40bb50:	3201      	adds	r2, #1
  40bb52:	9202      	str	r2, [sp, #8]
  40bb54:	f7ff bbfc 	b.w	40b350 <_dtoa_r+0x380>
  40bb58:	f000 80bb 	beq.w	40bcd2 <_dtoa_r+0xd02>
  40bb5c:	9b02      	ldr	r3, [sp, #8]
  40bb5e:	425d      	negs	r5, r3
  40bb60:	4b84      	ldr	r3, [pc, #528]	; (40bd74 <_dtoa_r+0xda4>)
  40bb62:	f005 020f 	and.w	r2, r5, #15
  40bb66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40bb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40bb6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40bb72:	f7fb fa69 	bl	407048 <__aeabi_dmul>
  40bb76:	112d      	asrs	r5, r5, #4
  40bb78:	4607      	mov	r7, r0
  40bb7a:	4688      	mov	r8, r1
  40bb7c:	f000 812c 	beq.w	40bdd8 <_dtoa_r+0xe08>
  40bb80:	4e7d      	ldr	r6, [pc, #500]	; (40bd78 <_dtoa_r+0xda8>)
  40bb82:	f04f 0a02 	mov.w	sl, #2
  40bb86:	07eb      	lsls	r3, r5, #31
  40bb88:	d509      	bpl.n	40bb9e <_dtoa_r+0xbce>
  40bb8a:	4638      	mov	r0, r7
  40bb8c:	4641      	mov	r1, r8
  40bb8e:	e9d6 2300 	ldrd	r2, r3, [r6]
  40bb92:	f7fb fa59 	bl	407048 <__aeabi_dmul>
  40bb96:	f10a 0a01 	add.w	sl, sl, #1
  40bb9a:	4607      	mov	r7, r0
  40bb9c:	4688      	mov	r8, r1
  40bb9e:	106d      	asrs	r5, r5, #1
  40bba0:	f106 0608 	add.w	r6, r6, #8
  40bba4:	d1ef      	bne.n	40bb86 <_dtoa_r+0xbb6>
  40bba6:	e608      	b.n	40b7ba <_dtoa_r+0x7ea>
  40bba8:	6871      	ldr	r1, [r6, #4]
  40bbaa:	4620      	mov	r0, r4
  40bbac:	f001 f9a8 	bl	40cf00 <_Balloc>
  40bbb0:	6933      	ldr	r3, [r6, #16]
  40bbb2:	3302      	adds	r3, #2
  40bbb4:	009a      	lsls	r2, r3, #2
  40bbb6:	4605      	mov	r5, r0
  40bbb8:	f106 010c 	add.w	r1, r6, #12
  40bbbc:	300c      	adds	r0, #12
  40bbbe:	f7fb ffcd 	bl	407b5c <memcpy>
  40bbc2:	4629      	mov	r1, r5
  40bbc4:	2201      	movs	r2, #1
  40bbc6:	4620      	mov	r0, r4
  40bbc8:	f001 fb46 	bl	40d258 <__lshift>
  40bbcc:	9006      	str	r0, [sp, #24]
  40bbce:	e4b5      	b.n	40b53c <_dtoa_r+0x56c>
  40bbd0:	2b39      	cmp	r3, #57	; 0x39
  40bbd2:	f8cd b018 	str.w	fp, [sp, #24]
  40bbd6:	46d0      	mov	r8, sl
  40bbd8:	f000 80a5 	beq.w	40bd26 <_dtoa_r+0xd56>
  40bbdc:	f103 0a01 	add.w	sl, r3, #1
  40bbe0:	46b3      	mov	fp, r6
  40bbe2:	f887 a000 	strb.w	sl, [r7]
  40bbe6:	1c7d      	adds	r5, r7, #1
  40bbe8:	9e06      	ldr	r6, [sp, #24]
  40bbea:	e571      	b.n	40b6d0 <_dtoa_r+0x700>
  40bbec:	465a      	mov	r2, fp
  40bbee:	46d0      	mov	r8, sl
  40bbf0:	46b3      	mov	fp, r6
  40bbf2:	469a      	mov	sl, r3
  40bbf4:	4616      	mov	r6, r2
  40bbf6:	e54f      	b.n	40b698 <_dtoa_r+0x6c8>
  40bbf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40bbfa:	495e      	ldr	r1, [pc, #376]	; (40bd74 <_dtoa_r+0xda4>)
  40bbfc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40bc00:	462a      	mov	r2, r5
  40bc02:	4633      	mov	r3, r6
  40bc04:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  40bc08:	f7fb fa1e 	bl	407048 <__aeabi_dmul>
  40bc0c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  40bc10:	4638      	mov	r0, r7
  40bc12:	4641      	mov	r1, r8
  40bc14:	f002 fb0a 	bl	40e22c <__aeabi_d2iz>
  40bc18:	4605      	mov	r5, r0
  40bc1a:	f7fb f9af 	bl	406f7c <__aeabi_i2d>
  40bc1e:	460b      	mov	r3, r1
  40bc20:	4602      	mov	r2, r0
  40bc22:	4641      	mov	r1, r8
  40bc24:	4638      	mov	r0, r7
  40bc26:	f7fb f85b 	bl	406ce0 <__aeabi_dsub>
  40bc2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40bc2c:	460f      	mov	r7, r1
  40bc2e:	9904      	ldr	r1, [sp, #16]
  40bc30:	3530      	adds	r5, #48	; 0x30
  40bc32:	2b01      	cmp	r3, #1
  40bc34:	700d      	strb	r5, [r1, #0]
  40bc36:	4606      	mov	r6, r0
  40bc38:	f101 0501 	add.w	r5, r1, #1
  40bc3c:	d026      	beq.n	40bc8c <_dtoa_r+0xcbc>
  40bc3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40bc40:	9a04      	ldr	r2, [sp, #16]
  40bc42:	f8df b13c 	ldr.w	fp, [pc, #316]	; 40bd80 <_dtoa_r+0xdb0>
  40bc46:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40bc4a:	4413      	add	r3, r2
  40bc4c:	f04f 0a00 	mov.w	sl, #0
  40bc50:	4699      	mov	r9, r3
  40bc52:	4652      	mov	r2, sl
  40bc54:	465b      	mov	r3, fp
  40bc56:	4630      	mov	r0, r6
  40bc58:	4639      	mov	r1, r7
  40bc5a:	f7fb f9f5 	bl	407048 <__aeabi_dmul>
  40bc5e:	460f      	mov	r7, r1
  40bc60:	4606      	mov	r6, r0
  40bc62:	f002 fae3 	bl	40e22c <__aeabi_d2iz>
  40bc66:	4680      	mov	r8, r0
  40bc68:	f7fb f988 	bl	406f7c <__aeabi_i2d>
  40bc6c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40bc70:	4602      	mov	r2, r0
  40bc72:	460b      	mov	r3, r1
  40bc74:	4630      	mov	r0, r6
  40bc76:	4639      	mov	r1, r7
  40bc78:	f7fb f832 	bl	406ce0 <__aeabi_dsub>
  40bc7c:	f805 8b01 	strb.w	r8, [r5], #1
  40bc80:	454d      	cmp	r5, r9
  40bc82:	4606      	mov	r6, r0
  40bc84:	460f      	mov	r7, r1
  40bc86:	d1e4      	bne.n	40bc52 <_dtoa_r+0xc82>
  40bc88:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40bc8c:	4b3b      	ldr	r3, [pc, #236]	; (40bd7c <_dtoa_r+0xdac>)
  40bc8e:	2200      	movs	r2, #0
  40bc90:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40bc94:	f7fb f826 	bl	406ce4 <__adddf3>
  40bc98:	4632      	mov	r2, r6
  40bc9a:	463b      	mov	r3, r7
  40bc9c:	f002 fa88 	bl	40e1b0 <__aeabi_dcmplt>
  40bca0:	2800      	cmp	r0, #0
  40bca2:	d046      	beq.n	40bd32 <_dtoa_r+0xd62>
  40bca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40bca6:	9302      	str	r3, [sp, #8]
  40bca8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40bcac:	f7ff bb43 	b.w	40b336 <_dtoa_r+0x366>
  40bcb0:	f04f 0800 	mov.w	r8, #0
  40bcb4:	4646      	mov	r6, r8
  40bcb6:	e6a9      	b.n	40ba0c <_dtoa_r+0xa3c>
  40bcb8:	9b08      	ldr	r3, [sp, #32]
  40bcba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40bcbc:	1a9d      	subs	r5, r3, r2
  40bcbe:	2300      	movs	r3, #0
  40bcc0:	f7ff bb71 	b.w	40b3a6 <_dtoa_r+0x3d6>
  40bcc4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40bcc6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40bcc8:	9d08      	ldr	r5, [sp, #32]
  40bcca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40bcce:	f7ff bb6a 	b.w	40b3a6 <_dtoa_r+0x3d6>
  40bcd2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40bcd6:	f04f 0a02 	mov.w	sl, #2
  40bcda:	e56e      	b.n	40b7ba <_dtoa_r+0x7ea>
  40bcdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bcde:	2b00      	cmp	r3, #0
  40bce0:	f43f aeb8 	beq.w	40ba54 <_dtoa_r+0xa84>
  40bce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40bce6:	2b00      	cmp	r3, #0
  40bce8:	f77f aede 	ble.w	40baa8 <_dtoa_r+0xad8>
  40bcec:	2200      	movs	r2, #0
  40bcee:	4b24      	ldr	r3, [pc, #144]	; (40bd80 <_dtoa_r+0xdb0>)
  40bcf0:	4638      	mov	r0, r7
  40bcf2:	4641      	mov	r1, r8
  40bcf4:	f7fb f9a8 	bl	407048 <__aeabi_dmul>
  40bcf8:	4607      	mov	r7, r0
  40bcfa:	4688      	mov	r8, r1
  40bcfc:	f10a 0001 	add.w	r0, sl, #1
  40bd00:	f7fb f93c 	bl	406f7c <__aeabi_i2d>
  40bd04:	463a      	mov	r2, r7
  40bd06:	4643      	mov	r3, r8
  40bd08:	f7fb f99e 	bl	407048 <__aeabi_dmul>
  40bd0c:	2200      	movs	r2, #0
  40bd0e:	4b17      	ldr	r3, [pc, #92]	; (40bd6c <_dtoa_r+0xd9c>)
  40bd10:	f7fa ffe8 	bl	406ce4 <__adddf3>
  40bd14:	9a02      	ldr	r2, [sp, #8]
  40bd16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40bd18:	9312      	str	r3, [sp, #72]	; 0x48
  40bd1a:	3a01      	subs	r2, #1
  40bd1c:	4605      	mov	r5, r0
  40bd1e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40bd22:	9215      	str	r2, [sp, #84]	; 0x54
  40bd24:	e56a      	b.n	40b7fc <_dtoa_r+0x82c>
  40bd26:	2239      	movs	r2, #57	; 0x39
  40bd28:	46b3      	mov	fp, r6
  40bd2a:	703a      	strb	r2, [r7, #0]
  40bd2c:	9e06      	ldr	r6, [sp, #24]
  40bd2e:	1c7d      	adds	r5, r7, #1
  40bd30:	e4c0      	b.n	40b6b4 <_dtoa_r+0x6e4>
  40bd32:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40bd36:	2000      	movs	r0, #0
  40bd38:	4910      	ldr	r1, [pc, #64]	; (40bd7c <_dtoa_r+0xdac>)
  40bd3a:	f7fa ffd1 	bl	406ce0 <__aeabi_dsub>
  40bd3e:	4632      	mov	r2, r6
  40bd40:	463b      	mov	r3, r7
  40bd42:	f002 fa53 	bl	40e1ec <__aeabi_dcmpgt>
  40bd46:	b908      	cbnz	r0, 40bd4c <_dtoa_r+0xd7c>
  40bd48:	e6ae      	b.n	40baa8 <_dtoa_r+0xad8>
  40bd4a:	4615      	mov	r5, r2
  40bd4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40bd50:	2b30      	cmp	r3, #48	; 0x30
  40bd52:	f105 32ff 	add.w	r2, r5, #4294967295
  40bd56:	d0f8      	beq.n	40bd4a <_dtoa_r+0xd7a>
  40bd58:	e5d7      	b.n	40b90a <_dtoa_r+0x93a>
  40bd5a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40bd5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40bd60:	9302      	str	r3, [sp, #8]
  40bd62:	f7ff bae8 	b.w	40b336 <_dtoa_r+0x366>
  40bd66:	970c      	str	r7, [sp, #48]	; 0x30
  40bd68:	f7ff bba5 	b.w	40b4b6 <_dtoa_r+0x4e6>
  40bd6c:	401c0000 	.word	0x401c0000
  40bd70:	40140000 	.word	0x40140000
  40bd74:	0040faf8 	.word	0x0040faf8
  40bd78:	0040fad0 	.word	0x0040fad0
  40bd7c:	3fe00000 	.word	0x3fe00000
  40bd80:	40240000 	.word	0x40240000
  40bd84:	2b39      	cmp	r3, #57	; 0x39
  40bd86:	f8cd b018 	str.w	fp, [sp, #24]
  40bd8a:	46d0      	mov	r8, sl
  40bd8c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40bd90:	469a      	mov	sl, r3
  40bd92:	d0c8      	beq.n	40bd26 <_dtoa_r+0xd56>
  40bd94:	f1bb 0f00 	cmp.w	fp, #0
  40bd98:	f73f aebf 	bgt.w	40bb1a <_dtoa_r+0xb4a>
  40bd9c:	e6bf      	b.n	40bb1e <_dtoa_r+0xb4e>
  40bd9e:	f47f aebe 	bne.w	40bb1e <_dtoa_r+0xb4e>
  40bda2:	f01a 0f01 	tst.w	sl, #1
  40bda6:	f43f aeba 	beq.w	40bb1e <_dtoa_r+0xb4e>
  40bdaa:	e6b2      	b.n	40bb12 <_dtoa_r+0xb42>
  40bdac:	f04f 0800 	mov.w	r8, #0
  40bdb0:	4646      	mov	r6, r8
  40bdb2:	e5e9      	b.n	40b988 <_dtoa_r+0x9b8>
  40bdb4:	4631      	mov	r1, r6
  40bdb6:	2300      	movs	r3, #0
  40bdb8:	220a      	movs	r2, #10
  40bdba:	4620      	mov	r0, r4
  40bdbc:	f001 f8d0 	bl	40cf60 <__multadd>
  40bdc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40bdc2:	2b00      	cmp	r3, #0
  40bdc4:	4606      	mov	r6, r0
  40bdc6:	dd0a      	ble.n	40bdde <_dtoa_r+0xe0e>
  40bdc8:	930a      	str	r3, [sp, #40]	; 0x28
  40bdca:	f7ff bbaa 	b.w	40b522 <_dtoa_r+0x552>
  40bdce:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40bdd0:	2b02      	cmp	r3, #2
  40bdd2:	dc23      	bgt.n	40be1c <_dtoa_r+0xe4c>
  40bdd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40bdd6:	e43b      	b.n	40b650 <_dtoa_r+0x680>
  40bdd8:	f04f 0a02 	mov.w	sl, #2
  40bddc:	e4ed      	b.n	40b7ba <_dtoa_r+0x7ea>
  40bdde:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40bde0:	2b02      	cmp	r3, #2
  40bde2:	dc1b      	bgt.n	40be1c <_dtoa_r+0xe4c>
  40bde4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40bde6:	e7ef      	b.n	40bdc8 <_dtoa_r+0xdf8>
  40bde8:	2500      	movs	r5, #0
  40bdea:	6465      	str	r5, [r4, #68]	; 0x44
  40bdec:	4629      	mov	r1, r5
  40bdee:	4620      	mov	r0, r4
  40bdf0:	f001 f886 	bl	40cf00 <_Balloc>
  40bdf4:	f04f 33ff 	mov.w	r3, #4294967295
  40bdf8:	930a      	str	r3, [sp, #40]	; 0x28
  40bdfa:	930f      	str	r3, [sp, #60]	; 0x3c
  40bdfc:	2301      	movs	r3, #1
  40bdfe:	9004      	str	r0, [sp, #16]
  40be00:	9525      	str	r5, [sp, #148]	; 0x94
  40be02:	6420      	str	r0, [r4, #64]	; 0x40
  40be04:	930b      	str	r3, [sp, #44]	; 0x2c
  40be06:	f7ff b9dd 	b.w	40b1c4 <_dtoa_r+0x1f4>
  40be0a:	2501      	movs	r5, #1
  40be0c:	f7ff b9a5 	b.w	40b15a <_dtoa_r+0x18a>
  40be10:	f43f ab69 	beq.w	40b4e6 <_dtoa_r+0x516>
  40be14:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40be18:	f7ff bbf9 	b.w	40b60e <_dtoa_r+0x63e>
  40be1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40be1e:	930a      	str	r3, [sp, #40]	; 0x28
  40be20:	e5e5      	b.n	40b9ee <_dtoa_r+0xa1e>
  40be22:	bf00      	nop

0040be24 <__sflush_r>:
  40be24:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40be28:	b29a      	uxth	r2, r3
  40be2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40be2e:	460d      	mov	r5, r1
  40be30:	0711      	lsls	r1, r2, #28
  40be32:	4680      	mov	r8, r0
  40be34:	d43a      	bmi.n	40beac <__sflush_r+0x88>
  40be36:	686a      	ldr	r2, [r5, #4]
  40be38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40be3c:	2a00      	cmp	r2, #0
  40be3e:	81ab      	strh	r3, [r5, #12]
  40be40:	dd6f      	ble.n	40bf22 <__sflush_r+0xfe>
  40be42:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40be44:	2c00      	cmp	r4, #0
  40be46:	d049      	beq.n	40bedc <__sflush_r+0xb8>
  40be48:	2200      	movs	r2, #0
  40be4a:	b29b      	uxth	r3, r3
  40be4c:	f8d8 6000 	ldr.w	r6, [r8]
  40be50:	f8c8 2000 	str.w	r2, [r8]
  40be54:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40be58:	d067      	beq.n	40bf2a <__sflush_r+0x106>
  40be5a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40be5c:	075f      	lsls	r7, r3, #29
  40be5e:	d505      	bpl.n	40be6c <__sflush_r+0x48>
  40be60:	6869      	ldr	r1, [r5, #4]
  40be62:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40be64:	1a52      	subs	r2, r2, r1
  40be66:	b10b      	cbz	r3, 40be6c <__sflush_r+0x48>
  40be68:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40be6a:	1ad2      	subs	r2, r2, r3
  40be6c:	2300      	movs	r3, #0
  40be6e:	69e9      	ldr	r1, [r5, #28]
  40be70:	4640      	mov	r0, r8
  40be72:	47a0      	blx	r4
  40be74:	1c44      	adds	r4, r0, #1
  40be76:	d03c      	beq.n	40bef2 <__sflush_r+0xce>
  40be78:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40be7c:	692a      	ldr	r2, [r5, #16]
  40be7e:	602a      	str	r2, [r5, #0]
  40be80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40be84:	2200      	movs	r2, #0
  40be86:	81ab      	strh	r3, [r5, #12]
  40be88:	04db      	lsls	r3, r3, #19
  40be8a:	606a      	str	r2, [r5, #4]
  40be8c:	d447      	bmi.n	40bf1e <__sflush_r+0xfa>
  40be8e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40be90:	f8c8 6000 	str.w	r6, [r8]
  40be94:	b311      	cbz	r1, 40bedc <__sflush_r+0xb8>
  40be96:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40be9a:	4299      	cmp	r1, r3
  40be9c:	d002      	beq.n	40bea4 <__sflush_r+0x80>
  40be9e:	4640      	mov	r0, r8
  40bea0:	f000 f96c 	bl	40c17c <_free_r>
  40bea4:	2000      	movs	r0, #0
  40bea6:	6328      	str	r0, [r5, #48]	; 0x30
  40bea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40beac:	692e      	ldr	r6, [r5, #16]
  40beae:	b1ae      	cbz	r6, 40bedc <__sflush_r+0xb8>
  40beb0:	682c      	ldr	r4, [r5, #0]
  40beb2:	602e      	str	r6, [r5, #0]
  40beb4:	0791      	lsls	r1, r2, #30
  40beb6:	bf0c      	ite	eq
  40beb8:	696b      	ldreq	r3, [r5, #20]
  40beba:	2300      	movne	r3, #0
  40bebc:	1ba4      	subs	r4, r4, r6
  40bebe:	60ab      	str	r3, [r5, #8]
  40bec0:	e00a      	b.n	40bed8 <__sflush_r+0xb4>
  40bec2:	4623      	mov	r3, r4
  40bec4:	4632      	mov	r2, r6
  40bec6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40bec8:	69e9      	ldr	r1, [r5, #28]
  40beca:	4640      	mov	r0, r8
  40becc:	47b8      	blx	r7
  40bece:	2800      	cmp	r0, #0
  40bed0:	eba4 0400 	sub.w	r4, r4, r0
  40bed4:	4406      	add	r6, r0
  40bed6:	dd04      	ble.n	40bee2 <__sflush_r+0xbe>
  40bed8:	2c00      	cmp	r4, #0
  40beda:	dcf2      	bgt.n	40bec2 <__sflush_r+0x9e>
  40bedc:	2000      	movs	r0, #0
  40bede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bee2:	89ab      	ldrh	r3, [r5, #12]
  40bee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40bee8:	81ab      	strh	r3, [r5, #12]
  40beea:	f04f 30ff 	mov.w	r0, #4294967295
  40beee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bef2:	f8d8 4000 	ldr.w	r4, [r8]
  40bef6:	2c1d      	cmp	r4, #29
  40bef8:	d8f3      	bhi.n	40bee2 <__sflush_r+0xbe>
  40befa:	4b19      	ldr	r3, [pc, #100]	; (40bf60 <__sflush_r+0x13c>)
  40befc:	40e3      	lsrs	r3, r4
  40befe:	43db      	mvns	r3, r3
  40bf00:	f013 0301 	ands.w	r3, r3, #1
  40bf04:	d1ed      	bne.n	40bee2 <__sflush_r+0xbe>
  40bf06:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40bf0a:	606b      	str	r3, [r5, #4]
  40bf0c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40bf10:	6929      	ldr	r1, [r5, #16]
  40bf12:	81ab      	strh	r3, [r5, #12]
  40bf14:	04da      	lsls	r2, r3, #19
  40bf16:	6029      	str	r1, [r5, #0]
  40bf18:	d5b9      	bpl.n	40be8e <__sflush_r+0x6a>
  40bf1a:	2c00      	cmp	r4, #0
  40bf1c:	d1b7      	bne.n	40be8e <__sflush_r+0x6a>
  40bf1e:	6528      	str	r0, [r5, #80]	; 0x50
  40bf20:	e7b5      	b.n	40be8e <__sflush_r+0x6a>
  40bf22:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40bf24:	2a00      	cmp	r2, #0
  40bf26:	dc8c      	bgt.n	40be42 <__sflush_r+0x1e>
  40bf28:	e7d8      	b.n	40bedc <__sflush_r+0xb8>
  40bf2a:	2301      	movs	r3, #1
  40bf2c:	69e9      	ldr	r1, [r5, #28]
  40bf2e:	4640      	mov	r0, r8
  40bf30:	47a0      	blx	r4
  40bf32:	1c43      	adds	r3, r0, #1
  40bf34:	4602      	mov	r2, r0
  40bf36:	d002      	beq.n	40bf3e <__sflush_r+0x11a>
  40bf38:	89ab      	ldrh	r3, [r5, #12]
  40bf3a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40bf3c:	e78e      	b.n	40be5c <__sflush_r+0x38>
  40bf3e:	f8d8 3000 	ldr.w	r3, [r8]
  40bf42:	2b00      	cmp	r3, #0
  40bf44:	d0f8      	beq.n	40bf38 <__sflush_r+0x114>
  40bf46:	2b1d      	cmp	r3, #29
  40bf48:	d001      	beq.n	40bf4e <__sflush_r+0x12a>
  40bf4a:	2b16      	cmp	r3, #22
  40bf4c:	d102      	bne.n	40bf54 <__sflush_r+0x130>
  40bf4e:	f8c8 6000 	str.w	r6, [r8]
  40bf52:	e7c3      	b.n	40bedc <__sflush_r+0xb8>
  40bf54:	89ab      	ldrh	r3, [r5, #12]
  40bf56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40bf5a:	81ab      	strh	r3, [r5, #12]
  40bf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bf60:	20400001 	.word	0x20400001

0040bf64 <_fflush_r>:
  40bf64:	b538      	push	{r3, r4, r5, lr}
  40bf66:	460d      	mov	r5, r1
  40bf68:	4604      	mov	r4, r0
  40bf6a:	b108      	cbz	r0, 40bf70 <_fflush_r+0xc>
  40bf6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40bf6e:	b1bb      	cbz	r3, 40bfa0 <_fflush_r+0x3c>
  40bf70:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40bf74:	b188      	cbz	r0, 40bf9a <_fflush_r+0x36>
  40bf76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40bf78:	07db      	lsls	r3, r3, #31
  40bf7a:	d401      	bmi.n	40bf80 <_fflush_r+0x1c>
  40bf7c:	0581      	lsls	r1, r0, #22
  40bf7e:	d517      	bpl.n	40bfb0 <_fflush_r+0x4c>
  40bf80:	4620      	mov	r0, r4
  40bf82:	4629      	mov	r1, r5
  40bf84:	f7ff ff4e 	bl	40be24 <__sflush_r>
  40bf88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40bf8a:	07da      	lsls	r2, r3, #31
  40bf8c:	4604      	mov	r4, r0
  40bf8e:	d402      	bmi.n	40bf96 <_fflush_r+0x32>
  40bf90:	89ab      	ldrh	r3, [r5, #12]
  40bf92:	059b      	lsls	r3, r3, #22
  40bf94:	d507      	bpl.n	40bfa6 <_fflush_r+0x42>
  40bf96:	4620      	mov	r0, r4
  40bf98:	bd38      	pop	{r3, r4, r5, pc}
  40bf9a:	4604      	mov	r4, r0
  40bf9c:	4620      	mov	r0, r4
  40bf9e:	bd38      	pop	{r3, r4, r5, pc}
  40bfa0:	f000 f84a 	bl	40c038 <__sinit>
  40bfa4:	e7e4      	b.n	40bf70 <_fflush_r+0xc>
  40bfa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40bfa8:	f000 fbaa 	bl	40c700 <__retarget_lock_release_recursive>
  40bfac:	4620      	mov	r0, r4
  40bfae:	bd38      	pop	{r3, r4, r5, pc}
  40bfb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40bfb2:	f000 fba3 	bl	40c6fc <__retarget_lock_acquire_recursive>
  40bfb6:	e7e3      	b.n	40bf80 <_fflush_r+0x1c>

0040bfb8 <fflush>:
  40bfb8:	b120      	cbz	r0, 40bfc4 <fflush+0xc>
  40bfba:	4b05      	ldr	r3, [pc, #20]	; (40bfd0 <fflush+0x18>)
  40bfbc:	4601      	mov	r1, r0
  40bfbe:	6818      	ldr	r0, [r3, #0]
  40bfc0:	f7ff bfd0 	b.w	40bf64 <_fflush_r>
  40bfc4:	4b03      	ldr	r3, [pc, #12]	; (40bfd4 <fflush+0x1c>)
  40bfc6:	4904      	ldr	r1, [pc, #16]	; (40bfd8 <fflush+0x20>)
  40bfc8:	6818      	ldr	r0, [r3, #0]
  40bfca:	f000 bb5b 	b.w	40c684 <_fwalk_reent>
  40bfce:	bf00      	nop
  40bfd0:	20000378 	.word	0x20000378
  40bfd4:	0040fa38 	.word	0x0040fa38
  40bfd8:	0040bf65 	.word	0x0040bf65

0040bfdc <_cleanup_r>:
  40bfdc:	4901      	ldr	r1, [pc, #4]	; (40bfe4 <_cleanup_r+0x8>)
  40bfde:	f000 bb51 	b.w	40c684 <_fwalk_reent>
  40bfe2:	bf00      	nop
  40bfe4:	0040dd19 	.word	0x0040dd19

0040bfe8 <std.isra.0>:
  40bfe8:	b510      	push	{r4, lr}
  40bfea:	2300      	movs	r3, #0
  40bfec:	4604      	mov	r4, r0
  40bfee:	8181      	strh	r1, [r0, #12]
  40bff0:	81c2      	strh	r2, [r0, #14]
  40bff2:	6003      	str	r3, [r0, #0]
  40bff4:	6043      	str	r3, [r0, #4]
  40bff6:	6083      	str	r3, [r0, #8]
  40bff8:	6643      	str	r3, [r0, #100]	; 0x64
  40bffa:	6103      	str	r3, [r0, #16]
  40bffc:	6143      	str	r3, [r0, #20]
  40bffe:	6183      	str	r3, [r0, #24]
  40c000:	4619      	mov	r1, r3
  40c002:	2208      	movs	r2, #8
  40c004:	305c      	adds	r0, #92	; 0x5c
  40c006:	f7fb fe43 	bl	407c90 <memset>
  40c00a:	4807      	ldr	r0, [pc, #28]	; (40c028 <std.isra.0+0x40>)
  40c00c:	4907      	ldr	r1, [pc, #28]	; (40c02c <std.isra.0+0x44>)
  40c00e:	4a08      	ldr	r2, [pc, #32]	; (40c030 <std.isra.0+0x48>)
  40c010:	4b08      	ldr	r3, [pc, #32]	; (40c034 <std.isra.0+0x4c>)
  40c012:	6220      	str	r0, [r4, #32]
  40c014:	61e4      	str	r4, [r4, #28]
  40c016:	6261      	str	r1, [r4, #36]	; 0x24
  40c018:	62a2      	str	r2, [r4, #40]	; 0x28
  40c01a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40c01c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40c020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40c024:	f000 bb66 	b.w	40c6f4 <__retarget_lock_init_recursive>
  40c028:	0040d98d 	.word	0x0040d98d
  40c02c:	0040d9b1 	.word	0x0040d9b1
  40c030:	0040d9ed 	.word	0x0040d9ed
  40c034:	0040da0d 	.word	0x0040da0d

0040c038 <__sinit>:
  40c038:	b510      	push	{r4, lr}
  40c03a:	4604      	mov	r4, r0
  40c03c:	4812      	ldr	r0, [pc, #72]	; (40c088 <__sinit+0x50>)
  40c03e:	f000 fb5d 	bl	40c6fc <__retarget_lock_acquire_recursive>
  40c042:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40c044:	b9d2      	cbnz	r2, 40c07c <__sinit+0x44>
  40c046:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40c04a:	4810      	ldr	r0, [pc, #64]	; (40c08c <__sinit+0x54>)
  40c04c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40c050:	2103      	movs	r1, #3
  40c052:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40c056:	63e0      	str	r0, [r4, #60]	; 0x3c
  40c058:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40c05c:	6860      	ldr	r0, [r4, #4]
  40c05e:	2104      	movs	r1, #4
  40c060:	f7ff ffc2 	bl	40bfe8 <std.isra.0>
  40c064:	2201      	movs	r2, #1
  40c066:	2109      	movs	r1, #9
  40c068:	68a0      	ldr	r0, [r4, #8]
  40c06a:	f7ff ffbd 	bl	40bfe8 <std.isra.0>
  40c06e:	2202      	movs	r2, #2
  40c070:	2112      	movs	r1, #18
  40c072:	68e0      	ldr	r0, [r4, #12]
  40c074:	f7ff ffb8 	bl	40bfe8 <std.isra.0>
  40c078:	2301      	movs	r3, #1
  40c07a:	63a3      	str	r3, [r4, #56]	; 0x38
  40c07c:	4802      	ldr	r0, [pc, #8]	; (40c088 <__sinit+0x50>)
  40c07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40c082:	f000 bb3d 	b.w	40c700 <__retarget_lock_release_recursive>
  40c086:	bf00      	nop
  40c088:	2002225c 	.word	0x2002225c
  40c08c:	0040bfdd 	.word	0x0040bfdd

0040c090 <__sfp_lock_acquire>:
  40c090:	4801      	ldr	r0, [pc, #4]	; (40c098 <__sfp_lock_acquire+0x8>)
  40c092:	f000 bb33 	b.w	40c6fc <__retarget_lock_acquire_recursive>
  40c096:	bf00      	nop
  40c098:	20022270 	.word	0x20022270

0040c09c <__sfp_lock_release>:
  40c09c:	4801      	ldr	r0, [pc, #4]	; (40c0a4 <__sfp_lock_release+0x8>)
  40c09e:	f000 bb2f 	b.w	40c700 <__retarget_lock_release_recursive>
  40c0a2:	bf00      	nop
  40c0a4:	20022270 	.word	0x20022270

0040c0a8 <__libc_fini_array>:
  40c0a8:	b538      	push	{r3, r4, r5, lr}
  40c0aa:	4c0a      	ldr	r4, [pc, #40]	; (40c0d4 <__libc_fini_array+0x2c>)
  40c0ac:	4d0a      	ldr	r5, [pc, #40]	; (40c0d8 <__libc_fini_array+0x30>)
  40c0ae:	1b64      	subs	r4, r4, r5
  40c0b0:	10a4      	asrs	r4, r4, #2
  40c0b2:	d00a      	beq.n	40c0ca <__libc_fini_array+0x22>
  40c0b4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40c0b8:	3b01      	subs	r3, #1
  40c0ba:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40c0be:	3c01      	subs	r4, #1
  40c0c0:	f855 3904 	ldr.w	r3, [r5], #-4
  40c0c4:	4798      	blx	r3
  40c0c6:	2c00      	cmp	r4, #0
  40c0c8:	d1f9      	bne.n	40c0be <__libc_fini_array+0x16>
  40c0ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40c0ce:	f003 be11 	b.w	40fcf4 <_fini>
  40c0d2:	bf00      	nop
  40c0d4:	0040fd04 	.word	0x0040fd04
  40c0d8:	0040fd00 	.word	0x0040fd00

0040c0dc <_malloc_trim_r>:
  40c0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c0de:	4f24      	ldr	r7, [pc, #144]	; (40c170 <_malloc_trim_r+0x94>)
  40c0e0:	460c      	mov	r4, r1
  40c0e2:	4606      	mov	r6, r0
  40c0e4:	f000 ff00 	bl	40cee8 <__malloc_lock>
  40c0e8:	68bb      	ldr	r3, [r7, #8]
  40c0ea:	685d      	ldr	r5, [r3, #4]
  40c0ec:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40c0f0:	310f      	adds	r1, #15
  40c0f2:	f025 0503 	bic.w	r5, r5, #3
  40c0f6:	4429      	add	r1, r5
  40c0f8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40c0fc:	f021 010f 	bic.w	r1, r1, #15
  40c100:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40c104:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40c108:	db07      	blt.n	40c11a <_malloc_trim_r+0x3e>
  40c10a:	2100      	movs	r1, #0
  40c10c:	4630      	mov	r0, r6
  40c10e:	f001 fc2b 	bl	40d968 <_sbrk_r>
  40c112:	68bb      	ldr	r3, [r7, #8]
  40c114:	442b      	add	r3, r5
  40c116:	4298      	cmp	r0, r3
  40c118:	d004      	beq.n	40c124 <_malloc_trim_r+0x48>
  40c11a:	4630      	mov	r0, r6
  40c11c:	f000 feea 	bl	40cef4 <__malloc_unlock>
  40c120:	2000      	movs	r0, #0
  40c122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40c124:	4261      	negs	r1, r4
  40c126:	4630      	mov	r0, r6
  40c128:	f001 fc1e 	bl	40d968 <_sbrk_r>
  40c12c:	3001      	adds	r0, #1
  40c12e:	d00d      	beq.n	40c14c <_malloc_trim_r+0x70>
  40c130:	4b10      	ldr	r3, [pc, #64]	; (40c174 <_malloc_trim_r+0x98>)
  40c132:	68ba      	ldr	r2, [r7, #8]
  40c134:	6819      	ldr	r1, [r3, #0]
  40c136:	1b2d      	subs	r5, r5, r4
  40c138:	f045 0501 	orr.w	r5, r5, #1
  40c13c:	4630      	mov	r0, r6
  40c13e:	1b09      	subs	r1, r1, r4
  40c140:	6055      	str	r5, [r2, #4]
  40c142:	6019      	str	r1, [r3, #0]
  40c144:	f000 fed6 	bl	40cef4 <__malloc_unlock>
  40c148:	2001      	movs	r0, #1
  40c14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40c14c:	2100      	movs	r1, #0
  40c14e:	4630      	mov	r0, r6
  40c150:	f001 fc0a 	bl	40d968 <_sbrk_r>
  40c154:	68ba      	ldr	r2, [r7, #8]
  40c156:	1a83      	subs	r3, r0, r2
  40c158:	2b0f      	cmp	r3, #15
  40c15a:	ddde      	ble.n	40c11a <_malloc_trim_r+0x3e>
  40c15c:	4c06      	ldr	r4, [pc, #24]	; (40c178 <_malloc_trim_r+0x9c>)
  40c15e:	4905      	ldr	r1, [pc, #20]	; (40c174 <_malloc_trim_r+0x98>)
  40c160:	6824      	ldr	r4, [r4, #0]
  40c162:	f043 0301 	orr.w	r3, r3, #1
  40c166:	1b00      	subs	r0, r0, r4
  40c168:	6053      	str	r3, [r2, #4]
  40c16a:	6008      	str	r0, [r1, #0]
  40c16c:	e7d5      	b.n	40c11a <_malloc_trim_r+0x3e>
  40c16e:	bf00      	nop
  40c170:	200007ac 	.word	0x200007ac
  40c174:	2001a130 	.word	0x2001a130
  40c178:	20000bb4 	.word	0x20000bb4

0040c17c <_free_r>:
  40c17c:	2900      	cmp	r1, #0
  40c17e:	d044      	beq.n	40c20a <_free_r+0x8e>
  40c180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c184:	460d      	mov	r5, r1
  40c186:	4680      	mov	r8, r0
  40c188:	f000 feae 	bl	40cee8 <__malloc_lock>
  40c18c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40c190:	4969      	ldr	r1, [pc, #420]	; (40c338 <_free_r+0x1bc>)
  40c192:	f027 0301 	bic.w	r3, r7, #1
  40c196:	f1a5 0408 	sub.w	r4, r5, #8
  40c19a:	18e2      	adds	r2, r4, r3
  40c19c:	688e      	ldr	r6, [r1, #8]
  40c19e:	6850      	ldr	r0, [r2, #4]
  40c1a0:	42b2      	cmp	r2, r6
  40c1a2:	f020 0003 	bic.w	r0, r0, #3
  40c1a6:	d05e      	beq.n	40c266 <_free_r+0xea>
  40c1a8:	07fe      	lsls	r6, r7, #31
  40c1aa:	6050      	str	r0, [r2, #4]
  40c1ac:	d40b      	bmi.n	40c1c6 <_free_r+0x4a>
  40c1ae:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40c1b2:	1be4      	subs	r4, r4, r7
  40c1b4:	f101 0e08 	add.w	lr, r1, #8
  40c1b8:	68a5      	ldr	r5, [r4, #8]
  40c1ba:	4575      	cmp	r5, lr
  40c1bc:	443b      	add	r3, r7
  40c1be:	d06d      	beq.n	40c29c <_free_r+0x120>
  40c1c0:	68e7      	ldr	r7, [r4, #12]
  40c1c2:	60ef      	str	r7, [r5, #12]
  40c1c4:	60bd      	str	r5, [r7, #8]
  40c1c6:	1815      	adds	r5, r2, r0
  40c1c8:	686d      	ldr	r5, [r5, #4]
  40c1ca:	07ed      	lsls	r5, r5, #31
  40c1cc:	d53e      	bpl.n	40c24c <_free_r+0xd0>
  40c1ce:	f043 0201 	orr.w	r2, r3, #1
  40c1d2:	6062      	str	r2, [r4, #4]
  40c1d4:	50e3      	str	r3, [r4, r3]
  40c1d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40c1da:	d217      	bcs.n	40c20c <_free_r+0x90>
  40c1dc:	08db      	lsrs	r3, r3, #3
  40c1de:	1c58      	adds	r0, r3, #1
  40c1e0:	109a      	asrs	r2, r3, #2
  40c1e2:	684d      	ldr	r5, [r1, #4]
  40c1e4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40c1e8:	60a7      	str	r7, [r4, #8]
  40c1ea:	2301      	movs	r3, #1
  40c1ec:	4093      	lsls	r3, r2
  40c1ee:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40c1f2:	432b      	orrs	r3, r5
  40c1f4:	3a08      	subs	r2, #8
  40c1f6:	60e2      	str	r2, [r4, #12]
  40c1f8:	604b      	str	r3, [r1, #4]
  40c1fa:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40c1fe:	60fc      	str	r4, [r7, #12]
  40c200:	4640      	mov	r0, r8
  40c202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40c206:	f000 be75 	b.w	40cef4 <__malloc_unlock>
  40c20a:	4770      	bx	lr
  40c20c:	0a5a      	lsrs	r2, r3, #9
  40c20e:	2a04      	cmp	r2, #4
  40c210:	d852      	bhi.n	40c2b8 <_free_r+0x13c>
  40c212:	099a      	lsrs	r2, r3, #6
  40c214:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40c218:	00ff      	lsls	r7, r7, #3
  40c21a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40c21e:	19c8      	adds	r0, r1, r7
  40c220:	59ca      	ldr	r2, [r1, r7]
  40c222:	3808      	subs	r0, #8
  40c224:	4290      	cmp	r0, r2
  40c226:	d04f      	beq.n	40c2c8 <_free_r+0x14c>
  40c228:	6851      	ldr	r1, [r2, #4]
  40c22a:	f021 0103 	bic.w	r1, r1, #3
  40c22e:	428b      	cmp	r3, r1
  40c230:	d232      	bcs.n	40c298 <_free_r+0x11c>
  40c232:	6892      	ldr	r2, [r2, #8]
  40c234:	4290      	cmp	r0, r2
  40c236:	d1f7      	bne.n	40c228 <_free_r+0xac>
  40c238:	68c3      	ldr	r3, [r0, #12]
  40c23a:	60a0      	str	r0, [r4, #8]
  40c23c:	60e3      	str	r3, [r4, #12]
  40c23e:	609c      	str	r4, [r3, #8]
  40c240:	60c4      	str	r4, [r0, #12]
  40c242:	4640      	mov	r0, r8
  40c244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40c248:	f000 be54 	b.w	40cef4 <__malloc_unlock>
  40c24c:	6895      	ldr	r5, [r2, #8]
  40c24e:	4f3b      	ldr	r7, [pc, #236]	; (40c33c <_free_r+0x1c0>)
  40c250:	42bd      	cmp	r5, r7
  40c252:	4403      	add	r3, r0
  40c254:	d040      	beq.n	40c2d8 <_free_r+0x15c>
  40c256:	68d0      	ldr	r0, [r2, #12]
  40c258:	60e8      	str	r0, [r5, #12]
  40c25a:	f043 0201 	orr.w	r2, r3, #1
  40c25e:	6085      	str	r5, [r0, #8]
  40c260:	6062      	str	r2, [r4, #4]
  40c262:	50e3      	str	r3, [r4, r3]
  40c264:	e7b7      	b.n	40c1d6 <_free_r+0x5a>
  40c266:	07ff      	lsls	r7, r7, #31
  40c268:	4403      	add	r3, r0
  40c26a:	d407      	bmi.n	40c27c <_free_r+0x100>
  40c26c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40c270:	1aa4      	subs	r4, r4, r2
  40c272:	4413      	add	r3, r2
  40c274:	68a0      	ldr	r0, [r4, #8]
  40c276:	68e2      	ldr	r2, [r4, #12]
  40c278:	60c2      	str	r2, [r0, #12]
  40c27a:	6090      	str	r0, [r2, #8]
  40c27c:	4a30      	ldr	r2, [pc, #192]	; (40c340 <_free_r+0x1c4>)
  40c27e:	6812      	ldr	r2, [r2, #0]
  40c280:	f043 0001 	orr.w	r0, r3, #1
  40c284:	4293      	cmp	r3, r2
  40c286:	6060      	str	r0, [r4, #4]
  40c288:	608c      	str	r4, [r1, #8]
  40c28a:	d3b9      	bcc.n	40c200 <_free_r+0x84>
  40c28c:	4b2d      	ldr	r3, [pc, #180]	; (40c344 <_free_r+0x1c8>)
  40c28e:	4640      	mov	r0, r8
  40c290:	6819      	ldr	r1, [r3, #0]
  40c292:	f7ff ff23 	bl	40c0dc <_malloc_trim_r>
  40c296:	e7b3      	b.n	40c200 <_free_r+0x84>
  40c298:	4610      	mov	r0, r2
  40c29a:	e7cd      	b.n	40c238 <_free_r+0xbc>
  40c29c:	1811      	adds	r1, r2, r0
  40c29e:	6849      	ldr	r1, [r1, #4]
  40c2a0:	07c9      	lsls	r1, r1, #31
  40c2a2:	d444      	bmi.n	40c32e <_free_r+0x1b2>
  40c2a4:	6891      	ldr	r1, [r2, #8]
  40c2a6:	68d2      	ldr	r2, [r2, #12]
  40c2a8:	60ca      	str	r2, [r1, #12]
  40c2aa:	4403      	add	r3, r0
  40c2ac:	f043 0001 	orr.w	r0, r3, #1
  40c2b0:	6091      	str	r1, [r2, #8]
  40c2b2:	6060      	str	r0, [r4, #4]
  40c2b4:	50e3      	str	r3, [r4, r3]
  40c2b6:	e7a3      	b.n	40c200 <_free_r+0x84>
  40c2b8:	2a14      	cmp	r2, #20
  40c2ba:	d816      	bhi.n	40c2ea <_free_r+0x16e>
  40c2bc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40c2c0:	00ff      	lsls	r7, r7, #3
  40c2c2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40c2c6:	e7aa      	b.n	40c21e <_free_r+0xa2>
  40c2c8:	10aa      	asrs	r2, r5, #2
  40c2ca:	2301      	movs	r3, #1
  40c2cc:	684d      	ldr	r5, [r1, #4]
  40c2ce:	4093      	lsls	r3, r2
  40c2d0:	432b      	orrs	r3, r5
  40c2d2:	604b      	str	r3, [r1, #4]
  40c2d4:	4603      	mov	r3, r0
  40c2d6:	e7b0      	b.n	40c23a <_free_r+0xbe>
  40c2d8:	f043 0201 	orr.w	r2, r3, #1
  40c2dc:	614c      	str	r4, [r1, #20]
  40c2de:	610c      	str	r4, [r1, #16]
  40c2e0:	60e5      	str	r5, [r4, #12]
  40c2e2:	60a5      	str	r5, [r4, #8]
  40c2e4:	6062      	str	r2, [r4, #4]
  40c2e6:	50e3      	str	r3, [r4, r3]
  40c2e8:	e78a      	b.n	40c200 <_free_r+0x84>
  40c2ea:	2a54      	cmp	r2, #84	; 0x54
  40c2ec:	d806      	bhi.n	40c2fc <_free_r+0x180>
  40c2ee:	0b1a      	lsrs	r2, r3, #12
  40c2f0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40c2f4:	00ff      	lsls	r7, r7, #3
  40c2f6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40c2fa:	e790      	b.n	40c21e <_free_r+0xa2>
  40c2fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40c300:	d806      	bhi.n	40c310 <_free_r+0x194>
  40c302:	0bda      	lsrs	r2, r3, #15
  40c304:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40c308:	00ff      	lsls	r7, r7, #3
  40c30a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40c30e:	e786      	b.n	40c21e <_free_r+0xa2>
  40c310:	f240 5054 	movw	r0, #1364	; 0x554
  40c314:	4282      	cmp	r2, r0
  40c316:	d806      	bhi.n	40c326 <_free_r+0x1aa>
  40c318:	0c9a      	lsrs	r2, r3, #18
  40c31a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40c31e:	00ff      	lsls	r7, r7, #3
  40c320:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40c324:	e77b      	b.n	40c21e <_free_r+0xa2>
  40c326:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40c32a:	257e      	movs	r5, #126	; 0x7e
  40c32c:	e777      	b.n	40c21e <_free_r+0xa2>
  40c32e:	f043 0101 	orr.w	r1, r3, #1
  40c332:	6061      	str	r1, [r4, #4]
  40c334:	6013      	str	r3, [r2, #0]
  40c336:	e763      	b.n	40c200 <_free_r+0x84>
  40c338:	200007ac 	.word	0x200007ac
  40c33c:	200007b4 	.word	0x200007b4
  40c340:	20000bb8 	.word	0x20000bb8
  40c344:	2001a160 	.word	0x2001a160

0040c348 <__sfvwrite_r>:
  40c348:	6893      	ldr	r3, [r2, #8]
  40c34a:	2b00      	cmp	r3, #0
  40c34c:	d073      	beq.n	40c436 <__sfvwrite_r+0xee>
  40c34e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c352:	898b      	ldrh	r3, [r1, #12]
  40c354:	b083      	sub	sp, #12
  40c356:	460c      	mov	r4, r1
  40c358:	0719      	lsls	r1, r3, #28
  40c35a:	9000      	str	r0, [sp, #0]
  40c35c:	4616      	mov	r6, r2
  40c35e:	d526      	bpl.n	40c3ae <__sfvwrite_r+0x66>
  40c360:	6922      	ldr	r2, [r4, #16]
  40c362:	b322      	cbz	r2, 40c3ae <__sfvwrite_r+0x66>
  40c364:	f013 0002 	ands.w	r0, r3, #2
  40c368:	6835      	ldr	r5, [r6, #0]
  40c36a:	d02c      	beq.n	40c3c6 <__sfvwrite_r+0x7e>
  40c36c:	f04f 0900 	mov.w	r9, #0
  40c370:	4fb0      	ldr	r7, [pc, #704]	; (40c634 <__sfvwrite_r+0x2ec>)
  40c372:	46c8      	mov	r8, r9
  40c374:	46b2      	mov	sl, r6
  40c376:	45b8      	cmp	r8, r7
  40c378:	4643      	mov	r3, r8
  40c37a:	464a      	mov	r2, r9
  40c37c:	bf28      	it	cs
  40c37e:	463b      	movcs	r3, r7
  40c380:	9800      	ldr	r0, [sp, #0]
  40c382:	f1b8 0f00 	cmp.w	r8, #0
  40c386:	d050      	beq.n	40c42a <__sfvwrite_r+0xe2>
  40c388:	69e1      	ldr	r1, [r4, #28]
  40c38a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40c38c:	47b0      	blx	r6
  40c38e:	2800      	cmp	r0, #0
  40c390:	dd58      	ble.n	40c444 <__sfvwrite_r+0xfc>
  40c392:	f8da 3008 	ldr.w	r3, [sl, #8]
  40c396:	1a1b      	subs	r3, r3, r0
  40c398:	4481      	add	r9, r0
  40c39a:	eba8 0800 	sub.w	r8, r8, r0
  40c39e:	f8ca 3008 	str.w	r3, [sl, #8]
  40c3a2:	2b00      	cmp	r3, #0
  40c3a4:	d1e7      	bne.n	40c376 <__sfvwrite_r+0x2e>
  40c3a6:	2000      	movs	r0, #0
  40c3a8:	b003      	add	sp, #12
  40c3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c3ae:	4621      	mov	r1, r4
  40c3b0:	9800      	ldr	r0, [sp, #0]
  40c3b2:	f7fe fc8f 	bl	40acd4 <__swsetup_r>
  40c3b6:	2800      	cmp	r0, #0
  40c3b8:	f040 8133 	bne.w	40c622 <__sfvwrite_r+0x2da>
  40c3bc:	89a3      	ldrh	r3, [r4, #12]
  40c3be:	6835      	ldr	r5, [r6, #0]
  40c3c0:	f013 0002 	ands.w	r0, r3, #2
  40c3c4:	d1d2      	bne.n	40c36c <__sfvwrite_r+0x24>
  40c3c6:	f013 0901 	ands.w	r9, r3, #1
  40c3ca:	d145      	bne.n	40c458 <__sfvwrite_r+0x110>
  40c3cc:	464f      	mov	r7, r9
  40c3ce:	9601      	str	r6, [sp, #4]
  40c3d0:	b337      	cbz	r7, 40c420 <__sfvwrite_r+0xd8>
  40c3d2:	059a      	lsls	r2, r3, #22
  40c3d4:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40c3d8:	f140 8083 	bpl.w	40c4e2 <__sfvwrite_r+0x19a>
  40c3dc:	4547      	cmp	r7, r8
  40c3de:	46c3      	mov	fp, r8
  40c3e0:	f0c0 80ab 	bcc.w	40c53a <__sfvwrite_r+0x1f2>
  40c3e4:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40c3e8:	f040 80ac 	bne.w	40c544 <__sfvwrite_r+0x1fc>
  40c3ec:	6820      	ldr	r0, [r4, #0]
  40c3ee:	46ba      	mov	sl, r7
  40c3f0:	465a      	mov	r2, fp
  40c3f2:	4649      	mov	r1, r9
  40c3f4:	f000 fd14 	bl	40ce20 <memmove>
  40c3f8:	68a2      	ldr	r2, [r4, #8]
  40c3fa:	6823      	ldr	r3, [r4, #0]
  40c3fc:	eba2 0208 	sub.w	r2, r2, r8
  40c400:	445b      	add	r3, fp
  40c402:	60a2      	str	r2, [r4, #8]
  40c404:	6023      	str	r3, [r4, #0]
  40c406:	9a01      	ldr	r2, [sp, #4]
  40c408:	6893      	ldr	r3, [r2, #8]
  40c40a:	eba3 030a 	sub.w	r3, r3, sl
  40c40e:	44d1      	add	r9, sl
  40c410:	eba7 070a 	sub.w	r7, r7, sl
  40c414:	6093      	str	r3, [r2, #8]
  40c416:	2b00      	cmp	r3, #0
  40c418:	d0c5      	beq.n	40c3a6 <__sfvwrite_r+0x5e>
  40c41a:	89a3      	ldrh	r3, [r4, #12]
  40c41c:	2f00      	cmp	r7, #0
  40c41e:	d1d8      	bne.n	40c3d2 <__sfvwrite_r+0x8a>
  40c420:	f8d5 9000 	ldr.w	r9, [r5]
  40c424:	686f      	ldr	r7, [r5, #4]
  40c426:	3508      	adds	r5, #8
  40c428:	e7d2      	b.n	40c3d0 <__sfvwrite_r+0x88>
  40c42a:	f8d5 9000 	ldr.w	r9, [r5]
  40c42e:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40c432:	3508      	adds	r5, #8
  40c434:	e79f      	b.n	40c376 <__sfvwrite_r+0x2e>
  40c436:	2000      	movs	r0, #0
  40c438:	4770      	bx	lr
  40c43a:	4621      	mov	r1, r4
  40c43c:	9800      	ldr	r0, [sp, #0]
  40c43e:	f7ff fd91 	bl	40bf64 <_fflush_r>
  40c442:	b370      	cbz	r0, 40c4a2 <__sfvwrite_r+0x15a>
  40c444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c44c:	f04f 30ff 	mov.w	r0, #4294967295
  40c450:	81a3      	strh	r3, [r4, #12]
  40c452:	b003      	add	sp, #12
  40c454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c458:	4681      	mov	r9, r0
  40c45a:	4633      	mov	r3, r6
  40c45c:	464e      	mov	r6, r9
  40c45e:	46a8      	mov	r8, r5
  40c460:	469a      	mov	sl, r3
  40c462:	464d      	mov	r5, r9
  40c464:	b34e      	cbz	r6, 40c4ba <__sfvwrite_r+0x172>
  40c466:	b380      	cbz	r0, 40c4ca <__sfvwrite_r+0x182>
  40c468:	6820      	ldr	r0, [r4, #0]
  40c46a:	6923      	ldr	r3, [r4, #16]
  40c46c:	6962      	ldr	r2, [r4, #20]
  40c46e:	45b1      	cmp	r9, r6
  40c470:	46cb      	mov	fp, r9
  40c472:	bf28      	it	cs
  40c474:	46b3      	movcs	fp, r6
  40c476:	4298      	cmp	r0, r3
  40c478:	465f      	mov	r7, fp
  40c47a:	d904      	bls.n	40c486 <__sfvwrite_r+0x13e>
  40c47c:	68a3      	ldr	r3, [r4, #8]
  40c47e:	4413      	add	r3, r2
  40c480:	459b      	cmp	fp, r3
  40c482:	f300 80a6 	bgt.w	40c5d2 <__sfvwrite_r+0x28a>
  40c486:	4593      	cmp	fp, r2
  40c488:	db4b      	blt.n	40c522 <__sfvwrite_r+0x1da>
  40c48a:	4613      	mov	r3, r2
  40c48c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40c48e:	69e1      	ldr	r1, [r4, #28]
  40c490:	9800      	ldr	r0, [sp, #0]
  40c492:	462a      	mov	r2, r5
  40c494:	47b8      	blx	r7
  40c496:	1e07      	subs	r7, r0, #0
  40c498:	ddd4      	ble.n	40c444 <__sfvwrite_r+0xfc>
  40c49a:	ebb9 0907 	subs.w	r9, r9, r7
  40c49e:	d0cc      	beq.n	40c43a <__sfvwrite_r+0xf2>
  40c4a0:	2001      	movs	r0, #1
  40c4a2:	f8da 3008 	ldr.w	r3, [sl, #8]
  40c4a6:	1bdb      	subs	r3, r3, r7
  40c4a8:	443d      	add	r5, r7
  40c4aa:	1bf6      	subs	r6, r6, r7
  40c4ac:	f8ca 3008 	str.w	r3, [sl, #8]
  40c4b0:	2b00      	cmp	r3, #0
  40c4b2:	f43f af78 	beq.w	40c3a6 <__sfvwrite_r+0x5e>
  40c4b6:	2e00      	cmp	r6, #0
  40c4b8:	d1d5      	bne.n	40c466 <__sfvwrite_r+0x11e>
  40c4ba:	f108 0308 	add.w	r3, r8, #8
  40c4be:	e913 0060 	ldmdb	r3, {r5, r6}
  40c4c2:	4698      	mov	r8, r3
  40c4c4:	3308      	adds	r3, #8
  40c4c6:	2e00      	cmp	r6, #0
  40c4c8:	d0f9      	beq.n	40c4be <__sfvwrite_r+0x176>
  40c4ca:	4632      	mov	r2, r6
  40c4cc:	210a      	movs	r1, #10
  40c4ce:	4628      	mov	r0, r5
  40c4d0:	f000 fc56 	bl	40cd80 <memchr>
  40c4d4:	2800      	cmp	r0, #0
  40c4d6:	f000 80a1 	beq.w	40c61c <__sfvwrite_r+0x2d4>
  40c4da:	3001      	adds	r0, #1
  40c4dc:	eba0 0905 	sub.w	r9, r0, r5
  40c4e0:	e7c2      	b.n	40c468 <__sfvwrite_r+0x120>
  40c4e2:	6820      	ldr	r0, [r4, #0]
  40c4e4:	6923      	ldr	r3, [r4, #16]
  40c4e6:	4298      	cmp	r0, r3
  40c4e8:	d802      	bhi.n	40c4f0 <__sfvwrite_r+0x1a8>
  40c4ea:	6963      	ldr	r3, [r4, #20]
  40c4ec:	429f      	cmp	r7, r3
  40c4ee:	d25d      	bcs.n	40c5ac <__sfvwrite_r+0x264>
  40c4f0:	45b8      	cmp	r8, r7
  40c4f2:	bf28      	it	cs
  40c4f4:	46b8      	movcs	r8, r7
  40c4f6:	4642      	mov	r2, r8
  40c4f8:	4649      	mov	r1, r9
  40c4fa:	f000 fc91 	bl	40ce20 <memmove>
  40c4fe:	68a3      	ldr	r3, [r4, #8]
  40c500:	6822      	ldr	r2, [r4, #0]
  40c502:	eba3 0308 	sub.w	r3, r3, r8
  40c506:	4442      	add	r2, r8
  40c508:	60a3      	str	r3, [r4, #8]
  40c50a:	6022      	str	r2, [r4, #0]
  40c50c:	b10b      	cbz	r3, 40c512 <__sfvwrite_r+0x1ca>
  40c50e:	46c2      	mov	sl, r8
  40c510:	e779      	b.n	40c406 <__sfvwrite_r+0xbe>
  40c512:	4621      	mov	r1, r4
  40c514:	9800      	ldr	r0, [sp, #0]
  40c516:	f7ff fd25 	bl	40bf64 <_fflush_r>
  40c51a:	2800      	cmp	r0, #0
  40c51c:	d192      	bne.n	40c444 <__sfvwrite_r+0xfc>
  40c51e:	46c2      	mov	sl, r8
  40c520:	e771      	b.n	40c406 <__sfvwrite_r+0xbe>
  40c522:	465a      	mov	r2, fp
  40c524:	4629      	mov	r1, r5
  40c526:	f000 fc7b 	bl	40ce20 <memmove>
  40c52a:	68a2      	ldr	r2, [r4, #8]
  40c52c:	6823      	ldr	r3, [r4, #0]
  40c52e:	eba2 020b 	sub.w	r2, r2, fp
  40c532:	445b      	add	r3, fp
  40c534:	60a2      	str	r2, [r4, #8]
  40c536:	6023      	str	r3, [r4, #0]
  40c538:	e7af      	b.n	40c49a <__sfvwrite_r+0x152>
  40c53a:	6820      	ldr	r0, [r4, #0]
  40c53c:	46b8      	mov	r8, r7
  40c53e:	46ba      	mov	sl, r7
  40c540:	46bb      	mov	fp, r7
  40c542:	e755      	b.n	40c3f0 <__sfvwrite_r+0xa8>
  40c544:	6962      	ldr	r2, [r4, #20]
  40c546:	6820      	ldr	r0, [r4, #0]
  40c548:	6921      	ldr	r1, [r4, #16]
  40c54a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40c54e:	eba0 0a01 	sub.w	sl, r0, r1
  40c552:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40c556:	f10a 0001 	add.w	r0, sl, #1
  40c55a:	ea4f 0868 	mov.w	r8, r8, asr #1
  40c55e:	4438      	add	r0, r7
  40c560:	4540      	cmp	r0, r8
  40c562:	4642      	mov	r2, r8
  40c564:	bf84      	itt	hi
  40c566:	4680      	movhi	r8, r0
  40c568:	4642      	movhi	r2, r8
  40c56a:	055b      	lsls	r3, r3, #21
  40c56c:	d544      	bpl.n	40c5f8 <__sfvwrite_r+0x2b0>
  40c56e:	4611      	mov	r1, r2
  40c570:	9800      	ldr	r0, [sp, #0]
  40c572:	f000 f94f 	bl	40c814 <_malloc_r>
  40c576:	4683      	mov	fp, r0
  40c578:	2800      	cmp	r0, #0
  40c57a:	d055      	beq.n	40c628 <__sfvwrite_r+0x2e0>
  40c57c:	4652      	mov	r2, sl
  40c57e:	6921      	ldr	r1, [r4, #16]
  40c580:	f7fb faec 	bl	407b5c <memcpy>
  40c584:	89a3      	ldrh	r3, [r4, #12]
  40c586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40c58a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40c58e:	81a3      	strh	r3, [r4, #12]
  40c590:	eb0b 000a 	add.w	r0, fp, sl
  40c594:	eba8 030a 	sub.w	r3, r8, sl
  40c598:	f8c4 b010 	str.w	fp, [r4, #16]
  40c59c:	f8c4 8014 	str.w	r8, [r4, #20]
  40c5a0:	6020      	str	r0, [r4, #0]
  40c5a2:	60a3      	str	r3, [r4, #8]
  40c5a4:	46b8      	mov	r8, r7
  40c5a6:	46ba      	mov	sl, r7
  40c5a8:	46bb      	mov	fp, r7
  40c5aa:	e721      	b.n	40c3f0 <__sfvwrite_r+0xa8>
  40c5ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40c5b0:	42b9      	cmp	r1, r7
  40c5b2:	bf28      	it	cs
  40c5b4:	4639      	movcs	r1, r7
  40c5b6:	464a      	mov	r2, r9
  40c5b8:	fb91 f1f3 	sdiv	r1, r1, r3
  40c5bc:	9800      	ldr	r0, [sp, #0]
  40c5be:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40c5c0:	fb03 f301 	mul.w	r3, r3, r1
  40c5c4:	69e1      	ldr	r1, [r4, #28]
  40c5c6:	47b0      	blx	r6
  40c5c8:	f1b0 0a00 	subs.w	sl, r0, #0
  40c5cc:	f73f af1b 	bgt.w	40c406 <__sfvwrite_r+0xbe>
  40c5d0:	e738      	b.n	40c444 <__sfvwrite_r+0xfc>
  40c5d2:	461a      	mov	r2, r3
  40c5d4:	4629      	mov	r1, r5
  40c5d6:	9301      	str	r3, [sp, #4]
  40c5d8:	f000 fc22 	bl	40ce20 <memmove>
  40c5dc:	6822      	ldr	r2, [r4, #0]
  40c5de:	9b01      	ldr	r3, [sp, #4]
  40c5e0:	9800      	ldr	r0, [sp, #0]
  40c5e2:	441a      	add	r2, r3
  40c5e4:	6022      	str	r2, [r4, #0]
  40c5e6:	4621      	mov	r1, r4
  40c5e8:	f7ff fcbc 	bl	40bf64 <_fflush_r>
  40c5ec:	9b01      	ldr	r3, [sp, #4]
  40c5ee:	2800      	cmp	r0, #0
  40c5f0:	f47f af28 	bne.w	40c444 <__sfvwrite_r+0xfc>
  40c5f4:	461f      	mov	r7, r3
  40c5f6:	e750      	b.n	40c49a <__sfvwrite_r+0x152>
  40c5f8:	9800      	ldr	r0, [sp, #0]
  40c5fa:	f000 ff7b 	bl	40d4f4 <_realloc_r>
  40c5fe:	4683      	mov	fp, r0
  40c600:	2800      	cmp	r0, #0
  40c602:	d1c5      	bne.n	40c590 <__sfvwrite_r+0x248>
  40c604:	9d00      	ldr	r5, [sp, #0]
  40c606:	6921      	ldr	r1, [r4, #16]
  40c608:	4628      	mov	r0, r5
  40c60a:	f7ff fdb7 	bl	40c17c <_free_r>
  40c60e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c612:	220c      	movs	r2, #12
  40c614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40c618:	602a      	str	r2, [r5, #0]
  40c61a:	e715      	b.n	40c448 <__sfvwrite_r+0x100>
  40c61c:	f106 0901 	add.w	r9, r6, #1
  40c620:	e722      	b.n	40c468 <__sfvwrite_r+0x120>
  40c622:	f04f 30ff 	mov.w	r0, #4294967295
  40c626:	e6bf      	b.n	40c3a8 <__sfvwrite_r+0x60>
  40c628:	9a00      	ldr	r2, [sp, #0]
  40c62a:	230c      	movs	r3, #12
  40c62c:	6013      	str	r3, [r2, #0]
  40c62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c632:	e709      	b.n	40c448 <__sfvwrite_r+0x100>
  40c634:	7ffffc00 	.word	0x7ffffc00

0040c638 <_fwalk>:
  40c638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c63c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40c640:	d01b      	beq.n	40c67a <_fwalk+0x42>
  40c642:	4688      	mov	r8, r1
  40c644:	2600      	movs	r6, #0
  40c646:	687d      	ldr	r5, [r7, #4]
  40c648:	68bc      	ldr	r4, [r7, #8]
  40c64a:	3d01      	subs	r5, #1
  40c64c:	d40f      	bmi.n	40c66e <_fwalk+0x36>
  40c64e:	89a3      	ldrh	r3, [r4, #12]
  40c650:	2b01      	cmp	r3, #1
  40c652:	f105 35ff 	add.w	r5, r5, #4294967295
  40c656:	d906      	bls.n	40c666 <_fwalk+0x2e>
  40c658:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40c65c:	3301      	adds	r3, #1
  40c65e:	4620      	mov	r0, r4
  40c660:	d001      	beq.n	40c666 <_fwalk+0x2e>
  40c662:	47c0      	blx	r8
  40c664:	4306      	orrs	r6, r0
  40c666:	1c6b      	adds	r3, r5, #1
  40c668:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40c66c:	d1ef      	bne.n	40c64e <_fwalk+0x16>
  40c66e:	683f      	ldr	r7, [r7, #0]
  40c670:	2f00      	cmp	r7, #0
  40c672:	d1e8      	bne.n	40c646 <_fwalk+0xe>
  40c674:	4630      	mov	r0, r6
  40c676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c67a:	463e      	mov	r6, r7
  40c67c:	4630      	mov	r0, r6
  40c67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c682:	bf00      	nop

0040c684 <_fwalk_reent>:
  40c684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c688:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40c68c:	d01f      	beq.n	40c6ce <_fwalk_reent+0x4a>
  40c68e:	4688      	mov	r8, r1
  40c690:	4606      	mov	r6, r0
  40c692:	f04f 0900 	mov.w	r9, #0
  40c696:	687d      	ldr	r5, [r7, #4]
  40c698:	68bc      	ldr	r4, [r7, #8]
  40c69a:	3d01      	subs	r5, #1
  40c69c:	d411      	bmi.n	40c6c2 <_fwalk_reent+0x3e>
  40c69e:	89a3      	ldrh	r3, [r4, #12]
  40c6a0:	2b01      	cmp	r3, #1
  40c6a2:	f105 35ff 	add.w	r5, r5, #4294967295
  40c6a6:	d908      	bls.n	40c6ba <_fwalk_reent+0x36>
  40c6a8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40c6ac:	3301      	adds	r3, #1
  40c6ae:	4621      	mov	r1, r4
  40c6b0:	4630      	mov	r0, r6
  40c6b2:	d002      	beq.n	40c6ba <_fwalk_reent+0x36>
  40c6b4:	47c0      	blx	r8
  40c6b6:	ea49 0900 	orr.w	r9, r9, r0
  40c6ba:	1c6b      	adds	r3, r5, #1
  40c6bc:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40c6c0:	d1ed      	bne.n	40c69e <_fwalk_reent+0x1a>
  40c6c2:	683f      	ldr	r7, [r7, #0]
  40c6c4:	2f00      	cmp	r7, #0
  40c6c6:	d1e6      	bne.n	40c696 <_fwalk_reent+0x12>
  40c6c8:	4648      	mov	r0, r9
  40c6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c6ce:	46b9      	mov	r9, r7
  40c6d0:	4648      	mov	r0, r9
  40c6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c6d6:	bf00      	nop

0040c6d8 <_localeconv_r>:
  40c6d8:	4a04      	ldr	r2, [pc, #16]	; (40c6ec <_localeconv_r+0x14>)
  40c6da:	4b05      	ldr	r3, [pc, #20]	; (40c6f0 <_localeconv_r+0x18>)
  40c6dc:	6812      	ldr	r2, [r2, #0]
  40c6de:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40c6e0:	2800      	cmp	r0, #0
  40c6e2:	bf08      	it	eq
  40c6e4:	4618      	moveq	r0, r3
  40c6e6:	30f0      	adds	r0, #240	; 0xf0
  40c6e8:	4770      	bx	lr
  40c6ea:	bf00      	nop
  40c6ec:	20000378 	.word	0x20000378
  40c6f0:	20000bbc 	.word	0x20000bbc

0040c6f4 <__retarget_lock_init_recursive>:
  40c6f4:	4770      	bx	lr
  40c6f6:	bf00      	nop

0040c6f8 <__retarget_lock_close_recursive>:
  40c6f8:	4770      	bx	lr
  40c6fa:	bf00      	nop

0040c6fc <__retarget_lock_acquire_recursive>:
  40c6fc:	4770      	bx	lr
  40c6fe:	bf00      	nop

0040c700 <__retarget_lock_release_recursive>:
  40c700:	4770      	bx	lr
  40c702:	bf00      	nop

0040c704 <__swhatbuf_r>:
  40c704:	b570      	push	{r4, r5, r6, lr}
  40c706:	460c      	mov	r4, r1
  40c708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c70c:	2900      	cmp	r1, #0
  40c70e:	b090      	sub	sp, #64	; 0x40
  40c710:	4615      	mov	r5, r2
  40c712:	461e      	mov	r6, r3
  40c714:	db14      	blt.n	40c740 <__swhatbuf_r+0x3c>
  40c716:	aa01      	add	r2, sp, #4
  40c718:	f001 fbe4 	bl	40dee4 <_fstat_r>
  40c71c:	2800      	cmp	r0, #0
  40c71e:	db0f      	blt.n	40c740 <__swhatbuf_r+0x3c>
  40c720:	9a02      	ldr	r2, [sp, #8]
  40c722:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40c726:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40c72a:	fab2 f282 	clz	r2, r2
  40c72e:	0952      	lsrs	r2, r2, #5
  40c730:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40c734:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40c738:	6032      	str	r2, [r6, #0]
  40c73a:	602b      	str	r3, [r5, #0]
  40c73c:	b010      	add	sp, #64	; 0x40
  40c73e:	bd70      	pop	{r4, r5, r6, pc}
  40c740:	89a2      	ldrh	r2, [r4, #12]
  40c742:	2300      	movs	r3, #0
  40c744:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40c748:	6033      	str	r3, [r6, #0]
  40c74a:	d004      	beq.n	40c756 <__swhatbuf_r+0x52>
  40c74c:	2240      	movs	r2, #64	; 0x40
  40c74e:	4618      	mov	r0, r3
  40c750:	602a      	str	r2, [r5, #0]
  40c752:	b010      	add	sp, #64	; 0x40
  40c754:	bd70      	pop	{r4, r5, r6, pc}
  40c756:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40c75a:	602b      	str	r3, [r5, #0]
  40c75c:	b010      	add	sp, #64	; 0x40
  40c75e:	bd70      	pop	{r4, r5, r6, pc}

0040c760 <__smakebuf_r>:
  40c760:	898a      	ldrh	r2, [r1, #12]
  40c762:	0792      	lsls	r2, r2, #30
  40c764:	460b      	mov	r3, r1
  40c766:	d506      	bpl.n	40c776 <__smakebuf_r+0x16>
  40c768:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40c76c:	2101      	movs	r1, #1
  40c76e:	601a      	str	r2, [r3, #0]
  40c770:	611a      	str	r2, [r3, #16]
  40c772:	6159      	str	r1, [r3, #20]
  40c774:	4770      	bx	lr
  40c776:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c778:	b083      	sub	sp, #12
  40c77a:	ab01      	add	r3, sp, #4
  40c77c:	466a      	mov	r2, sp
  40c77e:	460c      	mov	r4, r1
  40c780:	4606      	mov	r6, r0
  40c782:	f7ff ffbf 	bl	40c704 <__swhatbuf_r>
  40c786:	9900      	ldr	r1, [sp, #0]
  40c788:	4605      	mov	r5, r0
  40c78a:	4630      	mov	r0, r6
  40c78c:	f000 f842 	bl	40c814 <_malloc_r>
  40c790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c794:	b1d8      	cbz	r0, 40c7ce <__smakebuf_r+0x6e>
  40c796:	9a01      	ldr	r2, [sp, #4]
  40c798:	4f15      	ldr	r7, [pc, #84]	; (40c7f0 <__smakebuf_r+0x90>)
  40c79a:	9900      	ldr	r1, [sp, #0]
  40c79c:	63f7      	str	r7, [r6, #60]	; 0x3c
  40c79e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40c7a2:	81a3      	strh	r3, [r4, #12]
  40c7a4:	6020      	str	r0, [r4, #0]
  40c7a6:	6120      	str	r0, [r4, #16]
  40c7a8:	6161      	str	r1, [r4, #20]
  40c7aa:	b91a      	cbnz	r2, 40c7b4 <__smakebuf_r+0x54>
  40c7ac:	432b      	orrs	r3, r5
  40c7ae:	81a3      	strh	r3, [r4, #12]
  40c7b0:	b003      	add	sp, #12
  40c7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c7b4:	4630      	mov	r0, r6
  40c7b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40c7ba:	f001 fba7 	bl	40df0c <_isatty_r>
  40c7be:	b1a0      	cbz	r0, 40c7ea <__smakebuf_r+0x8a>
  40c7c0:	89a3      	ldrh	r3, [r4, #12]
  40c7c2:	f023 0303 	bic.w	r3, r3, #3
  40c7c6:	f043 0301 	orr.w	r3, r3, #1
  40c7ca:	b21b      	sxth	r3, r3
  40c7cc:	e7ee      	b.n	40c7ac <__smakebuf_r+0x4c>
  40c7ce:	059a      	lsls	r2, r3, #22
  40c7d0:	d4ee      	bmi.n	40c7b0 <__smakebuf_r+0x50>
  40c7d2:	f023 0303 	bic.w	r3, r3, #3
  40c7d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40c7da:	f043 0302 	orr.w	r3, r3, #2
  40c7de:	2101      	movs	r1, #1
  40c7e0:	81a3      	strh	r3, [r4, #12]
  40c7e2:	6022      	str	r2, [r4, #0]
  40c7e4:	6122      	str	r2, [r4, #16]
  40c7e6:	6161      	str	r1, [r4, #20]
  40c7e8:	e7e2      	b.n	40c7b0 <__smakebuf_r+0x50>
  40c7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c7ee:	e7dd      	b.n	40c7ac <__smakebuf_r+0x4c>
  40c7f0:	0040bfdd 	.word	0x0040bfdd

0040c7f4 <malloc>:
  40c7f4:	4b02      	ldr	r3, [pc, #8]	; (40c800 <malloc+0xc>)
  40c7f6:	4601      	mov	r1, r0
  40c7f8:	6818      	ldr	r0, [r3, #0]
  40c7fa:	f000 b80b 	b.w	40c814 <_malloc_r>
  40c7fe:	bf00      	nop
  40c800:	20000378 	.word	0x20000378

0040c804 <free>:
  40c804:	4b02      	ldr	r3, [pc, #8]	; (40c810 <free+0xc>)
  40c806:	4601      	mov	r1, r0
  40c808:	6818      	ldr	r0, [r3, #0]
  40c80a:	f7ff bcb7 	b.w	40c17c <_free_r>
  40c80e:	bf00      	nop
  40c810:	20000378 	.word	0x20000378

0040c814 <_malloc_r>:
  40c814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c818:	f101 060b 	add.w	r6, r1, #11
  40c81c:	2e16      	cmp	r6, #22
  40c81e:	b083      	sub	sp, #12
  40c820:	4605      	mov	r5, r0
  40c822:	f240 809e 	bls.w	40c962 <_malloc_r+0x14e>
  40c826:	f036 0607 	bics.w	r6, r6, #7
  40c82a:	f100 80bd 	bmi.w	40c9a8 <_malloc_r+0x194>
  40c82e:	42b1      	cmp	r1, r6
  40c830:	f200 80ba 	bhi.w	40c9a8 <_malloc_r+0x194>
  40c834:	f000 fb58 	bl	40cee8 <__malloc_lock>
  40c838:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40c83c:	f0c0 8293 	bcc.w	40cd66 <_malloc_r+0x552>
  40c840:	0a73      	lsrs	r3, r6, #9
  40c842:	f000 80b8 	beq.w	40c9b6 <_malloc_r+0x1a2>
  40c846:	2b04      	cmp	r3, #4
  40c848:	f200 8179 	bhi.w	40cb3e <_malloc_r+0x32a>
  40c84c:	09b3      	lsrs	r3, r6, #6
  40c84e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40c852:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40c856:	00c3      	lsls	r3, r0, #3
  40c858:	4fbf      	ldr	r7, [pc, #764]	; (40cb58 <_malloc_r+0x344>)
  40c85a:	443b      	add	r3, r7
  40c85c:	f1a3 0108 	sub.w	r1, r3, #8
  40c860:	685c      	ldr	r4, [r3, #4]
  40c862:	42a1      	cmp	r1, r4
  40c864:	d106      	bne.n	40c874 <_malloc_r+0x60>
  40c866:	e00c      	b.n	40c882 <_malloc_r+0x6e>
  40c868:	2a00      	cmp	r2, #0
  40c86a:	f280 80aa 	bge.w	40c9c2 <_malloc_r+0x1ae>
  40c86e:	68e4      	ldr	r4, [r4, #12]
  40c870:	42a1      	cmp	r1, r4
  40c872:	d006      	beq.n	40c882 <_malloc_r+0x6e>
  40c874:	6863      	ldr	r3, [r4, #4]
  40c876:	f023 0303 	bic.w	r3, r3, #3
  40c87a:	1b9a      	subs	r2, r3, r6
  40c87c:	2a0f      	cmp	r2, #15
  40c87e:	ddf3      	ble.n	40c868 <_malloc_r+0x54>
  40c880:	4670      	mov	r0, lr
  40c882:	693c      	ldr	r4, [r7, #16]
  40c884:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40cb6c <_malloc_r+0x358>
  40c888:	4574      	cmp	r4, lr
  40c88a:	f000 81ab 	beq.w	40cbe4 <_malloc_r+0x3d0>
  40c88e:	6863      	ldr	r3, [r4, #4]
  40c890:	f023 0303 	bic.w	r3, r3, #3
  40c894:	1b9a      	subs	r2, r3, r6
  40c896:	2a0f      	cmp	r2, #15
  40c898:	f300 8190 	bgt.w	40cbbc <_malloc_r+0x3a8>
  40c89c:	2a00      	cmp	r2, #0
  40c89e:	f8c7 e014 	str.w	lr, [r7, #20]
  40c8a2:	f8c7 e010 	str.w	lr, [r7, #16]
  40c8a6:	f280 809d 	bge.w	40c9e4 <_malloc_r+0x1d0>
  40c8aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40c8ae:	f080 8161 	bcs.w	40cb74 <_malloc_r+0x360>
  40c8b2:	08db      	lsrs	r3, r3, #3
  40c8b4:	f103 0c01 	add.w	ip, r3, #1
  40c8b8:	1099      	asrs	r1, r3, #2
  40c8ba:	687a      	ldr	r2, [r7, #4]
  40c8bc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40c8c0:	f8c4 8008 	str.w	r8, [r4, #8]
  40c8c4:	2301      	movs	r3, #1
  40c8c6:	408b      	lsls	r3, r1
  40c8c8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40c8cc:	4313      	orrs	r3, r2
  40c8ce:	3908      	subs	r1, #8
  40c8d0:	60e1      	str	r1, [r4, #12]
  40c8d2:	607b      	str	r3, [r7, #4]
  40c8d4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40c8d8:	f8c8 400c 	str.w	r4, [r8, #12]
  40c8dc:	1082      	asrs	r2, r0, #2
  40c8de:	2401      	movs	r4, #1
  40c8e0:	4094      	lsls	r4, r2
  40c8e2:	429c      	cmp	r4, r3
  40c8e4:	f200 808b 	bhi.w	40c9fe <_malloc_r+0x1ea>
  40c8e8:	421c      	tst	r4, r3
  40c8ea:	d106      	bne.n	40c8fa <_malloc_r+0xe6>
  40c8ec:	f020 0003 	bic.w	r0, r0, #3
  40c8f0:	0064      	lsls	r4, r4, #1
  40c8f2:	421c      	tst	r4, r3
  40c8f4:	f100 0004 	add.w	r0, r0, #4
  40c8f8:	d0fa      	beq.n	40c8f0 <_malloc_r+0xdc>
  40c8fa:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40c8fe:	46cc      	mov	ip, r9
  40c900:	4680      	mov	r8, r0
  40c902:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40c906:	459c      	cmp	ip, r3
  40c908:	d107      	bne.n	40c91a <_malloc_r+0x106>
  40c90a:	e16d      	b.n	40cbe8 <_malloc_r+0x3d4>
  40c90c:	2a00      	cmp	r2, #0
  40c90e:	f280 817b 	bge.w	40cc08 <_malloc_r+0x3f4>
  40c912:	68db      	ldr	r3, [r3, #12]
  40c914:	459c      	cmp	ip, r3
  40c916:	f000 8167 	beq.w	40cbe8 <_malloc_r+0x3d4>
  40c91a:	6859      	ldr	r1, [r3, #4]
  40c91c:	f021 0103 	bic.w	r1, r1, #3
  40c920:	1b8a      	subs	r2, r1, r6
  40c922:	2a0f      	cmp	r2, #15
  40c924:	ddf2      	ble.n	40c90c <_malloc_r+0xf8>
  40c926:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40c92a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40c92e:	9300      	str	r3, [sp, #0]
  40c930:	199c      	adds	r4, r3, r6
  40c932:	4628      	mov	r0, r5
  40c934:	f046 0601 	orr.w	r6, r6, #1
  40c938:	f042 0501 	orr.w	r5, r2, #1
  40c93c:	605e      	str	r6, [r3, #4]
  40c93e:	f8c8 c00c 	str.w	ip, [r8, #12]
  40c942:	f8cc 8008 	str.w	r8, [ip, #8]
  40c946:	617c      	str	r4, [r7, #20]
  40c948:	613c      	str	r4, [r7, #16]
  40c94a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40c94e:	f8c4 e008 	str.w	lr, [r4, #8]
  40c952:	6065      	str	r5, [r4, #4]
  40c954:	505a      	str	r2, [r3, r1]
  40c956:	f000 facd 	bl	40cef4 <__malloc_unlock>
  40c95a:	9b00      	ldr	r3, [sp, #0]
  40c95c:	f103 0408 	add.w	r4, r3, #8
  40c960:	e01e      	b.n	40c9a0 <_malloc_r+0x18c>
  40c962:	2910      	cmp	r1, #16
  40c964:	d820      	bhi.n	40c9a8 <_malloc_r+0x194>
  40c966:	f000 fabf 	bl	40cee8 <__malloc_lock>
  40c96a:	2610      	movs	r6, #16
  40c96c:	2318      	movs	r3, #24
  40c96e:	2002      	movs	r0, #2
  40c970:	4f79      	ldr	r7, [pc, #484]	; (40cb58 <_malloc_r+0x344>)
  40c972:	443b      	add	r3, r7
  40c974:	f1a3 0208 	sub.w	r2, r3, #8
  40c978:	685c      	ldr	r4, [r3, #4]
  40c97a:	4294      	cmp	r4, r2
  40c97c:	f000 813d 	beq.w	40cbfa <_malloc_r+0x3e6>
  40c980:	6863      	ldr	r3, [r4, #4]
  40c982:	68e1      	ldr	r1, [r4, #12]
  40c984:	68a6      	ldr	r6, [r4, #8]
  40c986:	f023 0303 	bic.w	r3, r3, #3
  40c98a:	4423      	add	r3, r4
  40c98c:	4628      	mov	r0, r5
  40c98e:	685a      	ldr	r2, [r3, #4]
  40c990:	60f1      	str	r1, [r6, #12]
  40c992:	f042 0201 	orr.w	r2, r2, #1
  40c996:	608e      	str	r6, [r1, #8]
  40c998:	605a      	str	r2, [r3, #4]
  40c99a:	f000 faab 	bl	40cef4 <__malloc_unlock>
  40c99e:	3408      	adds	r4, #8
  40c9a0:	4620      	mov	r0, r4
  40c9a2:	b003      	add	sp, #12
  40c9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c9a8:	2400      	movs	r4, #0
  40c9aa:	230c      	movs	r3, #12
  40c9ac:	4620      	mov	r0, r4
  40c9ae:	602b      	str	r3, [r5, #0]
  40c9b0:	b003      	add	sp, #12
  40c9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c9b6:	2040      	movs	r0, #64	; 0x40
  40c9b8:	f44f 7300 	mov.w	r3, #512	; 0x200
  40c9bc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40c9c0:	e74a      	b.n	40c858 <_malloc_r+0x44>
  40c9c2:	4423      	add	r3, r4
  40c9c4:	68e1      	ldr	r1, [r4, #12]
  40c9c6:	685a      	ldr	r2, [r3, #4]
  40c9c8:	68a6      	ldr	r6, [r4, #8]
  40c9ca:	f042 0201 	orr.w	r2, r2, #1
  40c9ce:	60f1      	str	r1, [r6, #12]
  40c9d0:	4628      	mov	r0, r5
  40c9d2:	608e      	str	r6, [r1, #8]
  40c9d4:	605a      	str	r2, [r3, #4]
  40c9d6:	f000 fa8d 	bl	40cef4 <__malloc_unlock>
  40c9da:	3408      	adds	r4, #8
  40c9dc:	4620      	mov	r0, r4
  40c9de:	b003      	add	sp, #12
  40c9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c9e4:	4423      	add	r3, r4
  40c9e6:	4628      	mov	r0, r5
  40c9e8:	685a      	ldr	r2, [r3, #4]
  40c9ea:	f042 0201 	orr.w	r2, r2, #1
  40c9ee:	605a      	str	r2, [r3, #4]
  40c9f0:	f000 fa80 	bl	40cef4 <__malloc_unlock>
  40c9f4:	3408      	adds	r4, #8
  40c9f6:	4620      	mov	r0, r4
  40c9f8:	b003      	add	sp, #12
  40c9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c9fe:	68bc      	ldr	r4, [r7, #8]
  40ca00:	6863      	ldr	r3, [r4, #4]
  40ca02:	f023 0803 	bic.w	r8, r3, #3
  40ca06:	45b0      	cmp	r8, r6
  40ca08:	d304      	bcc.n	40ca14 <_malloc_r+0x200>
  40ca0a:	eba8 0306 	sub.w	r3, r8, r6
  40ca0e:	2b0f      	cmp	r3, #15
  40ca10:	f300 8085 	bgt.w	40cb1e <_malloc_r+0x30a>
  40ca14:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40cb70 <_malloc_r+0x35c>
  40ca18:	4b50      	ldr	r3, [pc, #320]	; (40cb5c <_malloc_r+0x348>)
  40ca1a:	f8d9 2000 	ldr.w	r2, [r9]
  40ca1e:	681b      	ldr	r3, [r3, #0]
  40ca20:	3201      	adds	r2, #1
  40ca22:	4433      	add	r3, r6
  40ca24:	eb04 0a08 	add.w	sl, r4, r8
  40ca28:	f000 8155 	beq.w	40ccd6 <_malloc_r+0x4c2>
  40ca2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40ca30:	330f      	adds	r3, #15
  40ca32:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40ca36:	f02b 0b0f 	bic.w	fp, fp, #15
  40ca3a:	4659      	mov	r1, fp
  40ca3c:	4628      	mov	r0, r5
  40ca3e:	f000 ff93 	bl	40d968 <_sbrk_r>
  40ca42:	1c41      	adds	r1, r0, #1
  40ca44:	4602      	mov	r2, r0
  40ca46:	f000 80fc 	beq.w	40cc42 <_malloc_r+0x42e>
  40ca4a:	4582      	cmp	sl, r0
  40ca4c:	f200 80f7 	bhi.w	40cc3e <_malloc_r+0x42a>
  40ca50:	4b43      	ldr	r3, [pc, #268]	; (40cb60 <_malloc_r+0x34c>)
  40ca52:	6819      	ldr	r1, [r3, #0]
  40ca54:	4459      	add	r1, fp
  40ca56:	6019      	str	r1, [r3, #0]
  40ca58:	f000 814d 	beq.w	40ccf6 <_malloc_r+0x4e2>
  40ca5c:	f8d9 0000 	ldr.w	r0, [r9]
  40ca60:	3001      	adds	r0, #1
  40ca62:	bf1b      	ittet	ne
  40ca64:	eba2 0a0a 	subne.w	sl, r2, sl
  40ca68:	4451      	addne	r1, sl
  40ca6a:	f8c9 2000 	streq.w	r2, [r9]
  40ca6e:	6019      	strne	r1, [r3, #0]
  40ca70:	f012 0107 	ands.w	r1, r2, #7
  40ca74:	f000 8115 	beq.w	40cca2 <_malloc_r+0x48e>
  40ca78:	f1c1 0008 	rsb	r0, r1, #8
  40ca7c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40ca80:	4402      	add	r2, r0
  40ca82:	3108      	adds	r1, #8
  40ca84:	eb02 090b 	add.w	r9, r2, fp
  40ca88:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40ca8c:	eba1 0909 	sub.w	r9, r1, r9
  40ca90:	4649      	mov	r1, r9
  40ca92:	4628      	mov	r0, r5
  40ca94:	9301      	str	r3, [sp, #4]
  40ca96:	9200      	str	r2, [sp, #0]
  40ca98:	f000 ff66 	bl	40d968 <_sbrk_r>
  40ca9c:	1c43      	adds	r3, r0, #1
  40ca9e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40caa2:	f000 8143 	beq.w	40cd2c <_malloc_r+0x518>
  40caa6:	1a80      	subs	r0, r0, r2
  40caa8:	4448      	add	r0, r9
  40caaa:	f040 0001 	orr.w	r0, r0, #1
  40caae:	6819      	ldr	r1, [r3, #0]
  40cab0:	60ba      	str	r2, [r7, #8]
  40cab2:	4449      	add	r1, r9
  40cab4:	42bc      	cmp	r4, r7
  40cab6:	6050      	str	r0, [r2, #4]
  40cab8:	6019      	str	r1, [r3, #0]
  40caba:	d017      	beq.n	40caec <_malloc_r+0x2d8>
  40cabc:	f1b8 0f0f 	cmp.w	r8, #15
  40cac0:	f240 80fb 	bls.w	40ccba <_malloc_r+0x4a6>
  40cac4:	6860      	ldr	r0, [r4, #4]
  40cac6:	f1a8 020c 	sub.w	r2, r8, #12
  40caca:	f022 0207 	bic.w	r2, r2, #7
  40cace:	eb04 0e02 	add.w	lr, r4, r2
  40cad2:	f000 0001 	and.w	r0, r0, #1
  40cad6:	f04f 0c05 	mov.w	ip, #5
  40cada:	4310      	orrs	r0, r2
  40cadc:	2a0f      	cmp	r2, #15
  40cade:	6060      	str	r0, [r4, #4]
  40cae0:	f8ce c004 	str.w	ip, [lr, #4]
  40cae4:	f8ce c008 	str.w	ip, [lr, #8]
  40cae8:	f200 8117 	bhi.w	40cd1a <_malloc_r+0x506>
  40caec:	4b1d      	ldr	r3, [pc, #116]	; (40cb64 <_malloc_r+0x350>)
  40caee:	68bc      	ldr	r4, [r7, #8]
  40caf0:	681a      	ldr	r2, [r3, #0]
  40caf2:	4291      	cmp	r1, r2
  40caf4:	bf88      	it	hi
  40caf6:	6019      	strhi	r1, [r3, #0]
  40caf8:	4b1b      	ldr	r3, [pc, #108]	; (40cb68 <_malloc_r+0x354>)
  40cafa:	681a      	ldr	r2, [r3, #0]
  40cafc:	4291      	cmp	r1, r2
  40cafe:	6862      	ldr	r2, [r4, #4]
  40cb00:	bf88      	it	hi
  40cb02:	6019      	strhi	r1, [r3, #0]
  40cb04:	f022 0203 	bic.w	r2, r2, #3
  40cb08:	4296      	cmp	r6, r2
  40cb0a:	eba2 0306 	sub.w	r3, r2, r6
  40cb0e:	d801      	bhi.n	40cb14 <_malloc_r+0x300>
  40cb10:	2b0f      	cmp	r3, #15
  40cb12:	dc04      	bgt.n	40cb1e <_malloc_r+0x30a>
  40cb14:	4628      	mov	r0, r5
  40cb16:	f000 f9ed 	bl	40cef4 <__malloc_unlock>
  40cb1a:	2400      	movs	r4, #0
  40cb1c:	e740      	b.n	40c9a0 <_malloc_r+0x18c>
  40cb1e:	19a2      	adds	r2, r4, r6
  40cb20:	f043 0301 	orr.w	r3, r3, #1
  40cb24:	f046 0601 	orr.w	r6, r6, #1
  40cb28:	6066      	str	r6, [r4, #4]
  40cb2a:	4628      	mov	r0, r5
  40cb2c:	60ba      	str	r2, [r7, #8]
  40cb2e:	6053      	str	r3, [r2, #4]
  40cb30:	f000 f9e0 	bl	40cef4 <__malloc_unlock>
  40cb34:	3408      	adds	r4, #8
  40cb36:	4620      	mov	r0, r4
  40cb38:	b003      	add	sp, #12
  40cb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cb3e:	2b14      	cmp	r3, #20
  40cb40:	d971      	bls.n	40cc26 <_malloc_r+0x412>
  40cb42:	2b54      	cmp	r3, #84	; 0x54
  40cb44:	f200 80a3 	bhi.w	40cc8e <_malloc_r+0x47a>
  40cb48:	0b33      	lsrs	r3, r6, #12
  40cb4a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40cb4e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40cb52:	00c3      	lsls	r3, r0, #3
  40cb54:	e680      	b.n	40c858 <_malloc_r+0x44>
  40cb56:	bf00      	nop
  40cb58:	200007ac 	.word	0x200007ac
  40cb5c:	2001a160 	.word	0x2001a160
  40cb60:	2001a130 	.word	0x2001a130
  40cb64:	2001a158 	.word	0x2001a158
  40cb68:	2001a15c 	.word	0x2001a15c
  40cb6c:	200007b4 	.word	0x200007b4
  40cb70:	20000bb4 	.word	0x20000bb4
  40cb74:	0a5a      	lsrs	r2, r3, #9
  40cb76:	2a04      	cmp	r2, #4
  40cb78:	d95b      	bls.n	40cc32 <_malloc_r+0x41e>
  40cb7a:	2a14      	cmp	r2, #20
  40cb7c:	f200 80ae 	bhi.w	40ccdc <_malloc_r+0x4c8>
  40cb80:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40cb84:	00c9      	lsls	r1, r1, #3
  40cb86:	325b      	adds	r2, #91	; 0x5b
  40cb88:	eb07 0c01 	add.w	ip, r7, r1
  40cb8c:	5879      	ldr	r1, [r7, r1]
  40cb8e:	f1ac 0c08 	sub.w	ip, ip, #8
  40cb92:	458c      	cmp	ip, r1
  40cb94:	f000 8088 	beq.w	40cca8 <_malloc_r+0x494>
  40cb98:	684a      	ldr	r2, [r1, #4]
  40cb9a:	f022 0203 	bic.w	r2, r2, #3
  40cb9e:	4293      	cmp	r3, r2
  40cba0:	d273      	bcs.n	40cc8a <_malloc_r+0x476>
  40cba2:	6889      	ldr	r1, [r1, #8]
  40cba4:	458c      	cmp	ip, r1
  40cba6:	d1f7      	bne.n	40cb98 <_malloc_r+0x384>
  40cba8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40cbac:	687b      	ldr	r3, [r7, #4]
  40cbae:	60e2      	str	r2, [r4, #12]
  40cbb0:	f8c4 c008 	str.w	ip, [r4, #8]
  40cbb4:	6094      	str	r4, [r2, #8]
  40cbb6:	f8cc 400c 	str.w	r4, [ip, #12]
  40cbba:	e68f      	b.n	40c8dc <_malloc_r+0xc8>
  40cbbc:	19a1      	adds	r1, r4, r6
  40cbbe:	f046 0c01 	orr.w	ip, r6, #1
  40cbc2:	f042 0601 	orr.w	r6, r2, #1
  40cbc6:	f8c4 c004 	str.w	ip, [r4, #4]
  40cbca:	4628      	mov	r0, r5
  40cbcc:	6179      	str	r1, [r7, #20]
  40cbce:	6139      	str	r1, [r7, #16]
  40cbd0:	f8c1 e00c 	str.w	lr, [r1, #12]
  40cbd4:	f8c1 e008 	str.w	lr, [r1, #8]
  40cbd8:	604e      	str	r6, [r1, #4]
  40cbda:	50e2      	str	r2, [r4, r3]
  40cbdc:	f000 f98a 	bl	40cef4 <__malloc_unlock>
  40cbe0:	3408      	adds	r4, #8
  40cbe2:	e6dd      	b.n	40c9a0 <_malloc_r+0x18c>
  40cbe4:	687b      	ldr	r3, [r7, #4]
  40cbe6:	e679      	b.n	40c8dc <_malloc_r+0xc8>
  40cbe8:	f108 0801 	add.w	r8, r8, #1
  40cbec:	f018 0f03 	tst.w	r8, #3
  40cbf0:	f10c 0c08 	add.w	ip, ip, #8
  40cbf4:	f47f ae85 	bne.w	40c902 <_malloc_r+0xee>
  40cbf8:	e02d      	b.n	40cc56 <_malloc_r+0x442>
  40cbfa:	68dc      	ldr	r4, [r3, #12]
  40cbfc:	42a3      	cmp	r3, r4
  40cbfe:	bf08      	it	eq
  40cc00:	3002      	addeq	r0, #2
  40cc02:	f43f ae3e 	beq.w	40c882 <_malloc_r+0x6e>
  40cc06:	e6bb      	b.n	40c980 <_malloc_r+0x16c>
  40cc08:	4419      	add	r1, r3
  40cc0a:	461c      	mov	r4, r3
  40cc0c:	684a      	ldr	r2, [r1, #4]
  40cc0e:	68db      	ldr	r3, [r3, #12]
  40cc10:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40cc14:	f042 0201 	orr.w	r2, r2, #1
  40cc18:	604a      	str	r2, [r1, #4]
  40cc1a:	4628      	mov	r0, r5
  40cc1c:	60f3      	str	r3, [r6, #12]
  40cc1e:	609e      	str	r6, [r3, #8]
  40cc20:	f000 f968 	bl	40cef4 <__malloc_unlock>
  40cc24:	e6bc      	b.n	40c9a0 <_malloc_r+0x18c>
  40cc26:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40cc2a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40cc2e:	00c3      	lsls	r3, r0, #3
  40cc30:	e612      	b.n	40c858 <_malloc_r+0x44>
  40cc32:	099a      	lsrs	r2, r3, #6
  40cc34:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40cc38:	00c9      	lsls	r1, r1, #3
  40cc3a:	3238      	adds	r2, #56	; 0x38
  40cc3c:	e7a4      	b.n	40cb88 <_malloc_r+0x374>
  40cc3e:	42bc      	cmp	r4, r7
  40cc40:	d054      	beq.n	40ccec <_malloc_r+0x4d8>
  40cc42:	68bc      	ldr	r4, [r7, #8]
  40cc44:	6862      	ldr	r2, [r4, #4]
  40cc46:	f022 0203 	bic.w	r2, r2, #3
  40cc4a:	e75d      	b.n	40cb08 <_malloc_r+0x2f4>
  40cc4c:	f859 3908 	ldr.w	r3, [r9], #-8
  40cc50:	4599      	cmp	r9, r3
  40cc52:	f040 8086 	bne.w	40cd62 <_malloc_r+0x54e>
  40cc56:	f010 0f03 	tst.w	r0, #3
  40cc5a:	f100 30ff 	add.w	r0, r0, #4294967295
  40cc5e:	d1f5      	bne.n	40cc4c <_malloc_r+0x438>
  40cc60:	687b      	ldr	r3, [r7, #4]
  40cc62:	ea23 0304 	bic.w	r3, r3, r4
  40cc66:	607b      	str	r3, [r7, #4]
  40cc68:	0064      	lsls	r4, r4, #1
  40cc6a:	429c      	cmp	r4, r3
  40cc6c:	f63f aec7 	bhi.w	40c9fe <_malloc_r+0x1ea>
  40cc70:	2c00      	cmp	r4, #0
  40cc72:	f43f aec4 	beq.w	40c9fe <_malloc_r+0x1ea>
  40cc76:	421c      	tst	r4, r3
  40cc78:	4640      	mov	r0, r8
  40cc7a:	f47f ae3e 	bne.w	40c8fa <_malloc_r+0xe6>
  40cc7e:	0064      	lsls	r4, r4, #1
  40cc80:	421c      	tst	r4, r3
  40cc82:	f100 0004 	add.w	r0, r0, #4
  40cc86:	d0fa      	beq.n	40cc7e <_malloc_r+0x46a>
  40cc88:	e637      	b.n	40c8fa <_malloc_r+0xe6>
  40cc8a:	468c      	mov	ip, r1
  40cc8c:	e78c      	b.n	40cba8 <_malloc_r+0x394>
  40cc8e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40cc92:	d815      	bhi.n	40ccc0 <_malloc_r+0x4ac>
  40cc94:	0bf3      	lsrs	r3, r6, #15
  40cc96:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40cc9a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40cc9e:	00c3      	lsls	r3, r0, #3
  40cca0:	e5da      	b.n	40c858 <_malloc_r+0x44>
  40cca2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40cca6:	e6ed      	b.n	40ca84 <_malloc_r+0x270>
  40cca8:	687b      	ldr	r3, [r7, #4]
  40ccaa:	1092      	asrs	r2, r2, #2
  40ccac:	2101      	movs	r1, #1
  40ccae:	fa01 f202 	lsl.w	r2, r1, r2
  40ccb2:	4313      	orrs	r3, r2
  40ccb4:	607b      	str	r3, [r7, #4]
  40ccb6:	4662      	mov	r2, ip
  40ccb8:	e779      	b.n	40cbae <_malloc_r+0x39a>
  40ccba:	2301      	movs	r3, #1
  40ccbc:	6053      	str	r3, [r2, #4]
  40ccbe:	e729      	b.n	40cb14 <_malloc_r+0x300>
  40ccc0:	f240 5254 	movw	r2, #1364	; 0x554
  40ccc4:	4293      	cmp	r3, r2
  40ccc6:	d822      	bhi.n	40cd0e <_malloc_r+0x4fa>
  40ccc8:	0cb3      	lsrs	r3, r6, #18
  40ccca:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40ccce:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40ccd2:	00c3      	lsls	r3, r0, #3
  40ccd4:	e5c0      	b.n	40c858 <_malloc_r+0x44>
  40ccd6:	f103 0b10 	add.w	fp, r3, #16
  40ccda:	e6ae      	b.n	40ca3a <_malloc_r+0x226>
  40ccdc:	2a54      	cmp	r2, #84	; 0x54
  40ccde:	d829      	bhi.n	40cd34 <_malloc_r+0x520>
  40cce0:	0b1a      	lsrs	r2, r3, #12
  40cce2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40cce6:	00c9      	lsls	r1, r1, #3
  40cce8:	326e      	adds	r2, #110	; 0x6e
  40ccea:	e74d      	b.n	40cb88 <_malloc_r+0x374>
  40ccec:	4b20      	ldr	r3, [pc, #128]	; (40cd70 <_malloc_r+0x55c>)
  40ccee:	6819      	ldr	r1, [r3, #0]
  40ccf0:	4459      	add	r1, fp
  40ccf2:	6019      	str	r1, [r3, #0]
  40ccf4:	e6b2      	b.n	40ca5c <_malloc_r+0x248>
  40ccf6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40ccfa:	2800      	cmp	r0, #0
  40ccfc:	f47f aeae 	bne.w	40ca5c <_malloc_r+0x248>
  40cd00:	eb08 030b 	add.w	r3, r8, fp
  40cd04:	68ba      	ldr	r2, [r7, #8]
  40cd06:	f043 0301 	orr.w	r3, r3, #1
  40cd0a:	6053      	str	r3, [r2, #4]
  40cd0c:	e6ee      	b.n	40caec <_malloc_r+0x2d8>
  40cd0e:	207f      	movs	r0, #127	; 0x7f
  40cd10:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40cd14:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40cd18:	e59e      	b.n	40c858 <_malloc_r+0x44>
  40cd1a:	f104 0108 	add.w	r1, r4, #8
  40cd1e:	4628      	mov	r0, r5
  40cd20:	9300      	str	r3, [sp, #0]
  40cd22:	f7ff fa2b 	bl	40c17c <_free_r>
  40cd26:	9b00      	ldr	r3, [sp, #0]
  40cd28:	6819      	ldr	r1, [r3, #0]
  40cd2a:	e6df      	b.n	40caec <_malloc_r+0x2d8>
  40cd2c:	2001      	movs	r0, #1
  40cd2e:	f04f 0900 	mov.w	r9, #0
  40cd32:	e6bc      	b.n	40caae <_malloc_r+0x29a>
  40cd34:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40cd38:	d805      	bhi.n	40cd46 <_malloc_r+0x532>
  40cd3a:	0bda      	lsrs	r2, r3, #15
  40cd3c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40cd40:	00c9      	lsls	r1, r1, #3
  40cd42:	3277      	adds	r2, #119	; 0x77
  40cd44:	e720      	b.n	40cb88 <_malloc_r+0x374>
  40cd46:	f240 5154 	movw	r1, #1364	; 0x554
  40cd4a:	428a      	cmp	r2, r1
  40cd4c:	d805      	bhi.n	40cd5a <_malloc_r+0x546>
  40cd4e:	0c9a      	lsrs	r2, r3, #18
  40cd50:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40cd54:	00c9      	lsls	r1, r1, #3
  40cd56:	327c      	adds	r2, #124	; 0x7c
  40cd58:	e716      	b.n	40cb88 <_malloc_r+0x374>
  40cd5a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40cd5e:	227e      	movs	r2, #126	; 0x7e
  40cd60:	e712      	b.n	40cb88 <_malloc_r+0x374>
  40cd62:	687b      	ldr	r3, [r7, #4]
  40cd64:	e780      	b.n	40cc68 <_malloc_r+0x454>
  40cd66:	08f0      	lsrs	r0, r6, #3
  40cd68:	f106 0308 	add.w	r3, r6, #8
  40cd6c:	e600      	b.n	40c970 <_malloc_r+0x15c>
  40cd6e:	bf00      	nop
  40cd70:	2001a130 	.word	0x2001a130
	...

0040cd80 <memchr>:
  40cd80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40cd84:	2a10      	cmp	r2, #16
  40cd86:	db2b      	blt.n	40cde0 <memchr+0x60>
  40cd88:	f010 0f07 	tst.w	r0, #7
  40cd8c:	d008      	beq.n	40cda0 <memchr+0x20>
  40cd8e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40cd92:	3a01      	subs	r2, #1
  40cd94:	428b      	cmp	r3, r1
  40cd96:	d02d      	beq.n	40cdf4 <memchr+0x74>
  40cd98:	f010 0f07 	tst.w	r0, #7
  40cd9c:	b342      	cbz	r2, 40cdf0 <memchr+0x70>
  40cd9e:	d1f6      	bne.n	40cd8e <memchr+0xe>
  40cda0:	b4f0      	push	{r4, r5, r6, r7}
  40cda2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40cda6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40cdaa:	f022 0407 	bic.w	r4, r2, #7
  40cdae:	f07f 0700 	mvns.w	r7, #0
  40cdb2:	2300      	movs	r3, #0
  40cdb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40cdb8:	3c08      	subs	r4, #8
  40cdba:	ea85 0501 	eor.w	r5, r5, r1
  40cdbe:	ea86 0601 	eor.w	r6, r6, r1
  40cdc2:	fa85 f547 	uadd8	r5, r5, r7
  40cdc6:	faa3 f587 	sel	r5, r3, r7
  40cdca:	fa86 f647 	uadd8	r6, r6, r7
  40cdce:	faa5 f687 	sel	r6, r5, r7
  40cdd2:	b98e      	cbnz	r6, 40cdf8 <memchr+0x78>
  40cdd4:	d1ee      	bne.n	40cdb4 <memchr+0x34>
  40cdd6:	bcf0      	pop	{r4, r5, r6, r7}
  40cdd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40cddc:	f002 0207 	and.w	r2, r2, #7
  40cde0:	b132      	cbz	r2, 40cdf0 <memchr+0x70>
  40cde2:	f810 3b01 	ldrb.w	r3, [r0], #1
  40cde6:	3a01      	subs	r2, #1
  40cde8:	ea83 0301 	eor.w	r3, r3, r1
  40cdec:	b113      	cbz	r3, 40cdf4 <memchr+0x74>
  40cdee:	d1f8      	bne.n	40cde2 <memchr+0x62>
  40cdf0:	2000      	movs	r0, #0
  40cdf2:	4770      	bx	lr
  40cdf4:	3801      	subs	r0, #1
  40cdf6:	4770      	bx	lr
  40cdf8:	2d00      	cmp	r5, #0
  40cdfa:	bf06      	itte	eq
  40cdfc:	4635      	moveq	r5, r6
  40cdfe:	3803      	subeq	r0, #3
  40ce00:	3807      	subne	r0, #7
  40ce02:	f015 0f01 	tst.w	r5, #1
  40ce06:	d107      	bne.n	40ce18 <memchr+0x98>
  40ce08:	3001      	adds	r0, #1
  40ce0a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40ce0e:	bf02      	ittt	eq
  40ce10:	3001      	addeq	r0, #1
  40ce12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40ce16:	3001      	addeq	r0, #1
  40ce18:	bcf0      	pop	{r4, r5, r6, r7}
  40ce1a:	3801      	subs	r0, #1
  40ce1c:	4770      	bx	lr
  40ce1e:	bf00      	nop

0040ce20 <memmove>:
  40ce20:	4288      	cmp	r0, r1
  40ce22:	b5f0      	push	{r4, r5, r6, r7, lr}
  40ce24:	d90d      	bls.n	40ce42 <memmove+0x22>
  40ce26:	188b      	adds	r3, r1, r2
  40ce28:	4298      	cmp	r0, r3
  40ce2a:	d20a      	bcs.n	40ce42 <memmove+0x22>
  40ce2c:	1884      	adds	r4, r0, r2
  40ce2e:	2a00      	cmp	r2, #0
  40ce30:	d051      	beq.n	40ced6 <memmove+0xb6>
  40ce32:	4622      	mov	r2, r4
  40ce34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40ce38:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40ce3c:	4299      	cmp	r1, r3
  40ce3e:	d1f9      	bne.n	40ce34 <memmove+0x14>
  40ce40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ce42:	2a0f      	cmp	r2, #15
  40ce44:	d948      	bls.n	40ced8 <memmove+0xb8>
  40ce46:	ea41 0300 	orr.w	r3, r1, r0
  40ce4a:	079b      	lsls	r3, r3, #30
  40ce4c:	d146      	bne.n	40cedc <memmove+0xbc>
  40ce4e:	f100 0410 	add.w	r4, r0, #16
  40ce52:	f101 0310 	add.w	r3, r1, #16
  40ce56:	4615      	mov	r5, r2
  40ce58:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40ce5c:	f844 6c10 	str.w	r6, [r4, #-16]
  40ce60:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40ce64:	f844 6c0c 	str.w	r6, [r4, #-12]
  40ce68:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40ce6c:	f844 6c08 	str.w	r6, [r4, #-8]
  40ce70:	3d10      	subs	r5, #16
  40ce72:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40ce76:	f844 6c04 	str.w	r6, [r4, #-4]
  40ce7a:	2d0f      	cmp	r5, #15
  40ce7c:	f103 0310 	add.w	r3, r3, #16
  40ce80:	f104 0410 	add.w	r4, r4, #16
  40ce84:	d8e8      	bhi.n	40ce58 <memmove+0x38>
  40ce86:	f1a2 0310 	sub.w	r3, r2, #16
  40ce8a:	f023 030f 	bic.w	r3, r3, #15
  40ce8e:	f002 0e0f 	and.w	lr, r2, #15
  40ce92:	3310      	adds	r3, #16
  40ce94:	f1be 0f03 	cmp.w	lr, #3
  40ce98:	4419      	add	r1, r3
  40ce9a:	4403      	add	r3, r0
  40ce9c:	d921      	bls.n	40cee2 <memmove+0xc2>
  40ce9e:	1f1e      	subs	r6, r3, #4
  40cea0:	460d      	mov	r5, r1
  40cea2:	4674      	mov	r4, lr
  40cea4:	3c04      	subs	r4, #4
  40cea6:	f855 7b04 	ldr.w	r7, [r5], #4
  40ceaa:	f846 7f04 	str.w	r7, [r6, #4]!
  40ceae:	2c03      	cmp	r4, #3
  40ceb0:	d8f8      	bhi.n	40cea4 <memmove+0x84>
  40ceb2:	f1ae 0404 	sub.w	r4, lr, #4
  40ceb6:	f024 0403 	bic.w	r4, r4, #3
  40ceba:	3404      	adds	r4, #4
  40cebc:	4421      	add	r1, r4
  40cebe:	4423      	add	r3, r4
  40cec0:	f002 0203 	and.w	r2, r2, #3
  40cec4:	b162      	cbz	r2, 40cee0 <memmove+0xc0>
  40cec6:	3b01      	subs	r3, #1
  40cec8:	440a      	add	r2, r1
  40ceca:	f811 4b01 	ldrb.w	r4, [r1], #1
  40cece:	f803 4f01 	strb.w	r4, [r3, #1]!
  40ced2:	428a      	cmp	r2, r1
  40ced4:	d1f9      	bne.n	40ceca <memmove+0xaa>
  40ced6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ced8:	4603      	mov	r3, r0
  40ceda:	e7f3      	b.n	40cec4 <memmove+0xa4>
  40cedc:	4603      	mov	r3, r0
  40cede:	e7f2      	b.n	40cec6 <memmove+0xa6>
  40cee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40cee2:	4672      	mov	r2, lr
  40cee4:	e7ee      	b.n	40cec4 <memmove+0xa4>
  40cee6:	bf00      	nop

0040cee8 <__malloc_lock>:
  40cee8:	4801      	ldr	r0, [pc, #4]	; (40cef0 <__malloc_lock+0x8>)
  40ceea:	f7ff bc07 	b.w	40c6fc <__retarget_lock_acquire_recursive>
  40ceee:	bf00      	nop
  40cef0:	20022260 	.word	0x20022260

0040cef4 <__malloc_unlock>:
  40cef4:	4801      	ldr	r0, [pc, #4]	; (40cefc <__malloc_unlock+0x8>)
  40cef6:	f7ff bc03 	b.w	40c700 <__retarget_lock_release_recursive>
  40cefa:	bf00      	nop
  40cefc:	20022260 	.word	0x20022260

0040cf00 <_Balloc>:
  40cf00:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40cf02:	b570      	push	{r4, r5, r6, lr}
  40cf04:	4605      	mov	r5, r0
  40cf06:	460c      	mov	r4, r1
  40cf08:	b14b      	cbz	r3, 40cf1e <_Balloc+0x1e>
  40cf0a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40cf0e:	b180      	cbz	r0, 40cf32 <_Balloc+0x32>
  40cf10:	6802      	ldr	r2, [r0, #0]
  40cf12:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40cf16:	2300      	movs	r3, #0
  40cf18:	6103      	str	r3, [r0, #16]
  40cf1a:	60c3      	str	r3, [r0, #12]
  40cf1c:	bd70      	pop	{r4, r5, r6, pc}
  40cf1e:	2221      	movs	r2, #33	; 0x21
  40cf20:	2104      	movs	r1, #4
  40cf22:	f000 feb7 	bl	40dc94 <_calloc_r>
  40cf26:	64e8      	str	r0, [r5, #76]	; 0x4c
  40cf28:	4603      	mov	r3, r0
  40cf2a:	2800      	cmp	r0, #0
  40cf2c:	d1ed      	bne.n	40cf0a <_Balloc+0xa>
  40cf2e:	2000      	movs	r0, #0
  40cf30:	bd70      	pop	{r4, r5, r6, pc}
  40cf32:	2101      	movs	r1, #1
  40cf34:	fa01 f604 	lsl.w	r6, r1, r4
  40cf38:	1d72      	adds	r2, r6, #5
  40cf3a:	4628      	mov	r0, r5
  40cf3c:	0092      	lsls	r2, r2, #2
  40cf3e:	f000 fea9 	bl	40dc94 <_calloc_r>
  40cf42:	2800      	cmp	r0, #0
  40cf44:	d0f3      	beq.n	40cf2e <_Balloc+0x2e>
  40cf46:	6044      	str	r4, [r0, #4]
  40cf48:	6086      	str	r6, [r0, #8]
  40cf4a:	e7e4      	b.n	40cf16 <_Balloc+0x16>

0040cf4c <_Bfree>:
  40cf4c:	b131      	cbz	r1, 40cf5c <_Bfree+0x10>
  40cf4e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40cf50:	684a      	ldr	r2, [r1, #4]
  40cf52:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40cf56:	6008      	str	r0, [r1, #0]
  40cf58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40cf5c:	4770      	bx	lr
  40cf5e:	bf00      	nop

0040cf60 <__multadd>:
  40cf60:	b5f0      	push	{r4, r5, r6, r7, lr}
  40cf62:	690c      	ldr	r4, [r1, #16]
  40cf64:	b083      	sub	sp, #12
  40cf66:	460d      	mov	r5, r1
  40cf68:	4606      	mov	r6, r0
  40cf6a:	f101 0e14 	add.w	lr, r1, #20
  40cf6e:	2700      	movs	r7, #0
  40cf70:	f8de 0000 	ldr.w	r0, [lr]
  40cf74:	b281      	uxth	r1, r0
  40cf76:	fb02 3301 	mla	r3, r2, r1, r3
  40cf7a:	0c01      	lsrs	r1, r0, #16
  40cf7c:	0c18      	lsrs	r0, r3, #16
  40cf7e:	fb02 0101 	mla	r1, r2, r1, r0
  40cf82:	b29b      	uxth	r3, r3
  40cf84:	3701      	adds	r7, #1
  40cf86:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40cf8a:	42bc      	cmp	r4, r7
  40cf8c:	f84e 3b04 	str.w	r3, [lr], #4
  40cf90:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40cf94:	dcec      	bgt.n	40cf70 <__multadd+0x10>
  40cf96:	b13b      	cbz	r3, 40cfa8 <__multadd+0x48>
  40cf98:	68aa      	ldr	r2, [r5, #8]
  40cf9a:	4294      	cmp	r4, r2
  40cf9c:	da07      	bge.n	40cfae <__multadd+0x4e>
  40cf9e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40cfa2:	3401      	adds	r4, #1
  40cfa4:	6153      	str	r3, [r2, #20]
  40cfa6:	612c      	str	r4, [r5, #16]
  40cfa8:	4628      	mov	r0, r5
  40cfaa:	b003      	add	sp, #12
  40cfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40cfae:	6869      	ldr	r1, [r5, #4]
  40cfb0:	9301      	str	r3, [sp, #4]
  40cfb2:	3101      	adds	r1, #1
  40cfb4:	4630      	mov	r0, r6
  40cfb6:	f7ff ffa3 	bl	40cf00 <_Balloc>
  40cfba:	692a      	ldr	r2, [r5, #16]
  40cfbc:	3202      	adds	r2, #2
  40cfbe:	f105 010c 	add.w	r1, r5, #12
  40cfc2:	4607      	mov	r7, r0
  40cfc4:	0092      	lsls	r2, r2, #2
  40cfc6:	300c      	adds	r0, #12
  40cfc8:	f7fa fdc8 	bl	407b5c <memcpy>
  40cfcc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40cfce:	6869      	ldr	r1, [r5, #4]
  40cfd0:	9b01      	ldr	r3, [sp, #4]
  40cfd2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40cfd6:	6028      	str	r0, [r5, #0]
  40cfd8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40cfdc:	463d      	mov	r5, r7
  40cfde:	e7de      	b.n	40cf9e <__multadd+0x3e>

0040cfe0 <__hi0bits>:
  40cfe0:	0c02      	lsrs	r2, r0, #16
  40cfe2:	0412      	lsls	r2, r2, #16
  40cfe4:	4603      	mov	r3, r0
  40cfe6:	b9b2      	cbnz	r2, 40d016 <__hi0bits+0x36>
  40cfe8:	0403      	lsls	r3, r0, #16
  40cfea:	2010      	movs	r0, #16
  40cfec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40cff0:	bf04      	itt	eq
  40cff2:	021b      	lsleq	r3, r3, #8
  40cff4:	3008      	addeq	r0, #8
  40cff6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40cffa:	bf04      	itt	eq
  40cffc:	011b      	lsleq	r3, r3, #4
  40cffe:	3004      	addeq	r0, #4
  40d000:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40d004:	bf04      	itt	eq
  40d006:	009b      	lsleq	r3, r3, #2
  40d008:	3002      	addeq	r0, #2
  40d00a:	2b00      	cmp	r3, #0
  40d00c:	db02      	blt.n	40d014 <__hi0bits+0x34>
  40d00e:	005b      	lsls	r3, r3, #1
  40d010:	d403      	bmi.n	40d01a <__hi0bits+0x3a>
  40d012:	2020      	movs	r0, #32
  40d014:	4770      	bx	lr
  40d016:	2000      	movs	r0, #0
  40d018:	e7e8      	b.n	40cfec <__hi0bits+0xc>
  40d01a:	3001      	adds	r0, #1
  40d01c:	4770      	bx	lr
  40d01e:	bf00      	nop

0040d020 <__lo0bits>:
  40d020:	6803      	ldr	r3, [r0, #0]
  40d022:	f013 0207 	ands.w	r2, r3, #7
  40d026:	4601      	mov	r1, r0
  40d028:	d007      	beq.n	40d03a <__lo0bits+0x1a>
  40d02a:	07da      	lsls	r2, r3, #31
  40d02c:	d421      	bmi.n	40d072 <__lo0bits+0x52>
  40d02e:	0798      	lsls	r0, r3, #30
  40d030:	d421      	bmi.n	40d076 <__lo0bits+0x56>
  40d032:	089b      	lsrs	r3, r3, #2
  40d034:	600b      	str	r3, [r1, #0]
  40d036:	2002      	movs	r0, #2
  40d038:	4770      	bx	lr
  40d03a:	b298      	uxth	r0, r3
  40d03c:	b198      	cbz	r0, 40d066 <__lo0bits+0x46>
  40d03e:	4610      	mov	r0, r2
  40d040:	f013 0fff 	tst.w	r3, #255	; 0xff
  40d044:	bf04      	itt	eq
  40d046:	0a1b      	lsreq	r3, r3, #8
  40d048:	3008      	addeq	r0, #8
  40d04a:	071a      	lsls	r2, r3, #28
  40d04c:	bf04      	itt	eq
  40d04e:	091b      	lsreq	r3, r3, #4
  40d050:	3004      	addeq	r0, #4
  40d052:	079a      	lsls	r2, r3, #30
  40d054:	bf04      	itt	eq
  40d056:	089b      	lsreq	r3, r3, #2
  40d058:	3002      	addeq	r0, #2
  40d05a:	07da      	lsls	r2, r3, #31
  40d05c:	d407      	bmi.n	40d06e <__lo0bits+0x4e>
  40d05e:	085b      	lsrs	r3, r3, #1
  40d060:	d104      	bne.n	40d06c <__lo0bits+0x4c>
  40d062:	2020      	movs	r0, #32
  40d064:	4770      	bx	lr
  40d066:	0c1b      	lsrs	r3, r3, #16
  40d068:	2010      	movs	r0, #16
  40d06a:	e7e9      	b.n	40d040 <__lo0bits+0x20>
  40d06c:	3001      	adds	r0, #1
  40d06e:	600b      	str	r3, [r1, #0]
  40d070:	4770      	bx	lr
  40d072:	2000      	movs	r0, #0
  40d074:	4770      	bx	lr
  40d076:	085b      	lsrs	r3, r3, #1
  40d078:	600b      	str	r3, [r1, #0]
  40d07a:	2001      	movs	r0, #1
  40d07c:	4770      	bx	lr
  40d07e:	bf00      	nop

0040d080 <__i2b>:
  40d080:	b510      	push	{r4, lr}
  40d082:	460c      	mov	r4, r1
  40d084:	2101      	movs	r1, #1
  40d086:	f7ff ff3b 	bl	40cf00 <_Balloc>
  40d08a:	2201      	movs	r2, #1
  40d08c:	6144      	str	r4, [r0, #20]
  40d08e:	6102      	str	r2, [r0, #16]
  40d090:	bd10      	pop	{r4, pc}
  40d092:	bf00      	nop

0040d094 <__multiply>:
  40d094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d098:	690c      	ldr	r4, [r1, #16]
  40d09a:	6915      	ldr	r5, [r2, #16]
  40d09c:	42ac      	cmp	r4, r5
  40d09e:	b083      	sub	sp, #12
  40d0a0:	468b      	mov	fp, r1
  40d0a2:	4616      	mov	r6, r2
  40d0a4:	da04      	bge.n	40d0b0 <__multiply+0x1c>
  40d0a6:	4622      	mov	r2, r4
  40d0a8:	46b3      	mov	fp, r6
  40d0aa:	462c      	mov	r4, r5
  40d0ac:	460e      	mov	r6, r1
  40d0ae:	4615      	mov	r5, r2
  40d0b0:	f8db 3008 	ldr.w	r3, [fp, #8]
  40d0b4:	f8db 1004 	ldr.w	r1, [fp, #4]
  40d0b8:	eb04 0805 	add.w	r8, r4, r5
  40d0bc:	4598      	cmp	r8, r3
  40d0be:	bfc8      	it	gt
  40d0c0:	3101      	addgt	r1, #1
  40d0c2:	f7ff ff1d 	bl	40cf00 <_Balloc>
  40d0c6:	f100 0914 	add.w	r9, r0, #20
  40d0ca:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40d0ce:	45d1      	cmp	r9, sl
  40d0d0:	9000      	str	r0, [sp, #0]
  40d0d2:	d205      	bcs.n	40d0e0 <__multiply+0x4c>
  40d0d4:	464b      	mov	r3, r9
  40d0d6:	2100      	movs	r1, #0
  40d0d8:	f843 1b04 	str.w	r1, [r3], #4
  40d0dc:	459a      	cmp	sl, r3
  40d0de:	d8fb      	bhi.n	40d0d8 <__multiply+0x44>
  40d0e0:	f106 0c14 	add.w	ip, r6, #20
  40d0e4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40d0e8:	f10b 0b14 	add.w	fp, fp, #20
  40d0ec:	459c      	cmp	ip, r3
  40d0ee:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40d0f2:	d24c      	bcs.n	40d18e <__multiply+0xfa>
  40d0f4:	f8cd a004 	str.w	sl, [sp, #4]
  40d0f8:	469a      	mov	sl, r3
  40d0fa:	f8dc 5000 	ldr.w	r5, [ip]
  40d0fe:	b2af      	uxth	r7, r5
  40d100:	b1ef      	cbz	r7, 40d13e <__multiply+0xaa>
  40d102:	2100      	movs	r1, #0
  40d104:	464d      	mov	r5, r9
  40d106:	465e      	mov	r6, fp
  40d108:	460c      	mov	r4, r1
  40d10a:	f856 2b04 	ldr.w	r2, [r6], #4
  40d10e:	6828      	ldr	r0, [r5, #0]
  40d110:	b293      	uxth	r3, r2
  40d112:	b281      	uxth	r1, r0
  40d114:	fb07 1303 	mla	r3, r7, r3, r1
  40d118:	0c12      	lsrs	r2, r2, #16
  40d11a:	0c01      	lsrs	r1, r0, #16
  40d11c:	4423      	add	r3, r4
  40d11e:	fb07 1102 	mla	r1, r7, r2, r1
  40d122:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40d126:	b29b      	uxth	r3, r3
  40d128:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40d12c:	45b6      	cmp	lr, r6
  40d12e:	f845 3b04 	str.w	r3, [r5], #4
  40d132:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40d136:	d8e8      	bhi.n	40d10a <__multiply+0x76>
  40d138:	602c      	str	r4, [r5, #0]
  40d13a:	f8dc 5000 	ldr.w	r5, [ip]
  40d13e:	0c2d      	lsrs	r5, r5, #16
  40d140:	d01d      	beq.n	40d17e <__multiply+0xea>
  40d142:	f8d9 3000 	ldr.w	r3, [r9]
  40d146:	4648      	mov	r0, r9
  40d148:	461c      	mov	r4, r3
  40d14a:	4659      	mov	r1, fp
  40d14c:	2200      	movs	r2, #0
  40d14e:	880e      	ldrh	r6, [r1, #0]
  40d150:	0c24      	lsrs	r4, r4, #16
  40d152:	fb05 4406 	mla	r4, r5, r6, r4
  40d156:	4422      	add	r2, r4
  40d158:	b29b      	uxth	r3, r3
  40d15a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40d15e:	f840 3b04 	str.w	r3, [r0], #4
  40d162:	f851 3b04 	ldr.w	r3, [r1], #4
  40d166:	6804      	ldr	r4, [r0, #0]
  40d168:	0c1b      	lsrs	r3, r3, #16
  40d16a:	b2a6      	uxth	r6, r4
  40d16c:	fb05 6303 	mla	r3, r5, r3, r6
  40d170:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40d174:	458e      	cmp	lr, r1
  40d176:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40d17a:	d8e8      	bhi.n	40d14e <__multiply+0xba>
  40d17c:	6003      	str	r3, [r0, #0]
  40d17e:	f10c 0c04 	add.w	ip, ip, #4
  40d182:	45e2      	cmp	sl, ip
  40d184:	f109 0904 	add.w	r9, r9, #4
  40d188:	d8b7      	bhi.n	40d0fa <__multiply+0x66>
  40d18a:	f8dd a004 	ldr.w	sl, [sp, #4]
  40d18e:	f1b8 0f00 	cmp.w	r8, #0
  40d192:	dd0b      	ble.n	40d1ac <__multiply+0x118>
  40d194:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40d198:	f1aa 0a04 	sub.w	sl, sl, #4
  40d19c:	b11b      	cbz	r3, 40d1a6 <__multiply+0x112>
  40d19e:	e005      	b.n	40d1ac <__multiply+0x118>
  40d1a0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40d1a4:	b913      	cbnz	r3, 40d1ac <__multiply+0x118>
  40d1a6:	f1b8 0801 	subs.w	r8, r8, #1
  40d1aa:	d1f9      	bne.n	40d1a0 <__multiply+0x10c>
  40d1ac:	9800      	ldr	r0, [sp, #0]
  40d1ae:	f8c0 8010 	str.w	r8, [r0, #16]
  40d1b2:	b003      	add	sp, #12
  40d1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040d1b8 <__pow5mult>:
  40d1b8:	f012 0303 	ands.w	r3, r2, #3
  40d1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d1c0:	4614      	mov	r4, r2
  40d1c2:	4607      	mov	r7, r0
  40d1c4:	d12e      	bne.n	40d224 <__pow5mult+0x6c>
  40d1c6:	460d      	mov	r5, r1
  40d1c8:	10a4      	asrs	r4, r4, #2
  40d1ca:	d01c      	beq.n	40d206 <__pow5mult+0x4e>
  40d1cc:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40d1ce:	b396      	cbz	r6, 40d236 <__pow5mult+0x7e>
  40d1d0:	07e3      	lsls	r3, r4, #31
  40d1d2:	f04f 0800 	mov.w	r8, #0
  40d1d6:	d406      	bmi.n	40d1e6 <__pow5mult+0x2e>
  40d1d8:	1064      	asrs	r4, r4, #1
  40d1da:	d014      	beq.n	40d206 <__pow5mult+0x4e>
  40d1dc:	6830      	ldr	r0, [r6, #0]
  40d1de:	b1a8      	cbz	r0, 40d20c <__pow5mult+0x54>
  40d1e0:	4606      	mov	r6, r0
  40d1e2:	07e3      	lsls	r3, r4, #31
  40d1e4:	d5f8      	bpl.n	40d1d8 <__pow5mult+0x20>
  40d1e6:	4632      	mov	r2, r6
  40d1e8:	4629      	mov	r1, r5
  40d1ea:	4638      	mov	r0, r7
  40d1ec:	f7ff ff52 	bl	40d094 <__multiply>
  40d1f0:	b1b5      	cbz	r5, 40d220 <__pow5mult+0x68>
  40d1f2:	686a      	ldr	r2, [r5, #4]
  40d1f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40d1f6:	1064      	asrs	r4, r4, #1
  40d1f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40d1fc:	6029      	str	r1, [r5, #0]
  40d1fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40d202:	4605      	mov	r5, r0
  40d204:	d1ea      	bne.n	40d1dc <__pow5mult+0x24>
  40d206:	4628      	mov	r0, r5
  40d208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d20c:	4632      	mov	r2, r6
  40d20e:	4631      	mov	r1, r6
  40d210:	4638      	mov	r0, r7
  40d212:	f7ff ff3f 	bl	40d094 <__multiply>
  40d216:	6030      	str	r0, [r6, #0]
  40d218:	f8c0 8000 	str.w	r8, [r0]
  40d21c:	4606      	mov	r6, r0
  40d21e:	e7e0      	b.n	40d1e2 <__pow5mult+0x2a>
  40d220:	4605      	mov	r5, r0
  40d222:	e7d9      	b.n	40d1d8 <__pow5mult+0x20>
  40d224:	1e5a      	subs	r2, r3, #1
  40d226:	4d0b      	ldr	r5, [pc, #44]	; (40d254 <__pow5mult+0x9c>)
  40d228:	2300      	movs	r3, #0
  40d22a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40d22e:	f7ff fe97 	bl	40cf60 <__multadd>
  40d232:	4605      	mov	r5, r0
  40d234:	e7c8      	b.n	40d1c8 <__pow5mult+0x10>
  40d236:	2101      	movs	r1, #1
  40d238:	4638      	mov	r0, r7
  40d23a:	f7ff fe61 	bl	40cf00 <_Balloc>
  40d23e:	f240 2171 	movw	r1, #625	; 0x271
  40d242:	2201      	movs	r2, #1
  40d244:	2300      	movs	r3, #0
  40d246:	6141      	str	r1, [r0, #20]
  40d248:	6102      	str	r2, [r0, #16]
  40d24a:	4606      	mov	r6, r0
  40d24c:	64b8      	str	r0, [r7, #72]	; 0x48
  40d24e:	6003      	str	r3, [r0, #0]
  40d250:	e7be      	b.n	40d1d0 <__pow5mult+0x18>
  40d252:	bf00      	nop
  40d254:	0040fbc0 	.word	0x0040fbc0

0040d258 <__lshift>:
  40d258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40d25c:	4691      	mov	r9, r2
  40d25e:	690a      	ldr	r2, [r1, #16]
  40d260:	688b      	ldr	r3, [r1, #8]
  40d262:	ea4f 1469 	mov.w	r4, r9, asr #5
  40d266:	eb04 0802 	add.w	r8, r4, r2
  40d26a:	f108 0501 	add.w	r5, r8, #1
  40d26e:	429d      	cmp	r5, r3
  40d270:	460e      	mov	r6, r1
  40d272:	4607      	mov	r7, r0
  40d274:	6849      	ldr	r1, [r1, #4]
  40d276:	dd04      	ble.n	40d282 <__lshift+0x2a>
  40d278:	005b      	lsls	r3, r3, #1
  40d27a:	429d      	cmp	r5, r3
  40d27c:	f101 0101 	add.w	r1, r1, #1
  40d280:	dcfa      	bgt.n	40d278 <__lshift+0x20>
  40d282:	4638      	mov	r0, r7
  40d284:	f7ff fe3c 	bl	40cf00 <_Balloc>
  40d288:	2c00      	cmp	r4, #0
  40d28a:	f100 0314 	add.w	r3, r0, #20
  40d28e:	dd06      	ble.n	40d29e <__lshift+0x46>
  40d290:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40d294:	2100      	movs	r1, #0
  40d296:	f843 1b04 	str.w	r1, [r3], #4
  40d29a:	429a      	cmp	r2, r3
  40d29c:	d1fb      	bne.n	40d296 <__lshift+0x3e>
  40d29e:	6934      	ldr	r4, [r6, #16]
  40d2a0:	f106 0114 	add.w	r1, r6, #20
  40d2a4:	f019 091f 	ands.w	r9, r9, #31
  40d2a8:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40d2ac:	d01d      	beq.n	40d2ea <__lshift+0x92>
  40d2ae:	f1c9 0c20 	rsb	ip, r9, #32
  40d2b2:	2200      	movs	r2, #0
  40d2b4:	680c      	ldr	r4, [r1, #0]
  40d2b6:	fa04 f409 	lsl.w	r4, r4, r9
  40d2ba:	4314      	orrs	r4, r2
  40d2bc:	f843 4b04 	str.w	r4, [r3], #4
  40d2c0:	f851 2b04 	ldr.w	r2, [r1], #4
  40d2c4:	458e      	cmp	lr, r1
  40d2c6:	fa22 f20c 	lsr.w	r2, r2, ip
  40d2ca:	d8f3      	bhi.n	40d2b4 <__lshift+0x5c>
  40d2cc:	601a      	str	r2, [r3, #0]
  40d2ce:	b10a      	cbz	r2, 40d2d4 <__lshift+0x7c>
  40d2d0:	f108 0502 	add.w	r5, r8, #2
  40d2d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40d2d6:	6872      	ldr	r2, [r6, #4]
  40d2d8:	3d01      	subs	r5, #1
  40d2da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40d2de:	6105      	str	r5, [r0, #16]
  40d2e0:	6031      	str	r1, [r6, #0]
  40d2e2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40d2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40d2ea:	3b04      	subs	r3, #4
  40d2ec:	f851 2b04 	ldr.w	r2, [r1], #4
  40d2f0:	f843 2f04 	str.w	r2, [r3, #4]!
  40d2f4:	458e      	cmp	lr, r1
  40d2f6:	d8f9      	bhi.n	40d2ec <__lshift+0x94>
  40d2f8:	e7ec      	b.n	40d2d4 <__lshift+0x7c>
  40d2fa:	bf00      	nop

0040d2fc <__mcmp>:
  40d2fc:	b430      	push	{r4, r5}
  40d2fe:	690b      	ldr	r3, [r1, #16]
  40d300:	4605      	mov	r5, r0
  40d302:	6900      	ldr	r0, [r0, #16]
  40d304:	1ac0      	subs	r0, r0, r3
  40d306:	d10f      	bne.n	40d328 <__mcmp+0x2c>
  40d308:	009b      	lsls	r3, r3, #2
  40d30a:	3514      	adds	r5, #20
  40d30c:	3114      	adds	r1, #20
  40d30e:	4419      	add	r1, r3
  40d310:	442b      	add	r3, r5
  40d312:	e001      	b.n	40d318 <__mcmp+0x1c>
  40d314:	429d      	cmp	r5, r3
  40d316:	d207      	bcs.n	40d328 <__mcmp+0x2c>
  40d318:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40d31c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40d320:	4294      	cmp	r4, r2
  40d322:	d0f7      	beq.n	40d314 <__mcmp+0x18>
  40d324:	d302      	bcc.n	40d32c <__mcmp+0x30>
  40d326:	2001      	movs	r0, #1
  40d328:	bc30      	pop	{r4, r5}
  40d32a:	4770      	bx	lr
  40d32c:	f04f 30ff 	mov.w	r0, #4294967295
  40d330:	e7fa      	b.n	40d328 <__mcmp+0x2c>
  40d332:	bf00      	nop

0040d334 <__mdiff>:
  40d334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d338:	690f      	ldr	r7, [r1, #16]
  40d33a:	460e      	mov	r6, r1
  40d33c:	6911      	ldr	r1, [r2, #16]
  40d33e:	1a7f      	subs	r7, r7, r1
  40d340:	2f00      	cmp	r7, #0
  40d342:	4690      	mov	r8, r2
  40d344:	d117      	bne.n	40d376 <__mdiff+0x42>
  40d346:	0089      	lsls	r1, r1, #2
  40d348:	f106 0514 	add.w	r5, r6, #20
  40d34c:	f102 0e14 	add.w	lr, r2, #20
  40d350:	186b      	adds	r3, r5, r1
  40d352:	4471      	add	r1, lr
  40d354:	e001      	b.n	40d35a <__mdiff+0x26>
  40d356:	429d      	cmp	r5, r3
  40d358:	d25c      	bcs.n	40d414 <__mdiff+0xe0>
  40d35a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40d35e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40d362:	42a2      	cmp	r2, r4
  40d364:	d0f7      	beq.n	40d356 <__mdiff+0x22>
  40d366:	d25e      	bcs.n	40d426 <__mdiff+0xf2>
  40d368:	4633      	mov	r3, r6
  40d36a:	462c      	mov	r4, r5
  40d36c:	4646      	mov	r6, r8
  40d36e:	4675      	mov	r5, lr
  40d370:	4698      	mov	r8, r3
  40d372:	2701      	movs	r7, #1
  40d374:	e005      	b.n	40d382 <__mdiff+0x4e>
  40d376:	db58      	blt.n	40d42a <__mdiff+0xf6>
  40d378:	f106 0514 	add.w	r5, r6, #20
  40d37c:	f108 0414 	add.w	r4, r8, #20
  40d380:	2700      	movs	r7, #0
  40d382:	6871      	ldr	r1, [r6, #4]
  40d384:	f7ff fdbc 	bl	40cf00 <_Balloc>
  40d388:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40d38c:	6936      	ldr	r6, [r6, #16]
  40d38e:	60c7      	str	r7, [r0, #12]
  40d390:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40d394:	46a6      	mov	lr, r4
  40d396:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40d39a:	f100 0414 	add.w	r4, r0, #20
  40d39e:	2300      	movs	r3, #0
  40d3a0:	f85e 1b04 	ldr.w	r1, [lr], #4
  40d3a4:	f855 8b04 	ldr.w	r8, [r5], #4
  40d3a8:	b28a      	uxth	r2, r1
  40d3aa:	fa13 f388 	uxtah	r3, r3, r8
  40d3ae:	0c09      	lsrs	r1, r1, #16
  40d3b0:	1a9a      	subs	r2, r3, r2
  40d3b2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40d3b6:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40d3ba:	b292      	uxth	r2, r2
  40d3bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40d3c0:	45f4      	cmp	ip, lr
  40d3c2:	f844 2b04 	str.w	r2, [r4], #4
  40d3c6:	ea4f 4323 	mov.w	r3, r3, asr #16
  40d3ca:	d8e9      	bhi.n	40d3a0 <__mdiff+0x6c>
  40d3cc:	42af      	cmp	r7, r5
  40d3ce:	d917      	bls.n	40d400 <__mdiff+0xcc>
  40d3d0:	46a4      	mov	ip, r4
  40d3d2:	46ae      	mov	lr, r5
  40d3d4:	f85e 2b04 	ldr.w	r2, [lr], #4
  40d3d8:	fa13 f382 	uxtah	r3, r3, r2
  40d3dc:	1419      	asrs	r1, r3, #16
  40d3de:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40d3e2:	b29b      	uxth	r3, r3
  40d3e4:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40d3e8:	4577      	cmp	r7, lr
  40d3ea:	f84c 2b04 	str.w	r2, [ip], #4
  40d3ee:	ea4f 4321 	mov.w	r3, r1, asr #16
  40d3f2:	d8ef      	bhi.n	40d3d4 <__mdiff+0xa0>
  40d3f4:	43ed      	mvns	r5, r5
  40d3f6:	442f      	add	r7, r5
  40d3f8:	f027 0703 	bic.w	r7, r7, #3
  40d3fc:	3704      	adds	r7, #4
  40d3fe:	443c      	add	r4, r7
  40d400:	3c04      	subs	r4, #4
  40d402:	b922      	cbnz	r2, 40d40e <__mdiff+0xda>
  40d404:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40d408:	3e01      	subs	r6, #1
  40d40a:	2b00      	cmp	r3, #0
  40d40c:	d0fa      	beq.n	40d404 <__mdiff+0xd0>
  40d40e:	6106      	str	r6, [r0, #16]
  40d410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d414:	2100      	movs	r1, #0
  40d416:	f7ff fd73 	bl	40cf00 <_Balloc>
  40d41a:	2201      	movs	r2, #1
  40d41c:	2300      	movs	r3, #0
  40d41e:	6102      	str	r2, [r0, #16]
  40d420:	6143      	str	r3, [r0, #20]
  40d422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d426:	4674      	mov	r4, lr
  40d428:	e7ab      	b.n	40d382 <__mdiff+0x4e>
  40d42a:	4633      	mov	r3, r6
  40d42c:	f106 0414 	add.w	r4, r6, #20
  40d430:	f102 0514 	add.w	r5, r2, #20
  40d434:	4616      	mov	r6, r2
  40d436:	2701      	movs	r7, #1
  40d438:	4698      	mov	r8, r3
  40d43a:	e7a2      	b.n	40d382 <__mdiff+0x4e>

0040d43c <__d2b>:
  40d43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d440:	b082      	sub	sp, #8
  40d442:	2101      	movs	r1, #1
  40d444:	461c      	mov	r4, r3
  40d446:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40d44a:	4615      	mov	r5, r2
  40d44c:	9e08      	ldr	r6, [sp, #32]
  40d44e:	f7ff fd57 	bl	40cf00 <_Balloc>
  40d452:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40d456:	4680      	mov	r8, r0
  40d458:	b10f      	cbz	r7, 40d45e <__d2b+0x22>
  40d45a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40d45e:	9401      	str	r4, [sp, #4]
  40d460:	b31d      	cbz	r5, 40d4aa <__d2b+0x6e>
  40d462:	a802      	add	r0, sp, #8
  40d464:	f840 5d08 	str.w	r5, [r0, #-8]!
  40d468:	f7ff fdda 	bl	40d020 <__lo0bits>
  40d46c:	2800      	cmp	r0, #0
  40d46e:	d134      	bne.n	40d4da <__d2b+0x9e>
  40d470:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40d474:	f8c8 2014 	str.w	r2, [r8, #20]
  40d478:	2b00      	cmp	r3, #0
  40d47a:	bf0c      	ite	eq
  40d47c:	2101      	moveq	r1, #1
  40d47e:	2102      	movne	r1, #2
  40d480:	f8c8 3018 	str.w	r3, [r8, #24]
  40d484:	f8c8 1010 	str.w	r1, [r8, #16]
  40d488:	b9df      	cbnz	r7, 40d4c2 <__d2b+0x86>
  40d48a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40d48e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40d492:	6030      	str	r0, [r6, #0]
  40d494:	6918      	ldr	r0, [r3, #16]
  40d496:	f7ff fda3 	bl	40cfe0 <__hi0bits>
  40d49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d49c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40d4a0:	6018      	str	r0, [r3, #0]
  40d4a2:	4640      	mov	r0, r8
  40d4a4:	b002      	add	sp, #8
  40d4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d4aa:	a801      	add	r0, sp, #4
  40d4ac:	f7ff fdb8 	bl	40d020 <__lo0bits>
  40d4b0:	9b01      	ldr	r3, [sp, #4]
  40d4b2:	f8c8 3014 	str.w	r3, [r8, #20]
  40d4b6:	2101      	movs	r1, #1
  40d4b8:	3020      	adds	r0, #32
  40d4ba:	f8c8 1010 	str.w	r1, [r8, #16]
  40d4be:	2f00      	cmp	r7, #0
  40d4c0:	d0e3      	beq.n	40d48a <__d2b+0x4e>
  40d4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d4c4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40d4c8:	4407      	add	r7, r0
  40d4ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40d4ce:	6037      	str	r7, [r6, #0]
  40d4d0:	6018      	str	r0, [r3, #0]
  40d4d2:	4640      	mov	r0, r8
  40d4d4:	b002      	add	sp, #8
  40d4d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d4da:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40d4de:	f1c0 0220 	rsb	r2, r0, #32
  40d4e2:	fa03 f202 	lsl.w	r2, r3, r2
  40d4e6:	430a      	orrs	r2, r1
  40d4e8:	40c3      	lsrs	r3, r0
  40d4ea:	9301      	str	r3, [sp, #4]
  40d4ec:	f8c8 2014 	str.w	r2, [r8, #20]
  40d4f0:	e7c2      	b.n	40d478 <__d2b+0x3c>
  40d4f2:	bf00      	nop

0040d4f4 <_realloc_r>:
  40d4f4:	2900      	cmp	r1, #0
  40d4f6:	f000 8095 	beq.w	40d624 <_realloc_r+0x130>
  40d4fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d4fe:	460d      	mov	r5, r1
  40d500:	4616      	mov	r6, r2
  40d502:	b083      	sub	sp, #12
  40d504:	4680      	mov	r8, r0
  40d506:	f106 070b 	add.w	r7, r6, #11
  40d50a:	f7ff fced 	bl	40cee8 <__malloc_lock>
  40d50e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40d512:	2f16      	cmp	r7, #22
  40d514:	f02e 0403 	bic.w	r4, lr, #3
  40d518:	f1a5 0908 	sub.w	r9, r5, #8
  40d51c:	d83c      	bhi.n	40d598 <_realloc_r+0xa4>
  40d51e:	2210      	movs	r2, #16
  40d520:	4617      	mov	r7, r2
  40d522:	42be      	cmp	r6, r7
  40d524:	d83d      	bhi.n	40d5a2 <_realloc_r+0xae>
  40d526:	4294      	cmp	r4, r2
  40d528:	da43      	bge.n	40d5b2 <_realloc_r+0xbe>
  40d52a:	4bc4      	ldr	r3, [pc, #784]	; (40d83c <_realloc_r+0x348>)
  40d52c:	6899      	ldr	r1, [r3, #8]
  40d52e:	eb09 0004 	add.w	r0, r9, r4
  40d532:	4288      	cmp	r0, r1
  40d534:	f000 80b4 	beq.w	40d6a0 <_realloc_r+0x1ac>
  40d538:	6843      	ldr	r3, [r0, #4]
  40d53a:	f023 0101 	bic.w	r1, r3, #1
  40d53e:	4401      	add	r1, r0
  40d540:	6849      	ldr	r1, [r1, #4]
  40d542:	07c9      	lsls	r1, r1, #31
  40d544:	d54c      	bpl.n	40d5e0 <_realloc_r+0xec>
  40d546:	f01e 0f01 	tst.w	lr, #1
  40d54a:	f000 809b 	beq.w	40d684 <_realloc_r+0x190>
  40d54e:	4631      	mov	r1, r6
  40d550:	4640      	mov	r0, r8
  40d552:	f7ff f95f 	bl	40c814 <_malloc_r>
  40d556:	4606      	mov	r6, r0
  40d558:	2800      	cmp	r0, #0
  40d55a:	d03a      	beq.n	40d5d2 <_realloc_r+0xde>
  40d55c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40d560:	f023 0301 	bic.w	r3, r3, #1
  40d564:	444b      	add	r3, r9
  40d566:	f1a0 0208 	sub.w	r2, r0, #8
  40d56a:	429a      	cmp	r2, r3
  40d56c:	f000 8121 	beq.w	40d7b2 <_realloc_r+0x2be>
  40d570:	1f22      	subs	r2, r4, #4
  40d572:	2a24      	cmp	r2, #36	; 0x24
  40d574:	f200 8107 	bhi.w	40d786 <_realloc_r+0x292>
  40d578:	2a13      	cmp	r2, #19
  40d57a:	f200 80db 	bhi.w	40d734 <_realloc_r+0x240>
  40d57e:	4603      	mov	r3, r0
  40d580:	462a      	mov	r2, r5
  40d582:	6811      	ldr	r1, [r2, #0]
  40d584:	6019      	str	r1, [r3, #0]
  40d586:	6851      	ldr	r1, [r2, #4]
  40d588:	6059      	str	r1, [r3, #4]
  40d58a:	6892      	ldr	r2, [r2, #8]
  40d58c:	609a      	str	r2, [r3, #8]
  40d58e:	4629      	mov	r1, r5
  40d590:	4640      	mov	r0, r8
  40d592:	f7fe fdf3 	bl	40c17c <_free_r>
  40d596:	e01c      	b.n	40d5d2 <_realloc_r+0xde>
  40d598:	f027 0707 	bic.w	r7, r7, #7
  40d59c:	2f00      	cmp	r7, #0
  40d59e:	463a      	mov	r2, r7
  40d5a0:	dabf      	bge.n	40d522 <_realloc_r+0x2e>
  40d5a2:	2600      	movs	r6, #0
  40d5a4:	230c      	movs	r3, #12
  40d5a6:	4630      	mov	r0, r6
  40d5a8:	f8c8 3000 	str.w	r3, [r8]
  40d5ac:	b003      	add	sp, #12
  40d5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d5b2:	462e      	mov	r6, r5
  40d5b4:	1be3      	subs	r3, r4, r7
  40d5b6:	2b0f      	cmp	r3, #15
  40d5b8:	d81e      	bhi.n	40d5f8 <_realloc_r+0x104>
  40d5ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40d5be:	f003 0301 	and.w	r3, r3, #1
  40d5c2:	4323      	orrs	r3, r4
  40d5c4:	444c      	add	r4, r9
  40d5c6:	f8c9 3004 	str.w	r3, [r9, #4]
  40d5ca:	6863      	ldr	r3, [r4, #4]
  40d5cc:	f043 0301 	orr.w	r3, r3, #1
  40d5d0:	6063      	str	r3, [r4, #4]
  40d5d2:	4640      	mov	r0, r8
  40d5d4:	f7ff fc8e 	bl	40cef4 <__malloc_unlock>
  40d5d8:	4630      	mov	r0, r6
  40d5da:	b003      	add	sp, #12
  40d5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d5e0:	f023 0303 	bic.w	r3, r3, #3
  40d5e4:	18e1      	adds	r1, r4, r3
  40d5e6:	4291      	cmp	r1, r2
  40d5e8:	db1f      	blt.n	40d62a <_realloc_r+0x136>
  40d5ea:	68c3      	ldr	r3, [r0, #12]
  40d5ec:	6882      	ldr	r2, [r0, #8]
  40d5ee:	462e      	mov	r6, r5
  40d5f0:	60d3      	str	r3, [r2, #12]
  40d5f2:	460c      	mov	r4, r1
  40d5f4:	609a      	str	r2, [r3, #8]
  40d5f6:	e7dd      	b.n	40d5b4 <_realloc_r+0xc0>
  40d5f8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40d5fc:	eb09 0107 	add.w	r1, r9, r7
  40d600:	f002 0201 	and.w	r2, r2, #1
  40d604:	444c      	add	r4, r9
  40d606:	f043 0301 	orr.w	r3, r3, #1
  40d60a:	4317      	orrs	r7, r2
  40d60c:	f8c9 7004 	str.w	r7, [r9, #4]
  40d610:	604b      	str	r3, [r1, #4]
  40d612:	6863      	ldr	r3, [r4, #4]
  40d614:	f043 0301 	orr.w	r3, r3, #1
  40d618:	3108      	adds	r1, #8
  40d61a:	6063      	str	r3, [r4, #4]
  40d61c:	4640      	mov	r0, r8
  40d61e:	f7fe fdad 	bl	40c17c <_free_r>
  40d622:	e7d6      	b.n	40d5d2 <_realloc_r+0xde>
  40d624:	4611      	mov	r1, r2
  40d626:	f7ff b8f5 	b.w	40c814 <_malloc_r>
  40d62a:	f01e 0f01 	tst.w	lr, #1
  40d62e:	d18e      	bne.n	40d54e <_realloc_r+0x5a>
  40d630:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40d634:	eba9 0a01 	sub.w	sl, r9, r1
  40d638:	f8da 1004 	ldr.w	r1, [sl, #4]
  40d63c:	f021 0103 	bic.w	r1, r1, #3
  40d640:	440b      	add	r3, r1
  40d642:	4423      	add	r3, r4
  40d644:	4293      	cmp	r3, r2
  40d646:	db25      	blt.n	40d694 <_realloc_r+0x1a0>
  40d648:	68c2      	ldr	r2, [r0, #12]
  40d64a:	6881      	ldr	r1, [r0, #8]
  40d64c:	4656      	mov	r6, sl
  40d64e:	60ca      	str	r2, [r1, #12]
  40d650:	6091      	str	r1, [r2, #8]
  40d652:	f8da 100c 	ldr.w	r1, [sl, #12]
  40d656:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40d65a:	1f22      	subs	r2, r4, #4
  40d65c:	2a24      	cmp	r2, #36	; 0x24
  40d65e:	60c1      	str	r1, [r0, #12]
  40d660:	6088      	str	r0, [r1, #8]
  40d662:	f200 8094 	bhi.w	40d78e <_realloc_r+0x29a>
  40d666:	2a13      	cmp	r2, #19
  40d668:	d96f      	bls.n	40d74a <_realloc_r+0x256>
  40d66a:	6829      	ldr	r1, [r5, #0]
  40d66c:	f8ca 1008 	str.w	r1, [sl, #8]
  40d670:	6869      	ldr	r1, [r5, #4]
  40d672:	f8ca 100c 	str.w	r1, [sl, #12]
  40d676:	2a1b      	cmp	r2, #27
  40d678:	f200 80a2 	bhi.w	40d7c0 <_realloc_r+0x2cc>
  40d67c:	3508      	adds	r5, #8
  40d67e:	f10a 0210 	add.w	r2, sl, #16
  40d682:	e063      	b.n	40d74c <_realloc_r+0x258>
  40d684:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40d688:	eba9 0a03 	sub.w	sl, r9, r3
  40d68c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40d690:	f021 0103 	bic.w	r1, r1, #3
  40d694:	1863      	adds	r3, r4, r1
  40d696:	4293      	cmp	r3, r2
  40d698:	f6ff af59 	blt.w	40d54e <_realloc_r+0x5a>
  40d69c:	4656      	mov	r6, sl
  40d69e:	e7d8      	b.n	40d652 <_realloc_r+0x15e>
  40d6a0:	6841      	ldr	r1, [r0, #4]
  40d6a2:	f021 0b03 	bic.w	fp, r1, #3
  40d6a6:	44a3      	add	fp, r4
  40d6a8:	f107 0010 	add.w	r0, r7, #16
  40d6ac:	4583      	cmp	fp, r0
  40d6ae:	da56      	bge.n	40d75e <_realloc_r+0x26a>
  40d6b0:	f01e 0f01 	tst.w	lr, #1
  40d6b4:	f47f af4b 	bne.w	40d54e <_realloc_r+0x5a>
  40d6b8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40d6bc:	eba9 0a01 	sub.w	sl, r9, r1
  40d6c0:	f8da 1004 	ldr.w	r1, [sl, #4]
  40d6c4:	f021 0103 	bic.w	r1, r1, #3
  40d6c8:	448b      	add	fp, r1
  40d6ca:	4558      	cmp	r0, fp
  40d6cc:	dce2      	bgt.n	40d694 <_realloc_r+0x1a0>
  40d6ce:	4656      	mov	r6, sl
  40d6d0:	f8da 100c 	ldr.w	r1, [sl, #12]
  40d6d4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40d6d8:	1f22      	subs	r2, r4, #4
  40d6da:	2a24      	cmp	r2, #36	; 0x24
  40d6dc:	60c1      	str	r1, [r0, #12]
  40d6de:	6088      	str	r0, [r1, #8]
  40d6e0:	f200 808f 	bhi.w	40d802 <_realloc_r+0x30e>
  40d6e4:	2a13      	cmp	r2, #19
  40d6e6:	f240 808a 	bls.w	40d7fe <_realloc_r+0x30a>
  40d6ea:	6829      	ldr	r1, [r5, #0]
  40d6ec:	f8ca 1008 	str.w	r1, [sl, #8]
  40d6f0:	6869      	ldr	r1, [r5, #4]
  40d6f2:	f8ca 100c 	str.w	r1, [sl, #12]
  40d6f6:	2a1b      	cmp	r2, #27
  40d6f8:	f200 808a 	bhi.w	40d810 <_realloc_r+0x31c>
  40d6fc:	3508      	adds	r5, #8
  40d6fe:	f10a 0210 	add.w	r2, sl, #16
  40d702:	6829      	ldr	r1, [r5, #0]
  40d704:	6011      	str	r1, [r2, #0]
  40d706:	6869      	ldr	r1, [r5, #4]
  40d708:	6051      	str	r1, [r2, #4]
  40d70a:	68a9      	ldr	r1, [r5, #8]
  40d70c:	6091      	str	r1, [r2, #8]
  40d70e:	eb0a 0107 	add.w	r1, sl, r7
  40d712:	ebab 0207 	sub.w	r2, fp, r7
  40d716:	f042 0201 	orr.w	r2, r2, #1
  40d71a:	6099      	str	r1, [r3, #8]
  40d71c:	604a      	str	r2, [r1, #4]
  40d71e:	f8da 3004 	ldr.w	r3, [sl, #4]
  40d722:	f003 0301 	and.w	r3, r3, #1
  40d726:	431f      	orrs	r7, r3
  40d728:	4640      	mov	r0, r8
  40d72a:	f8ca 7004 	str.w	r7, [sl, #4]
  40d72e:	f7ff fbe1 	bl	40cef4 <__malloc_unlock>
  40d732:	e751      	b.n	40d5d8 <_realloc_r+0xe4>
  40d734:	682b      	ldr	r3, [r5, #0]
  40d736:	6003      	str	r3, [r0, #0]
  40d738:	686b      	ldr	r3, [r5, #4]
  40d73a:	6043      	str	r3, [r0, #4]
  40d73c:	2a1b      	cmp	r2, #27
  40d73e:	d82d      	bhi.n	40d79c <_realloc_r+0x2a8>
  40d740:	f100 0308 	add.w	r3, r0, #8
  40d744:	f105 0208 	add.w	r2, r5, #8
  40d748:	e71b      	b.n	40d582 <_realloc_r+0x8e>
  40d74a:	4632      	mov	r2, r6
  40d74c:	6829      	ldr	r1, [r5, #0]
  40d74e:	6011      	str	r1, [r2, #0]
  40d750:	6869      	ldr	r1, [r5, #4]
  40d752:	6051      	str	r1, [r2, #4]
  40d754:	68a9      	ldr	r1, [r5, #8]
  40d756:	6091      	str	r1, [r2, #8]
  40d758:	461c      	mov	r4, r3
  40d75a:	46d1      	mov	r9, sl
  40d75c:	e72a      	b.n	40d5b4 <_realloc_r+0xc0>
  40d75e:	eb09 0107 	add.w	r1, r9, r7
  40d762:	ebab 0b07 	sub.w	fp, fp, r7
  40d766:	f04b 0201 	orr.w	r2, fp, #1
  40d76a:	6099      	str	r1, [r3, #8]
  40d76c:	604a      	str	r2, [r1, #4]
  40d76e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40d772:	f003 0301 	and.w	r3, r3, #1
  40d776:	431f      	orrs	r7, r3
  40d778:	4640      	mov	r0, r8
  40d77a:	f845 7c04 	str.w	r7, [r5, #-4]
  40d77e:	f7ff fbb9 	bl	40cef4 <__malloc_unlock>
  40d782:	462e      	mov	r6, r5
  40d784:	e728      	b.n	40d5d8 <_realloc_r+0xe4>
  40d786:	4629      	mov	r1, r5
  40d788:	f7ff fb4a 	bl	40ce20 <memmove>
  40d78c:	e6ff      	b.n	40d58e <_realloc_r+0x9a>
  40d78e:	4629      	mov	r1, r5
  40d790:	4630      	mov	r0, r6
  40d792:	461c      	mov	r4, r3
  40d794:	46d1      	mov	r9, sl
  40d796:	f7ff fb43 	bl	40ce20 <memmove>
  40d79a:	e70b      	b.n	40d5b4 <_realloc_r+0xc0>
  40d79c:	68ab      	ldr	r3, [r5, #8]
  40d79e:	6083      	str	r3, [r0, #8]
  40d7a0:	68eb      	ldr	r3, [r5, #12]
  40d7a2:	60c3      	str	r3, [r0, #12]
  40d7a4:	2a24      	cmp	r2, #36	; 0x24
  40d7a6:	d017      	beq.n	40d7d8 <_realloc_r+0x2e4>
  40d7a8:	f100 0310 	add.w	r3, r0, #16
  40d7ac:	f105 0210 	add.w	r2, r5, #16
  40d7b0:	e6e7      	b.n	40d582 <_realloc_r+0x8e>
  40d7b2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40d7b6:	f023 0303 	bic.w	r3, r3, #3
  40d7ba:	441c      	add	r4, r3
  40d7bc:	462e      	mov	r6, r5
  40d7be:	e6f9      	b.n	40d5b4 <_realloc_r+0xc0>
  40d7c0:	68a9      	ldr	r1, [r5, #8]
  40d7c2:	f8ca 1010 	str.w	r1, [sl, #16]
  40d7c6:	68e9      	ldr	r1, [r5, #12]
  40d7c8:	f8ca 1014 	str.w	r1, [sl, #20]
  40d7cc:	2a24      	cmp	r2, #36	; 0x24
  40d7ce:	d00c      	beq.n	40d7ea <_realloc_r+0x2f6>
  40d7d0:	3510      	adds	r5, #16
  40d7d2:	f10a 0218 	add.w	r2, sl, #24
  40d7d6:	e7b9      	b.n	40d74c <_realloc_r+0x258>
  40d7d8:	692b      	ldr	r3, [r5, #16]
  40d7da:	6103      	str	r3, [r0, #16]
  40d7dc:	696b      	ldr	r3, [r5, #20]
  40d7de:	6143      	str	r3, [r0, #20]
  40d7e0:	f105 0218 	add.w	r2, r5, #24
  40d7e4:	f100 0318 	add.w	r3, r0, #24
  40d7e8:	e6cb      	b.n	40d582 <_realloc_r+0x8e>
  40d7ea:	692a      	ldr	r2, [r5, #16]
  40d7ec:	f8ca 2018 	str.w	r2, [sl, #24]
  40d7f0:	696a      	ldr	r2, [r5, #20]
  40d7f2:	f8ca 201c 	str.w	r2, [sl, #28]
  40d7f6:	3518      	adds	r5, #24
  40d7f8:	f10a 0220 	add.w	r2, sl, #32
  40d7fc:	e7a6      	b.n	40d74c <_realloc_r+0x258>
  40d7fe:	4632      	mov	r2, r6
  40d800:	e77f      	b.n	40d702 <_realloc_r+0x20e>
  40d802:	4629      	mov	r1, r5
  40d804:	4630      	mov	r0, r6
  40d806:	9301      	str	r3, [sp, #4]
  40d808:	f7ff fb0a 	bl	40ce20 <memmove>
  40d80c:	9b01      	ldr	r3, [sp, #4]
  40d80e:	e77e      	b.n	40d70e <_realloc_r+0x21a>
  40d810:	68a9      	ldr	r1, [r5, #8]
  40d812:	f8ca 1010 	str.w	r1, [sl, #16]
  40d816:	68e9      	ldr	r1, [r5, #12]
  40d818:	f8ca 1014 	str.w	r1, [sl, #20]
  40d81c:	2a24      	cmp	r2, #36	; 0x24
  40d81e:	d003      	beq.n	40d828 <_realloc_r+0x334>
  40d820:	3510      	adds	r5, #16
  40d822:	f10a 0218 	add.w	r2, sl, #24
  40d826:	e76c      	b.n	40d702 <_realloc_r+0x20e>
  40d828:	692a      	ldr	r2, [r5, #16]
  40d82a:	f8ca 2018 	str.w	r2, [sl, #24]
  40d82e:	696a      	ldr	r2, [r5, #20]
  40d830:	f8ca 201c 	str.w	r2, [sl, #28]
  40d834:	3518      	adds	r5, #24
  40d836:	f10a 0220 	add.w	r2, sl, #32
  40d83a:	e762      	b.n	40d702 <_realloc_r+0x20e>
  40d83c:	200007ac 	.word	0x200007ac

0040d840 <lflush>:
  40d840:	8983      	ldrh	r3, [r0, #12]
  40d842:	f003 0309 	and.w	r3, r3, #9
  40d846:	2b09      	cmp	r3, #9
  40d848:	d001      	beq.n	40d84e <lflush+0xe>
  40d84a:	2000      	movs	r0, #0
  40d84c:	4770      	bx	lr
  40d84e:	f7fe bbb3 	b.w	40bfb8 <fflush>
  40d852:	bf00      	nop

0040d854 <__srefill_r>:
  40d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d856:	460c      	mov	r4, r1
  40d858:	4605      	mov	r5, r0
  40d85a:	b110      	cbz	r0, 40d862 <__srefill_r+0xe>
  40d85c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d85e:	2b00      	cmp	r3, #0
  40d860:	d045      	beq.n	40d8ee <__srefill_r+0x9a>
  40d862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d866:	b29a      	uxth	r2, r3
  40d868:	0497      	lsls	r7, r2, #18
  40d86a:	d407      	bmi.n	40d87c <__srefill_r+0x28>
  40d86c:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40d86e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40d872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40d876:	6662      	str	r2, [r4, #100]	; 0x64
  40d878:	81a3      	strh	r3, [r4, #12]
  40d87a:	b29a      	uxth	r2, r3
  40d87c:	2100      	movs	r1, #0
  40d87e:	0696      	lsls	r6, r2, #26
  40d880:	6061      	str	r1, [r4, #4]
  40d882:	d431      	bmi.n	40d8e8 <__srefill_r+0x94>
  40d884:	0750      	lsls	r0, r2, #29
  40d886:	d522      	bpl.n	40d8ce <__srefill_r+0x7a>
  40d888:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40d88a:	b161      	cbz	r1, 40d8a6 <__srefill_r+0x52>
  40d88c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40d890:	4299      	cmp	r1, r3
  40d892:	d002      	beq.n	40d89a <__srefill_r+0x46>
  40d894:	4628      	mov	r0, r5
  40d896:	f7fe fc71 	bl	40c17c <_free_r>
  40d89a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40d89c:	6063      	str	r3, [r4, #4]
  40d89e:	2000      	movs	r0, #0
  40d8a0:	6320      	str	r0, [r4, #48]	; 0x30
  40d8a2:	2b00      	cmp	r3, #0
  40d8a4:	d13f      	bne.n	40d926 <__srefill_r+0xd2>
  40d8a6:	6923      	ldr	r3, [r4, #16]
  40d8a8:	2b00      	cmp	r3, #0
  40d8aa:	d04c      	beq.n	40d946 <__srefill_r+0xf2>
  40d8ac:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
  40d8b0:	b2be      	uxth	r6, r7
  40d8b2:	07b3      	lsls	r3, r6, #30
  40d8b4:	d11e      	bne.n	40d8f4 <__srefill_r+0xa0>
  40d8b6:	6922      	ldr	r2, [r4, #16]
  40d8b8:	6022      	str	r2, [r4, #0]
  40d8ba:	4628      	mov	r0, r5
  40d8bc:	6963      	ldr	r3, [r4, #20]
  40d8be:	6a25      	ldr	r5, [r4, #32]
  40d8c0:	69e1      	ldr	r1, [r4, #28]
  40d8c2:	47a8      	blx	r5
  40d8c4:	2800      	cmp	r0, #0
  40d8c6:	6060      	str	r0, [r4, #4]
  40d8c8:	dd09      	ble.n	40d8de <__srefill_r+0x8a>
  40d8ca:	2000      	movs	r0, #0
  40d8cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d8ce:	06d1      	lsls	r1, r2, #27
  40d8d0:	d53e      	bpl.n	40d950 <__srefill_r+0xfc>
  40d8d2:	0712      	lsls	r2, r2, #28
  40d8d4:	d42a      	bmi.n	40d92c <__srefill_r+0xd8>
  40d8d6:	f043 0304 	orr.w	r3, r3, #4
  40d8da:	81a3      	strh	r3, [r4, #12]
  40d8dc:	e7e3      	b.n	40d8a6 <__srefill_r+0x52>
  40d8de:	89a3      	ldrh	r3, [r4, #12]
  40d8e0:	d119      	bne.n	40d916 <__srefill_r+0xc2>
  40d8e2:	f043 0320 	orr.w	r3, r3, #32
  40d8e6:	81a3      	strh	r3, [r4, #12]
  40d8e8:	f04f 30ff 	mov.w	r0, #4294967295
  40d8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d8ee:	f7fe fba3 	bl	40c038 <__sinit>
  40d8f2:	e7b6      	b.n	40d862 <__srefill_r+0xe>
  40d8f4:	4b1a      	ldr	r3, [pc, #104]	; (40d960 <__srefill_r+0x10c>)
  40d8f6:	491b      	ldr	r1, [pc, #108]	; (40d964 <__srefill_r+0x110>)
  40d8f8:	6818      	ldr	r0, [r3, #0]
  40d8fa:	2301      	movs	r3, #1
  40d8fc:	81a3      	strh	r3, [r4, #12]
  40d8fe:	f006 0609 	and.w	r6, r6, #9
  40d902:	f7fe fe99 	bl	40c638 <_fwalk>
  40d906:	2e09      	cmp	r6, #9
  40d908:	81a7      	strh	r7, [r4, #12]
  40d90a:	d1d4      	bne.n	40d8b6 <__srefill_r+0x62>
  40d90c:	4621      	mov	r1, r4
  40d90e:	4628      	mov	r0, r5
  40d910:	f7fe fa88 	bl	40be24 <__sflush_r>
  40d914:	e7cf      	b.n	40d8b6 <__srefill_r+0x62>
  40d916:	2200      	movs	r2, #0
  40d918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d91c:	81a3      	strh	r3, [r4, #12]
  40d91e:	6062      	str	r2, [r4, #4]
  40d920:	f04f 30ff 	mov.w	r0, #4294967295
  40d924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d926:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40d928:	6023      	str	r3, [r4, #0]
  40d92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d92c:	4621      	mov	r1, r4
  40d92e:	4628      	mov	r0, r5
  40d930:	f7fe fb18 	bl	40bf64 <_fflush_r>
  40d934:	2800      	cmp	r0, #0
  40d936:	d1d7      	bne.n	40d8e8 <__srefill_r+0x94>
  40d938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d93c:	60a0      	str	r0, [r4, #8]
  40d93e:	61a0      	str	r0, [r4, #24]
  40d940:	f023 0308 	bic.w	r3, r3, #8
  40d944:	e7c7      	b.n	40d8d6 <__srefill_r+0x82>
  40d946:	4621      	mov	r1, r4
  40d948:	4628      	mov	r0, r5
  40d94a:	f7fe ff09 	bl	40c760 <__smakebuf_r>
  40d94e:	e7ad      	b.n	40d8ac <__srefill_r+0x58>
  40d950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d954:	2209      	movs	r2, #9
  40d956:	602a      	str	r2, [r5, #0]
  40d958:	f04f 30ff 	mov.w	r0, #4294967295
  40d95c:	81a3      	strh	r3, [r4, #12]
  40d95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d960:	0040fa38 	.word	0x0040fa38
  40d964:	0040d841 	.word	0x0040d841

0040d968 <_sbrk_r>:
  40d968:	b538      	push	{r3, r4, r5, lr}
  40d96a:	4c07      	ldr	r4, [pc, #28]	; (40d988 <_sbrk_r+0x20>)
  40d96c:	2300      	movs	r3, #0
  40d96e:	4605      	mov	r5, r0
  40d970:	4608      	mov	r0, r1
  40d972:	6023      	str	r3, [r4, #0]
  40d974:	f7f7 fa16 	bl	404da4 <_sbrk>
  40d978:	1c43      	adds	r3, r0, #1
  40d97a:	d000      	beq.n	40d97e <_sbrk_r+0x16>
  40d97c:	bd38      	pop	{r3, r4, r5, pc}
  40d97e:	6823      	ldr	r3, [r4, #0]
  40d980:	2b00      	cmp	r3, #0
  40d982:	d0fb      	beq.n	40d97c <_sbrk_r+0x14>
  40d984:	602b      	str	r3, [r5, #0]
  40d986:	bd38      	pop	{r3, r4, r5, pc}
  40d988:	20022274 	.word	0x20022274

0040d98c <__sread>:
  40d98c:	b510      	push	{r4, lr}
  40d98e:	460c      	mov	r4, r1
  40d990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d994:	f000 fb06 	bl	40dfa4 <_read_r>
  40d998:	2800      	cmp	r0, #0
  40d99a:	db03      	blt.n	40d9a4 <__sread+0x18>
  40d99c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40d99e:	4403      	add	r3, r0
  40d9a0:	6523      	str	r3, [r4, #80]	; 0x50
  40d9a2:	bd10      	pop	{r4, pc}
  40d9a4:	89a3      	ldrh	r3, [r4, #12]
  40d9a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40d9aa:	81a3      	strh	r3, [r4, #12]
  40d9ac:	bd10      	pop	{r4, pc}
  40d9ae:	bf00      	nop

0040d9b0 <__swrite>:
  40d9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d9b4:	4616      	mov	r6, r2
  40d9b6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40d9ba:	461f      	mov	r7, r3
  40d9bc:	05d3      	lsls	r3, r2, #23
  40d9be:	460c      	mov	r4, r1
  40d9c0:	4605      	mov	r5, r0
  40d9c2:	d507      	bpl.n	40d9d4 <__swrite+0x24>
  40d9c4:	2200      	movs	r2, #0
  40d9c6:	2302      	movs	r3, #2
  40d9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d9cc:	f000 fabe 	bl	40df4c <_lseek_r>
  40d9d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40d9d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40d9d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40d9dc:	81a2      	strh	r2, [r4, #12]
  40d9de:	463b      	mov	r3, r7
  40d9e0:	4632      	mov	r2, r6
  40d9e2:	4628      	mov	r0, r5
  40d9e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40d9e8:	f000 b8dc 	b.w	40dba4 <_write_r>

0040d9ec <__sseek>:
  40d9ec:	b510      	push	{r4, lr}
  40d9ee:	460c      	mov	r4, r1
  40d9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d9f4:	f000 faaa 	bl	40df4c <_lseek_r>
  40d9f8:	89a3      	ldrh	r3, [r4, #12]
  40d9fa:	1c42      	adds	r2, r0, #1
  40d9fc:	bf0e      	itee	eq
  40d9fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40da02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40da06:	6520      	strne	r0, [r4, #80]	; 0x50
  40da08:	81a3      	strh	r3, [r4, #12]
  40da0a:	bd10      	pop	{r4, pc}

0040da0c <__sclose>:
  40da0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40da10:	f000 b970 	b.w	40dcf4 <_close_r>

0040da14 <__ssprint_r>:
  40da14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40da18:	6893      	ldr	r3, [r2, #8]
  40da1a:	b083      	sub	sp, #12
  40da1c:	4690      	mov	r8, r2
  40da1e:	2b00      	cmp	r3, #0
  40da20:	d070      	beq.n	40db04 <__ssprint_r+0xf0>
  40da22:	4682      	mov	sl, r0
  40da24:	460c      	mov	r4, r1
  40da26:	6817      	ldr	r7, [r2, #0]
  40da28:	688d      	ldr	r5, [r1, #8]
  40da2a:	6808      	ldr	r0, [r1, #0]
  40da2c:	e042      	b.n	40dab4 <__ssprint_r+0xa0>
  40da2e:	89a3      	ldrh	r3, [r4, #12]
  40da30:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40da34:	d02e      	beq.n	40da94 <__ssprint_r+0x80>
  40da36:	6965      	ldr	r5, [r4, #20]
  40da38:	6921      	ldr	r1, [r4, #16]
  40da3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40da3e:	eba0 0b01 	sub.w	fp, r0, r1
  40da42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40da46:	f10b 0001 	add.w	r0, fp, #1
  40da4a:	106d      	asrs	r5, r5, #1
  40da4c:	4430      	add	r0, r6
  40da4e:	42a8      	cmp	r0, r5
  40da50:	462a      	mov	r2, r5
  40da52:	bf84      	itt	hi
  40da54:	4605      	movhi	r5, r0
  40da56:	462a      	movhi	r2, r5
  40da58:	055b      	lsls	r3, r3, #21
  40da5a:	d538      	bpl.n	40dace <__ssprint_r+0xba>
  40da5c:	4611      	mov	r1, r2
  40da5e:	4650      	mov	r0, sl
  40da60:	f7fe fed8 	bl	40c814 <_malloc_r>
  40da64:	2800      	cmp	r0, #0
  40da66:	d03c      	beq.n	40dae2 <__ssprint_r+0xce>
  40da68:	465a      	mov	r2, fp
  40da6a:	6921      	ldr	r1, [r4, #16]
  40da6c:	9001      	str	r0, [sp, #4]
  40da6e:	f7fa f875 	bl	407b5c <memcpy>
  40da72:	89a2      	ldrh	r2, [r4, #12]
  40da74:	9b01      	ldr	r3, [sp, #4]
  40da76:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40da7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40da7e:	81a2      	strh	r2, [r4, #12]
  40da80:	eba5 020b 	sub.w	r2, r5, fp
  40da84:	eb03 000b 	add.w	r0, r3, fp
  40da88:	6165      	str	r5, [r4, #20]
  40da8a:	6123      	str	r3, [r4, #16]
  40da8c:	6020      	str	r0, [r4, #0]
  40da8e:	60a2      	str	r2, [r4, #8]
  40da90:	4635      	mov	r5, r6
  40da92:	46b3      	mov	fp, r6
  40da94:	465a      	mov	r2, fp
  40da96:	4649      	mov	r1, r9
  40da98:	f7ff f9c2 	bl	40ce20 <memmove>
  40da9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40daa0:	68a2      	ldr	r2, [r4, #8]
  40daa2:	6820      	ldr	r0, [r4, #0]
  40daa4:	1b55      	subs	r5, r2, r5
  40daa6:	4458      	add	r0, fp
  40daa8:	1b9e      	subs	r6, r3, r6
  40daaa:	60a5      	str	r5, [r4, #8]
  40daac:	6020      	str	r0, [r4, #0]
  40daae:	f8c8 6008 	str.w	r6, [r8, #8]
  40dab2:	b33e      	cbz	r6, 40db04 <__ssprint_r+0xf0>
  40dab4:	687e      	ldr	r6, [r7, #4]
  40dab6:	463b      	mov	r3, r7
  40dab8:	3708      	adds	r7, #8
  40daba:	2e00      	cmp	r6, #0
  40dabc:	d0fa      	beq.n	40dab4 <__ssprint_r+0xa0>
  40dabe:	42ae      	cmp	r6, r5
  40dac0:	f8d3 9000 	ldr.w	r9, [r3]
  40dac4:	46ab      	mov	fp, r5
  40dac6:	d2b2      	bcs.n	40da2e <__ssprint_r+0x1a>
  40dac8:	4635      	mov	r5, r6
  40daca:	46b3      	mov	fp, r6
  40dacc:	e7e2      	b.n	40da94 <__ssprint_r+0x80>
  40dace:	4650      	mov	r0, sl
  40dad0:	f7ff fd10 	bl	40d4f4 <_realloc_r>
  40dad4:	4603      	mov	r3, r0
  40dad6:	2800      	cmp	r0, #0
  40dad8:	d1d2      	bne.n	40da80 <__ssprint_r+0x6c>
  40dada:	6921      	ldr	r1, [r4, #16]
  40dadc:	4650      	mov	r0, sl
  40dade:	f7fe fb4d 	bl	40c17c <_free_r>
  40dae2:	230c      	movs	r3, #12
  40dae4:	f8ca 3000 	str.w	r3, [sl]
  40dae8:	89a3      	ldrh	r3, [r4, #12]
  40daea:	2200      	movs	r2, #0
  40daec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40daf0:	f04f 30ff 	mov.w	r0, #4294967295
  40daf4:	81a3      	strh	r3, [r4, #12]
  40daf6:	f8c8 2008 	str.w	r2, [r8, #8]
  40dafa:	f8c8 2004 	str.w	r2, [r8, #4]
  40dafe:	b003      	add	sp, #12
  40db00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40db04:	2000      	movs	r0, #0
  40db06:	f8c8 0004 	str.w	r0, [r8, #4]
  40db0a:	b003      	add	sp, #12
  40db0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040db10 <__sprint_r.part.0>:
  40db10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40db14:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40db16:	049c      	lsls	r4, r3, #18
  40db18:	4693      	mov	fp, r2
  40db1a:	d52f      	bpl.n	40db7c <__sprint_r.part.0+0x6c>
  40db1c:	6893      	ldr	r3, [r2, #8]
  40db1e:	6812      	ldr	r2, [r2, #0]
  40db20:	b353      	cbz	r3, 40db78 <__sprint_r.part.0+0x68>
  40db22:	460e      	mov	r6, r1
  40db24:	4607      	mov	r7, r0
  40db26:	f102 0908 	add.w	r9, r2, #8
  40db2a:	e919 0420 	ldmdb	r9, {r5, sl}
  40db2e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40db32:	d017      	beq.n	40db64 <__sprint_r.part.0+0x54>
  40db34:	3d04      	subs	r5, #4
  40db36:	2400      	movs	r4, #0
  40db38:	e001      	b.n	40db3e <__sprint_r.part.0+0x2e>
  40db3a:	45a0      	cmp	r8, r4
  40db3c:	d010      	beq.n	40db60 <__sprint_r.part.0+0x50>
  40db3e:	4632      	mov	r2, r6
  40db40:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40db44:	4638      	mov	r0, r7
  40db46:	f000 f999 	bl	40de7c <_fputwc_r>
  40db4a:	1c43      	adds	r3, r0, #1
  40db4c:	f104 0401 	add.w	r4, r4, #1
  40db50:	d1f3      	bne.n	40db3a <__sprint_r.part.0+0x2a>
  40db52:	2300      	movs	r3, #0
  40db54:	f8cb 3008 	str.w	r3, [fp, #8]
  40db58:	f8cb 3004 	str.w	r3, [fp, #4]
  40db5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40db60:	f8db 3008 	ldr.w	r3, [fp, #8]
  40db64:	f02a 0a03 	bic.w	sl, sl, #3
  40db68:	eba3 030a 	sub.w	r3, r3, sl
  40db6c:	f8cb 3008 	str.w	r3, [fp, #8]
  40db70:	f109 0908 	add.w	r9, r9, #8
  40db74:	2b00      	cmp	r3, #0
  40db76:	d1d8      	bne.n	40db2a <__sprint_r.part.0+0x1a>
  40db78:	2000      	movs	r0, #0
  40db7a:	e7ea      	b.n	40db52 <__sprint_r.part.0+0x42>
  40db7c:	f7fe fbe4 	bl	40c348 <__sfvwrite_r>
  40db80:	2300      	movs	r3, #0
  40db82:	f8cb 3008 	str.w	r3, [fp, #8]
  40db86:	f8cb 3004 	str.w	r3, [fp, #4]
  40db8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40db8e:	bf00      	nop

0040db90 <__sprint_r>:
  40db90:	6893      	ldr	r3, [r2, #8]
  40db92:	b10b      	cbz	r3, 40db98 <__sprint_r+0x8>
  40db94:	f7ff bfbc 	b.w	40db10 <__sprint_r.part.0>
  40db98:	b410      	push	{r4}
  40db9a:	4618      	mov	r0, r3
  40db9c:	6053      	str	r3, [r2, #4]
  40db9e:	bc10      	pop	{r4}
  40dba0:	4770      	bx	lr
  40dba2:	bf00      	nop

0040dba4 <_write_r>:
  40dba4:	b570      	push	{r4, r5, r6, lr}
  40dba6:	460d      	mov	r5, r1
  40dba8:	4c08      	ldr	r4, [pc, #32]	; (40dbcc <_write_r+0x28>)
  40dbaa:	4611      	mov	r1, r2
  40dbac:	4606      	mov	r6, r0
  40dbae:	461a      	mov	r2, r3
  40dbb0:	4628      	mov	r0, r5
  40dbb2:	2300      	movs	r3, #0
  40dbb4:	6023      	str	r3, [r4, #0]
  40dbb6:	f7f6 fcb9 	bl	40452c <_write>
  40dbba:	1c43      	adds	r3, r0, #1
  40dbbc:	d000      	beq.n	40dbc0 <_write_r+0x1c>
  40dbbe:	bd70      	pop	{r4, r5, r6, pc}
  40dbc0:	6823      	ldr	r3, [r4, #0]
  40dbc2:	2b00      	cmp	r3, #0
  40dbc4:	d0fb      	beq.n	40dbbe <_write_r+0x1a>
  40dbc6:	6033      	str	r3, [r6, #0]
  40dbc8:	bd70      	pop	{r4, r5, r6, pc}
  40dbca:	bf00      	nop
  40dbcc:	20022274 	.word	0x20022274

0040dbd0 <__register_exitproc>:
  40dbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40dbd4:	4d2c      	ldr	r5, [pc, #176]	; (40dc88 <__register_exitproc+0xb8>)
  40dbd6:	4606      	mov	r6, r0
  40dbd8:	6828      	ldr	r0, [r5, #0]
  40dbda:	4698      	mov	r8, r3
  40dbdc:	460f      	mov	r7, r1
  40dbde:	4691      	mov	r9, r2
  40dbe0:	f7fe fd8c 	bl	40c6fc <__retarget_lock_acquire_recursive>
  40dbe4:	4b29      	ldr	r3, [pc, #164]	; (40dc8c <__register_exitproc+0xbc>)
  40dbe6:	681c      	ldr	r4, [r3, #0]
  40dbe8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40dbec:	2b00      	cmp	r3, #0
  40dbee:	d03e      	beq.n	40dc6e <__register_exitproc+0x9e>
  40dbf0:	685a      	ldr	r2, [r3, #4]
  40dbf2:	2a1f      	cmp	r2, #31
  40dbf4:	dc1c      	bgt.n	40dc30 <__register_exitproc+0x60>
  40dbf6:	f102 0e01 	add.w	lr, r2, #1
  40dbfa:	b176      	cbz	r6, 40dc1a <__register_exitproc+0x4a>
  40dbfc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40dc00:	2401      	movs	r4, #1
  40dc02:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40dc06:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40dc0a:	4094      	lsls	r4, r2
  40dc0c:	4320      	orrs	r0, r4
  40dc0e:	2e02      	cmp	r6, #2
  40dc10:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40dc14:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40dc18:	d023      	beq.n	40dc62 <__register_exitproc+0x92>
  40dc1a:	3202      	adds	r2, #2
  40dc1c:	f8c3 e004 	str.w	lr, [r3, #4]
  40dc20:	6828      	ldr	r0, [r5, #0]
  40dc22:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40dc26:	f7fe fd6b 	bl	40c700 <__retarget_lock_release_recursive>
  40dc2a:	2000      	movs	r0, #0
  40dc2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40dc30:	4b17      	ldr	r3, [pc, #92]	; (40dc90 <__register_exitproc+0xc0>)
  40dc32:	b30b      	cbz	r3, 40dc78 <__register_exitproc+0xa8>
  40dc34:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40dc38:	f7fe fddc 	bl	40c7f4 <malloc>
  40dc3c:	4603      	mov	r3, r0
  40dc3e:	b1d8      	cbz	r0, 40dc78 <__register_exitproc+0xa8>
  40dc40:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40dc44:	6002      	str	r2, [r0, #0]
  40dc46:	2100      	movs	r1, #0
  40dc48:	6041      	str	r1, [r0, #4]
  40dc4a:	460a      	mov	r2, r1
  40dc4c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40dc50:	f04f 0e01 	mov.w	lr, #1
  40dc54:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40dc58:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40dc5c:	2e00      	cmp	r6, #0
  40dc5e:	d0dc      	beq.n	40dc1a <__register_exitproc+0x4a>
  40dc60:	e7cc      	b.n	40dbfc <__register_exitproc+0x2c>
  40dc62:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40dc66:	430c      	orrs	r4, r1
  40dc68:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40dc6c:	e7d5      	b.n	40dc1a <__register_exitproc+0x4a>
  40dc6e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40dc72:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40dc76:	e7bb      	b.n	40dbf0 <__register_exitproc+0x20>
  40dc78:	6828      	ldr	r0, [r5, #0]
  40dc7a:	f7fe fd41 	bl	40c700 <__retarget_lock_release_recursive>
  40dc7e:	f04f 30ff 	mov.w	r0, #4294967295
  40dc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40dc86:	bf00      	nop
  40dc88:	200007a8 	.word	0x200007a8
  40dc8c:	0040fa38 	.word	0x0040fa38
  40dc90:	0040c7f5 	.word	0x0040c7f5

0040dc94 <_calloc_r>:
  40dc94:	b510      	push	{r4, lr}
  40dc96:	fb02 f101 	mul.w	r1, r2, r1
  40dc9a:	f7fe fdbb 	bl	40c814 <_malloc_r>
  40dc9e:	4604      	mov	r4, r0
  40dca0:	b1d8      	cbz	r0, 40dcda <_calloc_r+0x46>
  40dca2:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40dca6:	f022 0203 	bic.w	r2, r2, #3
  40dcaa:	3a04      	subs	r2, #4
  40dcac:	2a24      	cmp	r2, #36	; 0x24
  40dcae:	d818      	bhi.n	40dce2 <_calloc_r+0x4e>
  40dcb0:	2a13      	cmp	r2, #19
  40dcb2:	d914      	bls.n	40dcde <_calloc_r+0x4a>
  40dcb4:	2300      	movs	r3, #0
  40dcb6:	2a1b      	cmp	r2, #27
  40dcb8:	6003      	str	r3, [r0, #0]
  40dcba:	6043      	str	r3, [r0, #4]
  40dcbc:	d916      	bls.n	40dcec <_calloc_r+0x58>
  40dcbe:	2a24      	cmp	r2, #36	; 0x24
  40dcc0:	6083      	str	r3, [r0, #8]
  40dcc2:	60c3      	str	r3, [r0, #12]
  40dcc4:	bf11      	iteee	ne
  40dcc6:	f100 0210 	addne.w	r2, r0, #16
  40dcca:	6103      	streq	r3, [r0, #16]
  40dccc:	6143      	streq	r3, [r0, #20]
  40dcce:	f100 0218 	addeq.w	r2, r0, #24
  40dcd2:	2300      	movs	r3, #0
  40dcd4:	6013      	str	r3, [r2, #0]
  40dcd6:	6053      	str	r3, [r2, #4]
  40dcd8:	6093      	str	r3, [r2, #8]
  40dcda:	4620      	mov	r0, r4
  40dcdc:	bd10      	pop	{r4, pc}
  40dcde:	4602      	mov	r2, r0
  40dce0:	e7f7      	b.n	40dcd2 <_calloc_r+0x3e>
  40dce2:	2100      	movs	r1, #0
  40dce4:	f7f9 ffd4 	bl	407c90 <memset>
  40dce8:	4620      	mov	r0, r4
  40dcea:	bd10      	pop	{r4, pc}
  40dcec:	f100 0208 	add.w	r2, r0, #8
  40dcf0:	e7ef      	b.n	40dcd2 <_calloc_r+0x3e>
  40dcf2:	bf00      	nop

0040dcf4 <_close_r>:
  40dcf4:	b538      	push	{r3, r4, r5, lr}
  40dcf6:	4c07      	ldr	r4, [pc, #28]	; (40dd14 <_close_r+0x20>)
  40dcf8:	2300      	movs	r3, #0
  40dcfa:	4605      	mov	r5, r0
  40dcfc:	4608      	mov	r0, r1
  40dcfe:	6023      	str	r3, [r4, #0]
  40dd00:	f7f7 f86c 	bl	404ddc <_close>
  40dd04:	1c43      	adds	r3, r0, #1
  40dd06:	d000      	beq.n	40dd0a <_close_r+0x16>
  40dd08:	bd38      	pop	{r3, r4, r5, pc}
  40dd0a:	6823      	ldr	r3, [r4, #0]
  40dd0c:	2b00      	cmp	r3, #0
  40dd0e:	d0fb      	beq.n	40dd08 <_close_r+0x14>
  40dd10:	602b      	str	r3, [r5, #0]
  40dd12:	bd38      	pop	{r3, r4, r5, pc}
  40dd14:	20022274 	.word	0x20022274

0040dd18 <_fclose_r>:
  40dd18:	b570      	push	{r4, r5, r6, lr}
  40dd1a:	b159      	cbz	r1, 40dd34 <_fclose_r+0x1c>
  40dd1c:	4605      	mov	r5, r0
  40dd1e:	460c      	mov	r4, r1
  40dd20:	b110      	cbz	r0, 40dd28 <_fclose_r+0x10>
  40dd22:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40dd24:	2b00      	cmp	r3, #0
  40dd26:	d03c      	beq.n	40dda2 <_fclose_r+0x8a>
  40dd28:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40dd2a:	07d8      	lsls	r0, r3, #31
  40dd2c:	d505      	bpl.n	40dd3a <_fclose_r+0x22>
  40dd2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40dd32:	b92b      	cbnz	r3, 40dd40 <_fclose_r+0x28>
  40dd34:	2600      	movs	r6, #0
  40dd36:	4630      	mov	r0, r6
  40dd38:	bd70      	pop	{r4, r5, r6, pc}
  40dd3a:	89a3      	ldrh	r3, [r4, #12]
  40dd3c:	0599      	lsls	r1, r3, #22
  40dd3e:	d53c      	bpl.n	40ddba <_fclose_r+0xa2>
  40dd40:	4621      	mov	r1, r4
  40dd42:	4628      	mov	r0, r5
  40dd44:	f7fe f86e 	bl	40be24 <__sflush_r>
  40dd48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40dd4a:	4606      	mov	r6, r0
  40dd4c:	b133      	cbz	r3, 40dd5c <_fclose_r+0x44>
  40dd4e:	69e1      	ldr	r1, [r4, #28]
  40dd50:	4628      	mov	r0, r5
  40dd52:	4798      	blx	r3
  40dd54:	2800      	cmp	r0, #0
  40dd56:	bfb8      	it	lt
  40dd58:	f04f 36ff 	movlt.w	r6, #4294967295
  40dd5c:	89a3      	ldrh	r3, [r4, #12]
  40dd5e:	061a      	lsls	r2, r3, #24
  40dd60:	d422      	bmi.n	40dda8 <_fclose_r+0x90>
  40dd62:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40dd64:	b141      	cbz	r1, 40dd78 <_fclose_r+0x60>
  40dd66:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40dd6a:	4299      	cmp	r1, r3
  40dd6c:	d002      	beq.n	40dd74 <_fclose_r+0x5c>
  40dd6e:	4628      	mov	r0, r5
  40dd70:	f7fe fa04 	bl	40c17c <_free_r>
  40dd74:	2300      	movs	r3, #0
  40dd76:	6323      	str	r3, [r4, #48]	; 0x30
  40dd78:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40dd7a:	b121      	cbz	r1, 40dd86 <_fclose_r+0x6e>
  40dd7c:	4628      	mov	r0, r5
  40dd7e:	f7fe f9fd 	bl	40c17c <_free_r>
  40dd82:	2300      	movs	r3, #0
  40dd84:	6463      	str	r3, [r4, #68]	; 0x44
  40dd86:	f7fe f983 	bl	40c090 <__sfp_lock_acquire>
  40dd8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40dd8c:	2200      	movs	r2, #0
  40dd8e:	07db      	lsls	r3, r3, #31
  40dd90:	81a2      	strh	r2, [r4, #12]
  40dd92:	d50e      	bpl.n	40ddb2 <_fclose_r+0x9a>
  40dd94:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40dd96:	f7fe fcaf 	bl	40c6f8 <__retarget_lock_close_recursive>
  40dd9a:	f7fe f97f 	bl	40c09c <__sfp_lock_release>
  40dd9e:	4630      	mov	r0, r6
  40dda0:	bd70      	pop	{r4, r5, r6, pc}
  40dda2:	f7fe f949 	bl	40c038 <__sinit>
  40dda6:	e7bf      	b.n	40dd28 <_fclose_r+0x10>
  40dda8:	6921      	ldr	r1, [r4, #16]
  40ddaa:	4628      	mov	r0, r5
  40ddac:	f7fe f9e6 	bl	40c17c <_free_r>
  40ddb0:	e7d7      	b.n	40dd62 <_fclose_r+0x4a>
  40ddb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40ddb4:	f7fe fca4 	bl	40c700 <__retarget_lock_release_recursive>
  40ddb8:	e7ec      	b.n	40dd94 <_fclose_r+0x7c>
  40ddba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40ddbc:	f7fe fc9e 	bl	40c6fc <__retarget_lock_acquire_recursive>
  40ddc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ddc4:	2b00      	cmp	r3, #0
  40ddc6:	d1bb      	bne.n	40dd40 <_fclose_r+0x28>
  40ddc8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40ddca:	f016 0601 	ands.w	r6, r6, #1
  40ddce:	d1b1      	bne.n	40dd34 <_fclose_r+0x1c>
  40ddd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40ddd2:	f7fe fc95 	bl	40c700 <__retarget_lock_release_recursive>
  40ddd6:	4630      	mov	r0, r6
  40ddd8:	bd70      	pop	{r4, r5, r6, pc}
  40ddda:	bf00      	nop

0040dddc <__fputwc>:
  40dddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40dde0:	b082      	sub	sp, #8
  40dde2:	4680      	mov	r8, r0
  40dde4:	4689      	mov	r9, r1
  40dde6:	4614      	mov	r4, r2
  40dde8:	f000 f8a2 	bl	40df30 <__locale_mb_cur_max>
  40ddec:	2801      	cmp	r0, #1
  40ddee:	d036      	beq.n	40de5e <__fputwc+0x82>
  40ddf0:	464a      	mov	r2, r9
  40ddf2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40ddf6:	a901      	add	r1, sp, #4
  40ddf8:	4640      	mov	r0, r8
  40ddfa:	f000 f941 	bl	40e080 <_wcrtomb_r>
  40ddfe:	1c42      	adds	r2, r0, #1
  40de00:	4606      	mov	r6, r0
  40de02:	d025      	beq.n	40de50 <__fputwc+0x74>
  40de04:	b3a8      	cbz	r0, 40de72 <__fputwc+0x96>
  40de06:	f89d e004 	ldrb.w	lr, [sp, #4]
  40de0a:	2500      	movs	r5, #0
  40de0c:	f10d 0a04 	add.w	sl, sp, #4
  40de10:	e009      	b.n	40de26 <__fputwc+0x4a>
  40de12:	6823      	ldr	r3, [r4, #0]
  40de14:	1c5a      	adds	r2, r3, #1
  40de16:	6022      	str	r2, [r4, #0]
  40de18:	f883 e000 	strb.w	lr, [r3]
  40de1c:	3501      	adds	r5, #1
  40de1e:	42b5      	cmp	r5, r6
  40de20:	d227      	bcs.n	40de72 <__fputwc+0x96>
  40de22:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40de26:	68a3      	ldr	r3, [r4, #8]
  40de28:	3b01      	subs	r3, #1
  40de2a:	2b00      	cmp	r3, #0
  40de2c:	60a3      	str	r3, [r4, #8]
  40de2e:	daf0      	bge.n	40de12 <__fputwc+0x36>
  40de30:	69a7      	ldr	r7, [r4, #24]
  40de32:	42bb      	cmp	r3, r7
  40de34:	4671      	mov	r1, lr
  40de36:	4622      	mov	r2, r4
  40de38:	4640      	mov	r0, r8
  40de3a:	db02      	blt.n	40de42 <__fputwc+0x66>
  40de3c:	f1be 0f0a 	cmp.w	lr, #10
  40de40:	d1e7      	bne.n	40de12 <__fputwc+0x36>
  40de42:	f000 f8c5 	bl	40dfd0 <__swbuf_r>
  40de46:	1c43      	adds	r3, r0, #1
  40de48:	d1e8      	bne.n	40de1c <__fputwc+0x40>
  40de4a:	b002      	add	sp, #8
  40de4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40de50:	89a3      	ldrh	r3, [r4, #12]
  40de52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40de56:	81a3      	strh	r3, [r4, #12]
  40de58:	b002      	add	sp, #8
  40de5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40de5e:	f109 33ff 	add.w	r3, r9, #4294967295
  40de62:	2bfe      	cmp	r3, #254	; 0xfe
  40de64:	d8c4      	bhi.n	40ddf0 <__fputwc+0x14>
  40de66:	fa5f fe89 	uxtb.w	lr, r9
  40de6a:	4606      	mov	r6, r0
  40de6c:	f88d e004 	strb.w	lr, [sp, #4]
  40de70:	e7cb      	b.n	40de0a <__fputwc+0x2e>
  40de72:	4648      	mov	r0, r9
  40de74:	b002      	add	sp, #8
  40de76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40de7a:	bf00      	nop

0040de7c <_fputwc_r>:
  40de7c:	b530      	push	{r4, r5, lr}
  40de7e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40de80:	f013 0f01 	tst.w	r3, #1
  40de84:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40de88:	4614      	mov	r4, r2
  40de8a:	b083      	sub	sp, #12
  40de8c:	4605      	mov	r5, r0
  40de8e:	b29a      	uxth	r2, r3
  40de90:	d101      	bne.n	40de96 <_fputwc_r+0x1a>
  40de92:	0590      	lsls	r0, r2, #22
  40de94:	d51c      	bpl.n	40ded0 <_fputwc_r+0x54>
  40de96:	0490      	lsls	r0, r2, #18
  40de98:	d406      	bmi.n	40dea8 <_fputwc_r+0x2c>
  40de9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40de9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40dea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40dea4:	81a3      	strh	r3, [r4, #12]
  40dea6:	6662      	str	r2, [r4, #100]	; 0x64
  40dea8:	4628      	mov	r0, r5
  40deaa:	4622      	mov	r2, r4
  40deac:	f7ff ff96 	bl	40dddc <__fputwc>
  40deb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40deb2:	07da      	lsls	r2, r3, #31
  40deb4:	4605      	mov	r5, r0
  40deb6:	d402      	bmi.n	40debe <_fputwc_r+0x42>
  40deb8:	89a3      	ldrh	r3, [r4, #12]
  40deba:	059b      	lsls	r3, r3, #22
  40debc:	d502      	bpl.n	40dec4 <_fputwc_r+0x48>
  40debe:	4628      	mov	r0, r5
  40dec0:	b003      	add	sp, #12
  40dec2:	bd30      	pop	{r4, r5, pc}
  40dec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40dec6:	f7fe fc1b 	bl	40c700 <__retarget_lock_release_recursive>
  40deca:	4628      	mov	r0, r5
  40decc:	b003      	add	sp, #12
  40dece:	bd30      	pop	{r4, r5, pc}
  40ded0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40ded2:	9101      	str	r1, [sp, #4]
  40ded4:	f7fe fc12 	bl	40c6fc <__retarget_lock_acquire_recursive>
  40ded8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40dedc:	9901      	ldr	r1, [sp, #4]
  40dede:	b29a      	uxth	r2, r3
  40dee0:	e7d9      	b.n	40de96 <_fputwc_r+0x1a>
  40dee2:	bf00      	nop

0040dee4 <_fstat_r>:
  40dee4:	b538      	push	{r3, r4, r5, lr}
  40dee6:	460b      	mov	r3, r1
  40dee8:	4c07      	ldr	r4, [pc, #28]	; (40df08 <_fstat_r+0x24>)
  40deea:	4605      	mov	r5, r0
  40deec:	4611      	mov	r1, r2
  40deee:	4618      	mov	r0, r3
  40def0:	2300      	movs	r3, #0
  40def2:	6023      	str	r3, [r4, #0]
  40def4:	f7f6 ff75 	bl	404de2 <_fstat>
  40def8:	1c43      	adds	r3, r0, #1
  40defa:	d000      	beq.n	40defe <_fstat_r+0x1a>
  40defc:	bd38      	pop	{r3, r4, r5, pc}
  40defe:	6823      	ldr	r3, [r4, #0]
  40df00:	2b00      	cmp	r3, #0
  40df02:	d0fb      	beq.n	40defc <_fstat_r+0x18>
  40df04:	602b      	str	r3, [r5, #0]
  40df06:	bd38      	pop	{r3, r4, r5, pc}
  40df08:	20022274 	.word	0x20022274

0040df0c <_isatty_r>:
  40df0c:	b538      	push	{r3, r4, r5, lr}
  40df0e:	4c07      	ldr	r4, [pc, #28]	; (40df2c <_isatty_r+0x20>)
  40df10:	2300      	movs	r3, #0
  40df12:	4605      	mov	r5, r0
  40df14:	4608      	mov	r0, r1
  40df16:	6023      	str	r3, [r4, #0]
  40df18:	f7f6 ff68 	bl	404dec <_isatty>
  40df1c:	1c43      	adds	r3, r0, #1
  40df1e:	d000      	beq.n	40df22 <_isatty_r+0x16>
  40df20:	bd38      	pop	{r3, r4, r5, pc}
  40df22:	6823      	ldr	r3, [r4, #0]
  40df24:	2b00      	cmp	r3, #0
  40df26:	d0fb      	beq.n	40df20 <_isatty_r+0x14>
  40df28:	602b      	str	r3, [r5, #0]
  40df2a:	bd38      	pop	{r3, r4, r5, pc}
  40df2c:	20022274 	.word	0x20022274

0040df30 <__locale_mb_cur_max>:
  40df30:	4b04      	ldr	r3, [pc, #16]	; (40df44 <__locale_mb_cur_max+0x14>)
  40df32:	4a05      	ldr	r2, [pc, #20]	; (40df48 <__locale_mb_cur_max+0x18>)
  40df34:	681b      	ldr	r3, [r3, #0]
  40df36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40df38:	2b00      	cmp	r3, #0
  40df3a:	bf08      	it	eq
  40df3c:	4613      	moveq	r3, r2
  40df3e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40df42:	4770      	bx	lr
  40df44:	20000378 	.word	0x20000378
  40df48:	20000bbc 	.word	0x20000bbc

0040df4c <_lseek_r>:
  40df4c:	b570      	push	{r4, r5, r6, lr}
  40df4e:	460d      	mov	r5, r1
  40df50:	4c08      	ldr	r4, [pc, #32]	; (40df74 <_lseek_r+0x28>)
  40df52:	4611      	mov	r1, r2
  40df54:	4606      	mov	r6, r0
  40df56:	461a      	mov	r2, r3
  40df58:	4628      	mov	r0, r5
  40df5a:	2300      	movs	r3, #0
  40df5c:	6023      	str	r3, [r4, #0]
  40df5e:	f7f6 ff47 	bl	404df0 <_lseek>
  40df62:	1c43      	adds	r3, r0, #1
  40df64:	d000      	beq.n	40df68 <_lseek_r+0x1c>
  40df66:	bd70      	pop	{r4, r5, r6, pc}
  40df68:	6823      	ldr	r3, [r4, #0]
  40df6a:	2b00      	cmp	r3, #0
  40df6c:	d0fb      	beq.n	40df66 <_lseek_r+0x1a>
  40df6e:	6033      	str	r3, [r6, #0]
  40df70:	bd70      	pop	{r4, r5, r6, pc}
  40df72:	bf00      	nop
  40df74:	20022274 	.word	0x20022274

0040df78 <__ascii_mbtowc>:
  40df78:	b082      	sub	sp, #8
  40df7a:	b149      	cbz	r1, 40df90 <__ascii_mbtowc+0x18>
  40df7c:	b15a      	cbz	r2, 40df96 <__ascii_mbtowc+0x1e>
  40df7e:	b16b      	cbz	r3, 40df9c <__ascii_mbtowc+0x24>
  40df80:	7813      	ldrb	r3, [r2, #0]
  40df82:	600b      	str	r3, [r1, #0]
  40df84:	7812      	ldrb	r2, [r2, #0]
  40df86:	1c10      	adds	r0, r2, #0
  40df88:	bf18      	it	ne
  40df8a:	2001      	movne	r0, #1
  40df8c:	b002      	add	sp, #8
  40df8e:	4770      	bx	lr
  40df90:	a901      	add	r1, sp, #4
  40df92:	2a00      	cmp	r2, #0
  40df94:	d1f3      	bne.n	40df7e <__ascii_mbtowc+0x6>
  40df96:	4610      	mov	r0, r2
  40df98:	b002      	add	sp, #8
  40df9a:	4770      	bx	lr
  40df9c:	f06f 0001 	mvn.w	r0, #1
  40dfa0:	e7f4      	b.n	40df8c <__ascii_mbtowc+0x14>
  40dfa2:	bf00      	nop

0040dfa4 <_read_r>:
  40dfa4:	b570      	push	{r4, r5, r6, lr}
  40dfa6:	460d      	mov	r5, r1
  40dfa8:	4c08      	ldr	r4, [pc, #32]	; (40dfcc <_read_r+0x28>)
  40dfaa:	4611      	mov	r1, r2
  40dfac:	4606      	mov	r6, r0
  40dfae:	461a      	mov	r2, r3
  40dfb0:	4628      	mov	r0, r5
  40dfb2:	2300      	movs	r3, #0
  40dfb4:	6023      	str	r3, [r4, #0]
  40dfb6:	f7f2 f8fd 	bl	4001b4 <_read>
  40dfba:	1c43      	adds	r3, r0, #1
  40dfbc:	d000      	beq.n	40dfc0 <_read_r+0x1c>
  40dfbe:	bd70      	pop	{r4, r5, r6, pc}
  40dfc0:	6823      	ldr	r3, [r4, #0]
  40dfc2:	2b00      	cmp	r3, #0
  40dfc4:	d0fb      	beq.n	40dfbe <_read_r+0x1a>
  40dfc6:	6033      	str	r3, [r6, #0]
  40dfc8:	bd70      	pop	{r4, r5, r6, pc}
  40dfca:	bf00      	nop
  40dfcc:	20022274 	.word	0x20022274

0040dfd0 <__swbuf_r>:
  40dfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40dfd2:	460d      	mov	r5, r1
  40dfd4:	4614      	mov	r4, r2
  40dfd6:	4606      	mov	r6, r0
  40dfd8:	b110      	cbz	r0, 40dfe0 <__swbuf_r+0x10>
  40dfda:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40dfdc:	2b00      	cmp	r3, #0
  40dfde:	d04b      	beq.n	40e078 <__swbuf_r+0xa8>
  40dfe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40dfe4:	69a3      	ldr	r3, [r4, #24]
  40dfe6:	60a3      	str	r3, [r4, #8]
  40dfe8:	b291      	uxth	r1, r2
  40dfea:	0708      	lsls	r0, r1, #28
  40dfec:	d539      	bpl.n	40e062 <__swbuf_r+0x92>
  40dfee:	6923      	ldr	r3, [r4, #16]
  40dff0:	2b00      	cmp	r3, #0
  40dff2:	d036      	beq.n	40e062 <__swbuf_r+0x92>
  40dff4:	b2ed      	uxtb	r5, r5
  40dff6:	0489      	lsls	r1, r1, #18
  40dff8:	462f      	mov	r7, r5
  40dffa:	d515      	bpl.n	40e028 <__swbuf_r+0x58>
  40dffc:	6822      	ldr	r2, [r4, #0]
  40dffe:	6961      	ldr	r1, [r4, #20]
  40e000:	1ad3      	subs	r3, r2, r3
  40e002:	428b      	cmp	r3, r1
  40e004:	da1c      	bge.n	40e040 <__swbuf_r+0x70>
  40e006:	3301      	adds	r3, #1
  40e008:	68a1      	ldr	r1, [r4, #8]
  40e00a:	1c50      	adds	r0, r2, #1
  40e00c:	3901      	subs	r1, #1
  40e00e:	60a1      	str	r1, [r4, #8]
  40e010:	6020      	str	r0, [r4, #0]
  40e012:	7015      	strb	r5, [r2, #0]
  40e014:	6962      	ldr	r2, [r4, #20]
  40e016:	429a      	cmp	r2, r3
  40e018:	d01a      	beq.n	40e050 <__swbuf_r+0x80>
  40e01a:	89a3      	ldrh	r3, [r4, #12]
  40e01c:	07db      	lsls	r3, r3, #31
  40e01e:	d501      	bpl.n	40e024 <__swbuf_r+0x54>
  40e020:	2d0a      	cmp	r5, #10
  40e022:	d015      	beq.n	40e050 <__swbuf_r+0x80>
  40e024:	4638      	mov	r0, r7
  40e026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40e028:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40e02a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40e02e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40e032:	81a2      	strh	r2, [r4, #12]
  40e034:	6822      	ldr	r2, [r4, #0]
  40e036:	6661      	str	r1, [r4, #100]	; 0x64
  40e038:	6961      	ldr	r1, [r4, #20]
  40e03a:	1ad3      	subs	r3, r2, r3
  40e03c:	428b      	cmp	r3, r1
  40e03e:	dbe2      	blt.n	40e006 <__swbuf_r+0x36>
  40e040:	4621      	mov	r1, r4
  40e042:	4630      	mov	r0, r6
  40e044:	f7fd ff8e 	bl	40bf64 <_fflush_r>
  40e048:	b940      	cbnz	r0, 40e05c <__swbuf_r+0x8c>
  40e04a:	6822      	ldr	r2, [r4, #0]
  40e04c:	2301      	movs	r3, #1
  40e04e:	e7db      	b.n	40e008 <__swbuf_r+0x38>
  40e050:	4621      	mov	r1, r4
  40e052:	4630      	mov	r0, r6
  40e054:	f7fd ff86 	bl	40bf64 <_fflush_r>
  40e058:	2800      	cmp	r0, #0
  40e05a:	d0e3      	beq.n	40e024 <__swbuf_r+0x54>
  40e05c:	f04f 37ff 	mov.w	r7, #4294967295
  40e060:	e7e0      	b.n	40e024 <__swbuf_r+0x54>
  40e062:	4621      	mov	r1, r4
  40e064:	4630      	mov	r0, r6
  40e066:	f7fc fe35 	bl	40acd4 <__swsetup_r>
  40e06a:	2800      	cmp	r0, #0
  40e06c:	d1f6      	bne.n	40e05c <__swbuf_r+0x8c>
  40e06e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40e072:	6923      	ldr	r3, [r4, #16]
  40e074:	b291      	uxth	r1, r2
  40e076:	e7bd      	b.n	40dff4 <__swbuf_r+0x24>
  40e078:	f7fd ffde 	bl	40c038 <__sinit>
  40e07c:	e7b0      	b.n	40dfe0 <__swbuf_r+0x10>
  40e07e:	bf00      	nop

0040e080 <_wcrtomb_r>:
  40e080:	b5f0      	push	{r4, r5, r6, r7, lr}
  40e082:	4606      	mov	r6, r0
  40e084:	b085      	sub	sp, #20
  40e086:	461f      	mov	r7, r3
  40e088:	b189      	cbz	r1, 40e0ae <_wcrtomb_r+0x2e>
  40e08a:	4c10      	ldr	r4, [pc, #64]	; (40e0cc <_wcrtomb_r+0x4c>)
  40e08c:	4d10      	ldr	r5, [pc, #64]	; (40e0d0 <_wcrtomb_r+0x50>)
  40e08e:	6824      	ldr	r4, [r4, #0]
  40e090:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40e092:	2c00      	cmp	r4, #0
  40e094:	bf08      	it	eq
  40e096:	462c      	moveq	r4, r5
  40e098:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40e09c:	47a0      	blx	r4
  40e09e:	1c43      	adds	r3, r0, #1
  40e0a0:	d103      	bne.n	40e0aa <_wcrtomb_r+0x2a>
  40e0a2:	2200      	movs	r2, #0
  40e0a4:	238a      	movs	r3, #138	; 0x8a
  40e0a6:	603a      	str	r2, [r7, #0]
  40e0a8:	6033      	str	r3, [r6, #0]
  40e0aa:	b005      	add	sp, #20
  40e0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40e0ae:	460c      	mov	r4, r1
  40e0b0:	4906      	ldr	r1, [pc, #24]	; (40e0cc <_wcrtomb_r+0x4c>)
  40e0b2:	4a07      	ldr	r2, [pc, #28]	; (40e0d0 <_wcrtomb_r+0x50>)
  40e0b4:	6809      	ldr	r1, [r1, #0]
  40e0b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40e0b8:	2900      	cmp	r1, #0
  40e0ba:	bf08      	it	eq
  40e0bc:	4611      	moveq	r1, r2
  40e0be:	4622      	mov	r2, r4
  40e0c0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40e0c4:	a901      	add	r1, sp, #4
  40e0c6:	47a0      	blx	r4
  40e0c8:	e7e9      	b.n	40e09e <_wcrtomb_r+0x1e>
  40e0ca:	bf00      	nop
  40e0cc:	20000378 	.word	0x20000378
  40e0d0:	20000bbc 	.word	0x20000bbc

0040e0d4 <__ascii_wctomb>:
  40e0d4:	b121      	cbz	r1, 40e0e0 <__ascii_wctomb+0xc>
  40e0d6:	2aff      	cmp	r2, #255	; 0xff
  40e0d8:	d804      	bhi.n	40e0e4 <__ascii_wctomb+0x10>
  40e0da:	700a      	strb	r2, [r1, #0]
  40e0dc:	2001      	movs	r0, #1
  40e0de:	4770      	bx	lr
  40e0e0:	4608      	mov	r0, r1
  40e0e2:	4770      	bx	lr
  40e0e4:	238a      	movs	r3, #138	; 0x8a
  40e0e6:	6003      	str	r3, [r0, #0]
  40e0e8:	f04f 30ff 	mov.w	r0, #4294967295
  40e0ec:	4770      	bx	lr
  40e0ee:	bf00      	nop

0040e0f0 <__gedf2>:
  40e0f0:	f04f 3cff 	mov.w	ip, #4294967295
  40e0f4:	e006      	b.n	40e104 <__cmpdf2+0x4>
  40e0f6:	bf00      	nop

0040e0f8 <__ledf2>:
  40e0f8:	f04f 0c01 	mov.w	ip, #1
  40e0fc:	e002      	b.n	40e104 <__cmpdf2+0x4>
  40e0fe:	bf00      	nop

0040e100 <__cmpdf2>:
  40e100:	f04f 0c01 	mov.w	ip, #1
  40e104:	f84d cd04 	str.w	ip, [sp, #-4]!
  40e108:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40e10c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e110:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40e114:	bf18      	it	ne
  40e116:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40e11a:	d01b      	beq.n	40e154 <__cmpdf2+0x54>
  40e11c:	b001      	add	sp, #4
  40e11e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40e122:	bf0c      	ite	eq
  40e124:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40e128:	ea91 0f03 	teqne	r1, r3
  40e12c:	bf02      	ittt	eq
  40e12e:	ea90 0f02 	teqeq	r0, r2
  40e132:	2000      	moveq	r0, #0
  40e134:	4770      	bxeq	lr
  40e136:	f110 0f00 	cmn.w	r0, #0
  40e13a:	ea91 0f03 	teq	r1, r3
  40e13e:	bf58      	it	pl
  40e140:	4299      	cmppl	r1, r3
  40e142:	bf08      	it	eq
  40e144:	4290      	cmpeq	r0, r2
  40e146:	bf2c      	ite	cs
  40e148:	17d8      	asrcs	r0, r3, #31
  40e14a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40e14e:	f040 0001 	orr.w	r0, r0, #1
  40e152:	4770      	bx	lr
  40e154:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40e158:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e15c:	d102      	bne.n	40e164 <__cmpdf2+0x64>
  40e15e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40e162:	d107      	bne.n	40e174 <__cmpdf2+0x74>
  40e164:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40e168:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e16c:	d1d6      	bne.n	40e11c <__cmpdf2+0x1c>
  40e16e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40e172:	d0d3      	beq.n	40e11c <__cmpdf2+0x1c>
  40e174:	f85d 0b04 	ldr.w	r0, [sp], #4
  40e178:	4770      	bx	lr
  40e17a:	bf00      	nop

0040e17c <__aeabi_cdrcmple>:
  40e17c:	4684      	mov	ip, r0
  40e17e:	4610      	mov	r0, r2
  40e180:	4662      	mov	r2, ip
  40e182:	468c      	mov	ip, r1
  40e184:	4619      	mov	r1, r3
  40e186:	4663      	mov	r3, ip
  40e188:	e000      	b.n	40e18c <__aeabi_cdcmpeq>
  40e18a:	bf00      	nop

0040e18c <__aeabi_cdcmpeq>:
  40e18c:	b501      	push	{r0, lr}
  40e18e:	f7ff ffb7 	bl	40e100 <__cmpdf2>
  40e192:	2800      	cmp	r0, #0
  40e194:	bf48      	it	mi
  40e196:	f110 0f00 	cmnmi.w	r0, #0
  40e19a:	bd01      	pop	{r0, pc}

0040e19c <__aeabi_dcmpeq>:
  40e19c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e1a0:	f7ff fff4 	bl	40e18c <__aeabi_cdcmpeq>
  40e1a4:	bf0c      	ite	eq
  40e1a6:	2001      	moveq	r0, #1
  40e1a8:	2000      	movne	r0, #0
  40e1aa:	f85d fb08 	ldr.w	pc, [sp], #8
  40e1ae:	bf00      	nop

0040e1b0 <__aeabi_dcmplt>:
  40e1b0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e1b4:	f7ff ffea 	bl	40e18c <__aeabi_cdcmpeq>
  40e1b8:	bf34      	ite	cc
  40e1ba:	2001      	movcc	r0, #1
  40e1bc:	2000      	movcs	r0, #0
  40e1be:	f85d fb08 	ldr.w	pc, [sp], #8
  40e1c2:	bf00      	nop

0040e1c4 <__aeabi_dcmple>:
  40e1c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e1c8:	f7ff ffe0 	bl	40e18c <__aeabi_cdcmpeq>
  40e1cc:	bf94      	ite	ls
  40e1ce:	2001      	movls	r0, #1
  40e1d0:	2000      	movhi	r0, #0
  40e1d2:	f85d fb08 	ldr.w	pc, [sp], #8
  40e1d6:	bf00      	nop

0040e1d8 <__aeabi_dcmpge>:
  40e1d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e1dc:	f7ff ffce 	bl	40e17c <__aeabi_cdrcmple>
  40e1e0:	bf94      	ite	ls
  40e1e2:	2001      	movls	r0, #1
  40e1e4:	2000      	movhi	r0, #0
  40e1e6:	f85d fb08 	ldr.w	pc, [sp], #8
  40e1ea:	bf00      	nop

0040e1ec <__aeabi_dcmpgt>:
  40e1ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e1f0:	f7ff ffc4 	bl	40e17c <__aeabi_cdrcmple>
  40e1f4:	bf34      	ite	cc
  40e1f6:	2001      	movcc	r0, #1
  40e1f8:	2000      	movcs	r0, #0
  40e1fa:	f85d fb08 	ldr.w	pc, [sp], #8
  40e1fe:	bf00      	nop

0040e200 <__aeabi_dcmpun>:
  40e200:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40e204:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e208:	d102      	bne.n	40e210 <__aeabi_dcmpun+0x10>
  40e20a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40e20e:	d10a      	bne.n	40e226 <__aeabi_dcmpun+0x26>
  40e210:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40e214:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e218:	d102      	bne.n	40e220 <__aeabi_dcmpun+0x20>
  40e21a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40e21e:	d102      	bne.n	40e226 <__aeabi_dcmpun+0x26>
  40e220:	f04f 0000 	mov.w	r0, #0
  40e224:	4770      	bx	lr
  40e226:	f04f 0001 	mov.w	r0, #1
  40e22a:	4770      	bx	lr

0040e22c <__aeabi_d2iz>:
  40e22c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40e230:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40e234:	d215      	bcs.n	40e262 <__aeabi_d2iz+0x36>
  40e236:	d511      	bpl.n	40e25c <__aeabi_d2iz+0x30>
  40e238:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40e23c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40e240:	d912      	bls.n	40e268 <__aeabi_d2iz+0x3c>
  40e242:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40e246:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40e24a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40e24e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40e252:	fa23 f002 	lsr.w	r0, r3, r2
  40e256:	bf18      	it	ne
  40e258:	4240      	negne	r0, r0
  40e25a:	4770      	bx	lr
  40e25c:	f04f 0000 	mov.w	r0, #0
  40e260:	4770      	bx	lr
  40e262:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40e266:	d105      	bne.n	40e274 <__aeabi_d2iz+0x48>
  40e268:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40e26c:	bf08      	it	eq
  40e26e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40e272:	4770      	bx	lr
  40e274:	f04f 0000 	mov.w	r0, #0
  40e278:	4770      	bx	lr
  40e27a:	bf00      	nop

0040e27c <__aeabi_uldivmod>:
  40e27c:	b953      	cbnz	r3, 40e294 <__aeabi_uldivmod+0x18>
  40e27e:	b94a      	cbnz	r2, 40e294 <__aeabi_uldivmod+0x18>
  40e280:	2900      	cmp	r1, #0
  40e282:	bf08      	it	eq
  40e284:	2800      	cmpeq	r0, #0
  40e286:	bf1c      	itt	ne
  40e288:	f04f 31ff 	movne.w	r1, #4294967295
  40e28c:	f04f 30ff 	movne.w	r0, #4294967295
  40e290:	f000 b97a 	b.w	40e588 <__aeabi_idiv0>
  40e294:	f1ad 0c08 	sub.w	ip, sp, #8
  40e298:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40e29c:	f000 f806 	bl	40e2ac <__udivmoddi4>
  40e2a0:	f8dd e004 	ldr.w	lr, [sp, #4]
  40e2a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40e2a8:	b004      	add	sp, #16
  40e2aa:	4770      	bx	lr

0040e2ac <__udivmoddi4>:
  40e2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40e2b0:	468c      	mov	ip, r1
  40e2b2:	460d      	mov	r5, r1
  40e2b4:	4604      	mov	r4, r0
  40e2b6:	9e08      	ldr	r6, [sp, #32]
  40e2b8:	2b00      	cmp	r3, #0
  40e2ba:	d151      	bne.n	40e360 <__udivmoddi4+0xb4>
  40e2bc:	428a      	cmp	r2, r1
  40e2be:	4617      	mov	r7, r2
  40e2c0:	d96d      	bls.n	40e39e <__udivmoddi4+0xf2>
  40e2c2:	fab2 fe82 	clz	lr, r2
  40e2c6:	f1be 0f00 	cmp.w	lr, #0
  40e2ca:	d00b      	beq.n	40e2e4 <__udivmoddi4+0x38>
  40e2cc:	f1ce 0c20 	rsb	ip, lr, #32
  40e2d0:	fa01 f50e 	lsl.w	r5, r1, lr
  40e2d4:	fa20 fc0c 	lsr.w	ip, r0, ip
  40e2d8:	fa02 f70e 	lsl.w	r7, r2, lr
  40e2dc:	ea4c 0c05 	orr.w	ip, ip, r5
  40e2e0:	fa00 f40e 	lsl.w	r4, r0, lr
  40e2e4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40e2e8:	0c25      	lsrs	r5, r4, #16
  40e2ea:	fbbc f8fa 	udiv	r8, ip, sl
  40e2ee:	fa1f f987 	uxth.w	r9, r7
  40e2f2:	fb0a cc18 	mls	ip, sl, r8, ip
  40e2f6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40e2fa:	fb08 f309 	mul.w	r3, r8, r9
  40e2fe:	42ab      	cmp	r3, r5
  40e300:	d90a      	bls.n	40e318 <__udivmoddi4+0x6c>
  40e302:	19ed      	adds	r5, r5, r7
  40e304:	f108 32ff 	add.w	r2, r8, #4294967295
  40e308:	f080 8123 	bcs.w	40e552 <__udivmoddi4+0x2a6>
  40e30c:	42ab      	cmp	r3, r5
  40e30e:	f240 8120 	bls.w	40e552 <__udivmoddi4+0x2a6>
  40e312:	f1a8 0802 	sub.w	r8, r8, #2
  40e316:	443d      	add	r5, r7
  40e318:	1aed      	subs	r5, r5, r3
  40e31a:	b2a4      	uxth	r4, r4
  40e31c:	fbb5 f0fa 	udiv	r0, r5, sl
  40e320:	fb0a 5510 	mls	r5, sl, r0, r5
  40e324:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40e328:	fb00 f909 	mul.w	r9, r0, r9
  40e32c:	45a1      	cmp	r9, r4
  40e32e:	d909      	bls.n	40e344 <__udivmoddi4+0x98>
  40e330:	19e4      	adds	r4, r4, r7
  40e332:	f100 33ff 	add.w	r3, r0, #4294967295
  40e336:	f080 810a 	bcs.w	40e54e <__udivmoddi4+0x2a2>
  40e33a:	45a1      	cmp	r9, r4
  40e33c:	f240 8107 	bls.w	40e54e <__udivmoddi4+0x2a2>
  40e340:	3802      	subs	r0, #2
  40e342:	443c      	add	r4, r7
  40e344:	eba4 0409 	sub.w	r4, r4, r9
  40e348:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40e34c:	2100      	movs	r1, #0
  40e34e:	2e00      	cmp	r6, #0
  40e350:	d061      	beq.n	40e416 <__udivmoddi4+0x16a>
  40e352:	fa24 f40e 	lsr.w	r4, r4, lr
  40e356:	2300      	movs	r3, #0
  40e358:	6034      	str	r4, [r6, #0]
  40e35a:	6073      	str	r3, [r6, #4]
  40e35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e360:	428b      	cmp	r3, r1
  40e362:	d907      	bls.n	40e374 <__udivmoddi4+0xc8>
  40e364:	2e00      	cmp	r6, #0
  40e366:	d054      	beq.n	40e412 <__udivmoddi4+0x166>
  40e368:	2100      	movs	r1, #0
  40e36a:	e886 0021 	stmia.w	r6, {r0, r5}
  40e36e:	4608      	mov	r0, r1
  40e370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e374:	fab3 f183 	clz	r1, r3
  40e378:	2900      	cmp	r1, #0
  40e37a:	f040 808e 	bne.w	40e49a <__udivmoddi4+0x1ee>
  40e37e:	42ab      	cmp	r3, r5
  40e380:	d302      	bcc.n	40e388 <__udivmoddi4+0xdc>
  40e382:	4282      	cmp	r2, r0
  40e384:	f200 80fa 	bhi.w	40e57c <__udivmoddi4+0x2d0>
  40e388:	1a84      	subs	r4, r0, r2
  40e38a:	eb65 0503 	sbc.w	r5, r5, r3
  40e38e:	2001      	movs	r0, #1
  40e390:	46ac      	mov	ip, r5
  40e392:	2e00      	cmp	r6, #0
  40e394:	d03f      	beq.n	40e416 <__udivmoddi4+0x16a>
  40e396:	e886 1010 	stmia.w	r6, {r4, ip}
  40e39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e39e:	b912      	cbnz	r2, 40e3a6 <__udivmoddi4+0xfa>
  40e3a0:	2701      	movs	r7, #1
  40e3a2:	fbb7 f7f2 	udiv	r7, r7, r2
  40e3a6:	fab7 fe87 	clz	lr, r7
  40e3aa:	f1be 0f00 	cmp.w	lr, #0
  40e3ae:	d134      	bne.n	40e41a <__udivmoddi4+0x16e>
  40e3b0:	1beb      	subs	r3, r5, r7
  40e3b2:	0c3a      	lsrs	r2, r7, #16
  40e3b4:	fa1f fc87 	uxth.w	ip, r7
  40e3b8:	2101      	movs	r1, #1
  40e3ba:	fbb3 f8f2 	udiv	r8, r3, r2
  40e3be:	0c25      	lsrs	r5, r4, #16
  40e3c0:	fb02 3318 	mls	r3, r2, r8, r3
  40e3c4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40e3c8:	fb0c f308 	mul.w	r3, ip, r8
  40e3cc:	42ab      	cmp	r3, r5
  40e3ce:	d907      	bls.n	40e3e0 <__udivmoddi4+0x134>
  40e3d0:	19ed      	adds	r5, r5, r7
  40e3d2:	f108 30ff 	add.w	r0, r8, #4294967295
  40e3d6:	d202      	bcs.n	40e3de <__udivmoddi4+0x132>
  40e3d8:	42ab      	cmp	r3, r5
  40e3da:	f200 80d1 	bhi.w	40e580 <__udivmoddi4+0x2d4>
  40e3de:	4680      	mov	r8, r0
  40e3e0:	1aed      	subs	r5, r5, r3
  40e3e2:	b2a3      	uxth	r3, r4
  40e3e4:	fbb5 f0f2 	udiv	r0, r5, r2
  40e3e8:	fb02 5510 	mls	r5, r2, r0, r5
  40e3ec:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40e3f0:	fb0c fc00 	mul.w	ip, ip, r0
  40e3f4:	45a4      	cmp	ip, r4
  40e3f6:	d907      	bls.n	40e408 <__udivmoddi4+0x15c>
  40e3f8:	19e4      	adds	r4, r4, r7
  40e3fa:	f100 33ff 	add.w	r3, r0, #4294967295
  40e3fe:	d202      	bcs.n	40e406 <__udivmoddi4+0x15a>
  40e400:	45a4      	cmp	ip, r4
  40e402:	f200 80b8 	bhi.w	40e576 <__udivmoddi4+0x2ca>
  40e406:	4618      	mov	r0, r3
  40e408:	eba4 040c 	sub.w	r4, r4, ip
  40e40c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40e410:	e79d      	b.n	40e34e <__udivmoddi4+0xa2>
  40e412:	4631      	mov	r1, r6
  40e414:	4630      	mov	r0, r6
  40e416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e41a:	f1ce 0420 	rsb	r4, lr, #32
  40e41e:	fa05 f30e 	lsl.w	r3, r5, lr
  40e422:	fa07 f70e 	lsl.w	r7, r7, lr
  40e426:	fa20 f804 	lsr.w	r8, r0, r4
  40e42a:	0c3a      	lsrs	r2, r7, #16
  40e42c:	fa25 f404 	lsr.w	r4, r5, r4
  40e430:	ea48 0803 	orr.w	r8, r8, r3
  40e434:	fbb4 f1f2 	udiv	r1, r4, r2
  40e438:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40e43c:	fb02 4411 	mls	r4, r2, r1, r4
  40e440:	fa1f fc87 	uxth.w	ip, r7
  40e444:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40e448:	fb01 f30c 	mul.w	r3, r1, ip
  40e44c:	42ab      	cmp	r3, r5
  40e44e:	fa00 f40e 	lsl.w	r4, r0, lr
  40e452:	d909      	bls.n	40e468 <__udivmoddi4+0x1bc>
  40e454:	19ed      	adds	r5, r5, r7
  40e456:	f101 30ff 	add.w	r0, r1, #4294967295
  40e45a:	f080 808a 	bcs.w	40e572 <__udivmoddi4+0x2c6>
  40e45e:	42ab      	cmp	r3, r5
  40e460:	f240 8087 	bls.w	40e572 <__udivmoddi4+0x2c6>
  40e464:	3902      	subs	r1, #2
  40e466:	443d      	add	r5, r7
  40e468:	1aeb      	subs	r3, r5, r3
  40e46a:	fa1f f588 	uxth.w	r5, r8
  40e46e:	fbb3 f0f2 	udiv	r0, r3, r2
  40e472:	fb02 3310 	mls	r3, r2, r0, r3
  40e476:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40e47a:	fb00 f30c 	mul.w	r3, r0, ip
  40e47e:	42ab      	cmp	r3, r5
  40e480:	d907      	bls.n	40e492 <__udivmoddi4+0x1e6>
  40e482:	19ed      	adds	r5, r5, r7
  40e484:	f100 38ff 	add.w	r8, r0, #4294967295
  40e488:	d26f      	bcs.n	40e56a <__udivmoddi4+0x2be>
  40e48a:	42ab      	cmp	r3, r5
  40e48c:	d96d      	bls.n	40e56a <__udivmoddi4+0x2be>
  40e48e:	3802      	subs	r0, #2
  40e490:	443d      	add	r5, r7
  40e492:	1aeb      	subs	r3, r5, r3
  40e494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40e498:	e78f      	b.n	40e3ba <__udivmoddi4+0x10e>
  40e49a:	f1c1 0720 	rsb	r7, r1, #32
  40e49e:	fa22 f807 	lsr.w	r8, r2, r7
  40e4a2:	408b      	lsls	r3, r1
  40e4a4:	fa05 f401 	lsl.w	r4, r5, r1
  40e4a8:	ea48 0303 	orr.w	r3, r8, r3
  40e4ac:	fa20 fe07 	lsr.w	lr, r0, r7
  40e4b0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40e4b4:	40fd      	lsrs	r5, r7
  40e4b6:	ea4e 0e04 	orr.w	lr, lr, r4
  40e4ba:	fbb5 f9fc 	udiv	r9, r5, ip
  40e4be:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40e4c2:	fb0c 5519 	mls	r5, ip, r9, r5
  40e4c6:	fa1f f883 	uxth.w	r8, r3
  40e4ca:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40e4ce:	fb09 f408 	mul.w	r4, r9, r8
  40e4d2:	42ac      	cmp	r4, r5
  40e4d4:	fa02 f201 	lsl.w	r2, r2, r1
  40e4d8:	fa00 fa01 	lsl.w	sl, r0, r1
  40e4dc:	d908      	bls.n	40e4f0 <__udivmoddi4+0x244>
  40e4de:	18ed      	adds	r5, r5, r3
  40e4e0:	f109 30ff 	add.w	r0, r9, #4294967295
  40e4e4:	d243      	bcs.n	40e56e <__udivmoddi4+0x2c2>
  40e4e6:	42ac      	cmp	r4, r5
  40e4e8:	d941      	bls.n	40e56e <__udivmoddi4+0x2c2>
  40e4ea:	f1a9 0902 	sub.w	r9, r9, #2
  40e4ee:	441d      	add	r5, r3
  40e4f0:	1b2d      	subs	r5, r5, r4
  40e4f2:	fa1f fe8e 	uxth.w	lr, lr
  40e4f6:	fbb5 f0fc 	udiv	r0, r5, ip
  40e4fa:	fb0c 5510 	mls	r5, ip, r0, r5
  40e4fe:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40e502:	fb00 f808 	mul.w	r8, r0, r8
  40e506:	45a0      	cmp	r8, r4
  40e508:	d907      	bls.n	40e51a <__udivmoddi4+0x26e>
  40e50a:	18e4      	adds	r4, r4, r3
  40e50c:	f100 35ff 	add.w	r5, r0, #4294967295
  40e510:	d229      	bcs.n	40e566 <__udivmoddi4+0x2ba>
  40e512:	45a0      	cmp	r8, r4
  40e514:	d927      	bls.n	40e566 <__udivmoddi4+0x2ba>
  40e516:	3802      	subs	r0, #2
  40e518:	441c      	add	r4, r3
  40e51a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40e51e:	eba4 0408 	sub.w	r4, r4, r8
  40e522:	fba0 8902 	umull	r8, r9, r0, r2
  40e526:	454c      	cmp	r4, r9
  40e528:	46c6      	mov	lr, r8
  40e52a:	464d      	mov	r5, r9
  40e52c:	d315      	bcc.n	40e55a <__udivmoddi4+0x2ae>
  40e52e:	d012      	beq.n	40e556 <__udivmoddi4+0x2aa>
  40e530:	b156      	cbz	r6, 40e548 <__udivmoddi4+0x29c>
  40e532:	ebba 030e 	subs.w	r3, sl, lr
  40e536:	eb64 0405 	sbc.w	r4, r4, r5
  40e53a:	fa04 f707 	lsl.w	r7, r4, r7
  40e53e:	40cb      	lsrs	r3, r1
  40e540:	431f      	orrs	r7, r3
  40e542:	40cc      	lsrs	r4, r1
  40e544:	6037      	str	r7, [r6, #0]
  40e546:	6074      	str	r4, [r6, #4]
  40e548:	2100      	movs	r1, #0
  40e54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e54e:	4618      	mov	r0, r3
  40e550:	e6f8      	b.n	40e344 <__udivmoddi4+0x98>
  40e552:	4690      	mov	r8, r2
  40e554:	e6e0      	b.n	40e318 <__udivmoddi4+0x6c>
  40e556:	45c2      	cmp	sl, r8
  40e558:	d2ea      	bcs.n	40e530 <__udivmoddi4+0x284>
  40e55a:	ebb8 0e02 	subs.w	lr, r8, r2
  40e55e:	eb69 0503 	sbc.w	r5, r9, r3
  40e562:	3801      	subs	r0, #1
  40e564:	e7e4      	b.n	40e530 <__udivmoddi4+0x284>
  40e566:	4628      	mov	r0, r5
  40e568:	e7d7      	b.n	40e51a <__udivmoddi4+0x26e>
  40e56a:	4640      	mov	r0, r8
  40e56c:	e791      	b.n	40e492 <__udivmoddi4+0x1e6>
  40e56e:	4681      	mov	r9, r0
  40e570:	e7be      	b.n	40e4f0 <__udivmoddi4+0x244>
  40e572:	4601      	mov	r1, r0
  40e574:	e778      	b.n	40e468 <__udivmoddi4+0x1bc>
  40e576:	3802      	subs	r0, #2
  40e578:	443c      	add	r4, r7
  40e57a:	e745      	b.n	40e408 <__udivmoddi4+0x15c>
  40e57c:	4608      	mov	r0, r1
  40e57e:	e708      	b.n	40e392 <__udivmoddi4+0xe6>
  40e580:	f1a8 0802 	sub.w	r8, r8, #2
  40e584:	443d      	add	r5, r7
  40e586:	e72b      	b.n	40e3e0 <__udivmoddi4+0x134>

0040e588 <__aeabi_idiv0>:
  40e588:	4770      	bx	lr
  40e58a:	bf00      	nop
  40e58c:	454c4449 	.word	0x454c4449
  40e590:	00000000 	.word	0x00000000
  40e594:	20726d54 	.word	0x20726d54
  40e598:	00637653 	.word	0x00637653
  40e59c:	6e755220 	.word	0x6e755220
  40e5a0:	676e696e 	.word	0x676e696e
  40e5a4:	73657420 	.word	0x73657420
  40e5a8:	63252074 	.word	0x63252074
  40e5ac:	2e2e2020 	.word	0x2e2e2020
  40e5b0:	7250202e 	.word	0x7250202e
  40e5b4:	20737365 	.word	0x20737365
  40e5b8:	7420585e 	.word	0x7420585e
  40e5bc:	7865206f 	.word	0x7865206f
  40e5c0:	74207469 	.word	0x74207469
  40e5c4:	20747365 	.word	0x20747365
  40e5c8:	20646e61 	.word	0x20646e61
  40e5cc:	65746e65 	.word	0x65746e65
  40e5d0:	656e2072 	.word	0x656e2072
  40e5d4:	65742077 	.word	0x65742077
  40e5d8:	6b207473 	.word	0x6b207473
  40e5dc:	0a0d7965 	.word	0x0a0d7965
  40e5e0:	00000000 	.word	0x00000000
  40e5e4:	61666564 	.word	0x61666564
  40e5e8:	20746c75 	.word	0x20746c75
  40e5ec:	73616320 	.word	0x73616320
  40e5f0:	00000065 	.word	0x00000065
  40e5f4:	66746962 	.word	0x66746962
  40e5f8:	646c6569 	.word	0x646c6569
  40e5fc:	20736920 	.word	0x20736920
  40e600:	74706d65 	.word	0x74706d65
  40e604:	00000d79 	.word	0x00000d79
  40e608:	73657250 	.word	0x73657250
  40e60c:	6e612073 	.word	0x6e612073
  40e610:	656b2079 	.word	0x656b2079
  40e614:	6f742079 	.word	0x6f742079
  40e618:	6e6f6320 	.word	0x6e6f6320
  40e61c:	756e6974 	.word	0x756e6974
  40e620:	000d2065 	.word	0x000d2065

0040e624 <accelfilterBW>:
  40e624:	41200000 42380000 42700000 437a0000     .. A..8B..pB..zC
  40e634:	43960000 43c80000                       ...C...C

0040e63c <accelfilterString>:
  40e63c:	0040e6ec 0040e6f4 0040e6fc 0040e704     ..@...@...@...@.
  40e64c:	0040e70c 0040e714                       ..@...@.

0040e654 <filterTable>:
  40e654:	00020001 00040003 00060005 00080007     ................
  40e664:	000a0009 000c000b 000e000d 0013000f     ................
  40e674:	00150014 00170016 00190018 001b001a     ................
  40e684:	001d001c 001f001e 00240023 00260025     ........#.$.%.&.
  40e694:	00280027 002a0029 6d696e55 6d656c70     '.(.).*.Unimplem
  40e6a4:	65746e65 6f4c2064 65522077 69462073     ented Low Res Fi
  40e6b4:	7265746c 74655220 006e7275              lter Return.

0040e6c0 <gyrofilterBW>:
  40e6c0:	41200000 41480000 41d80000 42380000     .. A..HA...A..8B
  40e6d0:	42700000                                ..pB

0040e6d4 <gyrofilterString>:
  40e6d4:	0040e71c 0040e724 0040e72c 0040e734     ..@.$.@.,.@.4.@.
  40e6e4:	0040e73c 0040e744 48303120 0000007a     <.@.D.@. 10Hz...
  40e6f4:	48363420 0000007a 48303620 0000007a      46Hz... 60Hz...
  40e704:	48303532 0000007a 48303033 0000007a     250Hz...300Hz...
  40e714:	48303034 0000007a 7a483031 00000000     400Hz...10Hz....
  40e724:	7a483231 00000000 7a483732 00000000     12Hz....27Hz....
  40e734:	7a483033 00000000 7a483634 00000000     30Hz....46Hz....
  40e744:	7a483036 00000000 58343025 00000000     60Hz....%04X....
  40e754:	00007325 206c6c41 6f727265 4f207372     %s..All errors O
  40e764:	64652d72 202c303d 20747562 756f7247     r-ed=0, but Grou
  40e774:	73207370 20776f68 6f727265 203a7372     ps show errors: 
  40e784:	00000000 65636552 64657669 61745320     ....Received Sta
  40e794:	20737574 6e657645 00202c74 37314d53     tus Event, .SM17
  40e7a4:	6341203a 206c6563 66655256 69685320     : Accel VRef Shi
  40e7b4:	20646c65 0000005a 37314d53 6341203a     eld Z...SM17: Ac
  40e7c4:	206c6563 66655256 69685320 20646c65     cel VRef Shield 
  40e7d4:	00005958 38314d53 6341203a 206c6563     XY..SM18: Accel 
  40e7e4:	44205043 65766972 6c6f5620 65676174     CP Drive Voltage
  40e7f4:	00000000 34314d53 6341203a 206c6563     ....SM14: Accel 
  40e804:	66657256 00000000 36314d53 6341203a     Vref....SM16: Ac
  40e814:	206c6563 53204344 2d666c65 74736554     cel DC Self-Test
  40e824:	5d585b20 00000000 36314d53 6341203a      [X]....SM16: Ac
  40e834:	206c6563 53204344 2d666c65 74736554     cel DC Self-Test
  40e844:	5d595b20 00000000 36314d53 6341203a      [Y]....SM16: Ac
  40e854:	206c6563 53204344 2d666c65 74736554     cel DC Self-Test
  40e864:	5d5a5b20 00000000 34304d53 7947203a      [Z]....SM04: Gy
  40e874:	51206f72 20646175 6e676953 41206c61     ro Quad Signal A
  40e884:	696c706d 65647574 5d5a5b20 00000000     mplitude [Z]....
  40e894:	34304d53 7947203a 51206f72 20646175     SM04: Gyro Quad 
  40e8a4:	6e676953 41206c61 696c706d 65647574     Signal Amplitude
  40e8b4:	5d595b20 00000000 34304d53 7947203a      [Y]....SM04: Gy
  40e8c4:	51206f72 20646175 6e676953 41206c61     ro Quad Signal A
  40e8d4:	696c706d 65647574 5d585b20 00000000     mplitude [X]....
  40e8e4:	33304d53 7947203a 50206f72 44204c4c     SM03: Gyro PLL D
  40e8f4:	65766972 65724620 654d2071 72757361     rive Freq Measur
  40e904:	6e656d65 5d5a5b74 00000000 33304d53     ement[Z]....SM03
  40e914:	7947203a 50206f72 44204c4c 65766972     : Gyro PLL Drive
  40e924:	65724620 654d2071 72757361 6e656d65      Freq Measuremen
  40e934:	5d595b74 00000000 33304d53 7947203a     t[Y]....SM03: Gy
  40e944:	50206f72 44204c4c 65766972 65724620     ro PLL Drive Fre
  40e954:	654d2071 72757361 6e656d65 5d585b74     q Measurement[X]
  40e964:	00000000 36334d53 7947203a 44206f72     ....SM36: Gyro D
  40e974:	65532043 542d666c 20747365 005d5a5b     C Self-Test [Z].
  40e984:	36334d53 7947203a 44206f72 65532043     SM36: Gyro DC Se
  40e994:	542d666c 20747365 005d595b 36334d53     lf-Test [Y].SM36
  40e9a4:	7947203a 44206f72 65532043 542d666c     : Gyro DC Self-T
  40e9b4:	20747365 005d585b 34314d53 7947203a     est [X].SM14: Gy
  40e9c4:	56206f72 00666552 37304d53 7947203a     ro VRef.SM07: Gy
  40e9d4:	44206f72 65766972 636f6c43 4c50206b     ro DriveClock PL
  40e9e4:	6f6c204c 6c206b63 2074736f 597c5a5b     L lock lost [Z|Y
  40e9f4:	005d587c 37304d53 7947203a 44206f72     |X].SM07: Gyro D
  40ea04:	65766972 636f6c43 4c50206b 6f6c204c     riveClock PLL lo
  40ea14:	6c206b63 2074736f 005d595b 37304d53     ck lost [Y].SM07
  40ea24:	7947203a 44206f72 65766972 636f6c43     : Gyro DriveCloc
  40ea34:	4c50206b 6f6c204c 6c206b63 2074736f     k PLL lock lost 
  40ea44:	005d585b                                [X].

0040ea48 <afres>:
  40ea48:	332e3725 00002066                       %7.3f ..

0040ea50 <amres>:
  40ea50:	312e3525 00002066                       %5.1f ..

0040ea58 <gfres>:
  40ea58:	332e3725 00002066                       %7.3f ..

0040ea60 <gmres>:
  40ea60:	312e3525 00002066 20643725 20643725     %5.1f ..%7d %7d 
  40ea70:	20643725 00000000 78343025 00000000     %7d ....%04x....
  40ea80:	312e3325 25202066 66312e33 33252020     %3.1f  %3.1f  %3
  40ea90:	0066312e 20202020 58343025 00000020     .1f.    %04X ...
  40eaa0:	00007841 25207325 73252073 20732520     Ax..%s %s %s %s 
  40eab0:	25207325 73252073 00000000 00007a41     %s %s %s....Az..
  40eac0:	00007941 726c7841 00000000 726c7a41     Ay..Axlr....Azlr
  40ead0:	00000000 726c7941 00000000 00007847     ....Aylr....Gx..
  40eae0:	00007a47 00007947 00003154 00005464     Gz..Gy..T1..dT..
  40eaf0:	00003254 69447841 00000066 69447a41     T2..AxDif...AzDi
  40eb00:	00000066 69447941 00000066 6568744f     f...AyDif...Othe
  40eb10:	00000072 73257325 00000000 20202020     r...%s%s....    
  40eb20:	79412020 00000000 20202020 7a412020       Ay....      Az
  40eb30:	00000000 73257325 73257325 73257325     ....%s%s%s%s%s%s
  40eb40:	73257325 0a0d7325 00000000 32542020     %s%s%s......  T2
  40eb50:	00000020 54202020 00002031 20202020      ...   T1 ..    
  40eb60:	78472020 00000000 20202020 79472020       Gx....      Gy
  40eb70:	00000000 20202020 7a472020 00000000     ....      Gz....
  40eb80:	20202020 78412020 00000000 2d2d2d20           Ax.... ---
  40eb90:	20202d2d 00000000 202d2d20 00000020     --  .... --  ...
  40eba0:	20207941 20202020 00000020 20207a41     Ay       ...Az  
  40ebb0:	20202020 00000020 00203254 20203154          ...T2 .T1  
  40ebc0:	00002020 20207847 00202020 20207947       ..Gx     .Gy  
  40ebd0:	20202020 00000020 20207a47 20202020          ...Gz      
  40ebe0:	00000020 20207841 20202020 00000020      ...Ax       ...
  40ebf0:	2d2d2d20 2d2d2d2d 00000020 2d2d2d20      ------- ... ---
  40ec00:	202d2d2d 00000020 202d2d2d 00000000     ---  ...--- ....
  40ec10:	2d2d2d20 20202020 00000000 6769724f      ---    ....Orig
  40ec20:	6c616e69 0000000d 20495041 74697277     inal....API writ
  40ec30:	6e752065 6b636f6c 00000020 20242424     e unlock ...$$$ 
  40ec40:	0000000d 20643725 20643725 20643725     ....%7d %7d %7d 
  40ec50:	20643725 20643725 20643725 20643425     %7d %7d %7d %4d 
  40ec60:	20643425 78343025 00000a0d 324d4149     %4d %04x....IAM2
  40ec70:	35383630 4f485720 20494d41 3025203d     0685 WHOAMI = %0
  40ec80:	0a0d7834 00000000 252c6425 20202c64     4x......%d,%d,  
  40ec90:	252c6425 64252c64 2520202c 64252c64     %d,%d,%d,  %d,%d
  40eca0:	0d64252c 0000000a                       ,%d.....

0040eca8 <LOWER16Of32>:
  40eca8:	0000ffff 206d6159 646e6573 61622073     ....Yam sends ba
  40ecb8:	52432064 7b202e43 7473616c 20646d43     d CRC. {lastCmd 
  40ecc8:	746e6573 7852202c 73657220 736e6f70     sent, Rx respons
  40ecd8:	3d207d65 25207b20 2c583830 38302520     e} = { %08X, %08
  40ece8:	2c7d2078 78527b20 2c435243 6c616320     x }, {RxCRC, cal
  40ecf8:	63726363 203d207d 58323025 3025202c     ccrc} = %02X, %0
  40ed08:	00007832 64333025 00000000 0000202c     2x..%03d...., ..
  40ed18:	58383025 00000000 00633225 58323025     %08X....%2c.%02X
  40ed28:	00000000 6e697250 676e6974 20642520     ....Printing %d 
  40ed38:	6d657469 0d203a73 0000000a 78646e49     items: .....Indx
  40ed48:	4d43202c 726f5744 53202c64 202c5354     , CMDWord, STS, 
  40ed58:	202c5752 2c726441 74614420 43202c61     RW, Adr, Data, C
  40ed68:	532c4352 202c5354 2c575220 72644120     RC,STS,  RW, Adr
  40ed78:	7461442c 52432c61 52202c43 57707365     ,Data,CRC, RespW
  40ed88:	0d64726f 00000000 50206f4e 6f746f72     ord.....No Proto
  40ed98:	206c6f63 6f727245 68202c72 6c646e61     col Error, handl
  40eda8:	73207265 6c756f68 6f6e2064 61682074     er should not ha
  40edb8:	62206576 206e6565 6c6c6163 00206465     ve been called .
  40edc8:	204d4159 64616572 6972572f 69206574     YAM read/Write i
  40edd8:	7270206e 6572676f 00007373 20435243     n progress..CRC 
  40ede8:	6f727245 6c202c72 20747361 6d6d6f63     Error, last comm
  40edf8:	20646e61 78383025 616c202c 72207473     and %08x, last r
  40ee08:	6f707365 2065736e 78383025 00000000     esponse %08x....
  40ee18:	204d4159 746f7270 6c6f636f 61745320     YAM protocol Sta
  40ee28:	20737574 65736552 64657672 616c202c     tus Reserved, la
  40ee38:	63207473 616d6d6f 2520646e 2c783830     st command %08x,
  40ee48:	73616c20 65722074 6e6f7073 25206573      last response %
  40ee58:	00783830 204d4159 746f7270 6c6f636f     08x.YAM protocol
  40ee68:	61745320 20737574 6f727245 20202c72      Status Error,  
  40ee78:	7473616c 6d6f6320 646e616d 38302520     last command %08
  40ee88:	6c202c78 20747361 70736572 65736e6f     x, last response
  40ee98:	38302520 00000078 20545320 61736944      %08x... ST Disa
  40eea8:	20656c62 6f666542 203a6572 73657270     ble Before: pres
  40eeb8:	6e612073 656b2079 30252079 0d205834     s any key %04X .
  40eec8:	0000000a 20545320 61736944 20656c62     .... ST Disable 
  40eed8:	65746641 70203a72 73736572 796e6120     After: press any
  40eee8:	79656b20 34302520 0a0d2058 00000000      key %04X ......
  40eef8:	20435243 2030203d 0000000d 203a6452     CRC = 0 ....Rd: 
  40ef08:	72646441 3025203a 202c5832 676e656c     Addr: %02X, leng
  40ef18:	203a6874 00206425 6c615620 2520203a     th: %d . Val:  %
  40ef28:	20583230 00000000 20746553 203a6452     02X ....Set Rd: 
  40ef38:	72646441 3025203a 0d205832 0000000a     Addr: %02X .....
  40ef48:	74697277 30203a65 32302578 00002078     write: 0x%02x ..
  40ef58:	78323025 00000020 206d6159 6e656469     %02x ...Yam iden
  40ef68:	79746974 69726320 3a736973 34302520     tity crisis: %04
  40ef78:	3a202058 20202028 73657270 6e612073     X  :(   press an
  40ef88:	656b2079 6f742079 6e6f6320 756e6974     y key to continu
  40ef98:	00203a65 68742e2e 736b6e61 00000d20     e: ...thanks ...
  40efa8:	72657355 72744320 2c582d6c 69786520     User Ctrl-X, exi
  40efb8:	20646574 74736574 00000d20 65636341     ted test ...Acce
  40efc8:	5253466c 74736574 00000000 63634120     lFSRtest.... Acc
  40efd8:	46206c65 54205253 20747365 72657449     el FSR Test Iter
  40efe8:	6f697461 25203a6e 000a0d64 74736574     ation: %d...test
  40eff8:	20676e69 6363417b 46206c65 202c5253     ing {Accel FSR, 
  40f008:	72776f4c 46207365 202c5253 69746152     Lowres FSR, Rati
  40f018:	3a7d206f 64322520 3225202c 25202c64     o }: %2d, %2d, %
  40f028:	0d206432 0000000a 65636341 5346206c     2d .....Accel FS
  40f038:	65542052 49207473 3a726574 0d642520     R Test Iter: %d.
  40f048:	0000000a 65636341 726f4e6c 4f4f206d     ....AccelNorm OO
  40f058:	63657053 0000203a 20207325 75676552     Spec: ..%s  Regu
  40f068:	2072616c 65636341 6f4e206c 20206d72     lar Accel Norm  
  40f078:	322e3425 4c202066 6552776f 63412073     %4.2f  LowRes Ac
  40f088:	206c6563 6d726f4e 2e342520 202c6632     cel Norm %4.2f, 
  40f098:	6c6f5420 6e617265 203a6563 332e3425      Tolerance: %4.3
  40f0a8:	00000066 73657841 726f6e20 5a5b736d     f...Axes norms[Z
  40f0b8:	2c58202c 3a5d5920 00000020 25207325     , X, Y]: ...%s %
  40f0c8:	66332e34 34252020 2066332e 2e342520     4.3f  %4.3f  %4.
  40f0d8:	00206633 65636341 5253466c 74736574     3f .AccelFSRtest
  40f0e8:	65744920 69746172 64206e6f 20656e6f      Iteration done 
  40f0f8:	68746977 72726520 6320726f 746e756f     with error count
  40f108:	0000203a 25207325 00000064 65636341     : ..%s %d...Acce
  40f118:	5253466c 74736574 6e6f4420 00000065     lFSRtest Done...
  40f128:	65636341 726f4e6c 7365746d 00000074     AccelNormtest...
  40f138:	65636341 6f4e206c 54206d72 20747365     Accel Norm Test 
  40f148:	72657449 6425203a 00000a0d 65636341     Iter: %d....Acce
  40f158:	726f4e6c 7365546d 74492074 74617265     lNormTest Iterat
  40f168:	206e6f69 656e6f64 74697720 72652068     ion done with er
  40f178:	20726f72 6e756f63 00203a74 65636341     ror count: .Acce
  40f188:	726f4e6c 7365546d 6f442074 0000656e     lNormTest Done..
  40f198:	65544449 00007473 72794720 6552206f     IDTest.. Gyro Re
  40f1a8:	25203a76 202c6433 65636341 7665526c     v: %3d, AccelRev
  40f1b8:	3325203a 53202c64 6f736e65 76655272     : %3d, SensorRev
  40f1c8:	3325203a 53202c64 61697265 2520236c     : %3d, Serial# %
  40f1d8:	20583432 3825203d 69282064 6564206e     24X = %8d (in de
  40f1e8:	616d6963 0d20296c 0000000a 54204449     cimal) .....ID T
  40f1f8:	20747365 72657469 6425203a 00000a0d     est iter: %d....
  40f208:	20472f41 20766552 6d205752 616d7369     A/G Rev RW misma
  40f218:	2e686374 522c5720 25203d20 2c783430     tch. W,R = %04x,
  40f228:	34302520 0a0d2078 00000000 69726553      %04x ......Seri
  40f238:	44496c61 42534d20 20575220 6d73696d     alID MSB RW mism
  40f248:	68637461 2c57202e 203d2052 78343025     atch. W,R = %04x
  40f258:	3025202c 0d207834 0000000a 69726553     , %04x .....Seri
  40f268:	44496c61 42534c20 20575220 6d73696d     alID LSB RW mism
  40f278:	68637461 2c57202e 203d2052 78343025     atch. W,R = %04x
  40f288:	3025202c 0d207834 0000000a 65544449     , %04x .....IDTe
  40f298:	44207473 00656e6f 6341724c 546c6563     st Done.LrAccelT
  40f2a8:	62747365 66696479 00000066 20776f4c     estbydiff...Low 
  40f2b8:	20736552 65636341 6554206c 49207473     Res Accel Test I
  40f2c8:	3a726574 0d642520 0000000a 20776f4c     ter: %d.....Low 
  40f2d8:	6f736552 6974756c 41206e6f 6c656363     Resolution Accel
  40f2e8:	63786520 69646565 4620676e 73205253      exceeding FSR s
  40f2f8:	69747465 7420676e 72656c6f 65636e61     etting tolerance
  40f308:	00000000 203a7325 332e3525 6f542066     ....%s: %5.3f To
  40f318:	6172656c 3a65636e 35252020 0066332e     lerance:  %5.3f.
  40f328:	20746942 6772654e 656c2069 736c6576     Bit Nergi levels
  40f338:	000d203a 203a6948 00000000 64352520     : ..Hi: .... %5d
  40f348:	00000000 6f4c0a0d 0000203a 6341724c     ......Lo: ..LrAc
  40f358:	546c6563 62747365 66696479 6f442066     celTestbydiff Do
  40f368:	0000656e 74736554 65636341 6c69466c     ne..TestAccelFil
  40f378:	62726574 696f4e79 00006573 74736554     terbyNoise..Test
  40f388:	65636341 6c69466c 62726574 696f4e79     AccelFilterbyNoi
  40f398:	49206573 3a726574 2c642520 63636120     se Iter: %d, acc
  40f3a8:	69666c65 7265746c 25203a20 000a0d64     elfilter : %d...
  40f3b8:	74736554 65636341 6c69466c 62726574     TestAccelFilterb
  40f3c8:	696f4e79 44206573 00656e6f 74736554     yNoise Done.Test
  40f3d8:	6f727947 746c6946 79627265 73696f4e     GyroFilterbyNois
  40f3e8:	00000065 73655420 72794774 6c69466f     e... TestGyroFil
  40f3f8:	62726574 696f4e79 203a6573 0a0d6425     terbyNoise: %d..
  40f408:	00000000 74736554 6f727947 746c6946     ....TestGyroFilt
  40f418:	79627265 73696f4e 74492065 203a7265     erbyNoise Iter: 
  40f428:	202c6425 6f727967 746c6966 3a207265     %d, gyrofilter :
  40f438:	0d642520 0000000a 74736554 6f727947      %d.....TestGyro
  40f448:	746c6946 79627265 73696f4e 6f442065     FilterbyNoise Do
  40f458:	0000656e 61746f54 754e206c 7265626d     ne..Total Number
  40f468:	20666f20 6f727245 203a7372 00642520      of Errors:  %d.
  40f478:	74736554 706d6554 736e6553 0000726f     TestTempSensor..
  40f488:	746c6544 20542d61 69676572 72657473     Delta-T register
  40f498:	534f4f20 20636570 203a6625 6d6f4320      OOSpec %f:  Com
  40f4a8:	65747570 66252064 20202020 63657053     puted %f    Spec
  40f4b8:	2520203a 00000066 542d3154 4f4f2032     :  %f...T1-T2 OO
  40f4c8:	63657053 3a662520 6f432020 7475706d     Spec %f:  Comput
  40f4d8:	25206465 20202066 63657053 2520203a     ed %f   Spec:  %
  40f4e8:	00000066 74736554 706d6554 736e6553     f...TestTempSens
  40f4f8:	4420726f 00656e6f 74736554 74736554     or Done.TestTest
  40f508:	00676552 72657469 6425203a 00000020     Reg.iter: %d ...
  40f518:	72617453 61532074 2065616c 74706163     Start Salae capt
  40f528:	20657275 0000000d 74736574 20676e69     ure ....testing 
  40f538:	756c6176 64252065 00000a0d 25203a69     value %d....i: %
  40f548:	20583430 3a725420 34302520 0a0d2058     04X  Tr: %04X ..
  40f558:	00000000 74736554 67655220 65747369     ....Test Registe
  40f568:	65742072 64207473 00656e6f 74736554     r test done.Test
  40f578:	416f6857 0000496d 72657469 6425203a     WhoAmI..iter: %d
  40f588:	00000000 6e656449 79746974 69724320     ....Identity Cri
  40f598:	20736973 69206e6f 3a726574 41206425     sis on iter:%d A
  40f5a8:	203a206d 58343025 6873202c 646c756f     m : %04X, should
  40f5b8:	3a656220 34302520 00000058 416f6857      be: %04X...WhoA
  40f5c8:	7420496d 20747365 656e6f64 00000000     mI test done....
  40f5d8:	7273665b 6966202c 205d746c 3225203d     [fsr, filt] = %2
  40f5e8:	00002064 20656567 00000000 20737064     d ..gee ....dps 
  40f5f8:	00000000 62207325 41532077 20534144     ....%s bw SADAS 
  40f608:	654d207b 58206e61 3a7d5a59 207b202c     { Mean XYZ}:, { 
  40f618:	20444d41 7d5a5958 3625203a 2c66322e     AMD XYZ}: %6.2f,
  40f628:	36252020 2c66322e 2e362520 202c6632       %6.2f, %6.2f, 
  40f638:	322e3625 25202066 66322e36 3625202c     %6.2f  %6.2f, %6
  40f648:	2c66322e 2e362520 20206632 00000a0d     .2f, %6.2f  ....
  40f658:	70696b53 676e6970 73655420 25203a74     Skipping Test: %
  40f668:	00000073 6e6e7552 20676e69 74736554     s...Running Test
  40f678:	7325203a 00000000 74736574 65776f50     : %s....testPowe
  40f688:	52707572 74657365 54676552 00747365     rupResetRegTest.
  40f698:	626d754e 6f207265 65722066 74736967     Number of regist
  40f6a8:	3a737265 0d642520 0000000a 65776f50     ers: %d.....Powe
  40f6b8:	70752072 73655220 72207465 73696765     r up Reset regis
  40f6c8:	20726574 74736574 65744920 25203a72     ter test Iter: %
  40f6d8:	000a0d64 72657469 6e69202c 20786564     d...iter, index 
  40f6e8:	25206425 000a0d64 6e616843 20646567     %d %d...Changed 
  40f6f8:	6b6e6142 206f7420 0a0d6425 00000000     Bank to %d......
  40f708:	65646e69 25203a78 52202c64 73696765     index: %d, Regis
  40f718:	20726574 6f2c627b 3025207d 25205832     ter {b,o} %02X %
  40f728:	20583230 64616572 30252073 69205834     02X reads %04X i
  40f738:	6574736e 6f206461 30252066 0d205834     nstead of %04X .
  40f748:	0000000a 74736574 65776f50 52707572     ....testPowerupR
  40f758:	74657365 54676552 20747365 656e6f44     esetRegTest Done
  40f768:	00000000 74736574 65736552 6c655374     ....testResetSel
  40f778:	73655466 00000074 20545320 61736944     fTest... ST Disa
  40f788:	20656c62 69676552 72657473 2520203a     ble Register:  %
  40f798:	20583430 00000a0d 74666f53 73655220     04X ....Soft Res
  40f7a8:	49207465 61726574 6e6f6974 0d642520     et Iteration %d.
  40f7b8:	0000000a 64726148 73655220 49207465     ....Hard Reset I
  40f7c8:	61726574 6e6f6974 0d642520 0000000a     teration %d.....
  40f7d8:	74736574 65736552 6c655374 73655466     testResetSelfTes
  40f7e8:	6f442074 0000656e 74736574 72454d53     t Done..testSMEr
  40f7f8:	00006765 25203a69 20583430 454d5320     eg..i: %04X  SME
  40f808:	3025203a 0d205834 0000000a 20454d53     : %04X .....SME 
  40f818:	69676552 72657473 73657420 6f642074     Register test do
  40f828:	0000656e 74736574 666c6553 74736554     ne..testSelfTest
  40f838:	58646e41 746c6966 65527265 74736967     AndXfilterRegist
  40f848:	00007265 72657449 2520203a 000a0d64     er..Iter:  %d...
  40f858:	6972575b 202c6574 64616552 6552202c     [Write, Read, Re
  40f868:	65526461 3d095d67 34302520 25202c58     adReg].= %04X, %
  40f878:	20583430 00000a0d 74736574 666c6553     04X ....testSelf
  40f888:	74736554 58646e41 746c6966 65527265     TestAndXfilterRe
  40f898:	74736967 44207265 00656e6f 74736574     gister Done.test
  40f8a8:	69665a59 6552746c 00000067 74736554     YZfiltReg...Test
  40f8b8:	20676e69 46205a59 65746c69 65522072     ing YZ Filter Re
  40f8c8:	74736967 00007265 74736554 205a5920     gister..Test YZ 
  40f8d8:	746c6946 52207265 73696765 20726574     Filter Register 
  40f8e8:	74736574 6e6f6420 00000065 74666f53     test done...Soft
  40f8f8:	65726177 766e6920 64656b6f 6c657320     ware invoked sel
  40f908:	65742066 73207473 74726174 0d206465     f test started .
  40f918:	00000000 74736574 64776f6e 6c65536f     ....testnowdoSel
  40f928:	73655466 00000074 72657449 6f697461     fTest...Iteratio
  40f938:	6425206e 00000a0d 74736574 64776f6e     n %d....testnowd
  40f948:	6c65536f 73655466 6f442074 0000656e     oSelfTest Done..
  40f958:	74736574 65776f70 53705572 54666c65     testpowerUpSelfT
  40f968:	00747365 65776f70 70752072 6c657320     est.power up sel
  40f978:	65742066 73207473 74726174 0d206465     f test started .
  40f988:	00000000 74736574 65776f70 53705572     ....testpowerUpS
  40f998:	54666c65 20747365 656e6f44 00000000     elfTest Done....
  40f9a8:	00207325 20746f67 6f727245 64252072     %s .got Error %d
  40f9b8:	00000000 65725020 61207373 6b20796e     .... Press any k
  40f9c8:	2e2e7965 00203a20 74202e2e 6b6e6168     ey.. : ... thank
  40f9d8:	00000d73 69614d76 7361546e 0000006b     s...vMainTask...
  40f9e8:	6e655376 49726f73 4250746e 61543330     vSensorIntPB03Ta
  40f9f8:	00006b73 31200a0d 6554203a 616d7473     sk.... 1: Testma
  40fa08:	33206e69 724f203a 6e696769 202c6c61     in 3: Original, 
  40fa18:	4d203a35 6669646f 2c646569 39202020     5: Modified,   9
  40fa28:	5250203a 000d204d 74727173 00000066     : PRM ..sqrtf...

0040fa38 <_global_impure_ptr>:
  40fa38:	20000380 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  40fa48:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40fa58:	46454443 00000000 33323130 37363534     CDEF....01234567
  40fa68:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40fa78:	0000296c 00000030                       l)..0...

0040fa80 <blanks.7223>:
  40fa80:	20202020 20202020 20202020 20202020                     

0040fa90 <zeroes.7224>:
  40fa90:	30303030 30303030 30303030 30303030     0000000000000000

0040faa0 <blanks.7238>:
  40faa0:	20202020 20202020 20202020 20202020                     

0040fab0 <zeroes.7239>:
  40fab0:	30303030 30303030 30303030 30303030     0000000000000000
  40fac0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0040fad0 <__mprec_bigtens>:
  40fad0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40fae0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40faf0:	7f73bf3c 75154fdd                       <.s..O.u

0040faf8 <__mprec_tens>:
  40faf8:	00000000 3ff00000 00000000 40240000     .......?......$@
  40fb08:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40fb18:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40fb28:	00000000 412e8480 00000000 416312d0     .......A......cA
  40fb38:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40fb48:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40fb58:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40fb68:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40fb78:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40fb88:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40fb98:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40fba8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40fbb8:	79d99db4 44ea7843                       ...yCx.D

0040fbc0 <p05.6055>:
  40fbc0:	00000005 00000019 0000007d 00000043     ........}...C...
  40fbd0:	49534f50 00000058 0000002e              POSIX.......

0040fbdc <_ctype_>:
  40fbdc:	20202000 20202020 28282020 20282828     .         ((((( 
  40fbec:	20202020 20202020 20202020 20202020                     
  40fbfc:	10108820 10101010 10101010 10101010      ...............
  40fc0c:	04040410 04040404 10040404 10101010     ................
  40fc1c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40fc2c:	01010101 01010101 01010101 10101010     ................
  40fc3c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40fc4c:	02020202 02020202 02020202 10101010     ................
  40fc5c:	00000020 00000000 00000000 00000000      ...............
	...

0040fce0 <_init>:
  40fce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40fce2:	bf00      	nop
  40fce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40fce6:	bc08      	pop	{r3}
  40fce8:	469e      	mov	lr, r3
  40fcea:	4770      	bx	lr

0040fcec <__init_array_start>:
  40fcec:	0040ad9d 	.word	0x0040ad9d

0040fcf0 <__frame_dummy_init_array_entry>:
  40fcf0:	0040016d                                m.@.

0040fcf4 <_fini>:
  40fcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40fcf6:	bf00      	nop
  40fcf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40fcfa:	bc08      	pop	{r3}
  40fcfc:	469e      	mov	lr, r3
  40fcfe:	4770      	bx	lr

0040fd00 <__fini_array_start>:
  40fd00:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
2000000c:	b430      	push	{r4, r5}
2000000e:	b082      	sub	sp, #8
20000010:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000012:	b35b      	cbz	r3, 2000006c <efc_perform_read_sequence+0x60>
20000014:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20000016:	6803      	ldr	r3, [r0, #0]
20000018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000001c:	6003      	str	r3, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000001e:	b2c9      	uxtb	r1, r1
20000020:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000024:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000026:	6883      	ldr	r3, [r0, #8]
20000028:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000002a:	9b01      	ldr	r3, [sp, #4]
2000002c:	f013 0f01 	tst.w	r3, #1
20000030:	d1f9      	bne.n	20000026 <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000032:	b14d      	cbz	r5, 20000048 <efc_perform_read_sequence+0x3c>
20000034:	4621      	mov	r1, r4
20000036:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000003a:	4c0d      	ldr	r4, [pc, #52]	; (20000070 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000003c:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000040:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000044:	4299      	cmp	r1, r3
20000046:	d1f9      	bne.n	2000003c <efc_perform_read_sequence+0x30>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000048:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000004a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2000004e:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000050:	6883      	ldr	r3, [r0, #8]
20000052:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000054:	9b01      	ldr	r3, [sp, #4]
20000056:	f013 0f01 	tst.w	r3, #1
2000005a:	d0f9      	beq.n	20000050 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000005c:	6803      	ldr	r3, [r0, #0]
2000005e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000062:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000064:	2000      	movs	r0, #0
}
20000066:	b002      	add	sp, #8
20000068:	bc30      	pop	{r4, r5}
2000006a:	4770      	bx	lr
		return EFC_RC_INVALID;
2000006c:	2002      	movs	r0, #2
2000006e:	e7fa      	b.n	20000066 <efc_perform_read_sequence+0x5a>
20000070:	003ffffc 	.word	0x003ffffc

20000074 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000074:	6001      	str	r1, [r0, #0]
20000076:	4770      	bx	lr

20000078 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20000078:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000007a:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
2000007c:	6883      	ldr	r3, [r0, #8]
2000007e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	9b01      	ldr	r3, [sp, #4]
20000082:	f013 0f01 	tst.w	r3, #1
20000086:	d0f9      	beq.n	2000007c <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
20000088:	9801      	ldr	r0, [sp, #4]
}
2000008a:	f000 000e 	and.w	r0, r0, #14
2000008e:	b002      	add	sp, #8
20000090:	4770      	bx	lr
20000092:	bf00      	nop

20000094 <uxCriticalNesting>:
20000094:	aaaa aaaa                                   ....

20000098 <xFreeBytesRemaining>:
20000098:	2bf8 0001                                   .+..

2000009c <xNextTaskUnblockTime>:
2000009c:	ffff ffff                                   ....

200000a0 <aflrValTab>:
200000a0:	0004 0008 0010 0020 0040 0000               ...... .@...

200000ac <afsrTab>:
200000ac:	126f 4003 126f 4083 126f 4183 126f 4203     o..@o..@o..Ao..B

200000bc <afsrValTab>:
200000bc:	0002 0004 0010 0020                         ...... .

200000c4 <alrfsrTab>:
200000c4:	126f 4083 126f 4103 126f 4183 126f 4203     o..@o..Ao..Ao..B
200000d4:	126f 4283                                   o..B

200000d8 <gfsrTab>:
200000d8:	8000 43f5 c000 4475 c000 44f5 5000 4538     ...C..uD...D.P8E
200000e8:	0000 43a4 c000 4423 e000 44a3 c000 44f5     ...C..#D...D...D
200000f8:	0000 42b8 0000 4338 8000 43b8 4000 4438     ...B..8C...C.@8D
20000108:	0000 4274 0000 42f6 0000 4376 8000 43f5     ..tB...B..vC...C

20000118 <gfsrValTab>:
20000118:	01eb 03d7 07ae 0b85 0148 028f 051f 07ae     ........H.......
20000128:	005c 00b8 0171 02e1 003d 007b 00f6 01eb     \...q...=.{.....

20000138 <accelErrMsg>:
20000138:	e7a0 0040 e7bc 0040 e7d8 0040 e7f8 0040     ..@...@...@...@.
20000148:	e80c 0040 e82c 0040 e84c 0040               ..@.,.@.L.@.

20000154 <gyroErrMsg>:
20000154:	e86c 0040 e894 0040 e8bc 0040 e8e4 0040     l.@...@...@...@.
20000164:	e910 0040 e93c 0040 e968 0040 e984 0040     ..@.<.@.h.@...@.
20000174:	e9a0 0040 e9bc 0040 e9cc 0040 e9f8 0040     ..@...@...@...@.
20000184:	ea20 0040                                    .@.

20000188 <left>:
20000188:	2020 0000                                     ..

2000018c <mid1>:
2000018c:	0020 0000                                    ...

20000190 <mid2>:
20000190:	2020 0000                                     ..

20000194 <mid4>:
20000194:	2020 2020 0000 0000                             ....

2000019c <lastCmdsent>:
2000019c:	ffff ffff                                   ....

200001a0 <lastRespReceived>:
200001a0:	ffff ffff                                   ....

200001a4 <regArray>:
200001a4:	0000 ffff 0000 0100 ffff 0000 0200 ffff     ................
200001b4:	0000 0300 ffff 0000 0400 ffff 0000 0500     ................
200001c4:	ffff 0000 0600 ffff 0000 0700 ffff 0000     ................
200001d4:	0800 ffff 0000 0900 ffff 0000 0a00 ffff     ................
200001e4:	0000 0b00 ffff aa55 0c00 0fc0 0000 0c00     ......U.........
200001f4:	003f 0000 0e00 3f00 0000 0e00 4000 0000     ?......?.....@..
20000204:	0e00 0008 0000 0e00 0001 0000 0e00 0040     ..............@.
20000214:	0000 0f00 ffff 0000 1000 1dc0 0000 1100     ................
20000224:	701e 0000 1200 3003 0000 1300 0007 0000     .p.....0........
20000234:	1400 3fff 0000 1500 303e 0000 1700 ffff     ...?....>0......
20000244:	0000 1800 0002 0000 1800 0004 0000 1800     ................
20000254:	0008 0000 1900 0008 0000 1900 0007 0000     ................
20000264:	1900 8000 0000 1b00 001f 0000 1b00 0f00     ................
20000274:	0000 1c00 001f 0000 1d00 ffff 0000 1e00     ................
20000284:	ffff 0000 1f00 ffff 0000 1101 7fd0 ffff     ................
20000294:	1201 11d0 ffff 1301 3fc0 0000 1401 1fff     .........?......
200002a4:	0000 1501 d8e7 0000 1601 e07f 0000 1701     ................
200002b4:	9c00 0000 1801 e000 0000 1901 00bc 0000     ................
200002c4:	1a01 cfeb 0000 1c01 ff18 0000 1c02 ffff     ................
200002d4:	0000 1d02 ffff 0000 1406 0007 0001 1407     ................
200002e4:	000f 0005                                   ....

200002e8 <sts>:
200002e8:	7352 6476 5300 6375 0063 4957 2050 4500     Rsvd.Succ.WIP .E
200002f8:	5252 0020 4f20 204b 0100                         RR . OK .

20000301 <g_interrupt_enabled>:
20000301:	0001 0000                                        ...

20000304 <SystemCoreClock>:
20000304:	1200 007a                                   ..z.

20000308 <LrAccelTestBatchLen>:
20000308:	03e8 0000                                   ....

2000030c <accelAllowedFSRcombo>:
2000030c:	0302 0402 0303 0403 0000 0200 0001 0101     ................

2000031c <accelFilters>:
2000031c:	0100 0302 0504 0000                         ........

20000324 <accelnormalFSRcombo>:
20000324:	0000 0001 0302 0303                         ........

2000032c <gyroFSRtbl>:
2000032c:	080c 090d 040e 000a 0b05 0601 0302 0000     ................

2000033c <gyroFilters>:
2000033c:	0100 0302 0504 0000                         ........

20000344 <spec_deltaT>:
20000344:	0000 3fc0                                   ...?

20000348 <testAccelFSRcount>:
20000348:	0001 0000                                   ....

2000034c <testAccelFilterbyNoisecount>:
2000034c:	0001 0000                                   ....

20000350 <testAccelNormcount>:
20000350:	0001 0000                                   ....

20000354 <testGyroFilterbyNoisecount>:
20000354:	0001 0000                                   ....

20000358 <testIDcount>:
20000358:	000a 0000                                   ....

2000035c <testLrAccelcount>:
2000035c:	0001 0000                                   ....

20000360 <testSMEregcount>:
20000360:	0001 0000                                   ....

20000364 <testTempSensorcount>:
20000364:	0001 0000                                   ....

20000368 <testTestRegcount>:
20000368:	0001 0000                                   ....

2000036c <testWhoAmIcount>:
2000036c:	000a 0000                                   ....

20000370 <testYZfiltRegcount>:
20000370:	0001 0000                                   ....

20000374 <__fdlib_version>:
20000374:	0001 0000                                   ....

20000378 <_impure_ptr>:
20000378:	0380 2000 0000 0000                         ... ....

20000380 <impure_data>:
20000380:	0000 0000 066c 2000 06d4 2000 073c 2000     ....l.. ... <.. 
	...
20000428:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000438:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200007a8 <__atexit_recursive_mutex>:
200007a8:	2250 2002                                   P". 

200007ac <__malloc_av_>:
	...
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 
20000904:	08fc 2000 08fc 2000 0904 2000 0904 2000     ... ... ... ... 
20000914:	090c 2000 090c 2000 0914 2000 0914 2000     ... ... ... ... 
20000924:	091c 2000 091c 2000 0924 2000 0924 2000     ... ... $.. $.. 
20000934:	092c 2000 092c 2000 0934 2000 0934 2000     ,.. ,.. 4.. 4.. 
20000944:	093c 2000 093c 2000 0944 2000 0944 2000     <.. <.. D.. D.. 
20000954:	094c 2000 094c 2000 0954 2000 0954 2000     L.. L.. T.. T.. 
20000964:	095c 2000 095c 2000 0964 2000 0964 2000     \.. \.. d.. d.. 
20000974:	096c 2000 096c 2000 0974 2000 0974 2000     l.. l.. t.. t.. 
20000984:	097c 2000 097c 2000 0984 2000 0984 2000     |.. |.. ... ... 
20000994:	098c 2000 098c 2000 0994 2000 0994 2000     ... ... ... ... 
200009a4:	099c 2000 099c 2000 09a4 2000 09a4 2000     ... ... ... ... 
200009b4:	09ac 2000 09ac 2000 09b4 2000 09b4 2000     ... ... ... ... 
200009c4:	09bc 2000 09bc 2000 09c4 2000 09c4 2000     ... ... ... ... 
200009d4:	09cc 2000 09cc 2000 09d4 2000 09d4 2000     ... ... ... ... 
200009e4:	09dc 2000 09dc 2000 09e4 2000 09e4 2000     ... ... ... ... 
200009f4:	09ec 2000 09ec 2000 09f4 2000 09f4 2000     ... ... ... ... 
20000a04:	09fc 2000 09fc 2000 0a04 2000 0a04 2000     ... ... ... ... 
20000a14:	0a0c 2000 0a0c 2000 0a14 2000 0a14 2000     ... ... ... ... 
20000a24:	0a1c 2000 0a1c 2000 0a24 2000 0a24 2000     ... ... $.. $.. 
20000a34:	0a2c 2000 0a2c 2000 0a34 2000 0a34 2000     ,.. ,.. 4.. 4.. 
20000a44:	0a3c 2000 0a3c 2000 0a44 2000 0a44 2000     <.. <.. D.. D.. 
20000a54:	0a4c 2000 0a4c 2000 0a54 2000 0a54 2000     L.. L.. T.. T.. 
20000a64:	0a5c 2000 0a5c 2000 0a64 2000 0a64 2000     \.. \.. d.. d.. 
20000a74:	0a6c 2000 0a6c 2000 0a74 2000 0a74 2000     l.. l.. t.. t.. 
20000a84:	0a7c 2000 0a7c 2000 0a84 2000 0a84 2000     |.. |.. ... ... 
20000a94:	0a8c 2000 0a8c 2000 0a94 2000 0a94 2000     ... ... ... ... 
20000aa4:	0a9c 2000 0a9c 2000 0aa4 2000 0aa4 2000     ... ... ... ... 
20000ab4:	0aac 2000 0aac 2000 0ab4 2000 0ab4 2000     ... ... ... ... 
20000ac4:	0abc 2000 0abc 2000 0ac4 2000 0ac4 2000     ... ... ... ... 
20000ad4:	0acc 2000 0acc 2000 0ad4 2000 0ad4 2000     ... ... ... ... 
20000ae4:	0adc 2000 0adc 2000 0ae4 2000 0ae4 2000     ... ... ... ... 
20000af4:	0aec 2000 0aec 2000 0af4 2000 0af4 2000     ... ... ... ... 
20000b04:	0afc 2000 0afc 2000 0b04 2000 0b04 2000     ... ... ... ... 
20000b14:	0b0c 2000 0b0c 2000 0b14 2000 0b14 2000     ... ... ... ... 
20000b24:	0b1c 2000 0b1c 2000 0b24 2000 0b24 2000     ... ... $.. $.. 
20000b34:	0b2c 2000 0b2c 2000 0b34 2000 0b34 2000     ,.. ,.. 4.. 4.. 
20000b44:	0b3c 2000 0b3c 2000 0b44 2000 0b44 2000     <.. <.. D.. D.. 
20000b54:	0b4c 2000 0b4c 2000 0b54 2000 0b54 2000     L.. L.. T.. T.. 
20000b64:	0b5c 2000 0b5c 2000 0b64 2000 0b64 2000     \.. \.. d.. d.. 
20000b74:	0b6c 2000 0b6c 2000 0b74 2000 0b74 2000     l.. l.. t.. t.. 
20000b84:	0b7c 2000 0b7c 2000 0b84 2000 0b84 2000     |.. |.. ... ... 
20000b94:	0b8c 2000 0b8c 2000 0b94 2000 0b94 2000     ... ... ... ... 
20000ba4:	0b9c 2000 0b9c 2000 0ba4 2000 0ba4 2000     ... ... ... ... 

20000bb4 <__malloc_sbrk_base>:
20000bb4:	ffff ffff                                   ....

20000bb8 <__malloc_trim_threshold>:
20000bb8:	0000 0002                                   ....

20000bbc <__global_locale>:
20000bbc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000bdc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000bfc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000c1c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000c3c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000c5c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000c7c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000c9c:	e0d5 0040 df79 0040 0000 0000 fbdc 0040     ..@.y.@.......@.
20000cac:	fbd8 0040 f558 0040 f558 0040 f558 0040     ..@.X.@.X.@.X.@.
20000cbc:	f558 0040 f558 0040 f558 0040 f558 0040     X.@.X.@.X.@.X.@.
20000ccc:	f558 0040 f558 0040 ffff ffff ffff ffff     X.@.X.@.........
20000cdc:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000d04:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
